Name,Description,Script
Life Leech,Drain [heart]2 health,drain(2); sfx(~_drain~);
Padlock,Lock all dice (once),inflict(LOCK[;]ALL); sfx(~_lock~); Gadget.changegadget(self[;] ~Padlock~[;] ~Broken Gadget~);
Ice Burn,Burn [fire]1[;] freeze [ice]1,inflict(FIRE[;]1); inflict(ICE[;]1); sfx(~_fire~); sfx(~_ice~);
Goop Gun,Inflict [poison]2 poison,inflict(POISON[;]2); sfx(~_poison~);
JOAT Smash,[sword]1[;] [heal]1[;] [shield]1[;] [poison]1,attack(1); attackself(-1); inflict(POISON); inflictself(SHIELD); sfxdamage(target[;]1); sfx(~_heal~); sfx(~_shield~[;]~~[;]0.6); sfx(~_poison~[;]~~[;]0.2);
Zapthwack,Inflict [shock]1 and [weaken]1,inflict(SHOCK); inflict(WEAKEN); sfx(~_weaken~); sfx(~_shock~);
Mystic Boop,Add random status: [fire][ice][shock][weaken],var r = rand([0[;]1[;]2[;]3]); var effs = [SHOCK[;]WEAKEN[;]ICE[;]FIRE]; inflict(effs[r]); var sounds=[~_shock~[;]~_weaken~[;]~_ice~[;]~_fire~]; sfx(sounds[r]);
Pinprick,Gain [thorns]1 thorns,inflictself(THORNS); sfx(~_thorns~);
Steel Skin,Lose [heart]2[;] add [shield]4 shield,pierceattackself(2); inflictself(SHIELD[;]4); sfx(~_drain~); sfx(~_shield~[;]~~[;]0.4);
Magic Lantern,[]+1 dice next turn,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);
Ballerina,Roll 2 twos,givedice([2[;]2]);
Boom!,[fire]2 dmg to both,attack(2[;]FIRE); sfx(~_fire~); attackself(2[;]FIRE);
Finger Guns,Deal [sword]0 damage,attack(0); sfxdamage(target[;]0);
Grammar Fickses,Ficks your items grammer,for(eq in self.equipment){ if(eq.ready && eq.availablethisturn){ var d = eq.fulldescription; var l = d.split(~dice~); if(l.length > 1){ eq.fulldescription = l.join(~dices~); eq.animate(~flashandshake~); }; }; }; sfx(~openchest~);
Revitalize,Heal [heal]2[;] add [shield]2 shield,inflictself(SHIELD[;]2); sfx(~_shield~); attackself(-2); sfx(~_heal~);
Phoenix Down,[curse]Survive a fatal blow (once),inflictself(SURVIVE); sfx(~_survive~); Gadget.changegadget(self[;] ~Phoenix Down~[;] ~Broken Gadget~);
Phoenix Down?,[curse]Survive for 3 turns (once),inflictself(SURVIVE); sfx(~_curse~); Gadget.changegadget(self[;] ~Phoenix Down?~[;] ~Broken Gadget~);
Coin Clippers,[]+[shield]1 per dice you have,var s = 0; for(d in self.dicepool){ if(d.available()){ s+=1; }; }; if(s > 0){ sfx(~_shield~); inflictself(SHIELD[;]s); };
Mechanical Kneecap,[sword]1 dmg per dice you have,var s = 0; for(d in self.dicepool){ if(d.available()){ s+=1; }; }; if(s > 0){ sfxdamage(target[;]s); attack(s); };
GADGET.PDF.EXE,Roll [red]3[] new dice!,givedice([1[;]1[;]1]); for(x in [1[;]2[;]3]){ self.dicepool[self.dicepool.length-x].animate(~lock~[;](3-x)*0.3); var anim = ~fire~; if(runscript(~morefluff/isalt~|[~fire~])){anim=~alternate_fire~; }; self.dicepool[self.dicepool.length-x].animate(anim[;](3-x)*0.3); }
Smoke Cloud,Blind [blind]all dice,inflict(BLIND[;]ALL); sfx(~_blind~);
Whelm,[sword]1 dmg[;] +1 each use,attack(1 + getstatusself(~whelm~)); inflictself(~whelm~); sfxdamage(target[;]1+getstatusself(~whelm~));
Two Handed Knife,[sword]5 dmg to both,attack(5); attackself(5); sfxdamage(target[;]5);
Throwing Knife,Deal [sword]9 damage (once),attack(9); sfxdamage(target[;]9); Gadget.changegadget(self[;] ~Throwing Knife~[;] ~Broken Gadget~);
Ragnarok,Inflict [curse]10 curses (once),inflict(CURSE[;]10); sfx(~_curse~); Gadget.changegadget(self[;] ~Ragnarok~[;] ~Broken Gadget~);
Pee Gun,[poison]1 poison + [shock]1 shock,inflict(POISON); sfx(~_poison~); inflict(SHOCK); sfx(~_shock~);
What,How did you do this,self.textparticle(~?????~); sfx(~_thinghappens~);
Mass Polymorph,Randomize everyone's items,var poss = []; for(eq in self.equipment){if(!eq.hastag(~skillcard~) && !eq.hastag(~powercard~)){poss.push(eq);};}; poss = shuffle(poss); var count = 0; while(count < poss.length){var replaceequip = poss[count]; count+=1; var newequip; if(replaceequip.size == 1){newequip = rand(getequipmentlist(null|[~small~]|[~excludefromrandomlists~|~skillcard~|~robotonly~|~witchonly~|~powercard~|~alternateversion~|~onceperbattle~]));}else{newequip = rand(getequipmentlist(null|[~large~]|[~excludefromrandomlists~|~skillcard~|~robotonly~|~witchonly~|~powercard~|~alternateversion~|~onceperbattle~]));}; var  x = replaceequip.x; var y = replaceequip.y; if(replaceequip.upgraded){replaceequip.create(newequip+~+~|true|false|true);}else if(replaceequip.weakened){if(replaceequip.originallyupgraded){replaceequip.create(newequip+~+~|true|true);}else{replaceequip.create(newequip);}; replaceequip.downgrade();}else{replaceequip.create(newequip);}; replaceequip.x = x; replaceequip.y = y; replaceequip.animate(~flashandshake~); replaceequip.changeslots(replaceequip.getslots());};  inflict(~polymorphall~); sfx(~jester_discard~);
Regenerous,Heal [heal]3 hp (for both),attack(-3); attackself(-3); sfx(~_heal~);
Health Down,Reduce enemy health by [heart]3,pierceattack(3); sfx(~_drain~);
Lava Drop,[sword]2 dmg[;] gain [shield]2 shield,attack(2); sfxdamage(target[;]2); inflictself(SHIELD[;]2); sfx(~_shield~);
Mutagen,Gain [heart]3 max hp (once),self.maxhp+=3; self.hp+=3; sfx(~_cure~); Gadget.changegadget(self[;] ~Mutagen~[;] ~Broken Gadget~);
Mutagen Lv 2,Gain [heart]5 max hp (once),self.maxhp+=5; self.hp+=5; sfx(~_cure~); Gadget.changegadget(self[;] ~Mutagen Lv 2~[;] ~Broken Gadget~);
Mutagen Lv 3,Gain [heart]7 max hp (once),self.maxhp+=7; self.hp+=7; sfx(~_cure~); Gadget.changegadget(self[;] ~Mutagen Lv 3~[;] ~Broken Gadget~);
Mutagen Lv 4,Gain [heart]9 max hp (once),self.maxhp+=9; self.hp+=9; sfx(~_cure~); Gadget.changegadget(self[;] ~Mutagen Lv 4~[;] ~Broken Gadget~);
Megacurse,Curse everyone,inflict(CURSE); inflictself(CURSE); sfx(~_curse~);
Magic Counterspell,Lock a random dice value,inflict(~counter_~+rand([1[;]2[;]3[;]4[;]5[;]6])); sfx(~_lock~);
Whacksies,Deal [sword]10 dmg in [jinx]2 turns,jinx(~Whacksies~[;]~take [sword]10 damage~[;]~Take [sword]10 damage~[;]~attack(10); sfxdamage(null[;]10);~[;]target[;]self[;]2[;]2); sfx(~_thinghappens~);
Double Tap,Deal [sword]2 dmg[;] twice,attack(2); attack(2); sfxdamage(target[;]2); sfx(~_magic~[;]~~[;]0.2);
Bish Bash Bosh,Deal [sword]2 dmg[;] 3 times,attack(2); attack(2); attack(2); sfxdamage(target[;]2); sfx(~_magic~[;]~~[;]0.2); sfx(~_damage~|~~|0.4);
Helium Script,(should not appear),if(!self.isplayer){target.getvar(~dicegrav_trigger~).stop(); target.resetvar(~dicegrav_trigger~);}else if(target.hp == 0){self.getvar(~dicegrav_trigger~).stop(); self.resetvar(~dicegrav_trigger~);}; if(getstatusself(~helium~) == 0){if(self.varexists(~dicegrav_trigger~)){self.getvar(~dicegrav_trigger~).stop(); self.resetvar(~dicegrav_trigger~);};}else{var flag = false; for(mydice in self.dicepool){if(mydice.available()){flag = true; mydice.kick(-90|5+3*getstatusself(~helium~));  if(mydice.y < 50){ mydice.animate(~disappear~);};  }; }; };
Grace Checks,(should not appear),var grace = getstatusself(~grace~); var diff = grace - self.hp; if(diff > 0){ pierceattackself(-diff); sfx(~_heal~); sfx(~_survive~); removestatusself(~grace~[;]diff); };
Unlimited Limit,Gain [confuse]5 limit break charge,self.limitvalue+=5; if(self.limitvalue > self.limitmax){self.limitvalue = self.limitmax;}; sfx(~_thinghappens~);
Beam Dream,Gain [dynamo]2 Beam Power,inflictself(~dynamo~|2); self.setvar(~dynamo~|getstatusself(~dynamo~)); sfx(~_magic~);
Stupendously Unlucky Roll,Roll a 1,givedice(1);
Slick Slash,Do [sword]2 per turn for 3 turns,inflict(~bleed3~|2); sfxdamage(target|3);
Magma Hurl,Inflict [magma]1 magma,inflict(~mf_magma~); sfx(~_fire~);
Frostbite Fling,Inflict [shiver]1 shiver,inflict(~mf_shiver~); sfx(~_ice~);
Slightly Lucky Roll,Roll a 4,givedice(4);
Luckier Shot,Deal [sword]8 damage,
Regeneratier,Recover [heal]5 health,
medicinepractice_internal,(should not appear),attackself(-1); sfx(~_heal~); removestatusself(~slowregen~|1);
Rhapsody Attack,Deal [sword]4 damage,attack(4); sfx(~_magic~);
Rhapsody Attack Upgraded,Deal [sword]6 damage,attack(6); sfx(~_magic~);
Rhapsody Attack Downgraded,Deal [sword]2 damage,attack(2); sfx(~_magic~);
Waltzer Quine,,jinx(~Waltzer~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); var s = new elements.Skill(\~Waltzer Quine\~); s.execute(self|target);~|target|self|3|3); 
Waltzer Quine Upgraded,,jinx(~Waltzer+~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); var s = new elements.Skill(\~Waltzer Quine Upgraded\~); s.execute(self|target);~|target|self|2|3); 
Waltzer Quine Downgraded,,jinx(~Waltzer-~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); var s = new elements.Skill(\~Waltzer Quine Downgraded\~); s.execute(self|target);~|target|self|4|3); 
Lead Script,(should not appear),var boundary = 240; var size = 240; function checkslots(val|eq){  var sl = eq.getslots(); var s = sl[0]; if(s == ~NORMAL~){return true;}; if(s == ~EVEN~ && val %2 == 0){ return true; }; if(s == ~ODD~ && val %2 == 1){ return true; }; if(s == ~REQUIRE~+val){ return true; }; for(x in 1...val+1){ if(s == ~MIN~+x){ return true; }; }; for(x in val...7){ if(s == ~MAX~+x){ return true; }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1] && val >= r[0] && val <= r[1]){ return true; } }; return false; };  function abs(x){if(x < 0){return -x;}; return x;}; function sign(x){return(x/abs(x));}; var gooddice = self.getvar(~chosendice~); var mdx = gooddice.x; var mdy = gooddice.y; for(mydice in self.dicepool){if(mydice.available() && mydice != self.getvar(~chosendice~)){mydice.animate(~lock~);}; if(mydice.locked){var deseq = null; for(eq in self.equipment){ if(eq.assigneddice.indexOf(null) != -1 && mydice.x > eq.x && mydice.x+size < (eq.x+eq.width) && mydice.y > eq.y && mydice.y+size < (eq.y + eq.height)){deseq = eq;}}; if(deseq!= null){if(checkslots(mydice.basevalue|deseq)){mydice.locked=false; deseq.assigndice(mydice); deseq.doequipmentaction(self|target|deseq.castdirection == 1 ? 1:0|deseq.assigneddice|0|false); };}; var mx = mydice.x; var my = mydice.y; var dx = mx-mdx; var dy = my-mdy; if((dx > -boundary && dx < boundary) && (dy > -boundary && dy < boundary)){ gooddice.basevalue = 6; mydice.hasmotion = true;  var totalforce = (boundary*boundary)/(dx*dx + dy*dy) * 0.05; mydice.ax = totalforce * dx; mydice.ay = totalforce * dy;}else{gooddice.basevalue = 1;}; };};
Spellbook Bash,(should not appear),var eqfire = self.getvar(~uddy~)[self.getvar(~uddy_count~)]; eqfire.animate(~flashandshake~); eqfire.reuseable = 0; eqfire.usesleft = 1; eqfire.doequipmentaction(self|target|(self.isplayer ? 1 : -1) |[]|0|true); sfx(~_thinghappens~); self.setvar(~uddy_count~|self.getvar(~uddy_count~)+1); if(self.getvar(~uddycount~) > 6){self.setvar(~uddy~|null);};
Yeeteor Cleanup,(should not appear),self.setvar(~uddy~|null);
mf_blankskill,(should not appear),
Spectre,Inflict [vanish] vanish,inflict(VANISH); sfx(~_vanish~);
Bear!,Transform into a bear,beartransform();
Zap Shrine,Inflict [stun]1 stun,inflict(~mf_stun~); sfx(~_shock~);
Omegabumpy,dfashasdk,var boundary = 240; var size = 240; var gooddice = self.getvar(~chosendice~); var mdx = gooddice.x; var mdy = gooddice.y; var deseq = null; for(eq in self.equipment){ if(eq.assigneddice.indexOf(null) != -1 && gooddice.x > eq.x && gooddice.x+size < (eq.x+eq.width) && gooddice.y > eq.y && gooddice.y+size < (eq.y + eq.height)){eq.fulldescription=~Do [sword]7 damage~;};};
Anticipation,Heal [heal]3 after combat,inflictself(~healaftercombat~|3); sfx(~_cure~);
Lightshield,Heal [heal]1[]/turn per dmg taken,inflictself(~shieldoflight~|1); sfx(~_survive~);
Silence[comma] fool,Inflict [silence] silence,inflict(SILENCE); sfx(~_silence~);
Spikes Shield,[thorns]1 thorn + [shield]2 shield,inflictself(THORNS); sfx(~_thorns~); inflictself(SHIELD|2); sfx(~_shield~); sfx(~_shield~|~~|0.2);
Shield Bonk,Do [sword] equal to shield (<myshield>),attack(getstatusself(SHIELD)); sfxdamage(getstatusself(SHIELD)); sfx(~_shield~);
