Name,Description,Script
Life Leech,Drain [heart]2 health,drain(2); sfx(~_drain~);
Padlock,Lock all dice (once),inflict(LOCK[;]ALL); sfx(~_lock~); Gadget.changegadget(self[;] ~Padlock~[;] ~Broken Gadget~);
Ice Burn,Burn [fire]1[;] freeze [ice]1,inflict(FIRE[;]1); inflict(ICE[;]1); sfx(~_fire~); sfx(~_ice~);
Goop Gun,Inflict [poison]2 poison,inflict(POISON[;]2); sfx(~_poison~);
JOAT Smash,[sword]1[;] [heal]1[;] [shield]1[;] [poison]1,attack(1); attackself(-1); inflict(POISON); inflictself(SHIELD); sfxdamage(target[;]1); sfx(~_heal~); sfx(~_shield~[;]~~[;]0.6); sfx(~_poison~[;]~~[;]0.2);
Zapthwack,[shock]1 item + [weaken]1 item,inflict(SHOCK); inflict(WEAKEN); sfx(~_weaken~); sfx(~_shock~);
Mystic Boop,Add random status: [fire][ice][shock][weaken],var r = rand([0[;]1[;]2[;]3]); var effs = [SHOCK[;]WEAKEN[;]ICE[;]FIRE]; inflict(effs[r]); var sounds=[~_shock~[;]~_weaken~[;]~_ice~[;]~_fire~]; sfx(sounds[r]);
Pinprick,Gain [thorns]1 thorns,inflictself(THORNS); sfx(~_shield~);
Steel Skin,Lose [heart]2[;] add [shield]4 shield,pierceattackself(2); inflictself(SHIELD[;]4); sfx(~_drain~); sfx(~_shield~[;]~~[;]0.4);
Magic Lantern,[]+1 dice next turn,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);
Ballerina,Roll 2 twos,givedice([2[;]2]);
Boom!,[fire]2 dmg to both,attack(2[;]FIRE); sfx(~_fire~); attackself(2[;]FIRE);
Finger Guns,Deal [sword]0 damage,attack(0); sfxdamage(target[;]0);
Grammar Fickses,Ficks your items grammer,for(eq in self.equipment){ if(eq.ready && eq.availablethisturn){ var d = eq.fulldescription; var l = d.split(~dice~); if(l.length > 1){ eq.fulldescription = l.join(~dices~); eq.animate(~flashandshake~); }; }; }; sfx(~openchest~);
Revitalize,Heal [heal]2[;] add [shield]2 shield,inflictself(SHIELD[;]2); sfx(~_shield~); attackself(-2); sfx(~_heal~);
Phoenix Down,[curse]Survive a fatal blow (once),inflictself(SURVIVE); sfx(~_survive~); Gadget.changegadget(self[;] ~Phoenix Down~[;] ~Broken Gadget~);
Phoenix Down?,[curse]Survive for 3 turns (once),inflictself(SURVIVE); sfx(~_curse~); Gadget.changegadget(self[;] ~Phoenix Down?~[;] ~Broken Gadget~);
Coin Clippers,[]+[shield]1 per dice you have,var s = 0; for(d in self.dicepool){ if(d.available()){ s+=1; }; }; if(s > 0){ sfx(~_shield~); inflictself(SHIELD[;]s); };
Mechanical Kneecap,[sword]1 dmg per dice you have,var s = 0; for(d in self.dicepool){ if(d.available()){ s+=1; }; }; if(s > 0){ sfxdamage(target[;]s); attack(s); };
GADGET.PDF.EXE,Roll [red]3[] new dice!,givedice([1[;]1[;]1]); for(x in [1[;]2[;]3]){ self.dicepool[self.dicepool.length-x].animate(~lock~[;](3-x)*0.3); self.dicepool[self.dicepool.length-x].animate(~fire~[;](3-x)*0.3); }
Smoke Cloud,Blind [blind]all dice,inflict(BLIND[;]ALL); sfx(~_blind~);
Whelm,[sword]1 dmg[;] +1 each use,attack(1 + getstatusself(~whelm~)); inflictself(~whelm~); sfxdamage(target[;]1+getstatusself(~whelm~));
Two Handed Knife,[sword]5 dmg to both,attack(5); attackself(5); sfxdamage(target[;]5);
Throwing Knife,Deal [sword]9 damage (once),attack(9); sfxdamage(target[;]9); Gadget.changegadget(self[;] ~Throwing Knife~[;] ~Broken Gadget~);
Ragnarok,Inflict [curse]10 curses (once),inflict(CURSE[;]10); sfx(~_curse~); Gadget.changegadget(self[;] ~Ragnarok~[;] ~Broken Gadget~);
Pee Gun,[poison]1 poison + [shock]1 shock,inflict(POISON); sfx(~_poison~); inflict(SHOCK); sfx(~_shock~);
What,How did you do this,self.textparticle(~?????~); sfx(~_thinghappens~);
Mass Polymorph,Change ALL items/gadgets,var items = []; var newitems = []; for(eq in target.equipment){ if(eq.skillcard == ~~){ items.push(eq); }; }; for(eq in items){ removeequipment(eq.name[;]target); var neweq = ~~; if(eq.size == 1){ neweq = rand(getparticularequipment(['small'])); while(neweq == eq.name){ neweq = rand(getparticularequipment(['small'])); }; }else{ neweq = rand(getparticularequipment(['large'])); while(neweq == eq.name){ neweq = rand(getparticularequipment(['small'])); }; }; newitems.push(neweq); }; giveenemyequipment(newitems[;]false[;]false); sfx(~_thinghappens~); inflict(~polymorphall~); items = []; newitems = []; for(eq in self.equipment){ if(eq.skillcard == ~~){ items.push(eq); }; }; for(eq in items){ removeequipment(eq.name[;]self); var neweq = ~~; if(eq.size == 1){ neweq = rand(getparticularequipment(['small'])); while(neweq == eq.name){ neweq = rand(getparticularequipment(['small'])); }; }else{ neweq = rand(getparticularequipment(['large'])); while(neweq == eq.name){ neweq = rand(getparticularequipment(['small'])); }; }; newitems.push(neweq); }; giveequipment(newitems[;]false[;]false); sfx(~_thinghappens~); inflict(~polymorphall~); inflictself(~polymorphall~); Gadget.changegadget(self[;] ~Mass Polymorph~[;] rand([~Life Leech~[;]~Padlock~[;]~Goop Gun~[;]~JOAT Smash~[;]~Mystic Boop~[;]~Pinprick~[;]~Steel Skin~[;]~Magic Lantern~[;]~Ballerina~[;]~Boom!~[;]~Finger Guns~[;]~Revitalize~[;]~Phoenix Down~[;]~Smoke Cloud~[;]~Whelm~[;]~Two Handed Knife~[;]~Throwing Knife~[;]~Ragnarok~[;]~Pee Gun~[;]~Fury~[;]~Firebomb~[;]~Magic Dice~[;]~Focus~[;]~Flashbang~[;]~Hook~[;]~Meganudge~[;]~Megabump~[;]~Barricade~[;]~Jackhammer~[;]~Pea Gun~[;]~Blowtorch~[;]~Clone Device~[;]~Battle Wrench~[;]~Refrigerator~[;]~Protection~[;]~Regenerate~[;]~Plasma Gun~[;]~Burrower~[;]~Lucky Shot~[;]~Magic Lockpick~[;]~Snake Eyes~[;]~Heat Ray~[;]~Theremin~[;]~Static Shock~[;]~Very Unlucky Roll~[;]~Tantrum~[;]~Marble~[;]~Stardust~[;]~Power Up~[;]~Poison Arrow~[;]~Time Stop~[;]~Blood Sip~[;]~Infinity Mirror~[;]~Megaflip~[;]~Magic Six~[;]~Bubble Gun~[;]~Shuriken~[;]~Catapult~[;]~Dramatic Pause~[;]~Quick Thinking~[;]~Random Roll~[;]~Arctic Storm~[;]~Pillow Fort~[;]~Zap~[;]~Ember~[;]~Mumble~[;]~Needle~[;]~Efficiency~[;]~Scream~[;]~Harvest~[;]~Overload~[;]~Dial Up Sounds~[;]~Magic Spanner~[;]~Replicate~[;]~Flash Freeze~[;]~Still Standing~])); Gadget.reactivate(self[;] ALL);
Regenerous,Heal [heal]3 hp (for both),attack(-3); attackself(-3); sfx(~_heal~);
Health Down,Reduce enemy health by [heart]3,pierceattack(3); sfx(~_drain~);
Lava Drop,[sword]2 dmg[;] gain [shield]2 shield,attack(2); sfxdamage(target[;]2); inflictself(SHIELD[;]2); sfx(~_shield~);
Mutagen,Gain [heart]3 max hp (once),self.maxhp+=3; sfx(~_cure~); Gadget.changegadget(self[;] ~Mutagen~[;] ~Broken Gadget~);
Megacurse,Inflict curse to both,inflict(CURSE); inflictself(CURSE); sfx(~_curse~);
Magic Counterspell,Lock a random dice value,inflict(~counter_~+rand([1[;]2[;]3[;]4[;]5[;]6])); sfx(~_lock~);
Whacksies,Deal [sword]10 dmg in [jinx]2 turns,jinx(~Whacksies~[;]~take [sword]10 damage~[;]~take [sword]10 damage~[;]~attack(10); sfxdamage(null[;]10);~[;]target[;]self[;]2[;]2); sfx(~_thinghappens~);
Double Tap,Deal [sword]2 dmg[;] twice,attack(2); attack(2); sfxdamage(target[;]2); sfx(~_magic~[;]~~[;]0.2);
Helium Script,(should not appear),if(!self.isplayer){target.getvar(~dicegrav_trigger~).stop(); target.setvar(~dicegrav_trigger~|null);}else if(target.hp == 0){self.getvar(~dicegrav_trigger~).stop(); self.setvar(~dicegrav_trigger~|null);}; if(getstatusself(~helium~) == 0){var dgt = self.getvar(~dicegrav_trigger~); if(dgt!= null){dgt.stop(); self.setvar(~dicegrav_trigger~|null);};}else{var flag = false; for(mydice in self.dicepool){if(mydice.available()){flag = true; mydice.kick(-90|8*getstatusself(~helium~));  if(mydice.y < 50){ mydice.animate(~disappear~);};  }; }; };
Grace Checks,(should not appear),var grace = getstatusself(~grace~); var diff = grace - self.hp; if(diff > 0){ pierceattackself(-diff); sfx(~_heal~); sfx(~_survive~); removestatusself(~grace~[;]diff); };
Unlimited Limit,Gain [confuse]5 limit break charge,self.limitvalue+=5; if(self.limitvalue > self.limitmax){self.limitvalue = self.limitmax;}; sfx(~_thinghappens~);
Beam Dream,Gain [cog]2 Beam Power,inflictself(~dynamo~|2); self.setvar(~dynamo~|getstatusself(~dynamo~)); sfx(~_magic~);
Stupendously Unlucky Roll,Roll a 1,givedice(1);
Slick Slash,Do [sword]1 per turn for 3 turns,inflict(~bleed3~); sfxdamage(target|3);
Magma Hurl,Inflict [fire]1 magma,inflict(~mf_magma~); sfx(~_fire~);
Frostbite Fling,Inflict [ice]1 shiver,inflict(~mf_shiver~); sfx(~_ice~);
Slightly Lucky Roll,Roll a 4,givedice(4);
Luckier Shot,Deal [sword]8 damage,
Regeneratier,Recover [heal]5 health,
medicinepractice_internal,(should not appear),attackself(-1); sfx(~_heal~); removestatusself(~slowregen~|1);
Rhapsody Attack,Deal [sword]4 damage,attack(4); sfx(~_magic~);
Rhapsody Attack Upgraded,Deal [sword]6 damage,attack(6); sfx(~_magic~);
Rhapsody Attack Downgraded,Deal [sword]2 damage,attack(2); sfx(~_magic~);
Waltzer Quine,,jinx(~Waltzer~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); var s = new elements.Skill(\~Waltzer Quine\~); s.execute(self|target);~|target|self|3|3); 
Waltzer Quine Upgraded,,jinx(~Waltzer+~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); var s = new elements.Skill(\~Waltzer Quine Upgraded\~); s.execute(self|target);~|target|self|2|3); 
Waltzer Quine Downgraded,,jinx(~Waltzer-~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); var s = new elements.Skill(\~Waltzer Quine Downgraded\~); s.execute(self|target);~|target|self|4|3); 
mf_beforestart,(should not appear),var grace = getstatusself(~grace~); var diff = grace - self.hp; if(diff > 0){ pierceattackself(-diff); sfx(~_heal~); sfx(~_survive~); removestatusself(~grace~[;]diff); }; var h = 0; var totalheal = 0; for (i in 1...13) { h -= getstatus(~regen~+i); removestatus(~regen~+i[;]ALL); if(getstatus(~regen~+(i+1)) > 0){ inflict(~regen~+i[;]getstatus(~regen~+(i+1))); } }; if (h < 0) { sfx(~_heal~); attack(h); }; var h = 0; var m = 0; for (i in 1...13) { h += getstatusself(~bleed~+i); if (self.getvar(~bleed~+i) > 0) { m = i; }; removestatusself(~bleed~+i[;]ALL); if(getstatusself(~bleed~+(i+1)) > 0){ inflictself(~bleed~+i[;]getstatusself(~bleed~+(i+1))); } }; if (h > 0) { sfxdamage(self[;]h); pierceattackself(h); }; if(getstatus(~poisonovertime~) > 0){removestatus(~poisonovertime~|1); inflict(POISON); sfx(~_poison~);}; var items = self.getvar(~ratcheteditems~); var slots = self.getvar(~ratcheteditemslots~); if(items == 0){items == [];}; var x = 0; while(items.length > 0){ items.pop().changeslots(slots.pop());}; self.setvar(~ratcheteditems~[;][]); self.setvar(~ratcheteditemslots~[;][]); if(getstatusself(~mf_skipturn~) > 0){removestatusself(~mf_skipturn~|1); self.endturnnow();}else{if(getstatusself(~mf_bonusturn~) > 0){inflictself(EXTRATURN|getstatusself(~mf_bonusturn~));  sfx(~_fury~);}; removestatusself(~mf_bonusturn~|1);}; if(self.getvar(~mf_cursedecay~) == 1 && getstatusself(~mf_cursecarryover~) > 0){inflictself(CURSE|getstatusself(~mf_cursecarryover~)); removestatusself(~mf_cursecarryover~|ALL);}; if(getstatusself(~mf_healnextturn~) > 0){attackself(-getstatusself(~mf_healnextturn~)); sfx(~_heal~); removestatusself(~mf_healnextturn~|ALL);};  if(getstatusself(~alternate_mf_magma~) > 0){attackself(getstatusself(~alternate_mf_magma~)*2|FIRE); removestatusself(~alternate_mf_magma~|(getstatusself(~alternate_mf_magma~)+1)/2); sfx(~_fire~);}else if(getstatusself(~mf_magma~) > 0){attackself(getstatusself(~mf_magma~)|FIRE); sfx(~_fire~);}; if(getstatusself(~alternate_mf_shiver~) > 0){attackself(getstatusself(~alternate_mf_shiver~)*2|ICE); removestatusself(~alternate_mf_shiver~|(getstatusself(~alternate_mf_shiver~)+1)/2); sfx(~_ice~);}else if(getstatusself(~mf_shiver~) > 0){attackself(getstatusself(~mf_shiver~)|ICE); sfx(~_ice~);};
mf_startturn,(should not appear),
mf_endturn,(should not appear),var grace = getstatus(~grace~); var diff = grace - target.hp; if(diff > 0){ pierceattack(-diff); sfx(~_heal~); sfx(~_survive~); removestatus(~grace~[;]diff); }; var h = 0; var totalheal = 0; for (i in 1...13) { h -= getstatusself(~regen~+i); removestatusself(~regen~+i[;]ALL); if(getstatusself(~regen~+(i+1)) > 0){ inflictself(~regen~+i[;]getstatusself(~regen~+(i+1))); } }; if (h < 0) { sfx(~_heal~); attackself(h); }; var h = 0; var m = 0; for (i in 1...13) { h += getstatus(~bleed~+i); if (self.getvar(~bleed~+i) > 0) { m = i; }; removestatus(~bleed~+i[;]ALL); if(getstatus(~bleed~+(i+1)) > 0){ inflict(~bleed~+i[;]getstatus(~bleed~+(i+1))); } }; if (h > 0) { sfxdamage(target[;]h); pierceattack(h); }; if(getstatusself(~poisonovertime~) > 0){removestatusself(~poisonovertime~|1); inflictself(POISON); sfx(~_poison~);}; var items = self.getvar(~ratcheteditems~); var slots = self.getvar(~ratcheteditemslots~); var x = 0; while(items.length > 0){ items.pop().changeslots(slots.pop());}; self.setvar(~ratcheteditems~[;][]); self.setvar(~ratcheteditemslots~[;][]); if(self.getvar(~mf_cursedecay~) == 1){inflictself(~mf_cursecarryover~|getstatusself(CURSE));}; if(getstatus(~alternate_mf_magma~) > 0){attack(getstatus(~alternate_mf_magma~)*2|FIRE); removestatus(~alternate_mf_magma~|(getstatus(~alternate_mf_magma~)+1)/2); sfx(~_fire~);}else if(getstatus(~mf_magma~) > 0){attack(getstatus(~mf_magma~)|FIRE); sfx(~_fire~);}; if(getstatus(~alternate_mf_shiver~) > 0){attack(getstatus(~alternate_mf_shiver~)*2|ICE); removestatus(~alternate_mf_shiver~|(getstatus(~alternate_mf_shiver~)+1)/2);  sfx(~_ice~);}else if(getstatus(~mf_shiver~) > 0){attack(getstatus(~mf_shiver~)|ICE); sfx(~_ice~);};
mf_aftercombat,(should not appear),if(self.getvar(~healaftercombat~) > 0){attackself(-1*self.getvar(~healaftercombat~)); sfx(~_heal~);}; self.setvar(~healaftercombat~|0); self.setvar(~mf_cursedecay~|0);
mf_flee,(should not appear),
Lead Script,(should not appear),var boundary = 240; var size = 240; function checkslots(val|eq){  var sl = eq.getslots(); var s = sl[0]; if(s == ~NORMAL~){return true;}; if(s == ~EVEN~ && val %2 == 0){ return true; }; if(s == ~ODD~ && val %2 == 1){ return true; }; if(s == ~REQUIRE~+val){ return true; }; for(x in 1...val+1){ if(s == ~MIN~+x){ return true; }; }; for(x in val...7){ if(s == ~MAX~+x){ return true; }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1] && val >= r[0] && val <= r[1]){ return true; } }; return false; };  function abs(x){if(x < 0){return -x;}; return x;}; function sign(x){return(x/abs(x));}; var gooddice = self.getvar(~chosendice~); var mdx = gooddice.x; var mdy = gooddice.y; for(mydice in self.dicepool){if(mydice.available() && mydice != self.getvar(~chosendice~)){mydice.animate(~lock~);}; if(mydice.locked){var deseq = null; for(eq in self.equipment){ if(eq.assigneddice.indexOf(null) != -1 && mydice.x > eq.x && mydice.x+size < (eq.x+eq.width) && mydice.y > eq.y && mydice.y+size < (eq.y + eq.height)){deseq = eq;}}; if(deseq!= null){if(checkslots(mydice.basevalue|deseq)){mydice.locked=false; deseq.assigndice(mydice); deseq.doequipmentaction(self|target|deseq.castdirection == 1 ? 1:0|deseq.assigneddice|0|false); };}; var mx = mydice.x; var my = mydice.y; var dx = mx-mdx; var dy = my-mdy; if((dx > -boundary && dx < boundary) && (dy > -boundary && dy < boundary)){ gooddice.basevalue = 6; mydice.hasmotion = true;  var totalforce = (boundary*boundary)/(dx*dx + dy*dy) * 0.05; mydice.ax = totalforce * dx; mydice.ay = totalforce * dy;}else{gooddice.basevalue = 1;}; };};
Spellbook Bash,(should not appear),var eqfire = self.getvar(~uddy~)[self.getvar(~uddy_count~)]; eqfire.animate(~flashandshake~); eqfire.reuseable = 0; eqfire.usesleft = 1; eqfire.doequipmentaction(self|target|(self.isplayer ? 1 : -1) |[]|0|true); sfx(~_thinghappens~); self.setvar(~uddy_count~|self.getvar(~uddy_count~)+1); if(self.getvar(~uddycount~) > 6){self.setvar(~uddy~|null);};
Yeeteor Cleanup,(should not appear),self.setvar(~uddy~|null);
mf_blankskill,(should not appear),
