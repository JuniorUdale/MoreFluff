Name,Description,Size,Script: On Execute,Gadget,Slots,NEED TOTAL?,Colour,Upgrade,Weaken,Alternate Status Trigger,SFX,Uses?,Cast Backwards?,Single use?,Tags,Witch Spell,Script: Before Combat,Script: After Combat,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: Before execute,Script: On Snap,Script: On Fury,Script: On Dodge
Locklance,Deal [sword]1 damage|Split dice in two,1,givedice(split(d)[;] ~splitdice~); attack(1); sfxdamage(target[;]1);,Magic Dice,MIN2,,GREEN,change_power,change_power,,none,0,NO,NO,,1,,,,,,,,,,,givedice(split(d)[;] ~splitdice~);
Locklance_upgraded,[sword]1 damage[;] split dice|On 6[;] split into 3,1,if(d==6){ givedice(split(d[;] 3)[;] ~splitdice~); } else { givedice(split(d)[;] ~splitdice~); } attack(1); sfxdamage(target[;]1);,Magic Dice,MIN2,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,givedice(split(d)[;] ~splitdice~);
Locklance_downgraded,Deal [sword]1 damage|Split dice in two,1,givedice(split(d)[;] ~splitdice~); attack(1); sfxdamage(target[;]1);,Magic Dice,MIN4,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,givedice(split(d)[;] ~splitdice~);
drowS,egamad <flipd6>[sword] laeD|sdrawkcab tub...,1,attack(7-d); sfxdamage(target[;]7-d);,Plasma Gun,MIN2,,RED,change_power,change_power,,none,0,NO,NO,,1,,,,,,,,,,,
drowS_upgraded,tub egamad <flipd6>[sword] laeD|ecid eht nruter [;]sdrawkcab ,1,attack(7-d); sfxdamage(target[;]7-d); givedice(d);,Plasma Gun,MIN2,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
drowS_downgraded,egamad <flipd6>[sword] laeD|sdrawkcab tub...,1,attack(7-d); sfxdamage(target[;]7-d);,Plasma Gun,MIN4,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Shield Scrap,Split your [shield]shield|into random dice,1,if(simulation){bonus(getstatusself(SHIELD) * 100);}else{var s = getstatusself(SHIELD); var a = []; attackself(s); while(s>0){ if(s>6){ var r=rand([1[;]2[;]3[;]4[;]5[;]6]); a.push(r); s-=r; }else{ a.push(s); givedice(a); s=0; break; } }; };,Barricade,EVEN,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Shield Scrap_upgraded,Split your [shield]shield|into random dice,1,if(simulation){bonus(getstatusself(SHIELD) * 100);}else{var s = getstatusself(SHIELD); var a = []; attackself(s); while(s>0){ if(s>6){ var r=rand([1[;]2[;]3[;]4[;]5[;]6]); a.push(r); s-=r; }else{ a.push(s); givedice(a); s=0; break; } }; };,Barricade,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Shield Scrap_downgraded,Split your [shield]shield|into random dice,1,if(simulation){bonus(getstatusself(SHIELD) * 100);}else{var s = getstatusself(SHIELD); var a = []; attackself(s); while(s>0){ if(s>6){ var r=rand([1[;]2[;]3[;]4[;]5[;]6]); a.push(r); s-=r; }else{ a.push(s); givedice(a); s=0; break; } }; };,Barricade,REQUIRE4,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Shield Synthesis,Gain [shield]2 shield|On 6[;] gain [shield]4 instead,1,if(d == 6){ inflictself(SHIELD|2); }else{inflictself(SHIELD|4);}; sfx(~_shield~);,Barricade,EVEN,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Shield Synthesis_upgraded,Gain [shield]2 shield|On 6[;] gain [shield]4 instead,1,if(d == 6){ inflictself(SHIELD|2); }else{inflictself(SHIELD|4);}; sfx(~_shield~);,Barricade,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Shield Synthesis_downgraded,Gain [shield]2 shield,1,inflictself(SHIELD|2); sfx(~_shield~);,Barricade,EVEN,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Pry Bar,Reduce countdowns by 2|[grey](2 uses this turn),1,boostcountdowns(2);,Accelerate,COUNTDOWN,7,GREEN,change_power,change_power,,,3,YES,NO,,,,,,,,,,,,,
Pry Bar_upgraded,Reduce countdowns by 2|[grey](Reusable),1,boostcountdowns(2);,Accelerate,COUNTDOWN,7,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Pry Bar_downgraded,Reduce countdowns by 2,1,boostcountdowns(2);,Accelerate,COUNTDOWN,7,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Paintbrush,Roll an extra dice,1,givedice();,Magic Dice,COUNTDOWN,4,BRIGHTCYAN,change_power,change_power,fire,,0,YES,NO,,,,,,,,,,,,,
Paintbrush_upgraded,Roll an extra dice|[gray](2 uses this turn),1,givedice();,Magic Dice,COUNTDOWN,4,BRIGHTCYAN,,,,,2,YES,NO,,,,,,,,,,,,,
Paintbrush_downgraded,Roll an extra|[fire]burning dice,1,givedice(); if(!simulation){var last; for(mydice in self.dicepool){if(mydice.available()){last = mydice;};}; last.animate(~fire~);};,Magic Dice,COUNTDOWN,4,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Paintbrush?,Roll an extra dice,1,givedice();,Magic Dice,COUNTDOWN,4,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Paintbrush?_upgraded,Roll an extra dice|[gray](2 uses this turn),1,givedice();,Magic Dice,COUNTDOWN,4,BRIGHTCYAN,,,,,2,YES,NO,,,,,,,,,,,,,
Paintbrush?_downgraded,Roll an extra|[fire]burning dice,1,givedice(); if(!simulation){var last; for(mydice in self.dicepool){if(mydice.available()){last = mydice;};}; last.animate(~alternate_fire~);};,Magic Dice,COUNTDOWN,4,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Budge,Odd: dice value +1|Even: dice value -1,1,if(d%2 == 0){ givedice(d-1); } else { givedice(d+1); };,Magic Dice,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Budge_upgraded,Odd: value +1[;] Even: value -1|[grey](3 uses this turn),1,if(d%2 == 0){ givedice(d-1); } else { givedice(d+1); };,Magic Dice,NORMAL,,GREEN,,,,,3,YES,NO,,,,,,,,,,,,,
Budge_downgraded,Odd: dice value +1|Even: dice value -1,1,if(d%2 == 0){ givedice(d-1); } else { givedice(d+1); };,Magic Dice,MIN4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Snippers,Deal [sword]1 damage|Split dice evenly in 2,1,givedice([d/2[;]d/2]); attack(1); sfx(~_lock~);,Magic Dice,EVEN,,GREEN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,givedice([d/2[;]d/2]); 
Snippers_upgraded,Deal [sword]2 damage|Split dice evenly in 2,1,givedice([(d+1)/2[;]d/2]); attack(2); sfx(~_lock~);,Magic Dice,MIN2,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,givedice([(d+1)/2[;]d/2]); 
Snippers_downgraded,Deal [sword]1 damage|Split dice evenly in 2,1,givedice([d/2[;]d/2]); attack(1); sfx(~_lock~);,Magic Dice,REQUIRE6,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,givedice([d/2[;]d/2]); 
Shatter,Split dice into 2s or less,2,if(simulation){bonus(500);}else{var s = d; var a = []; while(s>0){ if(s>2){ var r=rand([1[;]2]); a.push(r); s-=r; }else{ a.push(s); givedice(a|~splitdice~); s=0; break; } };};,Magic Dice,MIN3,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Shatter_upgraded,Add 2 to dice value[;] then|split dice into 2s or less,2,if(simulation){bonus(500);}else{var s = d; var a = []; while(s>0){ if(s>2){ var r=rand([1[;]2]); a.push(r); s-=r; }else{ a.push(s); givedice(a|~splitdice~); s=0; break; } };};,Magic Dice,MIN3|FREE2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Shatter_downgraded,Split dice into 2s or less,2,if(simulation){bonus(500);}else{var s = d; var a = []; while(s>0){ if(s>2){ var r=rand([1[;]2]); a.push(r); s-=r; }else{ a.push(s); givedice(a|~splitdice~); s=0; break; } };};,Magic Dice,MIN4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Promote,Dice value +3,1,givedice(d+3);,Magic Dice,MAX3,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Promote_upgraded,1-3: Dice value +3|4-6: Dice value -3,1,if(d>3){ givedice(d-3); }else{ givedice(d+3); };,Magic Dice,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Promote_downgraded,Dice value +3,1,givedice(d+3);,Magic Dice,REQUIRE1,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Demote,Dice value -3,1,givedice(d-3);,Magic Dice,MIN4,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Demote_upgraded,1-3: Dice value +3|4-6: Dice value -3,1,if(d>3){ givedice(d-3); }else{ givedice(d+3); };,Magic Dice,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Demote_downgraded,Dice value -3,1,givedice(d-3);,Magic Dice,REQUIRE6,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Pee Shooter,Inflict [poison]1 poison|[gray](Reuseable),1,inflict(POISON[;]1); sfx(~_poison~);,Pee Gun,COUNTDOWN,5,PURPLE,change_poison,change_power,,,-1,NO,NO,,1,,,,,,,,,,,
Pee Shooter_upgraded,[poison]1 poison + [sword]1 dmg|[gray](Reuseable),1,inflict(POISON[;]1); sfx(~_poison~); attack(1); sfxdamage(target[;]1);,Pee Gun,COUNTDOWN,5,PURPLE,,,,,-1,NO,NO,,,,,,,,,,,,,
Pee Shooter_downgraded,Inflict [poison]1 poison,1,inflict(POISON[;]1); sfx(~_poison~);,Pee Gun,COUNTDOWN,5,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Cache Stash,Get a <d6> next turn|[gray](2 uses this turn),1,inflictself(~stash~+d); inflictself(~cache~); sfx(~magic_gaindice~);,Magic Dice,NORMAL,,GRAY,change_power,change_power,,,2,YES,NO,robotonly,1,,,,,,,,,,,
Cache Stash_upgraded,Get a <d6> next turn|Immune to errors|[gray](2 uses this turn),1,inflictself(~stash~+d); inflictself(~cache~); sfx(~magic_gaindice~);,Magic Dice,NORMAL,,GRAY,,,,,2,YES,NO,errorimmune|robotonly,,,,,,,,,,,,
Cache Stash_downgraded,Get a <d6> next turn,1,inflictself(~stash~+d); inflictself(~cache~); sfx(~magic_gaindice~);,Magic Dice,NORMAL,,GRAY,,,,,0,YES,NO,robotonly,,,,,,,,,,,,
Pockets,Get a <d6> next turn|[gray](2 uses this turn),1,inflictself(~stash~+d); inflictself(~cache~); sfx(~magic_gaindice~);,Magic Dice,NORMAL,,ORANGE,change_power,change_power,,,2,YES,NO,,1,,,,,,,,,,,
Pockets_upgraded,Get a <d6> next turn|[gray](Reusable),1,inflictself(~stash~+d); inflictself(~cache~); sfx(~magic_gaindice~);,Magic Dice,NORMAL,,ORANGE,,,,,-1,YES,NO,,,,,,,,,,,,,
Pockets_downgraded,Get a <d6> next turn,1,inflictself(~stash~+d); inflictself(~cache~); sfx(~magic_gaindice~);,Magic Dice,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Overheat,Calculate again[;] do [fire]dmg|equal to number calculated,1,if(simulation){bonus(-9999999);}else if(self.usecpuinsteadofdice){robotroll(); var d = 0; for (mydice in self.dicepool){ if (mydice.available()){ d = mydice.basevalue; } }; attack(d[;]FIRE); sfx(~_fire~); sfxdamage(d);};,Blowtorch,COUNTDOWN,3,RED,change_power,change_power,,,0,NO,NO,robotonly,,,,,,,,,,,,robotroll(); 
Overheat_upgraded,Calculate again[;] do [fire]dmg|equal to number calculated|,1,if(simulation){bonus(-9999999);}else if(self.usecpuinsteadofdice){robotroll(); var d = 0; for (mydice in self.dicepool){ if (mydice.available()){ d = mydice.basevalue; } }; attack(d[;]FIRE); sfx(~_fire~); sfxdamage(d);};,Blowtorch,COUNTDOWN,3,RED,,,,,2,NO,NO,robotonly,,,,,,,,,,,,robotroll(); 
Overheat_downgraded,Calculate again[;] deal|[fire]1 damage,1,if(simulation){bonus(100);}else if(self.usecpuinsteadofdice){robotroll();}; attack(1[;]FIRE); sfx(~_fire~); sfxdamage(target|1);,Blowtorch,COUNTDOWN,3,RED,,,,,0,NO,NO,robotonly,,,,,,,,,,,,robotroll(); 
Underclock,[ice]Freeze yourself[;]|restore [heal]1 health,1,inflictself(ICE); attackself(-1); sfx(~_ice~); sfx(~_heal~),Refrigerator,MIN2,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,
Underclock_upgraded,[ice]Freeze self[;] heal [heal]1|[grey](Reusable),1,inflictself(ICE); attackself(-1); sfx(~_ice~); sfx(~_heal~),Refrigerator,MIN2,,BRIGHTCYAN,,,,,-1,YES,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,
Underclock_downgraded,[ice]Freeze yourself,1,inflictself(ICE); sfx(~_ice~);,Refrigerator,MIN2,,BRIGHTCYAN,,,,,0,YES,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,
Spirit Level,Higher dice: value -1|Lower dice: value +1,1,if(simulation){bonus(1000);}else{var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a > b){ givedice([a-1[;]b+1]); }else{ givedice([a+1[;]b-1]); };};,Magic Dice,MAX5|MIN2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Spirit Level_upgraded,Higher dice: value -1|Lower dice: value +1|[gray](3 uses this turn),1,if(simulation){bonus(1000);}else{var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a > b){ givedice([a-1[;]b+1]); }else{ givedice([a+1[;]b-1]); };};,Magic Dice,MAX5|MIN2,,GREEN,,,,,3,YES,NO,,,,,,,,,,,,,
Spirit Level_downgraded,Higher dice: value -1|Lower dice: value +1,1,if(simulation){bonus(1000);}else{var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a > b){ givedice([a-1[;]b+1]); }else{ givedice([a+1[;]b-1]); };};,Magic Dice,ODD|EVEN,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Tape Measure,Dice value = number of dice|you have (except this one),1,if(simulation){bonus(-500);}else{var a = 0; for (mydice in self.dicepool){ if (mydice.available()){ a+=1; } }; if(a > 0){ givedice(a); };};,Magic Dice,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Tape Measure_upgraded,Dice value = number of dice|you have (including this one),1,if(simulation){bonus(-500);}else{var a = 1; for (mydice in self.dicepool){ if (mydice.available()){ a+=1; } }; if(a > 0){ givedice(a); };};,Magic Dice,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Tape Measure_downgraded,Dice value = number|of dice you have,1,if(simulation){bonus(-500);}else{var a = 0; for (mydice in self.dicepool){ if (mydice.available()){ a+=1; } }; if(a > 0){ givedice(a); };};,Magic Dice,MIN4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Finisher,Deal [sword]<d6> damage[;] if this is|the final blow[;] heal [heal]<double>,1,attack(d); if(target.hp <1){ attackself(-d*2); sfx(~_heal~); }; sfxdamage(target[;]d);,Plasma Gun,MAX3,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,if(target.hp <1){ attackself(-d*2); sfx(~_heal~); }; /* yes I'm doing this and it's awful I know */
Finisher_upgraded,Deal [sword]<d6> damage[;] if this is|the final blow[;] heal [heal]<triple>,1,attack(d); if(target.hp <1){ attackself(-d*3); sfx(~_heal~); }; sfxdamage(target[;]d);,Plasma Gun,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,if(target.hp <1){ attackself(-d*3); sfx(~_heal~); }; /* yes I'm doing this and it's awful I know */
Finisher_downgraded,Deal [sword]<d6> damage[;] if this is|the final blow[;] heal [heal]<d6>,1,attack(d); if(target.hp <1){ attackself(-d); sfx(~_heal~); }; sfxdamage(target[;]d);,Plasma Gun,MAX3,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,if(target.hp <1){ attackself(-d); sfx(~_heal~); }; /* yes I'm doing this and it's awful I know */
Deep Freeze,[lock]Lock all [ice]frozen|enemy dice,2,inflict(LOCK[;]getstatus(ICE)); removestatus(ICE[;]ALL); sfx(~_ice~); sfx(~_lock~);,Padlock,ODD,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Deep Freeze_upgraded,[lock]Lock all [ice]frozen|enemy dice,2,inflict(LOCK[;]getstatus(ICE)); removestatus(ICE[;]ALL); sfx(~_ice~); sfx(~_lock~);,Padlock,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Deep Freeze_downgraded,[lock]Lock up to 1 [ice]frozen|enemy dice,2,if(getstatus(ICE) > 0){ inflict(LOCK[;]1); removestatus(ICE[;]1); }; sfx(~_ice~); sfx(~_lock~);,Padlock,ODD,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Mace,Deal [sword]<d6> damage|Reduce countdowns by <d6>,2,attack(d); while(d > 6){ boostcountdowns(6); d-=6; }; boostcountdowns(d); sfxdamage(target[;]d);,Accelerate,NORMAL,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,while(d > 6){ boostcountdowns(6); d-=6; }; boostcountdowns(d);
Mace_upgraded,Deal [sword]<d6> damage|Reduce countdowns by <d6>,2,attack(d); while(d > 6){ boostcountdowns(6); d-=6; }; boostcountdowns(d); sfxdamage(target[;]d);,Accelerate,NORMAL|FREE1,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,while(d > 6){ boostcountdowns(6); d-=6; }; boostcountdowns(d);
Mace_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Accelerate,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,while(d > 6){ boostcountdowns(6); d-=6; }; boostcountdowns(d);
Nail Gun,Deal [sword]7 damage|[gray](Reusable),2,attack(7); sfxdamage(target[;]7);,Pea Gun,NORMAL|NORMAL|NORMAL,,RED,change_power,change_power,,none,-1,NO,NO,,,,,,,,,,,,,
Nail Gun_upgraded,Deal [sword]9 damage|[gray](Reusable),2,attack(9); sfxdamage(target[;]9);,Pea Gun,NORMAL|NORMAL|NORMAL,,RED,,,,none,-1,NO,NO,,,,,,,,,,,,,
Nail Gun_downgraded,Deal [sword]4 damage|[gray](Reusable),2,attack(4); sfxdamage(target[;]4);,Pea Gun,NORMAL|NORMAL|NORMAL,,RED,,,,none,-1,NO,NO,,,,,,,,,,,,,
Pike,Deal [sword]<d6> damage|,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MIN4,,RED,change_power,change_power,,none,2,NO,NO,,,,,,,,,,,,,
Pike_upgraded,Deal [sword]<d6> damage|[gray](5 uses this turn),2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MIN4,,RED,,,,none,4,NO,NO,,,,,,,,,,,,,
Pike_downgraded,Deal [sword]4 damage|,2,attack(4); sfxdamage(target[;]4);,Plasma Gun,MIN4,,RED,,,,none,2,NO,NO,,,,,,,,,,,,,
Zweihander,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,NORMAL|NORMAL,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Zweihander_upgraded,Deal [sword]<d6> damage|On doubles[;] do [sword]3 more,2,if(actualdice[0].basevalue == actualdice[1].basevalue){attack(d+3); sfxdamage(d+3);}else{attack(d); sfxdamage(target[;]d);};,Plasma Gun,NORMAL|NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Zweihander_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX4|MAX4,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Halberd,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX4|MIN3,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Halberd_upgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX5|MIN2,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Halberd_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX3|MIN4,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Swordstave,Do [sword]<d6> damage[;] inflict|status depending on dice:|1:[weaken] 2:[ice] 3:[shock] 4:[fire] 5:[poison],2,var effs = [WEAKEN[;]ICE[;]SHOCK[;]FIRE[;]POISON]; attack(d); inflict(effs[actualdice[0].basevalue-1]); var sounds=[~_weaken~[;]~_ice~[;]~_shock~[;]~_fire~[;]~_poison~]; sfx(sounds[actualdice[0].basevalue-1][;]~~[;]0.2); sfxdamage(target[;]d);,Plasma Gun,MAX5,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Swordstave_upgraded,Do [sword]<d6> damage[;] inflict|status depending on dice:|1:[weaken] 2:[ice] 3:[shock] 4:[fire] 5:[poison],2,var effs = [WEAKEN[;]ICE[;]SHOCK[;]FIRE[;]POISON]; attack(d); inflict(effs[actualdice[0].basevalue-1]); var sounds=[~_weaken~[;]~_ice~[;]~_shock~[;]~_fire~[;]~_poison~]; sfx(sounds[actualdice[0].basevalue-1][;]~~[;]0.2); sfxdamage(target[;]d);,Plasma Gun,MAX5|FREE2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Swordstave_downgraded,Inflict a status|depending on the dice:|1:[weaken] 2:[ice] 3:[shock] 4:[fire] 5:[poison],2,var effs = [WEAKEN[;]ICE[;]SHOCK[;]FIRE[;]POISON]; inflict(effs[actualdice[0].basevalue-1]); var sounds=[~_weaken~[;]~_ice~[;]~_shock~[;]~_fire~[;]~_poison~]; sfx(sounds[actualdice[0].basevalue-1][;]~~[;]0.2);,Plasma Gun,MAX5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Flak Cannon,[sword]2 damage[;] split dice|[gray](Reusable),2,attack(2); givedice(split(d)[;] ~splitdice~); sfxdamage(target[;]2);,Magic Dice,MIN4,,RED,change_power,change_power,,,2,NO,NO,,,,,,,,,,,,,givedice(split(d)[;] ~splitdice~); 
Flak Cannon_upgraded,[sword]2 damage[;] split dice|[gray](Reusable),2,attack(2); givedice(split(d)[;] ~splitdice~); sfxdamage(target[;]2);,Magic Dice,MIN4,,RED,,,,,3,NO,NO,,,,,,,,,,,,,givedice(split(d)[;] ~splitdice~); 
Flak Cannon_downgraded,[sword]2 damage[;] split dice,2,attack(2); givedice(split(d)[;] ~splitdice~); sfxdamage(target[;]2);,Magic Dice,MIN4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice(split(d)[;] ~splitdice~); 
Cable Tie,Combine dice|[gray](Reusable),1,givedice(d[;]~combinedice~);,Battle Wrench,MAX3|MAX3,,GREEN,change_power,change_power,,,-1,YES,NO,,,,,,,,,,,,,
Cable Tie_upgraded,Combine dice[;] discard excess|[gray](Reusable),1,if(d > 6){ givedice(6[;]~combinedice~); }else{ givedice(d[;]~combinedice~); };,Battle Wrench,NORMAL|NORMAL,,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Cable Tie_downgraded,Combine dice,1,givedice(d[;]~combinedice~);,Battle Wrench,MAX3|MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Mortice Lock,Split your other <d6>s in two|Return this dice,1,if(simulation){bonus(-1000);}else{var c = 0; var dicearray = [d]; for(mydice in self.dicepool){ if(mydice.available()){ if(mydice.basevalue == d){var s = split(d); dicearray.push(s[0]); mydice.animatereroll(s[1]|self.screenposition()|c); c+=0.05; };  }; }; givedice(dicearray);};,Meganudge,MIN2,,PINK,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Mortice Lock_upgraded,Split other <d6>s[;] return dice|,1,if(simulation){bonus(-1000);}else{var c = 0; var dicearray = [d]; for(mydice in self.dicepool){ if(mydice.available()){ if(mydice.basevalue == d){var s = split(d); dicearray.push(s[0]); mydice.animatereroll(s[1]|self.screenposition()|c); c+=0.05; };  }; }; givedice(dicearray);};,Meganudge,MIN2,,PINK,,,,,2,YES,NO,,,,,,,,,,,,,
Mortice Lock_downgraded,Split your other <d6>s in two,1,if(simulation){bonus(-1000);}else{var c = 0; var dicearray = []; for(mydice in self.dicepool){ if(mydice.available()){ if(mydice.basevalue == d){var s = split(d); dicearray.push(s[0]); mydice.animatereroll(s[1]|self.screenposition()|c); c+=0.05; };  }; }; givedice(dicearray);};,Meganudge,MIN2,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Chakram,Deal [sword]5 damage|Deal [sword]<d6> to yourself,1,attack(5); boomerang(d); sfxdamage(target[;]5);,Plasma Gun,NORMAL,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Chakram_upgraded,Deal [sword]7 damage|Deal [sword]<d6> to yourself,1,attack(7); boomerang(d); sfxdamage(target[;]7);,Plasma Gun,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Chakram_downgraded,Deal [sword]5 damage|Deal [sword]<d6> to yourself,1,attack(5); boomerang(d); sfxdamage(target[;]5);,Plasma Gun,MIN4,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Tickly Nose,Get <d6> ones next turn,1,inflictself(~stash1~[;]d); sfx(~magic_gaindice~); inflictself(~tickly~[;]d);,Magic Lockpick,MAX4,,PINK,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Tickly Nose_upgraded,Get <d6> ones next turn,1,inflictself(~stash1~[;]d); sfx(~magic_gaindice~); inflictself(~tickly~[;]d);,Magic Lockpick,NORMAL,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Tickly Nose_downgraded,Get <d6> ones next turn,1,inflictself(~stash1~[;]d); sfx(~magic_gaindice~); inflictself(~tickly~[;]d);,Magic Lockpick,MAX2,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Rend,Inflict [poison]poison equal to|the lower dice,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a < b){ inflict(POISON[;]a); }else{ inflict(POISON[;]b); }; sfx(~_poison~);,Goop Gun,MAX5|MAX5,,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Rend_upgraded,Inflict [poison]poison equal to|the lower dice,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a < b){ inflict(POISON[;]a); }else{ inflict(POISON[;]b); }; sfx(~_poison~);,Goop Gun,NORMAL|NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Rend_downgraded,Inflict [poison]poison equal to|the lower dice,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a < b){ inflict(POISON[;]a); }else{ inflict(POISON[;]b); }; sfx(~_poison~);,Goop Gun,MAX3|MAX3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Toxify,Inflict [poison]poison equal to|the difference between dice,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a < b){ inflict(POISON[;]b-a); }else{ inflict(POISON[;]a-b); }; sfx(~_poison~);,Goop Gun,MAX5|MAX5,,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Toxify_upgraded,Inflict [poison]poison equal to|the difference between dice,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a < b){ inflict(POISON[;]b-a); }else{ inflict(POISON[;]a-b); }; sfx(~_poison~);,Goop Gun,NORMAL|NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Toxify_downgraded,Inflict [poison]poison equal to|the difference between dice,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a < b){ inflict(POISON[;]b-a); }else{ inflict(POISON[;]a-b); }; sfx(~_poison~);,Goop Gun,MAX3|MAX3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Loaded Dice,Spend [shield]2 shield|Roll a 6,1,sfx(~useitem~); if(getstatusself(SHIELD) > 1){ removestatusself(SHIELD[;]2); givedice(6); bonus(700 - d*100); }else{ givedice(d); bonus(-1000); }; sfx(~_shield~);,Magic Dice,NORMAL,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Loaded Dice_upgraded,Spend [shield]2 shield[;] roll a 6|,1,sfx(~useitem~); if(getstatusself(SHIELD) > 1){ removestatusself(SHIELD[;]2); givedice(6); bonus(700 - d*100); }else{ givedice(d); bonus(-1000); }; sfx(~_shield~);,Magic Dice,NORMAL,,ORANGE,,,,,2,YES,NO,,,,,,,,,,,,,
Loaded Dice_downgraded,Spend [shield]2 shield|Roll a 6,1,sfx(~useitem~); if(getstatusself(SHIELD) > 1){ removestatusself(SHIELD[;]2); givedice(6); bonus(700 - d*100); }else{ givedice(d); bonus(-1000); }; sfx(~_shield~);,Magic Dice,MIN4,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Poisonous Apple,Restore [heal]<double> health|Receive [poison]<d6> poison,1,sfx(~_heal~); attackself(-d*2); inflictself(POISON[;]d); sfx(~_drain~);,Regenerate,MAX4,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Poisonous Apple_upgraded,Restore [heal]<double> health|Receive [poison]<d6> poison,1,sfx(~_heal~); attackself(-d*2); inflictself(POISON[;]d); sfx(~_drain~);,Regenerate,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Poisonous Apple_downgraded,Restore [heal]<d6> health|Receive [poison]<d6> poison,1,sfx(~_heal~); attackself(-d); inflictself(POISON[;]d); sfx(~curse~);,Regenerate,MAX4,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Origami,Split total evenly into 3|If you can't[;] get nothing!,1,if(d%3 == 0){ givedice([d/3[;]d/3[;]d/3]); }else{ sfx(~curse~); };,Magic Lockpick,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Origami_upgraded,Split total evenly into 4|If you can't[;] return the dice,1,if(d%4 == 0){ givedice([d/4[;]d/4[;]d/4[;]d/4]); }else{ givedice(actualdice[0].basevalue[;]actualdice[1].basevalue); sfx(~curse~); };,Magic Lockpick,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Origami_downgraded,Split total evenly into 3|If you can't[;] get nothing!,1,if(d%3 == 0){ givedice([d/3[;]d/3[;]d/3]); }else{ sfx(~curse~); };,Magic Lockpick,EVEN|ODD,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Natural Charm,Roll two dice that|add up to 7,1,givedice(rand([[1[;]6][;][2[;]5][;][3[;]4][;][4[;]3][;][5[;]2][;][6[;]1]])); ,Magic Dice,COUNTDOWN,7,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Natural Charm_upgraded,Roll two dice that|add up to 7|[gray](2 uses this turn),1,givedice(rand([[1[;]6][;][2[;]5][;][3[;]4][;][4[;]3][;][5[;]2][;][6[;]1]]));,Magic Dice,COUNTDOWN,7,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Natural Charm_downgraded,Roll a new dice,1,givedice();,Magic Dice,COUNTDOWN,7,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Unnatural Charm,Roll some dice that|add up to 7,1,var v = 0; var da = []; while(v < 7){ var r = rand([1[;]2[;]3[;]4[;]5[;]6]); if(v + r >= 7){ da.push(7-v); v = 7; }else{ da.push(r);v = v + r; }; }; givedice(da);,Magic Dice,NORMAL|NORMAL,7,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Unnatural Charm_upgraded,Roll some dice that|add up to 7,1,var v = 0; var da = []; while(v < 7){ var r = rand([1[;]2[;]3[;]4[;]5[;]6]); if(v + r >= 7){ da.push(7-v); v = 7; }else{ da.push(r);v = v + r; }; }; givedice(da);,Magic Dice,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Unnatural Charm_downgraded,Roll a random dice,1,givedice(); sfx(~useitem~);,Magic Dice,NORMAL|NORMAL,7,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Stun Blast,Deal [shock]2 damage[;] burn [fire]1|dice[;] stun [stun]1 equipment,1,attack(2[;]SHOCK); sfx(~_fire~); inflict(~mf_stun~); inflict(FIRE[;]1); sfx(~_shock~);,Zap Shrine,COUNTDOWN,10,YELLOW,change_power,change_power,stun,,0,NO,NO,,1,,,,,,,,,,,
Stun Blast_upgraded,Deal [shock]4 damage[;] burn [fire]2|dice[;] stun [stun]1 equipment,1,attack(4[;]SHOCK); sfx(~_fire~); inflict(~mf_stun~); inflict(FIRE[;]2); sfx(~_shock~);,Zap Shrine,COUNTDOWN,10,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Stun Blast_downgraded,Deal [shock]2 damage[;]|burn [fire]1 dice,1,attack(2|SHOCK); sfxdamage(target[;]2); inflict(FIRE); sfx(~_fire~);,Zap Shrine,COUNTDOWN,10,YELLOW,,,,none,0,NO,NO,,,,,,,,,,,,,
Stun Blast?,Deal [shock]2 damage[;] burn [fire]1|dice[;] stun [stun]1 dice,1,attack(2[;]SHOCK); sfx(~_fire~); inflict(~mf_stun~); inflict(FIRE[;]1); sfx(~_shock~);,Zap Shrine,COUNTDOWN,10,YELLOW,change_power,change_power,,,0,NO,NO,alternateversion,1,,,,,,,,,,,
Stun Blast?_upgraded,Deal [shock]4 damage[;] burn [fire]2|dice[;] stun [stun]1 dice,1,attack(4[;]SHOCK); sfx(~_fire~); inflict(~mf_stun~); inflict(FIRE[;]2); sfx(~_shock~);,Zap Shrine,COUNTDOWN,10,YELLOW,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Stun Blast?_downgraded,Deal [shock]2 damage[;]|burn [fire]1 dice,1,attack(2|SHOCK); sfxdamage(target[;]2); inflict(FIRE); sfx(~_fire~);,Zap Shrine,COUNTDOWN,10,YELLOW,,,,none,0,NO,NO,alternateversion,,,,,,,,,,,,
Pliers,Combine dice|[gray](Reusable),1,givedice(d);,Battle Wrench,REQUIRE1|MAX5,,GREEN,change_power,change_power,,,-1,YES,NO,,,,,,,,,,,,,
Pliers_upgraded,Combine dice|[gray](Reusable),1,givedice(d);,Battle Wrench,MAX2|MAX5,,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Pliers_downgraded,Combine dice,1,givedice(d);,Battle Wrench,REQUIRE1|MAX5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Ekans Charm,Roll two dice|that add up to 6,1,givedice(rand([[1[;]5][;][2[;]4][;][3[;]3][;][4[;]2][;][5[;]1]]));,Magic Dice,REQUIRE1|REQUIRE1,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Ekans Charm_upgraded,Roll some dice|that add up to 6,1,var v = 0; var da = []; while(v < 6){ var r = rand([1[;]2[;]3[;]4[;]5[;]6]); if(v + r >= 6){ da.push(6-v); v = 6; }else{ da.push(r); v = v + r; }; }; givedice(da);,Magic Dice,REQUIRE1|REQUIRE1,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Ekans Charm_downgraded,Roll two dice|that add up to 3,1,givedice([1[;]2]);,Magic Dice,REQUIRE1|REQUIRE1,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Iron Fist,Deal [sword]<d6> damage|Gain [shield]<d6> shield,2,sfx(~_shield~); attack(d[;]SHIELD); inflictself(SHIELD[;]d); sfxdamage(target[;]d);,Barricade,MAX3,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD|d); sfx(~_shield~);
Iron Fist_upgraded,Deal [sword]<d6> damage|Gain [shield]<d6> shield,2,sfx(~_shield~); attack(d|SHIELD); inflictself(SHIELD[;]d); sfxdamage(target[;]d);,Barricade,MAX3|FREE1,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD|d); sfx(~_shield~);
Iron Fist_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Barricade,MAX3,,ORANGE,,,,none,0,NO,NO,,,,,,,,,,,,,
Dodge Roll,Reroll dice[;] always get|a different number,1,var x = d; while(x == d){ x = rand([1[;]2[;]3[;]4[;]5[;]6]); }; givedice(x);,Magic Dice,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Dodge Roll_upgraded,Reroll dice[;] get new value|[gray](2 uses this turn),1,var x = d; while(x == d){ x = rand([1[;]2[;]3[;]4[;]5[;]6]); }; givedice(x);,Magic Dice,NORMAL,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Dodge Roll_downgraded,Reroll dice,1,givedice();,Magic Dice,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Recharge,Drain [heart]6 health,2,drain(6); sfx(~_drain~);,Life Leech,COUNTDOWN,15,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Recharge_upgraded,Drain [heart]6 health|[gray](Reusable),2,drain(6); sfx(~_drain~);,Life Leech,COUNTDOWN,15,RED,,,,,-1,NO,NO,,,,,,,,,,,,,
Recharge_downgraded,Drain [heart]3 health,2,drain(3); sfx(~_drain~);,Life Leech,COUNTDOWN,15,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Shotgun,Deal [sword]<d6> damage|[gray](2 uses this turn),1,attack(d); sfxdamage(target[;]d);,Pea Gun,MAX4|MAX4,,RED,change_power,change_power,,none,2,NO,NO,,,,,,,,,,,,,
Shotgun_upgraded,Deal [sword]<d6> damage|[gray](2 uses this turn),1,attack(d); sfxdamage(target[;]d);,Pea Gun,MAX5|MAX5,,RED,,,,none,2,NO,NO,,,,,,,,,,,,,
Shotgun_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Pea Gun,MAX4|MAX4,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Regen,Heal [heal]1 health at the end|of your turn[;] for [regen]<d6> turns,1,inflictself(~regen~+d); sfx(~_cure~);,Regenerate,MAX4,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Regen_upgraded,Heal [heal]1 health at the end|of your turn[;] for [regen]<d6> turns,1,inflictself(~regen~+d); sfx(~_cure~);,Regenerate,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Regen_downgraded,Heal [heal]1 health at the end|of your turn[;] for [regen]<d6> turns,1,inflictself(~regen~+d); sfx(~_cure~);,Regenerate,MAX2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Decay,Inflict [weaken]1 weaken[;] [ice]1|freeze and [poison]2 poison,1,inflict(ICE[;]1); inflict(WEAKEN[;]1); inflict(POISON[;]2); sfx(~_ice~); sfx(~_weaken~);,Burrower,COUNTDOWN,12,ORANGE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Decay_upgraded,Inflict [weaken]1 weaken[;] [ice]2|freeze and [poison]3 poison,1,inflict(ICE[;]2); inflict(WEAKEN[;]1); inflict(POISON[;]3); sfx(~_ice~); sfx(~_weaken~);,Burrower,COUNTDOWN,12,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Decay_downgraded,Inflict [weaken]1 weaken[;] [ice]1|freeze or [poison]2 poison,1,var f = rand([ICE[;]WEAKEN[;]POISON]); if(f == ICE){inflict(ICE); sfx(~_ice~);}else if(f == WEAKEN){inflict(WEAKEN); sfx(~_weaken~);}else{inflict(POISON|2); sfx(~_poison~);};,Burrower,COUNTDOWN,12,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Turtle,Restore [heal]2 health|Gain [shield]2 shield,1,attackself(-2); inflictself(SHIELD[;]2); sfx(~_heal~); sfx(~_shield~);,Regenerate,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Turtle_upgraded,Restore [heal]3 health|Gain [shield]3 shield,1,attackself(-3); inflictself(SHIELD[;]3); sfx(~_heal~); sfx(~_shield~);,Regenerate,DOUBLES|DOUBLES,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Turtle_downgraded,Restore [heal]1 health|Gain [shield]1 shield,1,attackself(-1); inflictself(SHIELD[;]1); sfx(~_heal~); sfx(~_shield~);,Regenerate,DOUBLES|DOUBLES,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Power Through,Weaken [weaken]1 of your items[;]|then roll 2 more dice,1,inflictself(WEAKEN); self.applyequipmentcurses(); var amount = 2; var dicearray = []; for(x in 0...amount){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray);,Magic Dice,COUNTDOWN,3,ORANGE,change_power,change_power,weaken,,0,YES,NO,,,,,,,,,,,,,
Power Through_upgraded,Weaken [weaken]1 of your items[;]|then roll 3 more dice,1,inflictself(WEAKEN); self.applyequipmentcurses(); var amount = 3; var dicearray = []; for(x in 0...amount){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray);,Magic Dice,COUNTDOWN,3,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Power Through_downgraded,Weaken [weaken]1 of your items[;]|then roll 1 more dice,1,inflictself(WEAKEN); self.applyequipmentcurses(); var amount = 1; var dicearray = []; for(x in 0...amount){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray);,Magic Dice,COUNTDOWN,3,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Power Through?,Roll 2 more dice[;] get [weaken]1|weaken on the enemy turn,1,inflictself(~weakennextturn~); sfx(~_weaken~); var amount = 2; var dicearray = []; for(x in 0...amount){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray);,Magic Dice,COUNTDOWN,3,ORANGE,change_power,change_power,,,0,YES,NO,alternateversion,,,,,,,,,,,,
Power Through?_upgraded,Roll 3 more dice[;] get [weaken]1|weaken on the enemy turn,1,inflictself(~weakennextturn~); sfx(~_weaken~); var amount = 3; var dicearray = []; for(x in 0...amount){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray);,Magic Dice,COUNTDOWN,3,ORANGE,,,,,0,YES,NO,alternateversion,,,,,,,,,,,,
Power Through?_downgraded,Roll 1 more dice[;] get  [weaken]1|weaken on the enemy turn,1,inflictself(~weakennextturn~); sfx(~_weaken~); var amount = 1; var dicearray = []; for(x in 0...amount){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray);,Magic Dice,COUNTDOWN,3,ORANGE,,,,,0,YES,NO,alternateversion,,,,,,,,,,,,
Talons,[sword]<d6> dmg + [poison]1 poison|[gray](2 uses this turn),2,attack(d); inflict(POISON[;]1); sfx(~_poison~); sfxdamage(target[;]d);,Goop Gun,MAX3,,PURPLE,change_power,change_power,,,2,NO,NO,,,,,,,,,,,,,
Talons_upgraded,[sword]<d6> dmg + [poison]1 poison|[gray](3 uses this turn),2,attack(d); inflict(POISON[;]1); sfx(~_poison~); sfxdamage(target[;]d);,Goop Gun,MAX3,,PURPLE,,,,,3,NO,NO,,,,,,,,,,,,,
Talons_downgraded,Deal [sword]<d6> damage|Inflict [poison]1 poison,2,attack(d); inflict(POISON[;]1); sfx(~_poison~); sfxdamage(target[;]d);,Goop Gun,MAX3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Heckle,[curse] Curse enemy,2,inflict(CURSE); sfx(~_curse~);,Dramatic Pause,MAX3|MAX3,,PURPLE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Heckle_upgraded,[curse] Curse enemy,2,inflict(CURSE); sfx(~_curse~);,Dramatic Pause,NORMAL|NORMAL,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Heckle_downgraded,[curse] Curse enemy,2,inflict(CURSE); sfx(~_curse~);,Dramatic Pause,REQUIRE2|REQUIRE2,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Flipper,Roll the dice onto its side,1,var x = [1[;]2[;]3[;]4[;]5[;]6]; x.remove(d); x.remove(7-d); givedice(rand(x));,Magic Dice,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Flipper_upgraded,Roll the dice onto its side|[gray](2 uses this turn),1,var x = [1[;]2[;]3[;]4[;]5[;]6]; x.remove(d); x.remove(7-d); givedice(rand(x));,Magic Dice,NORMAL,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Flipper_downgraded,Roll the dice onto its side,1,var x = [1[;]2[;]3[;]4[;]5[;]6]; x.remove(d); x.remove(7-d); givedice(rand(x));,Magic Dice,EVEN,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Metallicize,Lose [heart]<d6> health|Gain [shield]<double> shield,1,pierceattackself(d); inflictself(SHIELD[;]2*d); sfx(~_shield~[;]~~[;]0.4); sfx(~_drain~);,Barricade,MAX3,,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Metallicize_upgraded,Lose [heart]<d6> health|Gain [shield]<double> shield,1,pierceattackself(d); inflictself(SHIELD[;]2*d); sfx(~_shield~[;]~~[;]0.4); sfx(~_drain~);,Barricade,MAX3|FREE1,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Metallicize_downgraded,Lose [heart]<d6> health|Gain [shield]<d6> shield,1,pierceattackself(d); inflictself(SHIELD[;]d); sfx(~_shield~[;]~~[;]0.4); sfx(~_drain~);,Barricade,MAX3,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Snapshot,Duplicate a dice,1,givedice([d[;]d]);,Magic Dice,EVEN,,GREEN,change_requirements,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Snapshot_upgraded,Duplicate a dice,1,givedice([d[;]d]);,Magic Dice,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Snapshot_downgraded,Duplicate a dice,1,givedice([d[;]d]);,Magic Dice,REQUIRE4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Photocopy,Duplicate a dice,1,givedice([d[;]d]);,Magic Dice,ODD,,GREEN,change_requirements,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Photocopy_upgraded,Duplicate a dice,1,givedice([d[;]d]);,Magic Dice,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Photocopy_downgraded,Duplicate a dice,1,givedice([d[;]d]);,Magic Dice,REQUIRE3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Forgery,Duplicate a dice,1,givedice([d[;]d]);,Magic Dice,MAX3,,GREEN,change_requirements,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Forgery_upgraded,Duplicate a dice,1,givedice([d[;]d]);,Magic Dice,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Forgery_downgraded,Duplicate a dice,1,givedice([d[;]d]);,Magic Dice,REQUIRE2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Electroplating,Gain [shield]1 shield|[gray](Reuseable),1,inflictself(SHIELD[;]1); sfx(~_shield~);,Barricade,COUNTDOWN,3,ORANGE,change_power,change_power,,,-1,YES,NO,,1,,,,,,,,,,,
Electroplating_upgraded,Add [shield]1[;] add [shield]2 if at max hp|[gray](Reuseable),1,if(self.hp == self.maxhp){ inflictself(SHIELD[;]2); }else{ inflictself(SHIELD[;]1); }; sfx(~_shield~);,Barricade,COUNTDOWN,3,ORANGE,,,,,-1,YES,NO,,,,,,,,,,,,,
Electroplating_downgraded,Gain [shield]1 shield,1,inflictself(SHIELD[;]1); sfx(~_shield~);,Barricade,COUNTDOWN,3,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Chain Mail,Reduce dmg taken by [reduce]1|[gray](Reusable),1,inflictself(REDUCE[;] 1); sfx(~_shield~);,Protection,REQUIRE3,,ORANGE,change_power,change_power,reduce,,-1,YES,NO,,,,,,,,,,,,,
Chain Mail_upgraded,Reduce dmg taken by [reduce]1|[gray](Reusable),1,inflictself(REDUCE[;] 1); sfx(~_shield~);,Protection,ODD,,ORANGE,,,,,-1,YES,NO,,,,,,,,,,,,,
Chain Mail_downgraded,Reduce dmg taken by [reduce]1,1,inflictself(REDUCE[;] 1); sfx(~_shield~);,Protection,REQUIRE3,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Chain Mail?,Block [reduce]1 status effect|[gray](Reusable),1,inflictself(REDUCE[;] 1); sfx(~_shield~);,Protection,REQUIRE3,,ORANGE,change_power,change_power,,,-1,YES,NO,alternateversion,,,,,,,,,,,,
Chain Mail?_upgraded,Block [reduce]1 status effect|[gray](Reusable),1,inflictself(REDUCE[;] 1); sfx(~_shield~);,Protection,ODD,,ORANGE,,,,,-1,YES,NO,alternateversion,,,,,,,,,,,,
Chain Mail?_downgraded,Block [reduce]1 status effect|,1,inflictself(REDUCE[;] 1); sfx(~_shield~);,Protection,REQUIRE3,,ORANGE,,,,,0,YES,NO,alternateversion,,,,,,,,,,,,
Chain Whip,Deal [sword]4 damage|Reduce countdowns by 2,1,attack(4); boostcountdowns(2); sfxdamage(target[;]4);,Accelerate,COUNTDOWN,5,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,boostcountdowns(2);
Chain Whip_upgraded,Deal [sword]4 damage|Reduce countdowns by 4,1,attack(4); boostcountdowns(4); sfxdamage(target[;]4);,Accelerate,COUNTDOWN,5,RED,,,,none,0,NO,NO,,,,,,,,,,,,,boostcountdowns(4);
Chain Whip_downgraded,Deal [sword]2 damage|Reduce countdowns by 2,1,attack(2); boostcountdowns(2); sfxdamage(target[;]2);,Accelerate,COUNTDOWN,5,RED,,,,none,0,YES,NO,,,,,,,,,,,,,
Nudgeknife,Deal [sword]1 damage[;] get|new dice (value -1),1,attack(1); givedice(d-1); sfxdamage(target[;]1);,Magic Dice,MIN2,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,givedice(d-1);
Nudgeknife_upgraded,Deal [sword]3 damage[;] get|new dice (value -1),1,attack(3); givedice(d-1); sfxdamage(target[;]1);,Magic Dice,MIN2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d-1);
Nudgeknife_downgraded,Dice value -1,1,givedice(d-1);,Magic Dice,MIN2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d-1);
Rake Pick,Split dice into 2s,2,var a = []; var x = d; while(x > 0){ if(x == 1){a.push(1); x=0;}else{a.push(2); x-=2;}; }; givedice(a[;]~splitdice~);,Magic Lockpick,EVEN,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Rake Pick_upgraded,Split dice into 2s|[gray](2 uses this turn),2,var a = []; var x = d; while(x > 0){ if(x == 1){a.push(1); x=0;}else{a.push(2); x-=2;}; }; givedice(a[;]~splitdice~);,Magic Lockpick,EVEN,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Rake Pick_downgraded,Split dice into 2s,2,var a = []; var x = d; while(x > 0){ if(x == 1){a.push(1); x=0;}else{a.push(2); x-=2;}; }; givedice(a[;]~splitdice~);,Magic Lockpick,REQUIRE4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Multiplicate,Multiply dice values,1,givedice(actualdice[0].basevalue * actualdice[1].basevalue);,Magic Lockpick,MAX3|MAX3,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,2,,,,,,,,,,,
Multiplicate_upgraded,Multiply dice values,1,givedice(actualdice[0].basevalue * actualdice[1].basevalue);,Magic Lockpick,MAX4|MAX4,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Multiplicate_downgraded,Multiply dice values,1,givedice(actualdice[0].basevalue * actualdice[1].basevalue);,Magic Lockpick,MAX2|MAX2,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Oddfluff,If you find this in game[;]|please shout at Jackeea,2,attack(1); sfxdamage(target[;]1);,Silence[;] fool,ODD,,GRAY,change_power,change_power,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Oddfluff_upgraded,If you find this in game[;]|please shout at Jackeea,2,attack(1); sfxdamage(target[;]1);,Silence[;] fool,ODD,,GRAY,,,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Oddfluff_downgraded,Please go shout at Jack|This doesn't do anything wtf,2,attack(0); sfxdamage(target[;]1);,Silence[;] fool,ODD,,GRAY,,,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Evenfluff,If you find this in game[;]|please shout at Jackeea,2,attack(1); sfxdamage(target[;]1);,Silence[;] fool,EVEN,,GRAY,change_power,change_power,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Evenfluff_upgraded,If you find this in game[;]|please shout at Jackeea,2,attack(1); sfxdamage(target[;]1);,Silence[;] fool,EVEN,,GRAY,,,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Evenfluff_downgraded,Please go shout at Jack|This doesn't do anything wtf,2,attack(0); sfxdamage(target[;]1);,Silence[;] fool,EVEN,,GRAY,,,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Lowfluff,If you find this in game[;]|please shout at Jackeea,2,attack(1); sfxdamage(target[;]1);,Silence[;] fool,MAX3,,GRAY,change_power,change_power,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Lowfluff_upgraded,If you find this in game[;]|please shout at Jackeea,2,attack(1); sfxdamage(target[;]1);,Silence[;] fool,MAX3,,GRAY,,,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Lowfluff_downgraded,Please go shout at Jack|This doesn't do anything wtf,2,attack(0); sfxdamage(target[;]1);,Silence[;] fool,MAX3,,GRAY,,,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Highfluff,If you find this in game[;]|please shout at Jackeea,2,attack(1); sfxdamage(target[;]1);,Silence[;] fool,MIN4,,GRAY,change_power,change_power,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Highfluff_upgraded,If you find this in game[;]|please shout at Jackeea,2,attack(1); sfxdamage(target[;]1);,Silence[;] fool,MIN4,,GRAY,,,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Highfluff_downgraded,Please go shout at Jack|This doesn't do anything wtf,2,attack(0); sfxdamage(target[;]1);,Silence[;] fool,MIN4,,GRAY,,,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Medigun,Restore [heal]3 health|[gray](Reusable),1,attackself(-3); sfx(~_heal~); bonus(1000);,Regenerate,COUNTDOWN,7,GREEN,change_power,change_power,,,-1,YES,NO,,1,,,,,,,,,,,
Medigun_upgraded,Restore [heal]5 health|[gray](Reusable),1,attackself(-5); sfx(~_heal~); bonus(1000);,Regenerate,COUNTDOWN,7,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Medigun_downgraded,Restore [heal]1 health|[gray](Reusable),1,attackself(-1); sfx(~_heal~); bonus(1000);,Regenerate,COUNTDOWN,7,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Blade of JOAT,Deal [sword]1 dmg[;] [poison]1 poison[;]|heal [heal]1 hp[;] gain [shield]1 shield,1,attack(1); attackself(-1); inflict(POISON); inflictself(SHIELD); sfxdamage(target[;]1); sfx(~_heal~); sfx(~_shield~[;]~~[;]0.6); sfx(~_poison~[;]~~[;]0.2);,JOAT Smash,COUNTDOWN,6,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,attackself(-1); inflictself(SHIELD); sfx(~_heal~); sfx(~_shield~);
Blade of JOAT_upgraded,[sword]1 dmg[;] [poison]1[;] heal [heal]1[;] [shield]1|[gray](2 uses this turn),1,attack(1); attackself(-1); inflict(POISON); inflictself(SHIELD); sfxdamage(target[;]1); sfx(~_heal~); sfx(~_shield~[;]~~[;]0.6); sfx(~_poison~[;]~~[;]0.2);,JOAT Smash,COUNTDOWN,6,RED,,,,,3,NO,NO,,,,,,,,,,,,,attackself(-1); inflictself(SHIELD); sfx(~_heal~); sfx(~_shield~);
Blade of JOAT_downgraded,Deal [sword]1 damage[;]|heal [heal]1 health,1,attack(1); attackself(-1); sfxdamage(target[;]1); sfx(~_heal~);,JOAT Smash,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-1); sfx(~_heal~);
Syringe Gun,[sword]1 dmg[;] heal [heal]1 hp|[gray](Reusable),1,attack(1); sfxdamage(target[;]1); attackself(-1); sfx(~_heal~[;]~~[;]0.2);,Bubble Gun,COUNTDOWN,4,RED,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,attackself(-1); sfx(~_heal~);
Syringe Gun_upgraded,[sword]2 dmg[;] heal [heal]1 hp|[gray](Reusable),1,attack(2); sfxdamage(target[;]1); attackself(-1); sfx(~_heal~[;]~~[;]0.2);,Bubble Gun,COUNTDOWN,4,RED,,,,,-1,NO,NO,,,,,,,,,,,,,attackself(-1); sfx(~_heal~);
Syringe Gun_downgraded,Deal [sword]1 damage|[gray](Reusable),1,attack(1); sfxdamage(target[;]1);,Bubble Gun,COUNTDOWN,4,RED,,,,none,-1,NO,NO,,,,,,,,,,,,,
Tribute,Lose [heart]<triple> health|Roll <d6> new dice,1,pierceattackself(d*3); var a = []; for(x in 0...d){ a.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(a); sfx(~_drain~);,Magic Dice,MAX3,,GRAY,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Tribute_upgraded,Lose [heart]<double> health|Roll <d6> new dice,1,pierceattackself(d*2); var a = []; for(x in 0...d){ a.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(a); sfx(~_drain~);,Magic Dice,MAX3,,GRAY,,,,,0,YES,NO,,,,,,,,,,,,,
Tribute_downgraded,Lose [heart]<quintuple> health|Roll <d6> new dice,1,pierceattackself(d*5); var a = []; for(x in 0...d){ a.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(a); sfx(~_drain~);,Magic Dice,MAX3,,GRAY,,,,,0,YES,NO,,,,,,,,,,,,,
Blutsauger,Drain [heart]2 health|[gray](Reusable),1,drain(2); sfx(~_drain~);,Blood Sip,COUNTDOWN,6,RED,change_power,change_power,,,-1,NO,NO,,1,,,,,,,,,,,
Blutsauger_upgraded,Drain [heart]3 health|[gray](Reusable),1,drain(3); sfx(~_drain~);,Blood Sip,COUNTDOWN,6,RED,,,,,-1,NO,NO,,,,,,,,,,,,,
Blutsauger_downgraded,Drain [heart]1 health|[gray](Reusable),1,drain(1); sfx(~_drain~);,Blood Sip,COUNTDOWN,6,RED,,,,,-1,NO,NO,,,,,,,,,,,,,
Hockey Stick,Inflict [ice]1 freeze|[gray](Reusable),1,inflict(ICE); sfx(~_ice~);,Refrigerator,ODD,,BRIGHTCYAN,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,
Hockey Stick_upgraded,Inflict [ice]1 freeze|[gray](Reusable),1,inflict(ICE); sfx(~_ice~);,Refrigerator,NORMAL,,BRIGHTCYAN,,,,,-1,NO,NO,,,,,,,,,,,,,
Hockey Stick_downgraded,Inflict [ice]1 freeze,1,inflict(ICE); sfx(~_ice~);,Refrigerator,ODD,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Wooden Stick,[weaken]Weakens the enemy|[gray](Reusable),1,inflict(WEAKEN); sfx(~_weaken~);,Theremin,ODD,,ORANGE,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,
Wooden Stick_upgraded,[weaken]Weakens the enemy|[gray](Reusable),1,inflict(WEAKEN); sfx(~_weaken~);,Theremin,NORMAL,,ORANGE,,,,,-1,NO,NO,,,,,,,,,,,,,
Wooden Stick_downgraded,[weaken]Weakens the enemy,1,inflict(WEAKEN); sfx(~_weaken~);,Theremin,ODD,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Focus Beam,Deal [sword]<var:dynamo> damage[;]|gain [dynamo]1 Beam Power,1,var s = getstatusself(~dynamo~); attack(s); sfxdamage(target[;]s); sfx(~_magic~); inflictself(~dynamo~);,Whelm,EVEN,,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,inflictself(~dynamo~);
Focus Beam_upgraded,Deal [sword]<var:dynamo> damage[;]|gain [dynamo]1 Beam Power,1,var s = getstatusself(~dynamo~); attack(s); sfxdamage(target[;]s); sfx(~_magic~); inflictself(~dynamo~);,Whelm,NORMAL,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,inflictself(~dynamo~);
Focus Beam_downgraded,Deal [sword]<var:dynamo> damage,1,var s = getstatusself(~dynamo~); attack(s); sfxdamage(target[;]s); sfx(~_magic~); inflictself(~dynamo~);,Whelm,EVEN,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Drill Arm,Even CPU: [sword]<d6> dmg|Odd CPU: [shield]<d6> shield,2,if(self.roll_total%2 == 0){ attack(d); sfxdamage(target[;]d); }else{ inflictself(SHIELD[;]d); sfx(~_shield~); };,Plasma Gun,NORMAL,,RED,change_power,change_power,,,0,NO,NO,robotonly,,,,e.changecolour(~RED~);,,if(self.roll_total%2 == 0){ if(e.castdirection == 0){ e.animate(~flashandshake~); e.changecolour(~RED~); }; e.castdirection = 1; }else{ if(e.castdirection == 1){ e.animate(~flashandshake~); e.changecolour(~ORANGE~); }; e.castdirection = 0; };,,,,,,
Drill Arm_upgraded,Even CPU: [sword]<d6> dmg|Odd CPU: [shield]<d6> shield,2,if(self.roll_total%2 == 0){ attack(d); sfxdamage(target[;]d); }else{ inflictself(SHIELD[;]d); sfx(~_shield~); };,Plasma Gun,NORMAL|FREE2,,RED,,,,none,0,NO,NO,robotonly,,,,e.changecolour(~RED~);,,if(self.roll_total%2 == 0){ if(e.castdirection == 0){ e.animate(~flashandshake~); e.changecolour(~RED~); }; e.castdirection = 1; }else{ if(e.castdirection == 1){ e.animate(~flashandshake~); e.changecolour(~ORANGE~); }; e.castdirection = 0; };,,,,,,
Drill Arm_downgraded,Even CPU: [sword]<d6> dmg|Odd CPU: [shield]<d6> shield,2,if(self.roll_total%2 == 0){ attack(d); sfxdamage(target[;]d); }else{ inflictself(SHIELD[;]d); sfx(~_shield~); };,Plasma Gun,MAX3,,RED,,,,none,0,NO,NO,robotonly,,,,e.changecolour(~RED~);,,if(self.roll_total%2 == 0){ if(e.castdirection == 0){ e.animate(~flashandshake~); e.changecolour(~RED~); }; e.castdirection = 1; }else{ if(e.castdirection == 1){ e.animate(~flashandshake~); e.changecolour(~ORANGE~); }; e.castdirection = 0; };,,,,,,
Arm Drill,Even CPU: [shield]<d6> shield|Odd CPU: [sword]<d6> damage,2,if(self.roll_total%2 == 1){ attack(d); sfxdamage(target[;]d); }else{ inflictself(SHIELD[;]d); sfx(~_shield~); };,Plasma Gun,NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,robotonly,,,,e.changecolour(~ORANGE~);,,if(self.roll_total%2 == 1){ if(e.castdirection == 0){ e.animate(~flashandshake~); e.changecolour(~RED~); }; e.castdirection = 1; }else{ if(e.castdirection == 1){ e.animate(~flashandshake~); e.changecolour(~ORANGE~); }; e.castdirection = 0; };,,,,,,
Arm Drill_upgraded,Even CPU: [shield]<d6> shield|Odd CPU: [sword]<d6> damage,2,if(self.roll_total%2 == 1){ attack(d); sfxdamage(target[;]d); }else{ inflictself(SHIELD[;]d); sfx(~_shield~); };,Plasma Gun,NORMAL|FREE2,,ORANGE,,,,,0,NO,NO,robotonly,,,,e.changecolour(~ORANGE~);,,if(self.roll_total%2 == 1){ if(e.castdirection == 0){ e.animate(~flashandshake~); e.changecolour(~RED~); }; e.castdirection = 1; }else{ if(e.castdirection == 1){ e.animate(~flashandshake~); e.changecolour(~ORANGE~); }; e.castdirection = 0; };,,,,,,
Arm Drill_downgraded,Even CPU: [shield]<d6> shield|Odd CPU: [sword]<d6> damage,2,if(self.roll_total%2 == 1){ attack(d); sfxdamage(target[;]d); }else{ inflictself(SHIELD[;]d); sfx(~_shield~); };,Plasma Gun,MAX3,,ORANGE,,,,,0,NO,NO,robotonly,,,,e.changecolour(~ORANGE~);,,if(self.roll_total%2 == 1){ if(e.castdirection == 0){ e.animate(~flashandshake~); e.changecolour(~RED~); }; e.castdirection = 1; }else{ if(e.castdirection == 1){ e.animate(~flashandshake~); e.changecolour(~ORANGE~); }; e.castdirection = 0; };,,,,,,
Inspect Element,Set CPU counter to how many|calculations done this turn (<dicerolled>),1,adjustrobotcounter(self.roll_totaldice - self.roll_total + 1);,Plasma Gun,NORMAL|NORMAL,8,GREEN,change_power,change_power,,none,0,YES,NO,robotonly,,,,,,,,,,,,
Inspect Element_upgraded,Set CPU counter to how many|calculations done this turn (<dicerolled>),1,adjustrobotcounter(self.roll_totaldice - self.roll_total + 1);,Plasma Gun,NORMAL|NORMAL,6,GREEN,,,,none,0,YES,NO,robotonly,,,,,,,,,,,,
Inspect Element_downgraded,Set CPU counter to how many|calculations done this turn (<dicerolled>),1,adjustrobotcounter(self.roll_totaldice - self.roll_total + 1);,Plasma Gun,NORMAL|NORMAL,10,GREEN,,,,none,0,YES,NO,robotonly,,,,,,,,,,,,
Venom Bolt,Deal [sword]<d6> damage|Inflict [poison]1 poison,1,attack(d); inflict(POISON); sfx(~_magic~); sfx(~_poison~[;]~~[;]0.2);,Goop Gun,EVEN,,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Venom Bolt_upgraded,Deal [sword]<d6> damage|Inflict [poison]1 poison,1,attack(d); inflict(POISON); sfx(~_magic~); sfx(~_poison~[;]~~[;]0.2);,Goop Gun,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Venom Bolt_downgraded,Deal [sword]<d6> damage|Inflict [poison]1 poison,1,attack(d); inflict(POISON); sfx(~_magic~); sfx(~_poison~[;]~~[;]0.2);,Goop Gun,REQUIRE4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Leech Soul,Deal [sword]<d6> damage|Restore [heal]2 health,1,attack(d); attackself(-2); sfx(~_heal~[;]~~[;]0.2); sfx(~_magic~);,Life Leech,ODD,,GREEN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,attackself(-2); sfx(~_heal~);
Leech Soul_upgraded,Deal [sword]<d6> damage|Restore [heal]2 health,1,attack(d); attackself(-2); sfx(~_heal~[;]~~[;]0.2); sfx(~_magic~);,Life Leech,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-2); sfx(~_heal~);
Leech Soul_downgraded,Deal [sword]<d6> damage|Restore [heal]2 health,1,attack(d); attackself(-2); sfx(~_heal~[;]~~[;]0.2); sfx(~_magic~);,Life Leech,REQUIRE3,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-2); sfx(~_heal~);
Plague Wave,Deal [sword]<d6> damage|Inflict [poison]1 poison,1,attack(d); inflict(POISON); sfx(~_magic~); sfx(~_poison~[;]~~[;]0.2);,Goop Gun,NORMAL|NORMAL,,PURPLE,change_poison,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Plague Wave_upgraded,Deal [sword]<d6> damage|Inflict [poison]2 poison,1,attack(d); inflict(POISON[;]2); sfx(~_magic~); sfx(~_poison~[;]~~[;]0.2);,Goop Gun,NORMAL|NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Plague Wave_downgraded,Deal [sword]<d6> damage|Inflict [poison]1 poison,1,attack(d); inflict(POISON[;]1); sfx(~_magic~); sfx(~_poison~[;]~~[;]0.2);,Goop Gun,MAX3|MAX3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Sunshower,Deal [sword]<d6> damage|Restore [heal]2 health,1,attack(d); attackself(-2); sfx(~_heal~[;]~~[;]0.2); sfx(~_magic~);,Life Leech,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,attackself(-2); sfx(~_heal~);
Sunshower_upgraded,Deal [sword]<d6> damage|Restore [heal]4 health,1,attack(d); attackself(-4); sfx(~_heal~[;]~~[;]0.2); sfx(~_magic~);,Life Leech,NORMAL|NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-4); sfx(~_heal~);
Sunshower_downgraded,Deal [sword]<d6> damage|Restore [heal]2 health,1,attack(d); attackself(-2); sfx(~_heal~[;]~~[;]0.2); sfx(~_magic~);,Life Leech,MAX3|MAX3,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-2); sfx(~_heal~);
Sonic Blast,Deal [weaken]<d6> damage|Inflict [weaken]1 weaken,1,attack(d[;] WEAKEN); inflict(WEAKEN); sfx(~_weaken~);,Theremin,MAX3,,ORANGE,change_requirements,change_power,weaken,,0,NO,NO,,1,,,,,,,,,,,
Sonic Blast_upgraded,Deal [weaken]<d6> damage|Inflict [weaken]1 weaken,1,attack(d[;] WEAKEN); inflict(WEAKEN); sfx(~_weaken~);,Theremin,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Sonic Blast_downgraded,Deal [weaken]<d6> damage|Inflict [weaken]1 weaken,1,attack(d[;] WEAKEN); inflict(WEAKEN); sfx(~_weaken~);,Theremin,MAX2,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Sonic Blast?,Inflict [weaken]1 weaken[;] then|deal [weaken]<d6> damage,1,inflict(WEAKEN); attack(d[;] WEAKEN); sfx(~_weaken~);,Theremin,MAX3,,ORANGE,change_requirements,change_power,,,0,NO,NO,alternateversion,1,,,,,,,,,,,
Sonic Blast?_upgraded,Inflict [weaken]1 weaken[;] then|deal [weaken]<d6> damage,1,inflict(WEAKEN); attack(d[;] WEAKEN); sfx(~_weaken~);,Theremin,NORMAL,,ORANGE,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Sonic Blast?_downgraded,Inflict [weaken]1 weaken[;] then|deal [weaken]<d6> damage,1,inflict(WEAKEN); attack(d[;] WEAKEN); sfx(~_weaken~);,Theremin,MAX2,,ORANGE,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Sonic Boom,Deal [weaken]<d6> damage|Inflict [weaken]1 weaken,1,attack(d[;] WEAKEN); inflict(WEAKEN); sfx(~_weaken~);,Theremin,NORMAL|NORMAL,,ORANGE,change_power,change_power,weaken,,0,NO,NO,,1,,,,,,,,,,,
Sonic Boom_upgraded,Deal [weaken]<d6> damage|Inflict [weaken]2 weaken,1,attack(d[;] WEAKEN); inflict(WEAKEN[;] 2); sfx(~_weaken~);,Theremin,NORMAL|NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Sonic Boom_downgraded,Deal [weaken]<d6> damage|Inflict [weaken]1 weaken,1,attack(d[;] WEAKEN); inflict(WEAKEN[;] 1); sfx(~_weaken~);,Theremin,MAX3|MAX3,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Sonic Boom?,Inflict [weaken]1 weaken[;] then|deal [weaken]<d6> damage,1,inflict(WEAKEN); attack(d[;] WEAKEN); sfx(~_weaken~);,Theremin,NORMAL|NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,alternateversion,1,,,,,,,,,,,
Sonic Boom?_upgraded,Inflict [weaken]2 weaken[;] then|deal [weaken]<d6> damage,1,inflict(WEAKEN[;]2); attack(d[;] WEAKEN); sfx(~_weaken~);,Theremin,NORMAL|NORMAL,,ORANGE,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Sonic Boom?_downgraded,Inflict [weaken]1 weaken[;] then|deal [weaken]<d6> damage,1,inflict(WEAKEN); attack(d[;] WEAKEN); sfx(~_weaken~);,Theremin,MAX3|MAX3,,ORANGE,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Scorch,Burn [fire]1 dice|[gray](Reusable),1,inflict(FIRE); sfx(~_fire~);,Blowtorch,COUNTDOWN,3,RED,change_power,change_power,,,-1,NO,NO,,1,,,,,,,,,,,
Scorch_upgraded,Burn [fire]2 dice|[gray](Reusable),1,inflict(FIRE[;]2); sfx(~_fire~);,Blowtorch,COUNTDOWN,3,RED,,,,,-1,NO,NO,,,,,,,,,,,,,
Scorch_downgraded,Burn [fire]1 dice,1,inflict(FIRE); sfx(~_fire~);,Blowtorch,COUNTDOWN,3,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Hailstorm,Inflict [ice]1 freeze|[gray](Reusable),1,inflict(ICE); sfx(~_ice~);,Refrigerator,COUNTDOWN,6,BRIGHTCYAN,change_power,change_power,,,-1,NO,NO,,1,,,,,,,,,,,
Hailstorm_upgraded,[ice]2 dmg + [ice]1 freeze|[gray](Reusable),1,inflict(ICE); attack(2[;]ICE); sfx(~_ice~);,Refrigerator,COUNTDOWN,6,BRIGHTCYAN,,,,,-1,NO,NO,,,,,,,,,,,,,
Hailstorm_downgraded,Inflict [ice]1 freeze,1,inflict(ICE); sfx(~_ice~);,Refrigerator,COUNTDOWN,6,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Fire Siphon,Drain [heart]3 health for each|[fire]burning enemy dice,1,drain(getstatus(FIRE)*3); sfx(~_drain~); sfx(~_fire~);,Life Leech,COUNTDOWN,10,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Fire Siphon_upgraded,Drain [heart]4 health for each|[fire]burning enemy dice,1,drain(getstatus(FIRE)*4); sfx(~_drain~); sfx(~_fire~);,Life Leech,COUNTDOWN,10,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Fire Siphon_downgraded,Drain [heart]2 health for each|[fire]burning enemy dice,1,drain(getstatus(FIRE)*2); sfx(~_drain~); sfx(~_fire~);,Life Leech,COUNTDOWN,10,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Electrolysis,Consume all enemy shock|[shock]4 dmg per [shock] removed,1,if(getstatus(SHOCK) > 0){ attack(getstatus(SHOCK)*4[;]SHOCK); sfxdamage(target[;]getstatus(SHOCK)*4); sfx(~_shock~); removestatus(SHOCK[;]ALL); };,Static Shock,COUNTDOWN,4,YELLOW,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Electrolysis_upgraded,Consume all enemy shock|[shock]5 dmg per [shock] removed,1,if(getstatus(SHOCK) > 0){ attack(getstatus(SHOCK)*5[;]SHOCK); sfxdamage(target[;]getstatus(SHOCK)*5); sfx(~_shock~); removestatus(SHOCK[;]ALL); };,Static Shock,COUNTDOWN,4,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Electrolysis_downgraded,Consume all enemy shock|[shock]2 dmg per [shock] removed,1,if(getstatus(SHOCK) > 0){ attack(getstatus(SHOCK)*2[;]SHOCK); sfxdamage(target[;]getstatus(SHOCK)*2); sfx(~_shock~); removestatus(SHOCK[;]ALL); };,Static Shock,COUNTDOWN,4,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Giga Discharge,Deal [shock]20 damage[;]|shock all items,1,attack(20[;] SHOCK); inflict(SHOCK[;] ALL); sfx(~_shock~); sfxdamage(target|20);,Static Shock,COUNTDOWN,25,YELLOW,change_power,change_power,,,0,NO,NO,,2,,,,,,,,,,,
Giga Discharge_upgraded,Deal [shock]25 damage[;]|shock all items,1,attack(25[;] SHOCK); inflict(SHOCK[;] ALL); sfx(~_shock~);  sfxdamage(target|25);,Static Shock,COUNTDOWN,25,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Giga Discharge_downgraded,Deal [shock]10 damage[;]|shock [shock]1 item,1,attack(10[;] SHOCK); inflict(SHOCK[;] 1); sfx(~_shock~);  sfxdamage(target|10);,Static Shock,COUNTDOWN,25,YELLOW,,,,none,0,NO,NO,,,,,,,,,,,,,
Iron Cauldron,Do [sword]1 damage[;]|get a high dice (4-6),1,attack(1); givedice(rand([4[;]5[;]6])); sfxdamage(target[;]1);,Magic Dice,NORMAL,,GRAY,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,givedice(rand([4[;]5[;]6])); 
Iron Cauldron_upgraded,[sword]1[;] get a high dice (4-6)|[gray](2 uses this turn),1,attack(1); givedice(rand([4[;]5[;]6])); sfxdamage(target[;]1);,Magic Dice,NORMAL,,GRAY,,,,,2,NO,NO,,,,,,,,,,,,,givedice(rand([4[;]5[;]6])); 
Iron Cauldron_downgraded,Do [sword]1 damage,1,attack(1); sfxdamage(target[;]1);,Magic Dice,NORMAL,,GRAY,,,,none,0,NO,NO,,,,,,,,,,,,,
Copper Cauldron,Do [sword]1 damage[;]|get a low dice (1-3),1,attack(1); givedice(rand([1[;]2[;]3])); sfxdamage(target[;]1);,Magic Dice,NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,givedice(rand([1|2|3])); 
Copper Cauldron_upgraded,[sword]1[;] get a low dice (1-3)|[gray](2 uses this turn),1,attack(1); givedice(rand([1[;]2[;]3])); sfxdamage(target[;]1);,Magic Dice,NORMAL,,ORANGE,,,,,2,NO,NO,,,,,,,,,,,,,givedice(rand([1|2|3])); 
Copper Cauldron_downgraded,Do [sword]1 damage,1,attack(1); sfxdamage(target[;]1);,Magic Dice,NORMAL,,ORANGE,,,,none,0,NO,NO,,,,,,,,,,,,,
Boopin' Stick,Deal [sword]5 damage,1,attack(5); sfxdamage(target[;]5);,Plasma Gun,COUNTDOWN,7,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Boopin' Stick_upgraded,Deal [sword]7 damage,1,attack(7); sfxdamage(target[;]7);,Plasma Gun,COUNTDOWN,7,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Boopin' Stick_downgraded,Deal [sword]3 damage,1,attack(3); sfxdamage(target[;]3);,Plasma Gun,COUNTDOWN,7,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Pristine Sword,Do [sword]<triple> damage[;] 1 less|per missing [heart]hp you have,2,var dmg = 3*d - self.maxhp + self.hp; if(dmg > 0){ attack(dmg); sfxdamage(target[;]dmg); };,Regenerate,MAX5,,GREEN,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Pristine Sword_upgraded,Do [sword]<triple> damage[;] 1 less|per missing [heart]hp you have,2,var dmg = 3*d - self.maxhp + self.hp; if(dmg > 0){ attack(dmg); sfxdamage(target[;]dmg); };,Regenerate,NORMAL,,GREEN,,,,none,0,NO,NO,,,,,,,,,,,,,
Pristine Sword_downgraded,Do [sword]<double> damage[;] 1 less|per missing [heart]hp you have,2,var dmg = 2*d - self.maxhp + self.hp; if(dmg > 0){ attack(dmg); sfxdamage(target[;]dmg); };,Regenerate,MAX5,,GREEN,,,,none,0,NO,NO,,,,,,,,,,,,,
Piercing Scroll,Your attacks pierce|[shield]shields this turn,1,inflictself(PIERCE); sfx(~_fury~);,Barricade,NORMAL,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Piercing Scroll_upgraded,Attacks pierce [shield] this turn|Return the dice,1,inflictself(PIERCE); sfx(~_fury~); givedice();,Barricade,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Piercing Scroll_downgraded,Your attacks pierce|[shield]shields this turn,1,inflictself(PIERCE); sfx(~_fury~);,Barricade,EVEN,,ORANGE,,,,none,0,YES,NO,,,,,,,,,,,,,
Life Rip,Drain [heart]2 health,1,drain(2); sfx(~_drain~);,Life Leech,ODD,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Life Rip_upgraded,Drain [heart]2 health,1,drain(2); sfx(~_drain~);,Life Leech,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Life Rip_downgraded,Drain [heart]1 health,1,drain(1); sfx(~_drain~);,Life Leech,ODD,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Boomstick,Deal [sword]<d6> damage|[gray](2 uses this turn),1,attack(d); sfxdamage(target[;]d);,Pea Gun,MAX3|FREE2,,RED,change_power,change_power,,none,2,NO,NO,,1,,,,,,,,,,,
Boomstick_upgraded,Deal [sword]<d6> damage|[gray](2 uses this turn),1,attack(d); sfxdamage(target[;]d);,Pea Gun,MAX3|FREE3,,RED,,,,none,2,NO,NO,,,,,,,,,,,,,
Boomstick_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Pea Gun,MAX3,,RED,,,,none,2,NO,NO,,,,,,,,,,,,,
Peppergun,Deal [sword]<d6> damage|[gray](Reusable),1,attack(d); sfxdamage(target[;]d);,Pea Gun,MAX2|FREE1,,RED,change_power,change_power,,none,-1,NO,NO,,1,,,,,,,,,,,
Peppergun_upgraded,Deal [sword]<d6> damage|[gray](Reusable),1,attack(d); sfxdamage(target[;]d);,Pea Gun,MAX2|FREE2,,RED,,,,none,-1,NO,NO,,,,,,,,,,,,,
Peppergun_downgraded,Deal [sword]<d6> damage|[gray](Reusable),1,attack(d); sfxdamage(target[;]d);,Pea Gun,MAX2,,RED,,,,none,-1,NO,NO,,,,,,,,,,,,,
Magic Firewall,Gain [shield]2 shield|Burn [fire]1 dice,1,inflictself(SHIELD[;]2); sfx(~_shield~); inflict(FIRE); sfx(~_fire~);,Blowtorch,MAX3,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Magic Firewall_upgraded,Gain [shield]4 shield|Burn [fire]1 dice,1,inflictself(SHIELD[;]4); sfx(~_shield~); inflict(FIRE); sfx(~_fire~);,Blowtorch,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD[;]4); sfx(~_shield~);
Magic Firewall_downgraded,Burn [fire]1 dice,1,inflict(FIRE); sfx(~_fire~);,Blowtorch,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Magic Frostbolt,Deal [ice]3 damage|Freeze [ice]1 dice,1,attack(3[;]ICE); inflict(ICE); sfx(~_ice~);,Refrigerator,MIN4,,BRIGHTCYAN,change_power,change_power,ice,,0,NO,NO,,1,,,,,,,,,,,
Magic Frostbolt_upgraded,Deal [ice]5 damage|Freeze [ice]1 dice,1,attack(5[;]ICE); inflict(ICE); sfx(~_ice~);,Refrigerator,MIN4,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Magic Frostbolt_downgraded,Freeze [ice]1 dice,1,inflict(ICE); sfx(~_ice~);,Refrigerator,MIN4,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Magic Frostbolt?,Deal [ice]3 damage|Inflict [ice]1 freeze,1,attack(3[;]ICE); inflict(ICE); sfx(~_ice~);,Refrigerator,MIN4,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,alternateversion,1,,,,,,,,,,,
Magic Frostbolt?_upgraded,Deal [ice]5 damage|Inflict [ice]1 freeze,1,attack(5[;]ICE); inflict(ICE); sfx(~_ice~);,Refrigerator,MIN4,,BRIGHTCYAN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Magic Frostbolt?_downgraded,Inflict [ice]1 freeze,1,inflict(ICE); sfx(~_ice~);,Refrigerator,MIN4,,BRIGHTCYAN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Butterfly Edge,Do [sword]<d6> damage|Returns the dice,2,attack(d); givedice(actualdice[0].basevalue); sfxdamage(target[;]d);,Plasma Gun,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Butterfly Edge_upgraded,Do [sword]<d6> damage|Returns the dice,2,attack(d); givedice(actualdice[0].basevalue); sfxdamage(target[;]d);,Plasma Gun,NORMAL|FREE2,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Butterfly Edge_downgraded,Do [sword]<d6> damage|Returns the dice,2,attack(d); givedice(actualdice[0].basevalue); sfxdamage(target[;]d);,Plasma Gun,MAX3,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Lute Bocks,Re-enable all dice options,1,if(self != null){ var skillcard = self.getskillcard(); skillcard.equipmentpanel.hardreset(); skillcard.animate(~flash~); };sfx(~_magic~);,Magic Dice,COUNTDOWN,7,RED,change_power,change_power,,,0,YES,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Lute Bocks_upgraded,Re-enable all dice options|Return dice used on this,1,if(self != null){ var skillcard = self.getskillcard(); skillcard.equipmentpanel.hardreset(); skillcard.animate(~flash~); var r = []; for(ad in e.dicehistory){r.push(ad.basevalue);}; givedice(r);};sfx(~_magic~);,Magic Dice,COUNTDOWN,7,RED,,,,,0,YES,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Lute Bocks_downgraded,No effect,1,sfx(~_magic~);,Magic Dice,COUNTDOWN,7,RED,,,,,0,YES,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Jack's Pot,Replace the dice panel with|Jackpot[;] choose 2 rewards,1,self.roll_total = self.roll_target; self.roll_jackpotbonus += 1; robotroll(true);,Pea Gun,COUNTDOWN,5,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Jack's Pot_upgraded,Replace the dice panel with|Jackpot[;] choose 3 rewards,1,self.roll_total = self.roll_target; self.roll_jackpotbonus += 2; robotroll(true);,Pea Gun,COUNTDOWN,5,YELLOW,,,,,0,YES,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Jack's Pot_downgraded,Replace the dice panel with|Jackpot[;] choose 1 reward,1,self.roll_total = self.roll_target; robotroll(true);,Pea Gun,COUNTDOWN,5,YELLOW,,,,,0,YES,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Autoscroll,Increase all your|dice values by 1,1,var c = 0; var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue >= 6){ extradice.push(1); mydice.animatereroll(6[;] self.screenposition()[;] c * 0.05); } else { mydice.animatereroll((mydice.basevalue + 1)[;] self.screenposition()[;] c * 0.05); } c++; } } givedice(extradice); ,Megabump,EVEN,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Autoscroll_upgraded,Increase all your|dice values by 2,1,var c = 0; var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue >= 5){ extradice.push(mydice.basevalue - 4); mydice.animatereroll(6[;] self.screenposition()[;] c * 0.05); } else { mydice.animatereroll((mydice.basevalue + 2)[;] self.screenposition()[;] c * 0.05); } c++; }; }; givedice(extradice);,Megabump,EVEN,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Autoscroll_downgraded,Increase a random|dice value by 1,1,var flag = false; for (mydice in self.dicepool){ if (mydice.available()){ flag = true; }; }; if(flag){ var c = 0; var extradice = []; var mydice = rand(self.dicepool); while(!mydice.available()){ mydice = rand(self.dicepool); }; if (mydice.basevalue >= 6){ extradice.push(1); mydice.animatereroll(6[;] self.screenposition()[;] c * 0.05); } else { mydice.animatereroll((mydice.basevalue + 1)[;] self.screenposition()[;]0); }  givedice(extradice); },Megabump,EVEN,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Percussive Maintenance,Lose [heart]2 health|+1 free dice this fight,1,pierceattackself(2); self.extradice++; sfx(~magic_gaindice~);,Magic Dice,EVEN,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Percussive Maintenance_upgraded,Lose [heart]2 health|+1 free dice this fight,1,pierceattackself(2); self.extradice++; sfx(~magic_gaindice~);,Magic Dice,NORMAL,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Percussive Maintenance_downgraded,Lose [heart]2 health|+1 free dice this fight,1,pierceattackself(2); self.extradice++; sfx(~magic_gaindice~);,Magic Dice,REQUIRE6,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Redundant Coolant,[ice]Freeze yourself[;]|restore [heal]<d6> health,1,inflictself(ICE); attackself(-d); sfx(~_ice~); sfx(~_heal~);,Regenerate,MAX5,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Redundant Coolant_upgraded,[ice]Freeze yourself[;]|restore [heal]<d6> health,1,inflictself(ICE); attackself(-d); sfx(~_ice~); sfx(~_heal~);,Regenerate,NORMAL,,BRIGHTCYAN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Redundant Coolant_downgraded,Freeze yourself [ice]<d6> times[;]|restore [heal]<d6> health,1,inflictself(ICE[;]d); attackself(-d); sfx(~_ice~); sfx(~_heal~);,Regenerate,MAX5,,BRIGHTCYAN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Standing Ovation,Gain [heart]+3 max hp|[gray](once per battle),2,if(simulation){bonus(2000);}else{self.maxhp+=3; self.hp+=3; sfx(~_heal~); sfx(~_cure~);};,Regenerate,COUNTDOWN,12,ORANGE,change_power,change_power,,,0,YES,YES,finale,,,,,,,,,,,,
Standing Ovation_upgraded,Gain [heart]+3 max hp[;] heal [heal]5|[gray](once per battle),2,if(simulation){bonus(2000);}else{self.maxhp+=3; self.hp+=3; attackself(-5); sfx(~_heal~); sfx(~_cure~);};,Regenerate,COUNTDOWN,12,ORANGE,,,,,0,YES,YES,finale,,,,,,,,,,,,
Standing Ovation_downgraded,Gain [heart]+1 max hp|[gray](once per battle),2,if(simulation){bonus(2000);}else{self.maxhp+=1; self.hp+=1; sfx(~_heal~); sfx(~_cure~);};,Regenerate,COUNTDOWN,12,ORANGE,,,,,0,YES,YES,finale,,,,,,,,,,,,
Immolate,Burn [fire]all of|everyone's dice,1,inflict(FIRE[;]ALL); var t = 0; for(mydice in self.dicepool){ if (mydice.available()){ var anim = ~fire~; if(runscript(~morefluff/isalt~|[~fire~])){anim=~alternate_fire~; }; mydice.animate(anim[;]t); t+=0.1; }; };,Blowtorch,COUNTDOWN,12,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,var t = 0; for(mydice in self.dicepool){ if (mydice.available()){ var anim = ~fire~; if(runscript(~morefluff/isalt~|[~fire~])){anim=~alternate_fire~; }; mydice.animate(anim[;]t); t+=0.1; }; };
Immolate_upgraded,[fire]Burn everyone's dice[;] do|[fire]1 dmg per die burned,1,var total = 0; total+=target.dice; total+=target.extradice; inflict(FIRE[;]ALL); var t = 0; for (mydice in self.dicepool){ if (mydice.available()){  var anim = ~fire~; if(runscript(~morefluff/isalt~|[~fire~])){anim=~alternate_fire~; }; t+=0.2; total+=1; }; }; sfx(~_fire~); attack(total[;]FIRE); sfxdamage(target|total);,Blowtorch,COUNTDOWN,12,RED,,,,,0,NO,NO,,,,,,,,,,,,,var t = 0; for(mydice in self.dicepool){ if (mydice.available()){ var anim = ~fire~; if(runscript(~morefluff/isalt~|[~fire~])){anim=~alternate_fire~; }; mydice.animate(anim[;]t); t+=0.1; }; };
Immolate_downgraded,Burn [fire]all of|your dice,1,var t = 0; for(mydice in self.dicepool){ if (mydice.available()){ var anim = ~fire~; if(runscript(~morefluff/isalt~|[~fire~])){anim=~alternate_fire~; }; mydice.animate(anim[;]t); t+=0.1; }; };,Blowtorch,COUNTDOWN,12,RED,,,,,0,YES,NO,,,,,,,,,,,,,var t = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animate(~fire~[;]t); t+=0.2; }; }; sfx(~_fire~);
Superbolt,Always starts [shock]shocked|Deal [shock]<double> damage,1,attack(2*d[;]SHOCK); sfx(~_shock~); sfxdamage(target|d*2);,Static Shock,MAX4,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,e.active=false;,if(runscript(~morefluff/isalt~|[~shock~])){e.animate(~alternate_shock~);}else{e.animate(SHOCK);}; e.active=true;,,,,,,,
Superbolt_upgraded,Always starts [shock]shocked|Deal [shock]<double> damage,1,attack(2*d[;]SHOCK); sfx(~_shock~); sfxdamage(target|d*2);,Static Shock,MAX5,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,e.active=false;,if(runscript(~morefluff/isalt~|[~shock~])){e.animate(~alternate_shock~);}else{e.animate(SHOCK);}; e.active=true;,,,,,,,
Superbolt_downgraded,Always starts [shock]shocked|Deal [shock]<double> damage,1,attack(2*d[;]SHOCK); sfx(~_shock~); sfxdamage(target|d*2);,Static Shock,MAX3,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,e.active=false;,if(runscript(~morefluff/isalt~|[~shock~])){e.animate(~altshock_and_weaken~);}else{e.animate(~shock_and_weaken~);}; e.active=true;,,,,,,,
Resonator,Deal [weaken]<double> damage|While equipped[;] your other|items are [weaken]weakened,2,attack(2*d[;]WEAKEN); sfx(~_weaken~); sfxdamage(target|d*2);,Theremin,NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,for(eq in self.equipment){ if(eq != e && eq.availablethisturn && eq.skillcard == ~~){ eq.animate(WEAKEN); }; }; if(self.stolencard != null){self.stolencard.animate(WEAKEN);};,,,,,,,,
Resonator_upgraded,Deal [weaken]<double> damage|While equipped[;] your other|items are [weaken]weakened,2,attack(2*d[;]WEAKEN); sfx(~_weaken~); sfxdamage(target|d*2);,Theremin,NORMAL|FREE1,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,for(eq in self.equipment){ if(eq != e && eq.availablethisturn && eq.skillcard == ~~){ eq.animate(WEAKEN); }; }; if(self.stolencard != null){self.stolencard.animate(WEAKEN);};,,,,,,,,
Resonator_downgraded,Deal [weaken]<d6> damage|While equipped[;] your other|items are [weaken]weakened,2,attack(d[;]WEAKEN); sfx(~_weaken~); sfxdamage(target|d);,Theremin,NORMAL,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,for(eq in self.equipment){ if(eq != e && eq.availablethisturn && eq.skillcard == ~~){ eq.animate(WEAKEN); }; }; if(self.stolencard != null){self.stolencard.animate(WEAKEN);};,,,,,,,,
Leech Seed,[sword]<d6> dmg. On 6[;] regen|[heal]1 hp per turn for [regen]3 turns,2,attack(d); if(d == 6){ sfx(~_cure~[;]~~[;]0.2); inflictself(~regen3~); }; sfxdamage(target[;]d);,Life Leech,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(d == 6){ sfx(~_cure~[;]~~[;]0.2); inflictself(~regen3~); }; 
Leech Seed_upgraded,[sword]<d6> dmg. On even[;] regen|[heal]1 hp per turn for [regen]3 turns,2,attack(d); if(d % 2 == 0){ sfx(~_cure~[;]~~[;]0.2); inflictself(~regen3~); }; sfxdamage(target[;]d);,Life Leech,NORMAL,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(d %2 == 0){ sfx(~_cure~[;]~~[;]0.2); inflictself(~regen3~); }; 
Leech Seed_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Life Leech,NORMAL,,GREEN,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bolster,Start combat|with [shield]5 shield,1,inflictself(SHIELD[;]5); sfx(~_shield~);,Barricade,,,ORANGE,change_power,change_power,,none,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,if(turn == 1 && e.ready && e.shockedsetting == 0){ e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); e.changecolour(~GRAY~); };,,,,,,,
Bolster_upgraded,Start combat|with [shield]8 shield,1,inflictself(SHIELD[;]8); sfx(~_shield~);,Barricade,,,ORANGE,,,,none,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,if(turn == 1 && e.ready && e.shockedsetting == 0){ e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); e.changecolour(~GRAY~); };,,,,,,,
Bolster_downgraded,Start combat|with [shield]3 shield,1,inflictself(SHIELD[;]3); sfx(~_shield~);,Barricade,,,ORANGE,,,,none,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,if(turn == 1 && e.ready && e.shockedsetting == 0){ e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); e.changecolour(~GRAY~); };,,,,,,,
Mallet,Deal [shock]<d6> damage|[shock]Shock on 1 or 2,1,attack(d[;]SHOCK); if(d < 3){ inflict(SHOCK); sfx(~_shock~); }; sfxdamage(target[;]d);,Static Shock,MAX5,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Mallet_upgraded,Deal [shock]<d6> damage|[shock]Shock on 1 [;] 2[;] or 3,1,attack(d[;]SHOCK); if(d < 4){ inflict(SHOCK); sfx(~_shock~); }; sfxdamage(target[;]d);,Static Shock,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Mallet_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Static Shock,MAX5,,YELLOW,,,,none,0,NO,NO,,,,,,,,,,,,,
Trowel,Deal [weaken]<d6> damage|[weaken]Weaken on 1 or 2,1,attack(d[;]WEAKEN); if(d < 3){ inflict(WEAKEN); sfx(~_weaken~); }; sfxdamage(target[;]d);,Theremin,MAX5,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Trowel_upgraded,Deal [weaken]<d6> damage|[weaken]Weaken on 1[;] 2[;] or 3,1,attack(d[;]WEAKEN); if(d < 4){ inflict(WEAKEN); sfx(~_weaken~); }; sfxdamage(target[;]d);,Theremin,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Trowel_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Theremin,MAX5,,ORANGE,,,,none,0,NO,NO,,,,,,,,,,,,,
Heckfire,[fire]10 dmg + [fire]2 burn|[gray](once per battle),1,attack(10[;]FIRE); inflict(FIRE[;]2); sfx(~_fire~); sfxdamage(target|10);,Blowtorch,COUNTDOWN,10,RED,change_power,change_power,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Heckfire_upgraded,[fire]13 dmg + [fire]4 burn|[gray](once per battle),1,attack(13[;]FIRE); inflict(FIRE[;]4); sfx(~_fire~); sfxdamage(target|13);,Blowtorch,COUNTDOWN,10,RED,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Heckfire_downgraded,[fire]5 dmg + [fire]1 burn|[gray](once per battle),1,attack(5[;]FIRE); inflict(FIRE); sfx(~_fire~); sfxdamage(target|5);,Blowtorch,COUNTDOWN,10,RED,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Cat O' Six Tails,1-3: burn [fire]<d6> dice|4-6: do [fire]<d6> damage,2,var x = actualdice[0].basevalue; if(x < 4){ inflict(FIRE[;]d); }else{ attack(d[;]FIRE); sfxdamage(target|d); }; sfx(~_fire~);,Blowtorch,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Cat O' Six Tails_upgraded,1-3: burn [fire]3 dice|4-6: do [fire]6 damage,2,var x = actualdice[0].basevalue; if(x < 4){ inflict(FIRE[;]3); }else{ attack(6[;]FIRE); sfxdamage(target|6); }; sfx(~_fire~);,Blowtorch,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Cat O' Six Tails_downgraded,Deal [fire]<d6> damage,2,attack(d[;]FIRE); sfx(~_fire~); sfxdamage(target|d);,Blowtorch,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Frosted Dirk,Deal [ice]<d6> damage|On odd[;] freeze [ice]2 dice,1,attack(d[;]ICE); if(d%2 == 1){ inflict(ICE[;]2); }; sfx(~_ice~); sfxdamage(target|d);,Refrigerator,MAX4,,BRIGHTCYAN,change_power,change_power,ice,,0,NO,NO,,1,,,,,,,,,,,
Frosted Dirk_upgraded,Deal [ice]<d6> damage|On odd[;] freeze [ice]2 dice,1,attack(d[;]ICE); if(d%2 == 1){ inflict(ICE[;]2); }; sfx(~_ice~); sfxdamage(target|d);,Refrigerator,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Frosted Dirk_downgraded,Deal [ice]<d6> damage,1,attack(d[;]ICE); sfx(~_ice~); sfxdamage(target|d);,Refrigerator,MAX4,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Frosted Dirk?,Deal [ice]<d6> damage|On odd[;] inflict [ice]2 freeze,1,attack(d[;]ICE); if(d%2 == 1){ inflict(ICE[;]2); }; sfx(~_ice~); sfxdamage(target|d);,Refrigerator,MAX4,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,alternateversion,1,,,,,,,,,,,
Frosted Dirk?_upgraded,Deal [ice]<d6> damage|On odd[;] inflict [ice]2 freeze,1,attack(d[;]ICE); if(d%2 == 1){ inflict(ICE[;]2); }; sfx(~_ice~); sfxdamage(target|d);,Refrigerator,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Frosted Dirk?_downgraded,Deal [ice]<d6> damage,1,attack(d[;]ICE); sfx(~_ice~); sfxdamage(target|d);,Refrigerator,MAX4,,BRIGHTCYAN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Healing Shiv,Even: Deal [sword]<evendice_d6> damage|Odd: Heal [heal]<odddice_d6> health,1,if(d%2 == 1){ attackself(-d); sfx(~_heal~); }else{ attack(d); sfxdamage(target[;]d); };,Regenerate,MAX4,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,e.castdirection = 1-d%2;,,,
Healing Shiv_upgraded,Even: Deal [sword]<evendice_d6> damage|Odd: Heal [heal]<odddice_d6> health,1,if(d%2 == 1){ attackself(-d); sfx(~_heal~); }else{ attack(d); sfxdamage(target[;]d); };,Regenerate,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,e.castdirection = 1-d%2;,,,
Healing Shiv_downgraded,Even: Deal [sword]1 damage|Odd: Heal [heal]1 health,1,if(d%2 == 1){ attackself(-1); sfx(~_heal~); }else{ attack(1); sfxdamage(target[;]1); };,Regenerate,MAX4,,GREEN,,,,,0,NO,NO,,,,,,,,,,e.castdirection = 1-d%2;,,,
Venomous Goop,Deal [sword]<d6> damage|Inflict [poison]4[purple] - <d6>[] poison,2,attack(d); if(d < 4){ inflict(POISON[;]4-d); sfx(~_poison~); }; sfxdamage(target[;]d);,Goop Gun,MAX4,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Venomous Goop_upgraded,Deal [sword]<d6> damage|Inflict [poison]5[purple] - <d6>[] poison,2,attack(d); inflict(POISON[;]5-d); sfx(~_poison~); sfxdamage(target[;]d);,Goop Gun,MAX5,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Venomous Goop_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Goop Gun,MAX4,,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Shammer,Deal [sword]2x<slotdoubles> damage. On |double 6[;] [shock]1 and [weaken]1,2,attack(d*2); if(actualdice[0].basevalue == 6 && actualdice[1].basevalue == 6){ inflict(SHOCK); inflict(WEAKEN); sfx(~_shock~); sfx(~_weaken~); }; sfxdamage(target[;]d*2);,Zapthwack,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Shammer_upgraded,Deal [sword]<d6> damage. On |double 6[;] [shock]1 and [weaken]1,2,attack(d); if(actualdice[0].basevalue == 6 && actualdice[1].basevalue == 6){ inflict(SHOCK); inflict(WEAKEN); sfx(~_shock~); sfx(~_weaken~); }; sfxdamage(target[;]d*2);,Zapthwack,NORMAL|NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Shammer_downgraded,Deal [sword]2x<slotdoubles> damage,2,attack(d*2); sfxdamage(target[;]d*2);,Zapthwack,DOUBLES|DOUBLES,,ORANGE,,,,none,0,NO,NO,,,,,,,,,,,,,
Doppliduplicateinate,Even: Duplicate dice|Odd: Double dice value,1,if(d%2 == 0){ givedice([d[;]d]); }else{ givedice(d*2); };,Magic Dice,MAX4,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Doppliduplicateinate_upgraded,Even: Duplicate dice|Odd: Double dice value,1,if(d%2 == 0){ givedice([d[;]d]); }else{ givedice(d*2); };,Magic Dice,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Doppliduplicateinate_downgraded,Even: Duplicate dice|Odd: Double dice value,1,if(d%2 == 0){ givedice([d[;]d]); }else{ givedice(d*2); };,Magic Dice,MAX2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Flail,Deal [sword]<d6> damage|Reduce countdowns by <d6>|(I made this first!!!!!1!),1,attack(d); boostcountdowns(d); sfxdamage(target[;]d);,Accelerate,MAX4,,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flail_upgraded,Deal [sword]<d6> damage|Reduce countdowns by <d6>|(jk ily terry),1,attack(d); boostcountdowns(d); sfxdamage(target[;]d);,Accelerate,MAX5,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flail_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Accelerate,MAX4,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cauterize,Burn [fire]2 dice[;]|inflict [poison]2 poison,1,inflict(FIRE[;]2); sfx(~_fire~); inflict(POISON[;]2); sfx(~_poison~);,Goop Gun,COUNTDOWN,10,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Cauterize_upgraded,Burn [fire]3 dice[;]|inflict [poison]3 poison,1,inflict(FIRE[;]3); sfx(~_fire~); inflict(POISON[;]3); sfx(~_poison~);,Goop Gun,COUNTDOWN,10,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Cauterize_downgraded,Burn [fire]1 dice[;]|inflict [poison]1 poison,1,inflict(FIRE[;]1); sfx(~_fire~); inflict(POISON[;]1); sfx(~_poison~);,Goop Gun,COUNTDOWN,10,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Quicksilver,Receive [poison]<d6> poison|Gain [shield]<double> shield,1,inflictself(SHIELD[;]2*d); sfx(~_shield~[;]~~[;]0.2); inflictself(POISON[;]d); sfx(~_poison~);,Barricade,ODD,,GRAY,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Quicksilver_upgraded,Receive [poison]<d6> poison|Gain [shield]<double> shield,1,inflictself(SHIELD[;]2*d); sfx(~_shield~); inflictself(POISON[;]d); sfx(~_poison~);,Barricade,NORMAL,,GRAY,,,,,0,YES,NO,,,,,,,,,,,,,
Quicksilver_downgraded,Receive [poison]<d6> poison|Gain [shield]<d6> shield,1,inflictself(SHIELD[;]d); sfx(~_shield~); inflictself(POISON[;]d); sfx(~_poison~);,Barricade,ODD,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Quicklime,Receive [poison]<d6> poison|Roll <d6> new dice,1,inflictself(POISON[;]d); var a = []; for(x in 0...d){ a.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(a); sfx(~_poison~);,Magic Dice,MAX3,,GRAY,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Quicklime_upgraded,Receive [poison]<d6> poison|Roll <d6> new dice,1,inflictself(POISON[;]d); var a = []; for(x in 0...d){ a.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(a); sfx(~_poison~);,Magic Dice,MAX4,,GRAY,,,,,0,YES,NO,,,,,,,,,,,,,
Quicklime_downgraded,Receive [poison]<d6> poison|Roll <d6> new dice,1,inflictself(POISON[;]d); var a = []; for(x in 0...d){ a.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(a); sfx(~_poison~);,Magic Dice,MAX2,,GRAY,,,,,0,YES,NO,,,,,,,,,,,,,
Custard Cream,Repeat next attack,1,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY); sfx(~_fury~);,Fury,NORMAL|NORMAL,9,YELLOW,change_power,change_power,fury,,0,YES,NO,,1,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Custard Cream_upgraded,Repeat next attack,1,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY); sfx(~_fury~);,Fury,NORMAL|NORMAL,7,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Custard Cream_downgraded,Repeat next attack,1,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY); sfx(~_fury~);,Fury,NORMAL|NORMAL,11,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Custard Cream?,Repeat next attack[;] but|disable it next turn,1,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY); sfx(~_fury~);,Fury,NORMAL|NORMAL,9,YELLOW,change_power,change_power,,,0,YES,NO,alternateversion,1,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Custard Cream?_upgraded,Repeat next attack[;] but|disable it next turn,1,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY); sfx(~_fury~);,Fury,NORMAL|NORMAL,7,YELLOW,,,,,0,YES,NO,alternateversion,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Custard Cream?_downgraded,Repeat next attack[;] but|disable it next turn,1,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY); sfx(~_fury~);,Fury,NORMAL|NORMAL,11,YELLOW,,,,,0,YES,NO,alternateversion,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Primal Punch,If <d6> is a prime number[;]|deal [sword]<d6> damage,1,var flag = true; if(d == 1){ flag = false; target.textparticle(~1 is not a prime!~); }; if(d > 2){for(x in 2...d){ if(d%x == 0){ flag = false; }; };}; if(d == 2){ flag = true; }; if(flag){ attack(d); sfxdamage(target[;]d); }else{ target.textparticle(~No effect!~); sfx(~_dodge~); };,Fury,MAX5|MAX5,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Primal Punch_upgraded,If <d6> is a prime number[;]|deal [sword]<d6> damage,1,var flag = true; if(d == 1){ flag = false; target.textparticle(~1 is not a prime!~); }; if(d > 2){for(x in 2...d){ if(d%x == 0){ flag = false; }; };}; if(d == 2){ flag = true; }; if(flag){ attack(d); sfxdamage(target[;]d); }else{ target.textparticle(~No effect!~); sfx(~_dodge~); };,Fury,NORMAL|NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Primal Punch_downgraded,If <d6> is a prime number[;]|deal [sword]<d6> damage,1,var flag = true; if(d == 1){ flag = false; target.textparticle(~1 is not a prime!~); }; if(d > 2){for(x in 2...d){ if(d%x == 0){ flag = false; }; };}; if(d == 2){ flag = true; }; if(flag){ attack(d); sfxdamage(target[;]d); }else{ target.textparticle(~No effect!~); sfx(~_dodge~); };,Fury,MAX3|MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Mini Missile,Deal [sword]4 damage,1,attack(4); sfx(~_magic~);,Pea Gun,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Mini Missile_upgraded,Deal [sword]5 damage,1,attack(5); sfx(~_magic~);,Pea Gun,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Mini Missile_downgraded,Deal [sword]2 damage,1,attack(2); sfx(~_magic~);,Pea Gun,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Daydream,Restore [heal]999 health,2,attackself(-999); sfx(~_heal~);,Regenerate,COUNTDOWN,99,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Daydream_upgraded,Restore [heal]1000 health|Cure [poison]1 poison,2,attackself(-1000); sfx(~_heal~); removestatusself(POISON[;]1);,Regenerate,COUNTDOWN,99,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Daydream_downgraded,Restore [heal]998 health,2,attackself(-998); sfx(~_heal~);,Regenerate,COUNTDOWN,99,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Inspiring Tune,Restore [heal]5 health,2,attackself(-5); sfx(~_heal~);,Regenerate,COUNTDOWN,8,ORANGE,change_power,change_power,,,0,YES,NO,finale,,,,,,,,,,,,
Inspiring Tune_upgraded,Restore [heal]8 health,2,attackself(-8); sfx(~_heal~);,Regenerate,COUNTDOWN,8,ORANGE,,,,,0,YES,NO,finale,,,,,,,,,,,,
Inspiring Tune_downgraded,Restore [heal]2 health,2,attackself(-2); sfx(~_heal~);,Regenerate,COUNTDOWN,8,ORANGE,,,,,0,YES,NO,finale,,,,,,,,,,,,
Cauldron Crafter,Permanently add a random|Cauldron to your deck|[gray](once per battle),2,var eqlist = getequipmentlist(null|[]|[~witchonly~|~robotonly~|~excludefromrandomlists~|~alternateversion~]); var cauldrons = []; for(eq in eqlist){if(eq.indexOf(~Cauldron~) > -1){cauldrons.push(eq);};}; var c = rand(cauldrons); if(c == ~~){ addjestercard(~Cauldron~); }else{ addjestercard(c); }; sfx(~_thinghappens~);,Random Reroll,NORMAL,,ORANGE,change_power,change_power,,,0,YES,YES,finale|excludefromrandomlists,,,,,,,,,,,,
Cauldron Crafter_upgraded,Permanently add a random|Cauldron to your deck,2,var eqlist = getequipmentlist(null|[]|[~witchonly~|~robotonly~|~excludefromrandomlists~|~alternateversion~]); var cauldrons = []; for(eq in eqlist){if(eq.indexOf(~Cauldron~) > -1){cauldrons.push(eq);};}; var c = rand(cauldrons); if(c == ~~){ addjestercard(~Cauldron~); }else{ addjestercard(c); }; sfx(~_thinghappens~);,Random Reroll,NORMAL,,ORANGE,,,,,0,YES,NO,finale|excludefromrandomlists,,,,,,,,,,,,
Cauldron Crafter_downgraded,Permanently add a worse|Cauldron to your deck|[gray](once per battle),2,addjestercard(~Broken Cauldron~); sfx(~_thinghappens~);,Random Reroll,NORMAL,,ORANGE,,,,,0,YES,YES,finale|excludefromrandomlists,,,,,,,,,,,,
Have a Ball,Deal [sword]<d6> damage|,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX4|MAX4|MAX4|MAX4,,ORANGE,change_power,change_power,,none,2,NO,NO,finale,,,,,,,,,,,,
Have a Ball_upgraded,Deal [sword]<d6> damage|,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX4,,ORANGE,,,,none,8,NO,NO,finale,,,,,,,,,,,,
Have a Ball_downgraded,Deal [sword]<d6> damage|,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX4|MAX4|MAX4|MAX4,,ORANGE,,,,none,0,NO,NO,finale,,,,,,,,,,,,
Bite,Drain [heart]1 health|Dice value -1,1,drain(1); sfx(~_drain~); givedice(d-1);,Blood Sip,MIN4,,RED,change_requirements,change_power,,,0,NO,NO,,1,,,,,,,,,,,givedice(d-1);
Bite_upgraded,Drain [heart]1 health|Dice value -1,1,drain(1); sfx(~_drain~); givedice(d-1);,Blood Sip,MIN2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d-1);
Bite_downgraded,Drain [heart]1 health,1,drain(1); sfx(~_drain~);,Blood Sip,MIN4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d-1);
Candy Cane,Restore [heal]3 health[;]|excess adds [shield]shield,1,if(self.maxhp - self.hp < 3){ sfx(~_shield~); }; if(self.hp < self.maxhp){ sfx(~_heal~); }; for(x in 0...3){ if(self.hp >= self.maxhp){ inflictself(SHIELD); }else{ attackself(-1); }; };,Revitalize,EVEN,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Candy Cane_upgraded,Restore [heal]4 health[;]|excess adds [shield]shield,1,if(self.maxhp - self.hp < 4){ sfx(~_shield~); }; if(self.hp < self.maxhp){ sfx(~_heal~); }; for(x in 0...4){ if(self.hp >= self.maxhp){ inflictself(SHIELD); }else{ attackself(-1); }; };,Revitalize,EVEN,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Candy Cane_downgraded,Restore [heal]1 health[;]|if at max[;] increase [shield]shield,1,if(self.hp == self.maxhp){ inflictself(SHIELD); sfx(~_shield~); }else{ attackself(-1); sfx(~_heal~); };,Revitalize,EVEN,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Booplicate,Duplicate a dice|Lose [heart]2 health,1,pierceattackself(2); sfx(~_drain~); givedice([d[;]d]);,Clone Device,NORMAL,,RED,change_power,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Booplicate_upgraded,Duplicate a dice,1,givedice([d[;]d]);,Clone Device,NORMAL,,RED,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Booplicate_downgraded,Duplicate a dice|Lose [heart]4 health,1,pierceattackself(4); sfx(~_drain~); givedice([d[;]d]);,Clone Device,NORMAL,,RED,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Blooplicate,Roll two more|[blind]blinded dice,1,inflictself(BLIND[;]2); sfx(~_blind~); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]);,Clone Device,NORMAL,,GRAY,change_power,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Blooplicate_upgraded,Roll three more|[blind]blinded dice,1,inflictself(BLIND[;]3); sfx(~_blind~); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]);,Clone Device,NORMAL,,GRAY,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Blooplicate_downgraded,Roll one more|[blind]blinded dice,1,inflictself(BLIND[;]1); sfx(~_blind~); givedice();,Clone Device,NORMAL,,GRAY,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Gooplicate,If enemy is [poison]poisoned[;]|duplicate the dice,1,if(getstatus(POISON) > 0){ givedice([d[;]d]); }else{ givedice(d); };,Clone Device,NORMAL,,PURPLE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Gooplicate_upgraded,If enemy is [poison]poisoned[;]|duplicate the dice|If [poison] > <d6>: get 3 copies,1,if(getstatus(POISON) >= d){ givedice([d|d|d]); }else if(getstatus(POISON) > 0){givedice([d|d]);}else{ givedice(d); };,Clone Device,NORMAL,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Gooplicate_downgraded,If enemy has over [poison]<d6>|poison[;] duplicate the dice,1,if(getstatus(POISON) > d){ givedice([d[;]d]); }else{ givedice(d); };,Clone Device,NORMAL,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Triplicate,Get 3 copies of a dice,2,givedice([d[;]d[;]d]);,Magic Six,MAX3,,GREEN,change_requirements,change_power,,,0,YES,NO,,,,,,,,,,,,,
Triplicate_upgraded,Get 3 copies of a dice,2,givedice([d[;]d[;]d]);,Magic Six,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Triplicate_downgraded,Duplicate a dice,2,givedice([d[;]d]);,Magic Six,MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Antifreeze,Get a different new dice|[gray](Reusable),1,var poss = [1[;]2[;]3[;]4[;]5[;]6]; for(ad in actualdice){ poss.remove(ad.basevalue); }; givedice(rand(poss));,Snake Eyes,REQUIRE1|REQUIRE1,,GREEN,change_power,change_power,,,-1,YES,NO,,,,,,,,,,,,,
Antifreeze_upgraded,Get a different new dice|[gray](Reusable),1,var poss = [1[;]2[;]3[;]4[;]5[;]6]; for(ad in actualdice){ poss.remove(ad.basevalue); }; givedice(rand(poss));,Snake Eyes,NORMAL|NORMAL,,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Antifreeze_downgraded,Get a different new dice,1,var poss = [1[;]2[;]3[;]4[;]5[;]6]; for(ad in actualdice){ poss.remove(ad.basevalue); }; givedice(rand(poss));,Snake Eyes,REQUIRE1|REQUIRE1,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Scraps,Even: heal [heal]1[;] Odd: add [shield]1|[gray](Reusable),1,if(d%2 == 1){ inflictself(SHIELD); sfx(~_shield~); }else{ attackself(-1); sfx(~_heal~); };,Regenerate,MAX2,,ORANGE,change_power,change_power,,,-1,YES,NO,,,,,,,,,,,,,
Scraps_upgraded,Even: heal [heal]1[;] Odd: add [shield]1|[gray](Reusable),1,if(d%2 == 1){ inflictself(SHIELD); sfx(~_shield~); }else{ attackself(-1); sfx(~_heal~); };,Regenerate,NORMAL,,ORANGE,,,,,-1,YES,NO,,,,,,,,,,,,,
Scraps_downgraded,Even: Heal [heal]1 health|Odd: Add [shield]1 shield,1,if(d%2 == 1){ inflictself(SHIELD); sfx(~_shield~); }else{ attackself(-1); sfx(~_heal~); };,Regenerate,MAX2,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Venom Catapult,Inflict [poison]3 poison,1,inflict(POISON[;]3); sfx(~_poison~);,Goop Gun,DOUBLES|DOUBLES,,PURPLE,change_poison,change_power,,,0,NO,NO,,,,,,,,,,,,,
Venom Catapult_upgraded,Inflict [poison]4 poison,1,inflict(POISON[;]4); sfx(~_poison~);,Goop Gun,DOUBLES|DOUBLES,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Venom Catapult_downgraded,Inflict [poison]2 poison,1,inflict(POISON[;]2); sfx(~_poison~);,Goop Gun,DOUBLES|DOUBLES,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Steel Bulwark,Double your [shield]shield|[gray](once per battle),1,inflictself(SHIELD[;]getstatusself(SHIELD)); sfx(~_shield~);,Barricade,COUNTDOWN,10,ORANGE,change_power,change_power,,,0,YES,YES,excludefromrandomlists,,,,,,,,,,,,
Steel Bulwark_upgraded,Double your [shield]shield,1,inflictself(SHIELD[;]getstatusself(SHIELD)); sfx(~_shield~);,Barricade,COUNTDOWN,10,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Steel Bulwark_downgraded,Increase [shield]shield by 50%|[gray](once per battle),1,inflictself(SHIELD[;]getstatusself(SHIELD)/2); sfx(~_shield~);,Barricade,COUNTDOWN,10,ORANGE,,,,,0,YES,YES,excludefromrandomlists,,,,,,,,,,,,
Mystic Stave,Inflict a status depending|on your roll:|1:[blind] 2:[poison] 3:[fire] 4:[ice] 5:[weaken] 6:[shock],1,var effs = [SHOCK[;]WEAKEN[;]ICE[;]FIRE[;]POISON[;]BLIND]; inflict(effs[6-d]); var sounds=[~_shock~[;]~_weaken~[;]~_ice~[;]~_fire~[;]~_poison~[;]~_blind~]; sfx(sounds[6-d]);,Mystic Boop,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Mystic Stave_upgraded,Inflict a status:|1:[blind] 2:[poison] 3:[fire] 4:[ice] 5:[weaken] 6:[shock]|[gray](3 uses this turn),1,var effs = [SHOCK[;]WEAKEN[;]ICE[;]FIRE[;]POISON[;]BLIND]; inflict(effs[6-d]); var sounds=[~_shock~[;]~_weaken~[;]~_ice~[;]~_fire~[;]~_poison~[;]~_blind~]; sfx(sounds[6-d]);,Mystic Boop,NORMAL,,RED,,,,,3,NO,NO,,,,,,,,,,,,,
Mystic Stave_downgraded,Inflict a random status:|[blind][poison][fire][ice][weaken][shock],1,var r = rand([0[;]1[;]2[;]3[;]4[;]5]); var effs = [SHOCK[;]WEAKEN[;]ICE[;]FIRE[;]POISON[;]BLIND]; inflict(effs[r]); var sounds=[~_shock~[;]~_weaken~[;]~_ice~[;]~_fire~[;]~_poison~[;]~_blind~]; sfx(sounds[r]);,Mystic Boop,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Magic Heal,Restore [heal]3 health,1,attackself(-3); sfx(~_heal~);,Regenerate,EVEN,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Magic Heal_upgraded,Restore [heal]4 health,1,attackself(-4); sfx(~_heal~);,Regenerate,EVEN,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Magic Heal_downgraded,Restore [heal]3 health,1,attackself(-3); sfx(~_heal~);,Regenerate,REQUIRE4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Flourish,Deal [sword]<d6> damage[;] double|if you have no dice left,1,var x = true; for (mydice in self.dicepool){ if (mydice.available()){ x=false; } }; if(x){ attack(d*2); sfxdamage(target[;]d*2); }else{ attack(d); sfxdamage(target[;]d); };,Mechanical Kneecap,MAX4,,YELLOW,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flourish_upgraded,Deal [sword]<d6> damage[;] double|if you have no dice left,1,var x = true; for (mydice in self.dicepool){ if (mydice.available()){ x=false; } }; if(x){ attack(d*2); sfxdamage(target[;]d*2); }else{ attack(d); sfxdamage(target[;]d); };,Mechanical Kneecap,MAX5,,YELLOW,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flourish_downgraded,Deal [sword]<d6> damage[;] double|if you have no dice left,1,var x = true; for (mydice in self.dicepool){ if (mydice.available()){ x=false; } }; if(x){ attack(d*2); sfxdamage(target[;]d*2); }else{ attack(d); sfxdamage(target[;]d); };,Mechanical Kneecap,MAX2,,YELLOW,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Pot of Generosity,Permanently delete|your hand|(excluding this card)[],2,for(x in [0[;]1[;]2[;]3]){ if(Deck.getcard(x)!=null){ Deck.getcard(x).delete(); }; }; sfx(~_thinghappens~);,Bear!,EVEN,,ORANGE,change_power,change_power,,,0,YES,NO,excludefromrandomlists|finale,,,,,,,,,,,,
Pot of Generosity_upgraded,Permanently delete|your hand|(excluding this card)[],2,for(x in [0[;]1[;]2[;]3]){ if(Deck.getcard(x)!=null){ Deck.getcard(x).delete(); }; }; sfx(~_thinghappens~);,Bear!,NORMAL,,ORANGE,,,,,0,YES,NO,excludefromrandomlists|finale,,,,,,,,,,,,
Pot of Generosity_downgraded,Permanently delete|your hand|(excluding this card)[],2,for(x in [0[;]1[;]2[;]3]){ if(Deck.getcard(x)!=null){ Deck.getcard(x).delete(); }; }; sfx(~_thinghappens~);,Bear!,REQUIRE2,,ORANGE,,,,,0,YES,NO,excludefromrandomlists|finale,,,,,,,,,,,,
Steamball,Even: [fire]<evendice_d6> dmg[;] [fire]1 burn|Odd: [ice]<odddice_d6> dmg[;] [ice]1 freeze,1,if(d%2 == 0){ attack(d[;]FIRE); inflict(FIRE); sfx(~_fire~); }else{ attack(d[;]ICE); inflict(ICE); sfx(~_ice~); }; sfxdamage(target|d);,Ice Burn,MAX4,,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Steamball_upgraded,Even: [fire]<evendice_d6> dmg[;] [fire]1 burn|Odd: [ice]<odddice_d6> dmg[;] [ice]1 freeze,1,if(d%2 == 0){ attack(d[;]FIRE); inflict(FIRE); sfx(~_fire~); }else{ attack(d[;]ICE); inflict(ICE); sfx(~_ice~); }; sfxdamage(target|d);,Ice Burn,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Steamball_downgraded,Even: [fire]<evendice_d6> dmg[;] [fire]1 burn|Odd: [ice]<odddice_d6> dmg[;] [ice]1 freeze,1,if(d%2 == 0){ attack(d[;]FIRE); inflict(FIRE); sfx(~_fire~); }else{ attack(d[;]ICE); inflict(ICE); sfx(~_ice~); }; sfxdamage(target|d);,Ice Burn,MAX2,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Kaboomerang,Deal [sword]<quadruple> damage|Deal [sword]<double> to yourself,2,attack(d*4); boomerang(d*2); sfxdamage(target[;]d*4);,Plasma Gun,MAX4,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Kaboomerang_upgraded,Deal [sword]<quadruple> damage|Deal [sword]<double> to yourself,2,attack(d*4); boomerang(d*2); sfxdamage(target[;]d*4);,Plasma Gun,MAX5,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Kaboomerang_downgraded,Deal [sword]<double> damage to|the enemy and yourself,2,attack(d*2); boomerang(d*2); sfxdamage(target[;]d*2);,Plasma Gun,MAX4,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Coolant Shooter,Reduce CPU counter by 2|[gray](Reusable),1,adjustrobotcounter(-2);,Plasma Gun,COUNTDOWN,5,GREEN,change_power,change_power,,none,-1,YES,NO,robotonly,,,,,,,,,,,,
Coolant Shooter_upgraded,Reduce CPU counter by 3|[gray](Reusable),1,adjustrobotcounter(-3);,Plasma Gun,COUNTDOWN,5,GREEN,,,,none,-1,YES,NO,robotonly,,,,,,,,,,,,
Coolant Shooter_downgraded,Reduce CPU counter by 1|[gray](Reusable),1,adjustrobotcounter(-1);,Plasma Gun,COUNTDOWN,5,GREEN,,,,none,-1,YES,NO,robotonly,,,,,,,,,,,,
Clerical Error,Heal the enemy for [heal]<d6>|Inflict [poison]<d6> poison,1,attack(-d); sfx(~_cure~); inflict(POISON[;]d); sfx(~_poison~);,Goop Gun,MAX4,,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Clerical Error_upgraded,Heal the enemy for [heal]<d6>|Inflict [poison]<d6> poison,1,attack(-d); sfx(~_cure~); inflict(POISON[;]d); sfx(~_poison~);,Goop Gun,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Clerical Error_downgraded,Heal the enemy for [heal]<d6>,1,attack(-d); sfx(~_cure~);,Goop Gun,MAX4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Gust,Shock [shock]1 item|[gray](Reusable),1,inflict(SHOCK); sfx(~_shock~);,Static Shock,COUNTDOWN,4,YELLOW,change_power,change_power,,,-1,NO,NO,,1,,,,,,,,,,,
Gust_upgraded,[shock]1 dmg[;] shock [shock]1 item|[gray](Reusable),1,inflict(SHOCK); attack(1[;]SHOCK); sfx(~_shock~); sfxdamage(target|1);,Static Shock,COUNTDOWN,4,YELLOW,,,,,-1,NO,NO,,,,,,,,,,,,,
Gust_downgraded,Shock [shock]1 item,1,inflict(SHOCK); sfx(~_shock~);,Static Shock,COUNTDOWN,4,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Reverb,Weaken [weaken]1 item|[gray](Reuseable),1,inflict(WEAKEN); sfx(~_weaken~);,Theremin,COUNTDOWN,6,ORANGE,change_power,change_power,weaken,,-1,NO,NO,,1,,,,,,,,,,,
Reverb_upgraded,[weaken]2 dmg[;] weaken [weaken]1 item|[gray](Reuseable),1,inflict(WEAKEN); attack(2[;]WEAKEN); sfx(~_weaken~); sfxdamage(target|2);,Theremin,COUNTDOWN,6,ORANGE,,,,,-1,NO,NO,,,,,,,,,,,,,
Reverb_downgraded,Weaken [weaken]1 item,1,inflict(WEAKEN); sfx(~_weaken~);,Theremin,COUNTDOWN,6,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Reverb?,Inflict [weaken]1 weaken|[gray](Reuseable),1,inflict(WEAKEN); sfx(~_weaken~);,Theremin,COUNTDOWN,6,ORANGE,change_power,change_power,,,-1,NO,NO,alternateversion,1,,,,,,,,,,,
Reverb?_upgraded,[weaken]1 weaken + [weaken]2 damage|[gray](Reuseable),1,inflict(WEAKEN); attack(2[;]WEAKEN); sfx(~_weaken~); sfxdamage(target|2);,Theremin,COUNTDOWN,6,ORANGE,,,,,-1,NO,NO,alternateversion,,,,,,,,,,,,
Reverb?_downgraded,Inflict [weaken]1 weaken,1,inflict(WEAKEN); sfx(~_weaken~);,Theremin,COUNTDOWN,6,ORANGE,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Pavise,Gain [shield]<d6> shield|Reduce countdowns by <d6>,2,inflictself(SHIELD[;]d); boostcountdowns(d); sfx(~_shield~);,Accelerate,MAX4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Pavise_upgraded,Gain [shield]<d6> shield|Reduce countdowns by <d6>,2,inflictself(SHIELD[;]d); boostcountdowns(d); sfx(~_shield~);,Accelerate,MAX4|FREE1,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Pavise_downgraded,Gain [shield]<d6> shield|Reduce countdowns by <d6>,2,inflictself(SHIELD[;]d); boostcountdowns(d); sfx(~_shield~);,Accelerate,MAX2,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Poison Thread,Inflict [poison]1 poison|[gray](3 uses this turn),1,inflict(POISON[;]1); sfx(~_poison~);,Pea Gun,MIN3,,PURPLE,change_power,change_power,,,3,NO,NO,,,,,,,,,,,,,
Poison Thread_upgraded,Inflict [poison]1 poison|[gray](Reuseable),1,inflict(POISON[;]2); sfx(~_poison~);,Pea Gun,MIN3,,PURPLE,,,,,-1,NO,NO,,,,,,,,,,,,,
Poison Thread_downgraded,Inflict [poison]1 poison,1,inflict(POISON[;]1); sfx(~_poison~);,Pea Gun,MIN5,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Frostbitten,Even: Burn [fire]1 dice|Odd: Inflict [ice]1 freeze,1,if(d%2 == 0){ inflict(FIRE); sfx(~_fire~); }else{ inflict(ICE); sfx(~_ice~); };,Ice Burn,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Frostbitten_upgraded,Even: Burn [fire]2 dice|Odd: Inflict [ice]2 freeze,1,if(d%2 == 0){ inflict(FIRE[;]2); sfx(~_fire~); }else{ inflict(ICE[;]2); sfx(~_ice~); };,Ice Burn,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Frostbitten_downgraded,Even: Burn [fire]1 dice|Odd: Inflict [ice]1 freeze,1,if(d%2 == 0){ inflict(FIRE); sfx(~_fire~); }else{ inflict(ICE); sfx(~_ice~); };,Ice Burn,MAX3,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Frozen Flute,Even: Inflict [weaken]1 weaken|Odd: Inflict [ice]1 freeze,1,if(d%2 == 0){ inflict(WEAKEN); sfx(~_weaken~); }else{ inflict(ICE); sfx(~_ice~); };,Theremin,NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Frozen Flute_upgraded,Even: Inflict [weaken]2 weaken|Odd: Inflict [ice]2 freeze,1,if(d%2 == 0){ inflict(WEAKEN[;]2); sfx(~_weaken~); }else{ inflict(ICE[;]2); sfx(~_ice~); };,Theremin,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Frozen Flute_downgraded,Even: Inflict [weaken]1 weaken|Odd: Inflict [ice]1 freeze,1,if(d%2 == 0){ inflict(WEAKEN); sfx(~_weaken~); }else{ inflict(ICE); sfx(~_ice~); };,Theremin,MAX3,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Fireflash,Even: Shock [shock]1 item|Odd: Burn [fire]1 dice,1,if(d%2 == 0){ inflict(SHOCK); sfx(~_shock~); }else{ inflict(FIRE); sfx(~_fire~); };,Static Shock,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Fireflash_upgraded,Even: Shock [shock]2 items|Odd: Burn [fire]2 dice,1,if(d%2 == 0){ inflict(SHOCK[;]2); sfx(~_shock~); }else{ inflict(FIRE[;]2); sfx(~_fire~); };,Static Shock,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Fireflash_downgraded,Even: Shock [shock]1 item|Odd: Burn [fire]1 dice,1,if(d%2 == 0){ inflict(SHOCK); sfx(~_shock~); }else{ inflict(FIRE); sfx(~_fire~); };,Static Shock,MAX3,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Solar Beam,Deal [sword]<var:dynamo> damage. On end|turn: Gain [dynamo]1 Beam Power,1,var s = getstatusself(~dynamo~); attack(s); sfxdamage(target[;]s);,Whelm,MIN3,,YELLOW,change_power,change_power,,none,0,NO,NO,,,,,,,,,inflictself(~dynamo~); self.setvar(~dynamo~[;]getstatusself(~dynamo~)); sfx(~_magic~);,,,,
Solar Beam_upgraded,Deal [sword]<var:dynamo> damage. On end|turn: Gain [dynamo]1 Beam Power,1,var s = getstatusself(~dynamo~); attack(s); sfxdamage(target[;]s);,Whelm,NORMAL,,YELLOW,,,,none,0,NO,NO,,,,,,,,,inflictself(~dynamo~); self.setvar(~dynamo~[;]getstatusself(~dynamo~)); sfx(~_magic~); e.animate(~flashandshake~);,,,,
Solar Beam_downgraded,Deal [sword]<var:dynamo> damage. On end|turn: Gain [dynamo]1 Beam Power,1,var s = getstatusself(~dynamo~); attack(s); sfxdamage(target[;]s);,Whelm,MIN5,,YELLOW,,,,none,0,NO,NO,,,,,,,,,inflictself(~dynamo~); self.setvar(~dynamo~[;]getstatusself(~dynamo~)); sfx(~_magic~); e.animate(~flashandshake~);,,,,
Trishula,Deal [sword]<triple> damage,1,attack(d*3); sfxdamage(target[;]d*3);,Plasma Gun,MAX2,,BRIGHTCYAN,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Trishula_upgraded,Deal [sword]<triple> damage,1,attack(d*3); sfxdamage(target[;]d*3);,Plasma Gun,MAX3,,BRIGHTCYAN,,,,none,0,NO,NO,,,,,,,,,,,,,
Trishula_downgraded,Deal [sword]<double> damage,1,attack(d*2); sfxdamage(target[;]d*2);,Plasma Gun,MAX2,,BRIGHTCYAN,,,,none,0,NO,NO,,,,,,,,,,,,,
Tomahawk,Deal [sword]<double> damage,1,attack(d*2); sfxdamage(target[;]d*2);,Plasma Gun,MAX3,,YELLOW,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Tomahawk_upgraded,Deal [sword]<double> damage,1,attack(d*2); sfxdamage(target[;]d*2);,Plasma Gun,MAX4,,YELLOW,,,,none,0,NO,NO,,,,,,,,,,,,,
Tomahawk_downgraded,Deal [sword]<d6> damage,1,attack(d*2); sfxdamage(target[;]d*2);,Plasma Gun,MAX3,,YELLOW,,,,none,0,NO,NO,,,,,,,,,,,,,
Labrys,Deal [sword]<double> damage|[gray](2 uses this turn),2,attack(d*2); sfxdamage(target[;]d*2);,Plasma Gun,MAX3,,RED,change_power,change_power,,none,2,NO,NO,,,,,,,,,,,,,
Labrys_upgraded,Deal [sword]<double> damage|[gray](2 uses this turn),2,attack(d*2); sfxdamage(target[;]d*2);,Plasma Gun,MAX4,,RED,,,,none,2,NO,NO,,,,,,,,,,,,,
Labrys_downgraded,Deal [sword]<d6> damage|[gray](2 uses this turn),2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX3,,RED,,,,none,2,NO,NO,,,,,,,,,,,,,
Hand Lens,Triple dice value,1,givedice(d*3);,Magic Dice,MAX2,,GREEN,change_description,change_power,,,0,YES,NO,,,,,,,,,,,,,
Hand Lens_upgraded,Triple dice value,1,givedice(d*3);,Magic Dice,MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Hand Lens_downgraded,Double dice value,1,givedice(d*2);,Magic Dice,MAX2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Nine Iron,Deal [sword]<d6> damage|On 6[;] deal [sword]3 more,2,if(d == 6){ attack(d+3); sfxdamage(target[;]d+3); }else{ attack(d); sfxdamage(target[;]d); };,Plasma Gun,NORMAL,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Nine Iron_upgraded,Deal [sword]<d6> damage|On even[;] deal [sword]3 more,2,if(d % 2 == 0){ attack(d+3); sfxdamage(target[;]d+3); }else{ attack(d); sfxdamage(target[;]d); };,Plasma Gun,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Nine Iron_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Divine Blade,[sword]<d6> dmg. If you're under|50% hp[;] heal [heal]<d6> hp too,1,attack(d); sfxdamage(target[;]d); if(self.hp / self.maxhp < 0.5){ attackself(-d); sfx(~_heal~); };,Life Leech,MAX4,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,, if(self.hp / self.maxhp < 0.5){ attackself(-d); sfx(~_heal~); };
Divine Blade_upgraded,[sword]<d6> dmg. If you're under|50% hp[;] heal [heal]<d6> hp too,1,attack(d); sfxdamage(target[;]d); if(self.hp / self.maxhp < 0.5){ attackself(-d); sfx(~_heal~); };,Life Leech,MAX5,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,, if(self.hp / self.maxhp < 0.5){ attackself(-d); sfx(~_heal~); };
Divine Blade_downgraded,[sword]<d6> dmg. If you're under|50% hp[;] heal [heal]<d6> hp too,1,attack(d); sfxdamage(target[;]d); if(self.hp / self.maxhp < 0.5){ attackself(-d); sfx(~_heal~); };,Life Leech,MAX3,,YELLOW,,,,none,0,NO,NO,,,,,,,,,,,,, if(self.hp / self.maxhp < 0.5){ attackself(-d); sfx(~_heal~); };
Poisoned Axe,Even: [sword]<double> damage|Odd: [poison]<d6> poison,2,if(d%2 == 0){ attack(d*2); sfxdamage(target[;]d*2); }else{ inflict(POISON[;]d); sfx(~_poison~); };,Goop Gun,MAX4,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Poisoned Axe_upgraded,Even: [poison]<d6> poison|Odd: [sword]<double> damage,2,if(d%2 == 1){ attack(d*2); sfxdamage(target[;]d*2); }else{ inflict(POISON[;]d); sfx(~_poison~); };,Goop Gun,MAX4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Poisoned Axe_downgraded,Even: [sword]1 damage|Odd: [poison]1 poison,2,if(d%2 == 0){ attack(1); sfxdamage(target[;]1); }else{ inflict(POISON); sfx(~_poison~); };,Goop Gun,MAX4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Grappling Cookie,Re-use next item[;] and|it has +1 use this turn,1,inflictself(REEQUIPNEXT); inflictself(FURY); sfx(~_fury~);,Fury,DOUBLES|DOUBLES,,GREEN,change_power,change_power,reequipnext,,0,YES,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Grappling Cookie_upgraded,Re-use next item[;] and|it has +1 use this turn,1,inflictself(REEQUIPNEXT); inflictself(FURY); sfx(~_fury~);,Fury,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Grappling Cookie_downgraded,Re-use next item[;] and|it has +1 use this turn,1,inflictself(REEQUIPNEXT); inflictself(FURY); sfx(~_fury~);,Fury,REQUIRE2|REQUIRE2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Grappling Cookie?,Re-use next item[;] and|keep the dice you use,1,inflictself(REEQUIPNEXT); inflictself(FURY); sfx(~_fury~);,Fury,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,alternateversion,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Grappling Cookie?_upgraded,Re-use next item[;] and|keep the dice you use,1,inflictself(REEQUIPNEXT); inflictself(FURY); sfx(~_fury~);,Fury,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,alternateversion,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Grappling Cookie?_downgraded,Re-use next item[;] and|keep the dice you use,1,inflictself(REEQUIPNEXT); inflictself(FURY); sfx(~_fury~);,Fury,REQUIRE2|REQUIRE2,,GREEN,,,,,0,YES,NO,alternateversion,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Thump,Deal [sword]<d6> damage[;] twice|if shield is [shield]<d6> or over,1,attack(d); sfxdamage(target|d); if(simulation){if(getstatusself(SHIELD) >= d){ attack(d); }};,Plasma Gun,MAX4,,GRAY,change_power,change_power,,,0,NO,NO,,1,,,,,,,,if(simulation){}else{if(getstatusself(SHIELD) >= d){function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(~+d+~); sfxdamage(target|~+d+~);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~ORANGE~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 400 : -400)|0.1);};};,,,
Thump_upgraded,Deal [sword]<d6> damage[;] twice|if shield is [shield]<d6> or over,1,attack(d); sfxdamage(target|d); if(simulation){if(getstatusself(SHIELD) >= d){ attack(d); }};,Plasma Gun,MAX5,,GRAY,,,,,0,NO,NO,,,,,,,,,,if(simulation){}else{if(getstatusself(SHIELD) >= d){function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(~+d+~); sfxdamage(target|~+d+~);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~ORANGE~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 400 : -400)|0.1);};};,,,
Thump_downgraded,Deal [sword]<d6> damage[;] twice|if shield is [shield]<d6> or over,1,attack(d); sfxdamage(target|d); if(simulation){if(getstatusself(SHIELD) >= d){ attack(d); }};,Plasma Gun,MAX2,,GRAY,,,,,0,NO,NO,,,,,,,,,,if(simulation){}else{if(getstatusself(SHIELD) >= d){function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(~+d+~); sfxdamage(target|~+d+~);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~ORANGE~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 400 : -400)|0.1);};};,,,
Pod Shooter,Deal [sword]4 damage|[gray](Reusable),1,attack(4); sfxdamage(target[;]4);,Plasma Gun,REQUIRE5,,RED,change_power,change_power,,none,-1,NO,NO,,1,,,,,,,,,,,
Pod Shooter_upgraded,Deal [sword]4 damage|[gray](Reusable),1,attack(4); sfxdamage(target[;]4);,Plasma Gun,MIN5,,RED,,,,none,-1,NO,NO,,,,,,,,,,,,,
Pod Shooter_downgraded,Deal [sword]2 damage|[gray](Reusable),1,attack(2); sfxdamage(target[;]2);,Plasma Gun,REQUIRE5,,RED,,,,none,-1,NO,NO,,,,,,,,,,,,,
Gavel,Deal [shock]<d6> damage|Shock [shock]2 items,1,attack(d[;]SHOCK); inflict(SHOCK[;]2); sfxdamage(target[;]d); sfx(~_shock~);,Jackhammer,REQUIRE6,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Gavel_upgraded,[shock]<d6> damage[;] shock [shock]2|,1,attack(d[;]SHOCK); inflict(SHOCK[;]2); sfxdamage(target[;]d); sfx(~_shock~);,Jackhammer,REQUIRE6,,YELLOW,,,,,2,NO,NO,,,,,,,,,,,,,
Gavel_downgraded,Shock [shock]2 items,1,inflict(SHOCK[;]2); sfx(~_shock~);,Jackhammer,REQUIRE6,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Spade,Deal [weaken]<d6> damage|Inflict [weaken]2 weaken,1,attack(d[;]WEAKEN); inflict(WEAKEN[;]2); sfxdamage(target[;]d); sfx(~_weaken~);,Burrower,REQUIRE6,,ORANGE,change_power,change_power,weaken,,0,NO,NO,,,,,,,,,,,,,
Spade_upgraded,[weaken]<d6> damage[;] inflict [weaken]2|,1,attack(d[;]WEAKEN); inflict(WEAKEN[;]2); sfxdamage(target[;]d); sfx(~_weaken~);,Burrower,REQUIRE6,,ORANGE,,,,,2,NO,NO,,,,,,,,,,,,,
Spade_downgraded,Inflict [weaken]2 weaken,1,inflict(WEAKEN[;]2); sfx(~_weaken~);,Burrower,REQUIRE6,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Spade?,Inflict [weaken]2 weaken[;] then|deal [weaken]<d6> damage,1,inflict(WEAKEN[;]2); attack(d[;]WEAKEN); sfxdamage(target[;]d); sfx(~_weaken~);,Burrower,REQUIRE6,,ORANGE,change_power,change_power,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Spade?_upgraded,Inflict [weaken]2[;] then [weaken]<d6> dmg|,1,inflict(WEAKEN[;]2); attack(d[;]WEAKEN); sfxdamage(target[;]d); sfx(~_weaken~);,Burrower,REQUIRE6,,ORANGE,,,,,2,NO,NO,alternateversion,,,,,,,,,,,,
Spade?_downgraded,Inflict [weaken]2 weaken,1,inflict(WEAKEN[;]2); sfx(~_weaken~);,Burrower,REQUIRE6,,ORANGE,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Tesla Cannon,Shock [shock]2 items|Return the dice,1,inflict(SHOCK[;]2); sfx(~_shock~); givedice(d);,Static Shock,REQUIRE3,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Tesla Cannon_upgraded,Shock [shock]3 items|Return the dice,1,inflict(SHOCK[;]3); sfx(~_shock~); givedice(d);,Static Shock,REQUIRE3,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Tesla Cannon_downgraded,Shock [shock]1 item|Return the dice,1,inflict(SHOCK[;]1); sfx(~_shock~); givedice(d);,Static Shock,REQUIRE3,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Seesaw,Halve all your countdowns,1,if(simulation){ bonus(-10000); }else{ for(eq in self.equipment){ if(eq.countdown > 0 && eq.ready && eq.availablethisturn){ var rem = eq.remainingcountdown - eq.reducecountdownby; var target = rem/2; if(rem-target > 6){ eq.remainingcountdown = target+6; rem=target+6; }; givedice(eq.remainingcountdown - target); eq.assigndice(self.dicepool[self.dicepool.length - 1]); }; }; sfx(~_thinghappens~); if(self.stolencard != null){ if(self.stolencard.countdown > 0){ var rem = self.stolencard.remainingcountdown - self.stolencard.reducecountdownby; var target = rem/2; if(rem-target > 6){ self.stolencard.remainingcountdown = target+6; rem=target+6; }; givedice(rem - target); self.stolencard.assigndice(self.dicepool[self.dicepool.length - 1]); }; }; };,Accelerate,NORMAL|NORMAL,7,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Seesaw_upgraded,Halve all your countdowns|[gray](Reuseable),1,if(simulation){ bonus(-10000); }else{ for(eq in self.equipment){ if(eq.countdown > 0 && eq.ready && eq.availablethisturn){ var rem = eq.remainingcountdown - eq.reducecountdownby; var target = rem/2; if(rem-target > 6){ eq.remainingcountdown = target+6; rem=target+6; }; givedice(eq.remainingcountdown - target); eq.assigndice(self.dicepool[self.dicepool.length - 1]); }; }; sfx(~_thinghappens~); if(self.stolencard != null){ if(self.stolencard.countdown > 0){ var rem = self.stolencard.remainingcountdown - self.stolencard.reducecountdownby; var target = rem/2; if(rem-target > 6){ self.stolencard.remainingcountdown = target+6; rem=target+6; }; givedice(rem - target); self.stolencard.assigndice(self.dicepool[self.dicepool.length - 1]); }; }; };,Accelerate,NORMAL|NORMAL,7,YELLOW,,,,,-1,YES,NO,,,,,,,,,,,,,
Seesaw_downgraded,Halve all your countdowns,1,if(simulation){ bonus(-10000); }else{ for(eq in self.equipment){ if(eq.countdown > 0 && eq.ready && eq.availablethisturn){ var rem = eq.remainingcountdown - eq.reducecountdownby; var target = rem/2; if(rem-target > 6){ eq.remainingcountdown = target+6; rem=target+6; }; givedice(eq.remainingcountdown - target); eq.assigndice(self.dicepool[self.dicepool.length - 1]); }; }; sfx(~_thinghappens~); if(self.stolencard != null){ if(self.stolencard.countdown > 0){ var rem = self.stolencard.remainingcountdown - self.stolencard.reducecountdownby; var target = rem/2; if(rem-target > 6){ self.stolencard.remainingcountdown = target+6; rem=target+6; }; givedice(rem - target); self.stolencard.assigndice(self.dicepool[self.dicepool.length - 1]); }; }; };,Accelerate,NORMAL|NORMAL,11,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Metalmorph,Lose [heart]1 hp[;] gain [shield]2 shield|[gray](Reusable),1,pierceattackself(1); inflictself(SHIELD[;]2); sfx(~_drain~); sfx(~_shield~[;]~~[;]0.4);,Steel Skin,COUNTDOWN,3,ORANGE,change_power,change_power,,,-1,YES,NO,,,,,,,,,,,,,
Metalmorph_upgraded,Lose [heart]1 hp[;] gain [shield]3 shield|[gray](Reusable),1,pierceattackself(1); inflictself(SHIELD[;]3); sfx(~_drain~); sfx(~_shield~[;]~~[;]0.4);,Steel Skin,COUNTDOWN,3,ORANGE,,,,,-1,YES,NO,,,,,,,,,,,,,
Metalmorph_downgraded,Lose [heart]1 hp[;] gain [shield]1 shield|[gray](Reusable),1,pierceattackself(1); inflictself(SHIELD[;]1); sfx(~_drain~); sfx(~_shield~[;]~~[;]0.4);,Steel Skin,COUNTDOWN,3,ORANGE,,,,,-1,YES,NO,,,,,,,,,,,,,
Shichishito,Deal [sword]7 damage,1,attack(7); sfxdamage(target[;]7);,Shuriken,MIN3|MIN3,,GREEN,change_requirements,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Shichishito_upgraded,Deal [sword]7 damage,1,attack(7); sfxdamage(target[;]7);,Shuriken,NORMAL|NORMAL,,GREEN,,,,none,0,NO,NO,,,,,,,,,,,,,
Shichishito_downgraded,Deal [sword]7 damage,1,attack(7); sfxdamage(target[;]7);,Shuriken,MIN3|MIN3,7,GREEN,,,,none,0,NO,NO,,,,,,,,,,,,,
Nanobots,Gain [shield]<d6> shield|Gain 1 more if at [shield]0 shield,1,if(getstatusself(SHIELD) == 0){ inflictself(SHIELD[;]d + 1); }else{ inflictself(SHIELD[;]d); }; sfx(~_shield~);,Coin Clippers,MAX3,,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Nanobots_upgraded,Gain [shield]<d6> shield|Gain double if at [shield]0 shield,1,if(getstatusself(SHIELD) == 0){ inflictself(SHIELD[;]d*2); }else{ inflictself(SHIELD[;]d); }; sfx(~_shield~);,Coin Clippers,MAX3,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Nanobots_downgraded,Gain [shield]<d6> shield,1,inflictself(SHIELD[;]d); sfx(~_shield~);,Coin Clippers,MAX3,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Thorium Hammer,Deal [shock]<d6> damage|Burn [fire]1 dice for each|damage over 5 this does,2,var h = target.hp; attack(d[;]SHOCK); sfx(~_shock~); h-=target.hp; sfxdamage(target[;]d); if(h > 5){ inflict(FIRE[;]h - 5); sfx(~_fire~); };,Ember,MAX5,,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Thorium Hammer_upgraded,Deal [shock]<d6> damage|Burn [fire]1 dice for each|damage over 4 this does,2,var h = target.hp; attack(d[;]SHOCK); sfx(~_shock~); h-=target.hp; sfxdamage(target[;]d); if(h > 4){ inflict(FIRE[;]h - 4); sfx(~_fire~); };,Ember,MAX5,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Thorium Hammer_downgraded,Deal [shock]<d6> damage,2,attack(d[;]SHOCK); sfx(~_shock~); sfxdamage(target[;]d);,Ember,MAX5,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Mirror Coating,Reflect [reduce]2 damage back|from each attack,1,inflictself(REDUCE[;]2); inflictself(THORNS[;]2); sfx(~_shield~); sfx(~_thorns~);,Regenerate,COUNTDOWN,14,ORANGE,change_power,change_power,reduce,,0,YES,NO,,1,,,,,,,,,,,
Mirror Coating_upgraded,Reflect [reduce]3 damage back|from each attack,1,inflictself(REDUCE[;]3); inflictself(THORNS[;]3); sfx(~_shield~); sfx(~_thorns~);,Regenerate,COUNTDOWN,14,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Mirror Coating_downgraded,Reflect [reduce]1 damage back|from each attack,1,inflictself(REDUCE[;]1); inflictself(THORNS[;]1); sfx(~_shield~); sfx(~_thorns~);,Regenerate,COUNTDOWN,14,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Mirror Coating?,Each attack heals [thorns]2 hp|and deals [weaken]2 more dmg,1,inflict(WEAKEN[;]2); inflictself(THORNS[;]2); sfx(~_weaken~); sfx(~_thorns~);,Pillow Fort,COUNTDOWN,14,ORANGE,change_power,change_power,,,0,YES,NO,alternateversion,1,,,,,,,,,,,
Mirror Coating?_upgraded,Each attack heals [thorns]3 hp|and deals [weaken]3 more dmg,1,inflict(WEAKEN[;]3); inflictself(THORNS[;]3); sfx(~_weaken~); sfx(~_thorns~);,Pillow Fort,COUNTDOWN,14,ORANGE,,,,,0,YES,NO,alternateversion,,,,,,,,,,,,
Mirror Coating?_downgraded,Each attack heals [thorns]1 hp|and deals [weaken]1 more dmg,1,inflict(WEAKEN[;]1); inflictself(THORNS[;]1); sfx(~_weaken~); sfx(~_thorns~);,Pillow Fort,COUNTDOWN,14,ORANGE,,,,,0,YES,NO,alternateversion,,,,,,,,,,,,
Pursuit,[sword]<d6> dmg[;] +[sword]3 if you|used Pursuit last turn too,1,attack(d); sfxdamage(target[;]d); self.setvar(~pursuit_next~[;]1); inflictself(~pursuitnext~);,Shuriken,MAX4,,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,self.setvar(~pursuit_next~[;]0);,,if(self.getvar(~pursuit_next~) == 1){ self.setvar(~pursuit~[;]1); inflictself(~pursuit~); e.changecolour(~YELLOW~); e.changeslots([~MAX4~[;]~FREE3~]); }else{ e.changecolour(~RED~); e.changeslots([~MAX4~]); };,self.setvar(~pursuit_next~[;]0);,,,,,,,
Pursuit_upgraded,[sword]<d6> dmg[;] +[sword]3 if you|used Pursuit last turn too,1,attack(d); sfxdamage(target[;]d); self.setvar(~pursuit_next~[;]1); inflictself(~pursuitnext~);,Shuriken,MAX5,,RED,,,,none,0,NO,NO,excludefromrandomlists,,self.setvar(~pursuit_next~[;]0);,,if(self.getvar(~pursuit_next~) == 1){ self.setvar(~pursuit~[;]1); inflictself(~pursuit~); e.changecolour(~YELLOW~); e.changeslots([~MAX5~[;]~FREE3~]); }else{ e.changecolour(~RED~); e.changeslots([~MAX5~]); };,self.setvar(~pursuit_next~[;]0);,,,,,,,
Pursuit_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d); self.setvar(~pursuit_next~[;]1); inflictself(~pursuitnext~);,Shuriken,MAX4,,RED,,,,none,0,NO,NO,excludefromrandomlists,,self.setvar(~pursuit_next~[;]0);,,if(self.getvar(~pursuit_next~) == 1){ self.setvar(~pursuit~[;]1); inflictself(~pursuit~); }else{ e.changecolour(~RED~); e.changeslots([~MAX4~]); };,self.setvar(~pursuit_next~[;]0);,,,,,,,
Binding Spell,Set an enemy dice|to <d6> next turn,1,inflict(~bound~+d); sfx(~_lock~); sfx(~_magic~);,Replicate,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Binding Spell_upgraded,Set an enemy dice to <d6>|,1,inflict(~bound~+d); sfx(~_lock~); sfx(~_magic~);,Replicate,NORMAL,,PINK,,,,,2,NO,NO,,,,,,,,,,,,,
Binding Spell_downgraded,Set an enemy dice|to <slotdoubles> next turn,1,inflict(~bound~+d); sfx(~_lock~); sfx(~_magic~);,Replicate,DOUBLES|DOUBLES,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Blinding Spell,Blind [blind]all enemy dice,1,inflict(BLIND[;]ALL); sfx(~_blind~);,Padlock,REQUIRE4,,GRAY,change_power,change_power,blind,,0,NO,NO,,1,,,,,,,,,,,
Blinding Spell_upgraded,Blind [blind]all enemy dice|Return this dice,1,inflict(BLIND[;]ALL); sfx(~_blind~); givedice(d);,Padlock,REQUIRE4,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Blinding Spell_downgraded,Blind [blind]all enemy dice,1,inflict(BLIND[;]ALL); sfx(~_blind~);,Padlock,REQUIRE4|REQUIRE4,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Blinding Spell?,Inflict [blind]4 turns of blind,1,inflict(BLIND[;]4); sfx(~_blind~);,Padlock,REQUIRE4,,GRAY,change_power,change_power,,,0,NO,NO,alternateversion,1,,,,,,,,,,,
Blinding Spell?_upgraded,Inflict [blind]4 turns of blind|Return this dice,1,inflict(BLIND[;]4); sfx(~_blind~); givedice(d);,Padlock,REQUIRE4,,GRAY,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,givedice(d);
Blinding Spell?_downgraded,Inflict [blind]4 turns of blind,1,inflict(BLIND[;]4); sfx(~_blind~);,Padlock,REQUIRE4|REQUIRE4,,GRAY,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Flashlight,Get 2 random extra|dice next turn,1,for(x in 0...2){ inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); }; sfx(~magic_gaindice~); inflictself(~lightstatus~[;]2); var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total); self.setvar(~doublestashcount~[;]total*2); self.setvar(~triplestashcount~[;]total*3); self.setvar(~quadruplestashcount~[;]total*4);,Magic Lantern,COUNTDOWN,7,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Flashlight_upgraded,Get 3 random extra|dice next turn,1,for(x in 0...3){ inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); }; sfx(~magic_gaindice~); inflictself(~lightstatus~[;]3); var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total); self.setvar(~doublestashcount~[;]total*2); self.setvar(~triplestashcount~[;]total*3); self.setvar(~quadruplestashcount~[;]total*4);,Magic Lantern,COUNTDOWN,7,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Flashlight_downgraded,Get 1 random extra|dice next turn,1,for(x in 0...1){ inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); }; sfx(~magic_gaindice~); inflictself(~lightstatus~[;]1); var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total); self.setvar(~doublestashcount~[;]total*2); self.setvar(~triplestashcount~[;]total*3); self.setvar(~quadruplestashcount~[;]total*4);,Magic Lantern,COUNTDOWN,7,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Radar,Get a copy of every|dice stashed for next turn|(currently: <var:stashcount> dice stashed),1,var newdice = []; for(x in 1...7){ var amount = getstatusself(~stash~+x); if(amount > 0){ for(i in 0...amount){ newdice.push(x); }; }; }; if(newdice.length > 0){ givedice(newdice); sfx(~openchest~); }else{ self.textparticle(~No effect!~); };,Magic Lantern,ODD,,RED,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,self.setvar(~stashcount~[;]0);,,var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total);,,,,,,
Radar_upgraded,Get a copy of every|dice stashed for next turn|(currently: <var:stashcount> dice stashed),1,var newdice = []; for(x in 1...7){ var amount = getstatusself(~stash~+x); if(amount > 0){ for(i in 0...amount){ newdice.push(x); }; }; }; if(newdice.length > 0){ givedice(newdice); sfx(~openchest~); }else{ self.textparticle(~No effect!~); };,Magic Lantern,NORMAL,,RED,,,,,0,YES,NO,excludefromrandomlists,,,,self.setvar(~stashcount~[;]0);,,var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total);,,,,,,
Radar_downgraded,Get a copy of every|dice stashed for next turn|(currently: <var:stashcount> dice stashed),1,var newdice = []; for(x in 1...7){ var amount = getstatusself(~stash~+x); if(amount > 0){ for(i in 0...amount){ newdice.push(x); }; }; }; if(newdice.length > 0){ givedice(newdice); sfx(~openchest~); }else{ self.textparticle(~No effect!~); };,Magic Lantern,REQUIRE3,,RED,,,,,0,YES,NO,excludefromrandomlists,,,,self.setvar(~stashcount~[;]0);,,var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total);,,,,,,
Chromatic Cutlass,Deal [sword]2 damage for each|different colour of item|you have equipped (<var:doubleitemcolour>),2,var amount = 2; var clist = []; var dmg = 0; for(eq in self.equipment){ if(eq.skillcard != ~~){ break; }; if(clist.indexOf(eq.equipmentcol) == -1){ clist.push(eq.equipmentcol); dmg +=amount; }; }; attack(dmg); sfxdamage(target[;]dmg);,Shuriken,ODD,,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,var amount = 2; var clist = []; var dmg = 0; for(eq in self.equipment){ if(eq.skillcard != ~~){ break; }; if(clist.indexOf(eq.equipmentcol) == -1){ clist.push(eq.equipmentcol); dmg +=amount; }; }; self.setvar(~doubleitemcolour~[;]dmg);,,var amount = 2; var clist = []; var dmg = 0; for(eq in self.equipment){ if(eq.skillcard != ~~){ break; }; if(clist.indexOf(eq.equipmentcol) == -1){ clist.push(eq.equipmentcol); dmg +=amount; }; }; self.setvar(~doubleitemcolour~[;]dmg);,,,,,,
Chromatic Cutlass_upgraded,Deal [sword]2 damage for each|different colour of item|you have equipped (<var:doubleitemcolour>),2,var amount = 2; var clist = []; var dmg = 0; for(eq in self.equipment){ if(eq.skillcard != ~~){ break; }; if(clist.indexOf(eq.equipmentcol) == -1){ clist.push(eq.equipmentcol); dmg +=amount; }; }; attack(dmg); sfxdamage(target[;]dmg);,Shuriken,ODD,,PINK,,,,none,0,NO,NO,excludefromrandomlists,,,,var amount = 2; var clist = []; var dmg = 0; for(eq in self.equipment){ if(eq.skillcard != ~~){ break; }; if(clist.indexOf(eq.equipmentcol) == -1){ clist.push(eq.equipmentcol); dmg +=amount; }; }; self.setvar(~doubleitemcolour~[;]dmg);,,var amount = 2; var clist = []; var dmg = 0; for(eq in self.equipment){ if(eq.skillcard != ~~){ break; }; if(clist.indexOf(eq.equipmentcol) == -1){ clist.push(eq.equipmentcol); dmg +=amount; }; }; self.setvar(~doubleitemcolour~[;]dmg);,,,,,,
Chromatic Cutlass_downgraded,Deal [sword]2 damage for each|different colour of item|you have equipped (<var:doubleitemcolour>),2,var amount = 1; var clist = []; var dmg = 0; for(eq in self.equipment){ if(eq.skillcard != ~~){ break; }; if(clist.indexOf(eq.equipmentcol) == -1){ clist.push(eq.equipmentcol); dmg +=amount; }; }; attack(dmg); sfxdamage(target[;]dmg);,Shuriken,ODD|ODD,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,var amount = 2; var clist = []; var dmg = 0; for(eq in self.equipment){ if(eq.skillcard != ~~){ break; }; if(clist.indexOf(eq.equipmentcol) == -1){ clist.push(eq.equipmentcol); dmg +=amount; }; }; self.setvar(~doubleitemcolour~[;]dmg);,,var amount = 2; var clist = []; var dmg = 0; for(eq in self.equipment){ if(eq.skillcard != ~~){ break; }; if(clist.indexOf(eq.equipmentcol) == -1){ clist.push(eq.equipmentcol); dmg +=amount; }; }; self.setvar(~doubleitemcolour~[;]dmg);,,,,,,
Lamppost,Deal [sword]<d6> damage. On 5[;]|get a free 6 next turn,2,attack(d); sfxdamage(target[;]d); if(d == 5){ inflictself(~stash6~); inflictself(~lamppost6~); sfx(~magic_gaindice~); };,Magic Lantern,MAX5,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 5){ inflictself(~stash6~); inflictself(~lamppost6~); sfx(~magic_gaindice~); };
Lamppost_upgraded,Deal [sword]<d6> damage. On odd[;]|get a free 6 next turn,2,attack(d); sfxdamage(target[;]d); if(d%2 == 1){ inflictself(~stash6~); inflictself(~lamppost6~); sfx(~magic_gaindice~); };,Magic Lantern,MAX5,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,if(d%2 == 1){ inflictself(~stash6~); inflictself(~lamppost6~); sfx(~magic_gaindice~); };
Lamppost_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Magic Lantern,MAX5,,YELLOW,,,,none,0,NO,NO,,,,,,,,,,,,,
Claymore,If you have at least|<d6> other dice[;] then|deal [sword]<double> damage,1,var total = 0; for(x in self.dicepool){ if(x.available()){ total+=1; }; }; if(total >= d){ attack(d*2); sfxdamage(target[;]d*2); }else{ target.textparticle(~No effect!~); };,Shuriken,NORMAL,,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Claymore_upgraded,If you have at least|<d6> other dice[;] then|deal [sword]<triple> damage,1,var total = 0; for(x in self.dicepool){ if(x.available()){ total+=1; }; }; if(total >= d){ attack(d*3); sfxdamage(target[;]d*3); }else{ target.textparticle(~No effect!~); };,Shuriken,NORMAL,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Claymore_downgraded,If you have at least|<d6> other dice[;] then|deal [sword]<d6> damage,1,var total = 0; for(x in self.dicepool){ if(x.available()){ total+=1; }; }; if(total >= d){ attack(d); sfxdamage(target[;]d); }else{ target.textparticle(~No effect!~); };,Shuriken,NORMAL,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Mitosis,Get 3 copies of a dice,1,givedice([d[;]d[;]d]);,Replicate,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Mitosis_upgraded,Get 4 copies of a dice,1,givedice([d[;]d[;]d[;]d]);,Replicate,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Mitosis_downgraded,Get 3 copies of a dice,1,givedice([d[;]d[;]d]);,Replicate,REQUIRE1|REQUIRE1,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Frozen Whip,Even: [fire]<evendice_d6> dmg[;] burn on 6|Odd: [ice]<odddice_d6> dmg[;] freeze on 5,2,if(d%2 == 0){ attack(d[;]FIRE); sfx(~_fire~); }else{ attack(d[;]ICE); sfx(~_ice~); }; if(d == 5){ inflict(ICE); }; if(d == 6){ inflict(FIRE); }; sfxdamage(target|d);,Ember,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Frozen Whip_upgraded,Even: [fire]<evendice_d6> dmg + [fire]1 burn|Odd: [ice]<odddice_d6> dmg + [ice]1 freeze,2,if(d%2 == 0){ attack(d[;]FIRE); sfx(~_fire~); inflict(FIRE); }else{ attack(d[;]ICE); sfx(~_ice~); inflict(ICE); }; sfxdamage(target|d);,Ember,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Frozen Whip_downgraded,Even: Deal [fire]<evendice_d6> damage|Odd: Deal [ice]<oddice_d6> damage,2,if(d%2 == 0){ attack(d[;]FIRE); sfx(~_fire~); }else{ attack(d[;]ICE); sfx(~_ice~); }; sfxdamage(target|d);,Ember,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Gunkblade,Deal [sword]<d6> damage. If the|enemy has no [poison]poison[;]|also inflict [poison]<d6> poison,2,attack(d); sfxdamage(target[;]d); if(getstatus(POISON) == 0){ inflict(POISON[;]d); sfx(~_poison~); };,Goop Gun,MAX4,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Gunkblade_upgraded,Deal [sword]<d6> damage. If the|enemy has no [poison]poison[;]|also inflict [poison]<d6> poison,2,attack(d); sfxdamage(target[;]d); if(getstatus(POISON) == 0){ inflict(POISON[;]d); sfx(~_poison~); };,Goop Gun,MAX5,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Gunkblade_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Goop Gun,MAX4,,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Overblaster,Deal [fire]2 damage|Return the dice[;] but burn it|[gray](Reusable),2,attack(2[;]FIRE); sfx(~_fire~); inflictself(FIRE); givedice(d); sfxdamage(target|2);,Ember,NORMAL,,RED,change_power,change_power,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,inflictself(FIRE); givedice(d);
Overblaster_upgraded,Deal [fire]3 damage|Return the dice[;] but burn it|[gray](Reusable),2,attack(3[;]FIRE); sfx(~_fire~); inflictself(FIRE); givedice(d); sfxdamage(target|3);,Ember,NORMAL,,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,inflictself(FIRE); givedice(d);
Overblaster_downgraded,Deal [fire]2 damage|Return the dice[;] but burn it,2,attack(2[;]FIRE); sfx(~_fire~); inflictself(FIRE); givedice(d); sfxdamage(target|2);,Ember,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,inflictself(FIRE); givedice(d);
Sapping Spores,Inflict [poison]<d6> poison.|After battle: lose [heart]2 max|HP to increase range by 1,2,inflict(POISON[;]d); sfx(~_poison~);,Goop Gun,MAX2,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,if(!flee){giveequipment(~Sapping Spores@1~| true| false| e); self.maxhp-=2; self.hp-=2; if(self.hp < 1){self.hp = 1;}; sfx(~_drain~);},,,,,,,,,
Sapping Spores_upgraded,Inflict [poison]<d6> poison.|After battle: lose [heart]2 max|HP to increase range by 1,2,inflict(POISON[;]d); sfx(~_poison~);,Goop Gun,MAX2|FREE1,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,if(!flee){giveequipment(~Sapping Spores@1_upgraded~| true| false| e); self.maxhp-=2; self.hp-=2; if(self.hp < 1){self.hp = 1;}; sfx(~_drain~);},,,,,,,,,
Sapping Spores_downgraded,Inflict [poison]<d6> poison,2,inflict(POISON[;]d); sfx(~_poison~);,Goop Gun,REQUIRE1,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sapping Spores@1,Inflict [poison]<d6> poison.|After battle: lose [heart]2 max|HP to increase range by 1,2,inflict(POISON[;]d); sfx(~_poison~);,Mutagen,MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,if(!flee){giveequipment(~Sapping Spores@2~| true| false| e); self.maxhp-=2; self.hp-=2; if(self.hp < 1){self.hp = 1;}; sfx(~_drain~);},,,,,,,,,
Sapping Spores@1_upgraded,Inflict [poison]<d6> poison.|After battle: lose [heart]2 max|HP to increase range by 1,2,inflict(POISON[;]d); sfx(~_poison~);,Mutagen,MAX3|FREE1,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,if(!flee){giveequipment(~Sapping Spores@2_upgraded~| true| false| e); self.maxhp-=2; self.hp-=2; if(self.hp < 1){self.hp = 1;}; sfx(~_drain~);},,,,,,,,,
Sapping Spores@1_downgraded,Inflict [poison]<d6> poison,2,inflict(POISON[;]d); sfx(~_poison~);,Mutagen,MAX2,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sapping Spores@2,Inflict [poison]<d6> poison.|After battle: lose [heart]2 max|HP to increase range by 1,2,inflict(POISON[;]d); sfx(~_poison~);,Mutagen Lv 2,MAX4,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,if(!flee){giveequipment(~Sapping Spores@3~| true| false| e); self.maxhp-=2; self.hp-=2; if(self.hp < 1){self.hp = 1;}; sfx(~_drain~);},,,,,,,,,
Sapping Spores@2_upgraded,Inflict [poison]<d6> poison.|After battle: lose [heart]2 max|HP to increase range by 1,2,inflict(POISON[;]d); sfx(~_poison~);,Mutagen Lv 2,MAX4|FREE1,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,if(!flee){giveequipment(~Sapping Spores@3_upgraded~| true| false| e); self.maxhp-=2; self.hp-=2; if(self.hp < 1){self.hp = 1;}; sfx(~_drain~);},,,,,,,,,
Sapping Spores@2_downgraded,Inflict [poison]<d6> poison,2,inflict(POISON[;]d); sfx(~_poison~);,Mutagen Lv 2,MAX3,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sapping Spores@3,Inflict [poison]<d6> poison.|After battle: lose [heart]2 max|HP to increase range by 1,2,inflict(POISON[;]d); sfx(~_poison~);,Mutagen Lv 3,MAX5,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,if(!flee){giveequipment(~Sapping Spores@4~| true| false| e); self.maxhp-=2; self.hp-=2; if(self.hp < 1){self.hp = 1;}; sfx(~_drain~);},,,,,,,,,
Sapping Spores@3_upgraded,Inflict [poison]<d6> poison.|After battle: lose [heart]2 max|HP to increase range by 1,2,inflict(POISON[;]d); sfx(~_poison~);,Mutagen Lv 3,MAX5|FREE1,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,if(!flee){giveequipment(~Sapping Spores@4_upgraded~| true| false| e); self.maxhp-=2; self.hp-=2; if(self.hp < 1){self.hp = 1;}; sfx(~_drain~);},,,,,,,,,
Sapping Spores@3_downgraded,Inflict [poison]<d6> poison,2,inflict(POISON[;]d); sfx(~_poison~);,Mutagen Lv 3,MAX4,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sapping Spores@4,Inflict [poison]<d6> poison|(Max level!),2,inflict(POISON[;]d); sfx(~_poison~);,Mutagen Lv 4,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sapping Spores@4_upgraded,Inflict [poison]<d6> poison|(Max level!),2,inflict(POISON[;]d); sfx(~_poison~);,Mutagen Lv 4,NORMAL|FREE1,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sapping Spores@4_downgraded,Inflict [poison]<d6> poison|(Max level!),2,inflict(POISON[;]d); sfx(~_poison~);,Mutagen Lv 4,MAX5,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Heat Vent,Reduce CPU counter by 2|,1,if(!simulation){if(self.usecpuinsteadofdice){adjustrobotcounter(-2); sfx(~_ice~[;]~~[;]0.05); /*make the ice sound effect when it gets reduced*/};}else{bonus(-10000);};,Accelerate,DOUBLES|DOUBLES,,BRIGHTCYAN,change_power,change_power,,,-1,YES,NO,robotonly,,,,,,,,,,,,
Heat Vent_upgraded,Reduce CPU counter by <d6>|,1,if(!simulation){if(self.usecpuinsteadofdice){adjustrobotcounter(-d); sfx(~_ice~[;]~~[;]d/40); /*make the ice sound effect when it gets reduced*/};}else{bonus(-10000);};,Accelerate,DOUBLES|DOUBLES,,BRIGHTCYAN,,,,,-1,YES,NO,robotonly,,,,,,,,,,,,
Heat Vent_downgraded,Reduce CPU counter by 1|,1,if(!simulation){if(self.usecpuinsteadofdice){adjustrobotcounter(-1); sfx(~_ice~[;]~~[;]0.025);};}else{bonus(-10000);};,Accelerate,DOUBLES|DOUBLES,,BRIGHTCYAN,,,,,-1,YES,NO,robotonly,,,,,,,,,,,,
Bottleneck,Lose [heart]health equal to half|your CPU counter (<var:halfcpucounter>)|Set CPU counter to 0,1,if(!simulation){if(self.usecpuinsteadofdice){pierceattackself(self.getvar(~halfcpucounter~)); adjustrobotcounter(-self.roll_total); sfx(~_drain~);};}else{bonus(-10000);};,Accelerate,ODD,,RED,change_power,change_power,,,0,YES,NO,robotonly,,,,self.setvar(~halfcpucounter~[;]0);,,if(self.roll_total % 2 == 0){ self.setvar(~halfcpucounter~[;]self.roll_total/2); }else{ self.setvar(~halfcpucounter~[;](self.roll_total-1)/2); };,,,,,,
Bottleneck_upgraded,Lose [heart]health equal to half|your CPU counter (<var:halfcpucounter>)|Set CPU counter to 0,1,if(!simulation){if(self.usecpuinsteadofdice){pierceattackself(self.getvar(~halfcpucounter~)); adjustrobotcounter(-self.roll_total); sfx(~_drain~);};}else{bonus(-10000);};,Accelerate,NORMAL,,RED,,,,,0,YES,NO,robotonly,,,,self.setvar(~halfcpucounter~[;]0);,,if(self.roll_total % 2 == 0){ self.setvar(~halfcpucounter~[;]self.roll_total/2); }else{ self.setvar(~halfcpucounter~[;](self.roll_total-1)/2); };,,,,,,
Bottleneck_downgraded,Lose [heart]health equal to half|your CPU counter (<var:halfcpucounter>)|Reduce CPU counter by half,1,if(!simulation){if(self.usecpuinsteadofdice){pierceattackself(self.getvar(~halfcpucounter~)); adjustrobotcounter(-self.getvar(~halfcpucounter~)); sfx(~_drain~);};}else{bonus(-10000);};,Accelerate,ODD,,RED,,,,,0,YES,NO,robotonly,,,,self.setvar(~halfcpucounter~[;]0);,,if(self.roll_total % 2 == 0){ self.setvar(~halfcpucounter~[;]self.roll_total/2); }else{ self.setvar(~halfcpucounter~[;](self.roll_total-1)/2); };,,,,,,
Shifting Sword,Deal [sword]<d6> damage|Gains a random|effect each turn,2,attack(d); sfxdamage(target[;]d); var stats = [FIRE[;]ICE[;]SHOCK[;]WEAKEN]; for(x in [1]){ var stat = e.getvar(~status~+x); if(stat == 7){attackself(3); sfxdamage(self|3);}else if(stat == 5){ attackself(-2); sfx(~_heal~[;]~~[;]0.2); }else if(stat == 6){ inflictself(SHIELD[;]2); sfx(~_shield~[;]~~[;]0.2); }else if(stat == 4){ inflict(POISON[;]2); sfx(~_poison~[;]~~[;]0.2); }else{ inflict(stats[stat]); sfx(~_~ + stats[stat].toLowerCase()[;]~~[;]0.2); }; };,Catapult,MAX5,,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,e.fulldescription = ~Deal [sword]<d6> damage[newline]Gains a random[newline]effect each turn~; e.setvar(~status1~[;]0); e.equipmentcol = 0;,var descs = [~Inflict [fire]1 burn~[;]~Inflict [ice]1 freeze~[;]~Inflict [shock]1 shock~[;]~Inflict [weaken]1 weaken~[;]~Inflict [poison]2 poison~[;]~Restore [heal]2 health~[;]~Gain [shield]2 shield~[;]~Take [sword]3 damage~]; var r = rand([0[;]1[;]2[;]3[;]4[;]5[;]6[;]7]); var cols = [2[;]1[;]4[;]9[;]5[;]3[;]9[;]0]; e.fulldescription = ~Deal [sword]<d6> damage[newline]~+descs[r]; e.setvar(~status1~[;]r); e.equipmentcol = cols[r];,,,,e.fulldescription = ~Deal [sword]<d6> damage[newline]Gains a random[newline]effect each turn~; e.setvar(~status1~[;]0); e.equipmentcol = 0;,,,,
Shifting Sword_upgraded,Deal [sword]<d6> damage|Gains 2 random|effects each turn,2,attack(d); sfxdamage(target[;]d); var stats = [FIRE[;]ICE[;]SHOCK[;]WEAKEN]; for(x in [1[;]2]){ var stat = e.getvar(~status~+x); if(stat == 7){attackself(3); sfxdamage(self|3);}else if(stat == 5){ attackself(-2); sfx(~_heal~[;]~~[;]0.2*x); }else if(stat == 6){ inflictself(SHIELD[;]2); sfx(~_shield~[;]~~[;]0.2*x); }else if(stat == 4){ inflict(POISON[;]2); sfx(~_poison~[;]~~[;]0.2*x); }else{ inflict(stats[stat]); sfx(~_~ + stats[stat].toLowerCase()[;]~~[;]0.2*x); }; };,Catapult,MAX5,,GRAY,,,,,0,NO,NO,excludefromrandomlists,,,e.fulldescription = ~Deal [sword]<d6> damage[newline]Gains 2 random[newline]effects each turn~; e.setvar(~status1~[;]~~); e.setvar(~status2~[;]~~); e.equipmentcol = 0;,var descs = [~Inflict [fire]1 burn~[;]~Inflict [ice]1 freeze~[;]~Inflict [shock]1 shock~[;]~Inflict [weaken]1 weaken~[;]~Inflict [poison]2 poison~[;]~Restore [heal]2 health~[;]~Gain [shield]2 shield~[;]~Take [sword]3 damage~]; var r = rand([0[;]1[;]2[;]3[;]4[;]5[;]6[;]7]); var r2 = r; while(r2 == r){r2=rand([0[;]1[;]2[;]3[;]4[;]5[;]6[;]7]);}; var cols = [2[;]1[;]4[;]9[;]5[;]3[;]9[;]0]; e.fulldescription = ~Deal [sword]<d6> damage[newline]~+descs[r]+~[newline]~+descs[r2]; e.setvar(~status1~[;]r); e.setvar(~status2~[;]r2); e.equipmentcol = cols[r];,,,,e.fulldescription = ~Deal [sword]<d6> damage[newline]Gains 2 random[newline]effects each turn~; e.setvar(~status1~[;]~~); e.setvar(~status2~[;]~~); e.equipmentcol = 0;,,,,
Shifting Sword_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Catapult,MAX5,,GRAY,,,,none,0,NO,NO,excludefromrandomlists,,,e.fulldescription = ~Deal [sword]<d6> damage[newline]Gains a random[newline]effect each turn~; e.setvar(~status1~[;]0); e.equipmentcol = 0;,,,,,e.fulldescription = ~Deal [sword]<d6> damage[newline]Gains a random[newline]effect each turn~; e.setvar(~status1~[;]0); e.equipmentcol = 0;,,,,
Blessed Bat of Bashing,[sword]<d6> dmg. At the end of|your turn[;] heal [heal]2 hp,1,attack(d); sfxdamage(target[;]d);,Revitalize,MAX4,,YELLOW,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,,,,e.animate(~flashandshake~); attackself(-2); sfx(~_heal~);,,,,
Blessed Bat of Bashing_upgraded,[sword]<d6> dmg. At the end of|your turn[;] heal [heal]2 hp,1,attack(d); sfxdamage(target[;]d);,Revitalize,NORMAL,,YELLOW,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,e.animate(~flashandshake~); attackself(-2); sfx(~_heal~);,,,,
Blessed Bat of Bashing_downgraded,[sword]1 dmg. At the end of|your turn[;] heal [heal]2 hp,1,attack(1); sfxdamage(target[;]d);,Revitalize,MAX4,,YELLOW,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,e.animate(~flashandshake~); attackself(-2); sfx(~_heal~);,,,,
Firey Firesword of Fire,Deal [fire]<double> damage|While equipped[;] [fire]ALL of|your dice are burning,2,attack(d*2[;]FIRE); sfx(~_fire~); sfxdamage(target|d*2);,Ember,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,inflictself(FIRE[;]ALL); sfx(~_fire~);,,,,,,,,
Firey Firesword of Fire_upgraded,Deal [fire]<double> damage|While equipped[;] [fire]ALL of|your dice are burning,2,attack(d*2[;]FIRE); sfx(~_fire~); sfxdamage(target|d*2);,Ember,NORMAL|FREE1,,RED,,,,,0,NO,NO,,,,,inflictself(FIRE[;]ALL); sfx(~_fire~);,,,,,,,,
Firey Firesword of Fire_downgraded,Deal [fire]<double> damage|While equipped[;] [fire]ALL of|your dice are burning,2,attack(d*2[;]FIRE); sfx(~_fire~); sfxdamage(target|d*2);,Ember,MAX3,,RED,,,,,0,NO,NO,,,,,inflictself(FIRE[;]ALL); sfx(~_fire~);,,,,,,,,
Soul Stealer,Drain [heart]<d6> health|Does up to double damage|the lower health you are,2,var x = (1 * (1-(self.hp / self.maxhp)))+1; drain(d*x); sfx(~_drain~); sfx(~_cure~);,Life Leech,MAX3,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Soul Stealer_upgraded,Drain [heart]<d6> health|Does up to triple damage|the lower health you are,2,var x = (2 * (1-(self.hp / self.maxhp)))+1; drain(d*x); sfx(~_drain~); sfx(~_cure~);,Life Leech,MAX3,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Soul Stealer_downgraded,Drain [heart]<d6> health,2,drain(d); sfx(~_drain~); sfx(~_cure~);,Life Leech,MAX3,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Permafrost,[ice]<double> damage. Next turn[;]|you receive [ice]<d6> freeze,2,attack(d*2[;]ICE); inflictself(~mf_freezenextturn~|d); sfx(~_ice~); sfxdamage(target|d*2);,Arctic Storm,MAX5,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,jinx(~Permafrost~[;]~receive [ice]%VAR% freeze~[;]~Receive [ice]%VAR% freeze~[;]~inflict(ICE[;]%VAR%); sfx(\~_ice\~);~[;]self[;]self[;]1[;]d); sfx(~_thinghappens~);
Permafrost_upgraded,[ice]<double> damage. Next turn[;]|you receive [ice]<d6> freeze,2,attack(d*2[;]ICE); inflictself(~mf_freezenextturn~|d); sfx(~_ice~); sfxdamage(target|d*2);,Arctic Storm,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,jinx(~Permafrost~[;]~receive [ice]%VAR% freeze~[;]~Receive [ice]%VAR% freeze~[;]~inflict(ICE[;]%VAR%); sfx(\~_ice\~);~[;]self[;]self[;]1[;]d); sfx(~_thinghappens~);
Permafrost_downgraded,[ice]<d6> damage. Next turn[;]|you receive [ice]<d6> freeze,2,attack(d[;]ICE); inflictself(~mf_freezenextturn~|d); sfx(~_ice~); sfxdamage(target|d*2);,Arctic Storm,MAX5,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,jinx(~Permafrost~[;]~receive [ice]%VAR% freeze~[;]~Receive [ice]%VAR% freeze~[;]~inflict(ICE[;]%VAR%); sfx(\~_ice\~);~[;]self[;]self[;]1[;]d); sfx(~_thinghappens~);
Xiphos,[sword]<d6>[;] enemy gets [thorns]1|,1,attack(d); sfxdamage(target[;]d); inflict(THORNS); sfx(~_thorns~[;]~~[;]0.2);,Bubble Gun,MAX3|FREE2,,RED,change_power,change_power,,none,-1,NO,NO,,,,,,,,,,,,,inflict(THORNS); sfx(~_thorns~);
Xiphos_upgraded,[sword]<d6>[;] enemy gets [thorns]1|,1,attack(d); sfxdamage(target[;]d); inflict(THORNS); sfx(~_thorns~[;]~~[;]0.2);,Bubble Gun,MAX3|FREE3,,RED,,,,none,-1,NO,NO,,,,,,,,,,,,,inflict(THORNS); sfx(~_thorns~);
Xiphos_downgraded,[sword]<d6>[;] enemy gets [thorns]1|,1,attack(d); sfxdamage(target[;]d); inflict(THORNS); sfx(~_thorns~[;]~~[;]0.2);,Bubble Gun,MAX3,,RED,,,,none,-1,NO,NO,,,,,,,,,,,,,inflict(THORNS); sfx(~_thorns~);
Spiked Sword,Deal [sword]<d6> damage|Gain [thorns]1 thorns,2,attack(d); sfxdamage(target[;]d); inflictself(THORNS); sfx(~_thorns~);,Pinprick,MAX4,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(THORNS); sfx(~_thorns~);
Spiked Sword_upgraded,Deal [sword]<d6> damage|Gain half of [thorns]<d6> thorns,2,attack(d); sfxdamage(target[;]d); inflictself(THORNS[;]d/2); sfx(~_thorns~);,Pinprick,MAX4,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(THORNS|d/2); sfx(~_thorns~);
Spiked Sword_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Pinprick,MAX4,,GREEN,,,,none,0,NO,NO,,,,,,,,,,,,,
Ferrosynthesis,Gain [shield]1 per [heart]3 missing|health you have ([shield]<var:thirdhealthcount>[]),2,inflictself(SHIELD[;]self.getvar(~thirdhealthcount~)); sfx(~_shield~);,Barricade,COUNTDOWN,12,ORANGE,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,self.setvar(~fifthhealthcount~[;]0); self.setvar(~thirdhealthcount~[;]0); self.setvar(~halfhealthcount~[;]0);,,self.setvar(~fifthhealthcount~[;](self.maxhp - self.hp - (self.maxhp - self.hp)%5)/5); self.setvar(~thirdhealthcount~[;](self.maxhp - self.hp - (self.maxhp - self.hp)%3)/3); self.setvar(~halfhealthcount~[;](self.maxhp - self.hp - (self.maxhp - self.hp)%2)/2);,,self.setvar(~fifthhealthcount~[;](self.maxhp - self.hp - (self.maxhp - self.hp)%5)/5); self.setvar(~thirdhealthcount~[;](self.maxhp - self.hp - (self.maxhp - self.hp)%3)/3); self.setvar(~halfhealthcount~[;](self.maxhp - self.hp - (self.maxhp - self.hp)%2)/2);,,,,,,
Ferrosynthesis_upgraded,Gain [shield]1 per [heart]2 missing|health you have ([shield]<var:halfhealthcount>[]),2,inflictself(SHIELD[;]self.getvar(~halfhealthcount~)); sfx(~_shield~);,Barricade,COUNTDOWN,12,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,self.setvar(~fifthhealthcount~[;]0); self.setvar(~thirdhealthcount~[;]0); self.setvar(~halfhealthcount~[;]0);,,self.setvar(~fifthhealthcount~[;](self.maxhp - self.hp - (self.maxhp - self.hp)%5)/5); self.setvar(~thirdhealthcount~[;](self.maxhp - self.hp - (self.maxhp - self.hp)%3)/3); self.setvar(~halfhealthcount~[;](self.maxhp - self.hp - (self.maxhp - self.hp)%2)/2);,,self.setvar(~fifthhealthcount~[;](self.maxhp - self.hp - (self.maxhp - self.hp)%5)/5); self.setvar(~thirdhealthcount~[;](self.maxhp - self.hp - (self.maxhp - self.hp)%3)/3); self.setvar(~halfhealthcount~[;](self.maxhp - self.hp - (self.maxhp - self.hp)%2)/2);,,,,,,
Ferrosynthesis_downgraded,Gain [shield]1 per [heart]5 missing|health you have ([shield]<var:fifthhealthcount>[]),2,inflictself(SHIELD[;]self.getvar(~fifthhealthcount~)); sfx(~_shield~);,Barricade,COUNTDOWN,12,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,self.setvar(~fifthhealthcount~[;]0); self.setvar(~thirdhealthcount~[;]0); self.setvar(~halfhealthcount~[;]0);,,self.setvar(~fifthhealthcount~[;](self.maxhp - self.hp - (self.maxhp - self.hp)%5)/5); self.setvar(~thirdhealthcount~[;](self.maxhp - self.hp - (self.maxhp - self.hp)%3)/3); self.setvar(~halfhealthcount~[;](self.maxhp - self.hp - (self.maxhp - self.hp)%2)/2);,,self.setvar(~fifthhealthcount~[;](self.maxhp - self.hp - (self.maxhp - self.hp)%5)/5); self.setvar(~thirdhealthcount~[;](self.maxhp - self.hp - (self.maxhp - self.hp)%3)/3); self.setvar(~halfhealthcount~[;](self.maxhp - self.hp - (self.maxhp - self.hp)%2)/2);,,,,,,
Ratula,Flip a dice upside down|Inflict [poison]poison equal|to the new value,2,givedice(7-d); inflict(POISON[;]7-d); sfx(~_poison~);,Goop Gun,MIN4,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice(7-d);
Ratula_upgraded,Flip a dice upside down|Inflict [poison]poison equal|to the new value,2,givedice(7-d); inflict(POISON[;]7-d); sfx(~_poison~);,Goop Gun,MIN3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,givedice(7-d);
Ratula_downgraded,Flip a dice upside down|Inflict [poison]1 poison,2,givedice(7-d); inflict(POISON[;]1); sfx(~_poison~);,Goop Gun,MIN4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,givedice(7-d);
Splat,Deal [sword]3 damage|Get a new dice,1,attack(3); sfxdamage(target[;]3); givedice();,Magic Dice,COUNTDOWN,7,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice();
Splat_upgraded,Deal [sword]3 damage|Get a high dice (4-6),1,attack(3); sfxdamage(target[;]3); givedice(rand([4[;]5[;]6]));,Magic Dice,COUNTDOWN,7,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice(rand([4|5|6]));
Splat_downgraded,Deal [sword]3 damage,1,attack(3); sfxdamage(target[;]3);,Magic Dice,COUNTDOWN,7,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
King Rat,Inflict [poison]10 poison,1,inflict(POISON[;]10); sfx(~_poison~);,Goop Gun,COUNTDOWN,30,PURPLE,change_poison,change_power,,,0,NO,NO,,,,,,,,,,,,,
King Rat_upgraded,Inflict [poison]13 poison,1,inflict(POISON[;]13); sfx(~_poison~);,Goop Gun,COUNTDOWN,30,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
King Rat_downgraded,Inflict [poison]5 poison,1,inflict(POISON[;]5); sfx(~_poison~);,Goop Gun,COUNTDOWN,30,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Doppelice,Double the enemy's|[ice]freeze,1,inflict(ICE[;]getstatus(ICE)); sfx(~_ice~);,Refrigerator,COUNTDOWN,6,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Doppelice_upgraded,Triple the enemy's|[ice]freeze,1,inflict(ICE[;]getstatus(ICE)*2); sfx(~_ice~);,Refrigerator,COUNTDOWN,6,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Doppelice_downgraded,Freeze [ice]1 dice,1,inflict(ICE[;]1); sfx(~_ice~);,Refrigerator,COUNTDOWN,6,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Magic Mirror,[]+1 dice this fight,1,self.extradice++; sfx(~magic_gaindice~);,Infinity Mirror,COUNTDOWN,9,PURPLE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Magic Mirror_upgraded,[]+1 dice this fight[;] get an|extra dice this turn,1,self.extradice++; sfx(~magic_gaindice~); givedice();,Infinity Mirror,COUNTDOWN,9,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Magic Mirror_downgraded,[]+1 dice this turn,1,givedice(); sfx(~magic_gaindice~);,Infinity Mirror,COUNTDOWN,9,PURPLE,,,,none,0,YES,NO,,,,,,,,,,,,,
Magic Armor,Reduce [reduce]1 damage|from each attack,1,inflictself(REDUCE); sfx(~_shield~);,Protection,COUNTDOWN,3,ORANGE,change_power,change_power,reduce,,0,YES,NO,,1,,,,,,,,,,,
Magic Armor_upgraded,Reduce dmg taken by [reduce]1|,1,inflictself(REDUCE); sfx(~_shield~);,Protection,COUNTDOWN,3,ORANGE,,,,,2,YES,NO,,,,,,,,,,,,,
Magic Armor_downgraded,No effect,1,,Protection,COUNTDOWN,3,ORANGE,,,,none,0,YES,NO,,,,,,,,,,,,,
Magic Armor?,Block [reduce]1 status effect,1,inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,COUNTDOWN,3,ORANGE,change_power,change_power,,,0,YES,NO,alternateversion,1,,,,,,,,,,,
Magic Armor?_upgraded,Block [reduce]1 status effect|,1,inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,COUNTDOWN,3,ORANGE,,,,,2,YES,NO,alternateversion,,,,,,,,,,,,
Magic Armor?_downgraded,No effect,1,,Pillow Fort,COUNTDOWN,3,ORANGE,,,,none,0,YES,NO,alternateversion,,,,,,,,,,,,
Magic Spatula,Flip all your dice|upside down,1,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll((7-mydice.basevalue)[;] self.screenposition()[;] c * 0.05); c++; }; }; sfx(~_thinghappens~);,Megaflip,EVEN,,PINK,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Magic Spatula_upgraded,Flip all your dice|upside down,1,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll((7-mydice.basevalue)[;] self.screenposition()[;] c * 0.05); c++; }; }; sfx(~_thinghappens~);,Megaflip,NORMAL,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Magic Spatula_downgraded,Flip all your dice|upside down,1,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll((7-mydice.basevalue)[;] self.screenposition()[;] c * 0.05); c++; }; }; sfx(~_thinghappens~);,Megaflip,REQUIRE2,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Magic Sneeze,Split all your dice in two|(doesn't split ones),1,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } for(mydice in dicelist) { if(mydice.basevalue > 1){ mydice.removedice(self.screenposition()); givedice(split(mydice.basevalue)); }; };,Megaflip,COUNTDOWN,4,PURPLE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Magic Sneeze_upgraded,Split all your dice evenly in 2|(still doesn't split ones),1,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } for(mydice in dicelist) { d = mydice.basevalue; if(d > 1){ mydice.removedice(self.screenposition()); givedice([(d+1)/2[;]d/2]); }; };,Megaflip,COUNTDOWN,4,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Magic Sneeze_downgraded,Split a random dice in two|(also doesn't split ones),1,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue > 1){ dicelist.push(mydice); } } var randdice = rand(dicelist); randdice.removedice(self.screenposition()); givedice(split(randdice.basevalue)); };,Megaflip,COUNTDOWN,4,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Crowpick,Split a dice in two|Reduce all countdowns|by the lower number,1,var s = split(d); if(s[0] > s[1]){ boostcountdowns(s[1]); }else{ boostcountdowns(s[0]); }; givedice(s);,Megaflip,MIN2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Crowpick_upgraded,Split a dice in two|Reduce all countdowns|by the higher number,1,var s = split(d); if(s[0] > s[1]){ boostcountdowns(s[0]); }else{ boostcountdowns(s[1]); }; givedice(s);,Megaflip,MIN2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Crowpick_downgraded,Split a dice in two,1,givedice(split(d));,Megaflip,MIN2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Twotool,Split a dice in two|Reduce countdowns by 2,2,givedice(split(d)); boostcountdowns(2);,Magic Lockpick,MIN2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Twotool_upgraded,Split a dice in two|Reduce countdowns by 2|,2,givedice(split(d)); boostcountdowns(2);,Magic Lockpick,MIN2,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Twotool_downgraded,Reduce countdowns by 2,2,boostcountdowns(2);,Magic Lockpick,MIN2,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Spiked Hilt,Deal [sword]<d6> damage|On 1[;] gain [thorns]<d6> thorns,2,attack(d); sfxdamage(target[;]d); if(d == 1){ inflictself(THORNS[;]d); sfx(~_thorns~); };,Pinprick,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 1){ inflictself(THORNS[;]d); sfx(~_thorns~); };
Spiked Hilt_upgraded,Deal [sword]<d6> damage. On 1|or 2[;] gain [thorns]<d6> thorns,2,attack(d); sfxdamage(target[;]d); if(d <= 2){ inflictself(THORNS[;]d); sfx(~_thorns~); };,Pinprick,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 1 # d == 2){ inflictself(THORNS[;]d); sfx(~_thorns~); };
Spiked Hilt_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Pinprick,NORMAL,,GREEN,,,,none,0,NO,NO,,,,,,,,,,,,,
Caltrops,Gain [thorns]1 thorns for every|[shield]3 shield you have,1,inflictself(THORNS[;]getstatusself(SHIELD)/3); sfx(~_thorns~);,Pinprick,COUNTDOWN,10,ORANGE,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Caltrops_upgraded,Gain [thorns]1 thorns for every|[shield]2 shield you have,1,inflictself(THORNS[;]getstatusself(SHIELD)/2); sfx(~_thorns~);,Pinprick,COUNTDOWN,10,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Caltrops_downgraded,Gain [thorns]1 thorns for every|[shield]10 shield you have,1,inflictself(THORNS[;]getstatusself(SHIELD)/10); sfx(~_thorns~);,Pinprick,COUNTDOWN,10,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Fourns,Gain [thorns]4 thorns,2,inflictself(THORNS[;]4); sfx(~_thorns~);,Pinprick,REQUIRE4,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Fourns_upgraded,Gain [thorns]4 thorns|[gray](4 uses this turn),2,inflictself(THORNS[;]4); sfx(~_thorns~);,Pinprick,REQUIRE4,,GREEN,,,,,4,YES,NO,,,,,,,,,,,,,
Fourns_downgraded,Gain [thorns]4 thorns,2,inflictself(THORNS[;]4); sfx(~_thorns~);,Pinprick,REQUIRE4|REQUIRE4|REQUIRE4|REQUIRE4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Bramble,Gain [thorns]<d6> thorns,1,inflictself(THORNS[;]d); sfx(~_thorns~);,Pinprick,MAX2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Bramble_upgraded,Gain [thorns]<d6> thorns,1,inflictself(THORNS[;]d); sfx(~_thorns~);,Pinprick,MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Bramble_downgraded,Gain [thorns]<d6> thorns,1,inflictself(THORNS[;]d); sfx(~_thorns~);,Pinprick,REQUIRE1,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Quadrahedron,1: [reduce]1 reduce; 2: [thorns]2 thorns|3: [heal]3 heal; 4: [shield]4 shield,1,var v = actualdice[0].basevalue; if(v == 1){ inflictself(REDUCE[;]d); sfx(~_shield~); }else if(v == 2){ inflictself(THORNS[;]d); sfx(~_thorns~); }else if(v == 3){ attackself(-d); sfx(~_heal~); }else if(v == 4){ inflictself(SHIELD[;]4); sfx(~_shield~); };,Regenerate,MAX4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Quadrahedron_upgraded,1: [reduce]2 reduce; 2: [thorns]3 thorns|3: [heal]4 heal; 4: [shield]5 shield,1,var v = actualdice[0].basevalue; if(v == 1){ inflictself(REDUCE[;]d); sfx(~_shield~); }else if(v == 2){ inflictself(THORNS[;]d); sfx(~_thorns~); }else if(v == 3){ attackself(-d); sfx(~_heal~); }else if(v == 4){ inflictself(SHIELD[;]4); sfx(~_shield~); };,Regenerate,MAX4,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Quadrahedron_downgraded,1: [reduce]1 reduce; 2: [thorns]1 thorns|3: [heal]1 heal; 4: [shield]1 shield,1,var v = actualdice[0].basevalue; if(v == 1){ inflictself(REDUCE); sfx(~_shield~); }else if(v == 2){ inflictself(THORNS); sfx(~_thorns~); }else if(v == 3){ attackself(-1); sfx(~_heal~); }else if(v == 4){ inflictself(SHIELD); sfx(~_shield~); };,Regenerate,MAX4,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Thistle Tea,Restore [heal]4 health|Gain [thorns]2 thorns,1,attackself(-4); inflictself(THORNS[;]2); sfx(~_heal~[;]~~[;]0.2); sfx(~_thorns~);,Regenerate,COUNTDOWN,12,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Thistle Tea_upgraded,Restore [heal]5 health|Gain [thorns]3 thorns,1,attackself(-5); inflictself(THORNS[;]3); sfx(~_heal~[;]~~[;]0.2); sfx(~_thorns~);,Regenerate,COUNTDOWN,12,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Thistle Tea_downgraded,Restore [heal]2 health|Gain [thorns]1 thorns,1,attackself(-2); inflictself(THORNS[;]1); sfx(~_heal~[;]~~[;]0.2); sfx(~_thorns~);,Regenerate,COUNTDOWN,12,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Combat Promotion,1-3: Dice value +3|4-6: Dice value - 3|[gray](2 uses this turn),2,if(d>3){ givedice(d-3); } else { givedice(d+3); }; ,Magic Dice,NORMAL,,GRAY,change_power,change_power,,,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Combat Promotion_upgraded,1-3: Dice value +3|4-6: Dice value - 3|[gray](2 uses this turn),2,if(d>3){ givedice(d-3); } else { givedice(d+3); };,Magic Dice,NORMAL,,GRAY,,,,,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Combat Promotion_downgraded,1-3: Dice value +3|4-6: Dice value - 3|[gray](2 uses this turn),2,if(d>3){ givedice(d-3); } else { givedice(d+3); }; ,Magic Dice,NORMAL,,GRAY,,,,,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Partisan,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX3|MIN4,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Partisan_upgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX4|MIN3,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Partisan_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX2|MIN5,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Shrapnel,Roll two [fire]burning[] dice|[gray](Reusable),1,var amount = 2; var dicearray = []; for(x in 0...amount){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray); for(x in 0...amount){ var anim = ~fire~; if(runscript(~morefluff/isalt~|[~shock~])){anim = ~alternate_fire~;}; self.dicepool[self.dicepool.length-(amount-x)].animate(anim[;](x*1.0)/5+0.5); };,Snake Eyes,COUNTDOWN,8,RED,change_power,change_power,,,-1,YES,NO,,1,,,,,,,,,,,
Shrapnel_upgraded,Roll three [fire]burning[] dice|[gray](Reusable),1,var amount = 3; var dicearray = []; for(x in 0...amount){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray); for(x in 0...amount){ var anim = ~fire~; if(runscript(~morefluff/isalt~|[~shock~])){anim = ~alternate_fire~;}; self.dicepool[self.dicepool.length-(amount-x)].animate(anim[;](x*1.0)/5+0.5); };,Snake Eyes,COUNTDOWN,8,RED,,,,,-1,YES,NO,,,,,,,,,,,,,
Shrapnel_downgraded,Roll a [fire]burning[] dice|[gray](Reusable),1,var amount = 1; var dicearray = []; for(x in 0...amount){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray); for(x in 0...amount){ var anim = ~fire~; if(runscript(~morefluff/isalt~|[~shock~])){anim = ~alternate_fire~;}; self.dicepool[self.dicepool.length-(amount-x)].animate(anim[;](x*1.0)/5+0.5); };,Snake Eyes,COUNTDOWN,8,RED,,,,,-1,YES,NO,,,,,,,,,,,,,
Boulder,Deal [sword]20 damage|Countdown is reduced by|3 whenever you use an item,2,attack(20); sfxdamage(target[;]20);,Catapult,COUNTDOWN,40,ORANGE,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Boulder_upgraded,Deal [sword]20 damage|Countdown is reduced by|5 whenever you use an item,2,attack(20); sfxdamage(target[;]20);,Catapult,COUNTDOWN,40,ORANGE,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Boulder_downgraded,Deal [sword]20 damage|,2,attack(20); sfxdamage(target[;]20);,Catapult,COUNTDOWN,40,ORANGE,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Accumulator,<d6> is less than CPU: [sword]<d6>|<d6> equals your CPU: [shield]<d6>|<d6> is more than CPU: [heal]<d6>,1,if(!simulation){if(self.usecpuinsteadofdice){if(d < self.roll_total ){ attack(d); sfxdamage(target[;]d); }else if(d == self.roll_total){ inflictself(SHIELD[;]d); sfx(~_shield~); }else if(d > self.roll_total){ attackself(-d); sfx(~_heal~); }else{trace(~what the beans did you do?????~);};};}else{bonus(-10000);};,JOAT Smash,MAX5,,YELLOW,change_power,change_power,,,0,NO,NO,robotonly,,,,,,,,,if(d < self.roll_total){ e.castdirection = 1; }else{ e.castdirection = 0; };,,,
Accumulator_upgraded,<d6> is less than CPU: [sword]<d6>|<d6> equals your CPU: [shield]<d6>|<d6> is more than CPU: [heal]<d6>,1,if(!simulation){if(self.usecpuinsteadofdice){if(d < self.roll_total ){ attack(d); sfxdamage(target[;]d); }else if(d == self.roll_total){ inflictself(SHIELD[;]d); sfx(~_shield~); }else if(d > self.roll_total){ attackself(-d); sfx(~_heal~); }else{trace(~what the beans did you do?????~);};};}else{bonus(-10000);};,JOAT Smash,NORMAL,,YELLOW,,,,,0,NO,NO,robotonly,,,,,,,,,if(d < self.roll_total){ e.castdirection = 1; }else{ e.castdirection = 0; };,,,
Accumulator_downgraded,<d6> is less than CPU: [sword]<d6>|<d6> equals your CPU: [shield]<d6>|<d6> is more than CPU: [heal]<d6>,1,if(!simulation){if(self.usecpuinsteadofdice){if(d < self.roll_total ){ attack(d); sfxdamage(target[;]d); }else if(d == self.roll_total){ inflictself(SHIELD[;]d); sfx(~_shield~); }else if(d > self.roll_total){ attackself(-d); sfx(~_heal~); }else{trace(~what the beans did you do?????~);};};}else{bonus(-10000);};,JOAT Smash,MAX3,,YELLOW,,,,,0,NO,NO,robotonly,,,,,,,,,if(d < self.roll_total){ e.castdirection = 1; }else{ e.castdirection = 0; };,,,
Jack in the Box,Deal [sword]<d6> damage|Can only be played if|this is your leftmost card,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,NORMAL|FREE1,,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,if(Deck.getcard(0).equipment == e){ e.changeslots([~NORMAL~[;]~FREE1~]); }else{ e.changeslots([]); };,,,
Jack in the Box_upgraded,Deal [sword]<d6> damage|Can only be played if|this is your leftmost card,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,NORMAL|FREE3,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Jack in the Box_downgraded,Deal [sword]<d6> damage|Can only be played if|this is your leftmost card,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,NORMAL,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Twoplicate,Duplicate a dice|[gray](2 uses this turn),1,givedice([d[;]d]);,Magic Dice,REQUIRE2,,GREEN,change_power,change_power,,,2,YES,NO,,1,,,,,,,,,,,
Twoplicate_upgraded,Roll two new dice|[gray](2 uses this turn),1,givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6[;]])]);,Magic Dice,REQUIRE2,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Twoplicate_downgraded,Duplicate a dice,1,givedice([d[;]d]);,Magic Dice,REQUIRE2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Electrum Cauldron,Even: [sword]1 dmg[;] get odd dice|Odd: [sword]1 dmg[;] get even dice,1,attack(1); sfxdamage(target[;]1); if(d%2 == 0){ givedice(rand([1[;]3[;]5])); }else{ givedice(rand([2[;]4[;]6])); };,Magic Dice,NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,if(d%2 == 0){ givedice(rand([1[;]3[;]5])); }else{ givedice(rand([2[;]4[;]6])); };
Electrum Cauldron_upgraded,Even: [sword]1 dmg[;] get odd dice|Odd: [sword]1 dmg[;] get even dice|[gray](2 uses this turn),1,attack(1); sfxdamage(target[;]1); if(d%2 == 0){ givedice(rand([1[;]3[;]5])); }else{ givedice(rand([2[;]4[;]6])); };,Magic Dice,NORMAL,,ORANGE,,,,,2,NO,NO,,,,,,,,,,,,,if(d%2 == 0){ givedice(rand([1[;]3[;]5])); }else{ givedice(rand([2[;]4[;]6])); };
Electrum Cauldron_downgraded,Deal [sword]1 damage,1,attack(1); sfxdamage(target[;]1);,Magic Dice,NORMAL,,ORANGE,,,,none,0,NO,NO,,,,,,,,,,,,,
Amber Cauldron,Even: [sword]1 dmg[;] get even dice|Odd: [sword]1 dmg[;] get odd dice,1,attack(1); sfxdamage(target[;]1); if(d%2 == 1){ givedice(rand([1[;]3[;]5])); }else{ givedice(rand([2[;]4[;]6])); };,Magic Dice,NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,if(d%2 == 1){ givedice(rand([1[;]3[;]5])); }else{ givedice(rand([2[;]4[;]6])); };
Amber Cauldron_upgraded,Even: [sword]1 dmg[;] get even dice|Odd: [sword]1 dmg[;] get odd dice|[gray](2 uses this turn),1,attack(1); sfxdamage(target[;]1); if(d%2 == 1){ givedice(rand([1[;]3[;]5])); }else{ givedice(rand([2[;]4[;]6])); };,Magic Dice,NORMAL,,ORANGE,,,,,2,NO,NO,,,,,,,,,,,,,if(d%2 == 1){ givedice(rand([1[;]3[;]5])); }else{ givedice(rand([2[;]4[;]6])); };
Amber Cauldron_downgraded,Deal [sword]1 damage,1,attack(1); sfxdamage(target[;]1);,Magic Dice,NORMAL,,ORANGE,,,,none,0,NO,NO,,,,,,,,,,,,,
Quartz Cauldron,[sword]1 damage[;] get new dice|(value at least 2 more/less),1,var plist = []; for(x in 1...7){ if(x - d < -1 # x - d  > 1){ plist.push(x); }; }; givedice(rand(plist)); attack(1); sfxdamage(target[;]1);,Magic Dice,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,var plist = []; for(x in 1...7){ if(x - d < -1 # x - d  > 1){ plist.push(x); }; }; givedice(rand(plist));
Quartz Cauldron_upgraded,[sword]1 damage[;] get new dice|(value at least 2 more/less)|[gray](2 uses this turn),1,var plist = []; for(x in 1...7){ if(x - d < -1 # x - d  > 1){ plist.push(x); }; }; givedice(rand(plist)); attack(1); sfxdamage(target[;]1);,Magic Dice,NORMAL,,PINK,,,,,2,NO,NO,,,,,,,,,,,,,var plist = []; for(x in 1...7){ if(x - d < -1 # x - d  > 1){ plist.push(x); }; }; givedice(rand(plist));
Quartz Cauldron_downgraded,Deal [sword]1 damage,1,attack(1); sfxdamage(target[;]1);,Magic Dice,NORMAL,,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Lantern Shield,Deal [sword]2 damage|Gain [shield]2 shield,1,attack(2); sfxdamage(target[;]2); inflictself(SHIELD[;]2); sfx(~_shield~); ,Steel Skin,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~); 
Lantern Shield_upgraded,Deal [sword]3 damage|Gain [shield]3 shield,1,attack(3); sfxdamage(target[;]3); inflictself(SHIELD[;]3); sfx(~_shield~); ,Steel Skin,COUNTDOWN,6,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD[;]3); sfx(~_shield~); 
Lantern Shield_downgraded,Deal [sword]1 damage|Gain [shield]1 shield,1,attack(1); sfxdamage(target[;]1); inflictself(SHIELD[;]1); sfx(~_shield~); ,Steel Skin,COUNTDOWN,6,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD); sfx(~_shield~); 
Targe Charge,Deal [sword]<d6> damage|On 6[;] gain [shield]2 shield,2,attack(d); sfxdamage(target[;]d); if(d == 6){ inflictself(SHIELD[;]2); sfx(~_shield~); };,Barricade,NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ inflictself(SHIELD[;]2); sfx(~_shield~); };
Targe Charge_upgraded,Deal [sword]<d6> damage|On even[;] gain [shield]2 shield,2,attack(d); sfxdamage(target[;]d); if(d % 2 == 0){ inflictself(SHIELD[;]2); sfx(~_shield~); };,Barricade,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,if(d % 2 == 0){ inflictself(SHIELD[;]2); sfx(~_shield~); };
Targe Charge_downgraded,Deal [sword]<d6> damage|On 3[;] gain [shield]1 shield,2,attack(d); sfxdamage(target[;]d); if(d == 3){ inflictself(SHIELD[;]1); sfx(~_shield~); };,Barricade,MAX3,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 3){ inflictself(SHIELD[;]1); sfx(~_shield~); };
Jolt,Dice value +2,1,givedice(d+2);,Magic Six,MAX4,,GREEN,change_power,change_power,,none,0,YES,NO,,,,,,,,,,,,,
Jolt_upgraded,Dice value +2,1,givedice(d+2);,Magic Six,NORMAL,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Jolt_downgraded,Dice value +1,1,givedice(d+1);,Magic Six,MAX4,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Jerk,Dice value -2,1,givedice(d-2);,Magic Six,MIN3,,GREEN,change_power,change_power,,none,0,YES,NO,,,,,,,,,,,,,
Jerk_upgraded,Dice value -2|[gray](3 uses this turn),1,givedice(d-2);,Magic Six,MIN3,,GREEN,,,,none,3,YES,NO,,,,,,,,,,,,,
Jerk_downgraded,Roll a 1,1,givedice(1);,Magic Six,MIN3,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Ratchet,Increase the range of MAX|and MIN items by 1 this turn,1,var maxslots = [~MAX1~[;]~MAX2~[;]~MAX3~[;]~MAX4~[;]~MAX5~]; var minslots = [~MIN5~[;]~MIN4~[;]~MIN3~[;]~MIN2~]; var slots = []; for(eq in self.equipment){var flag = false; if(eq.skillcard == ~~ && eq.countdown == 0 && eq.getslots().length > 0 && !eq.needsdoubles){ slots = eq.getslots(); var output = []; for(s in slots){ if(maxslots.indexOf(s) != -1){flag=true; if(maxslots.indexOf(s)+1 ==maxslots.length){ output.push(~NORMAL~);  }else{ output.push(maxslots[maxslots.indexOf(s) + 1]); }; }else if(minslots.indexOf(s) != -1){flag=true; if(minslots.indexOf(s)+1 ==minslots.length){ output.push(~NORMAL~); }else{ output.push(minslots[minslots.indexOf(s) + 1]); }; }else{ output.push(s); }; }; if(flag){eq.addtag(~ratcheted~); var r = new elements.Animation(); r.applytoequipment(eq); eq.animation.push(r); r.addcommand(~flash~|null|0.1); r.addcommand(~textparticle~|~[cog] Ratchet!~|16562691); eq.changeslots(output); }; }; }; sfx(~_magic~);,Magic Six,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,for(eq in self.equipment){if(eq.hastag(~ratcheted~)){eq.resetslots(); eq.removetag(~ratcheted~);};};,,,,
Ratchet_upgraded,Increase the range of MAX|and MIN items by 1 this turn|,1,var maxslots = [~MAX1~[;]~MAX2~[;]~MAX3~[;]~MAX4~[;]~MAX5~]; var minslots = [~MIN5~[;]~MIN4~[;]~MIN3~[;]~MIN2~]; var slots = []; for(eq in self.equipment){var flag = false; if(eq.skillcard == ~~ && eq.countdown == 0 && eq.getslots().length > 0 && !eq.needsdoubles){ slots = eq.getslots(); var output = []; for(s in slots){ if(maxslots.indexOf(s) != -1){flag=true; if(maxslots.indexOf(s)+1 ==maxslots.length){ output.push(~NORMAL~);  }else{ output.push(maxslots[maxslots.indexOf(s) + 1]); }; }else if(minslots.indexOf(s) != -1){flag=true; if(minslots.indexOf(s)+1 ==minslots.length){ output.push(~NORMAL~); }else{ output.push(minslots[minslots.indexOf(s) + 1]); }; }else{ output.push(s); }; }; if(flag){eq.addtag(~ratcheted~); var r = new elements.Animation(); r.applytoequipment(eq); eq.animation.push(r); r.addcommand(~flash~|null|0.1); r.addcommand(~textparticle~|~[cog] Ratchet!~|16562691); eq.changeslots(output); }; }; }; sfx(~_magic~);,Magic Six,NORMAL,,BRIGHTCYAN,,,,,-1,YES,NO,,,,,,,,,for(eq in self.equipment){if(eq.hastag(~ratcheted~)){eq.resetslots(); eq.removetag(~ratcheted~);};};,,,,
Ratchet_downgraded,Increase the range of MAX|and MIN items by 1 this turn,1,var maxslots = [~MAX1~[;]~MAX2~[;]~MAX3~[;]~MAX4~[;]~MAX5~]; var minslots = [~MIN5~[;]~MIN4~[;]~MIN3~[;]~MIN2~]; var slots = []; for(eq in self.equipment){var flag = false; if(eq.skillcard == ~~ && eq.countdown == 0 && eq.getslots().length > 0 && !eq.needsdoubles){ slots = eq.getslots(); var output = []; for(s in slots){ if(maxslots.indexOf(s) != -1){flag=true; if(maxslots.indexOf(s)+1 ==maxslots.length){ output.push(~NORMAL~);  }else{ output.push(maxslots[maxslots.indexOf(s) + 1]); }; }else if(minslots.indexOf(s) != -1){flag=true; if(minslots.indexOf(s)+1 ==minslots.length){ output.push(~NORMAL~); }else{ output.push(minslots[minslots.indexOf(s) + 1]); }; }else{ output.push(s); }; }; if(flag){eq.addtag(~ratcheted~); var r = new elements.Animation(); r.applytoequipment(eq); eq.animation.push(r); r.addcommand(~flash~|null|0.1); r.addcommand(~textparticle~|~[cog] Ratchet!~|16562691); eq.changeslots(output); }; }; }; sfx(~_magic~);,Magic Six,NORMAL|NORMAL,,BRIGHTCYAN,,,,none,0,YES,NO,,,,,,,,,for(eq in self.equipment){if(eq.hastag(~ratcheted~)){eq.resetslots(); eq.removetag(~ratcheted~);};};,,,,
Meteor Hammer,Deal [sword]<d6> damage[;] get a|new dice with lower value,2,attack(d); sfxdamage(target[;]d); if(actualdice[0].basevalue >= 2){ var t = []; var x = 1; while(x < actualdice[0].basevalue){ t.push(x); x+=1; }; givedice(rand(t)); };,Magic Lockpick,MIN2,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(actualdice[0].basevalue >= 2){ var t = []; var x = 1; while(x < actualdice[0].basevalue){ t.push(x); x+=1; }; givedice(rand(t)); };
Meteor Hammer_upgraded,Deal [sword]<d6> damage[;] get a|new dice with lower value,2,attack(d); sfxdamage(target[;]d); if(actualdice[0].basevalue >= 2){ var t = []; var x = 1; while(x < actualdice[0].basevalue){ t.push(x); x+=1; }; givedice(rand(t)); };,Magic Lockpick,MIN2|FREE2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,if(actualdice[0].basevalue >= 2){ var t = []; var x = 1; while(x < actualdice[0].basevalue){ t.push(x); x+=1; }; givedice(rand(t)); };
Meteor Hammer_downgraded,Get a new dice|with a lower value,2,var t = []; var x = 1; while(x < actualdice[0].basevalue){ t.push(x); x+=1; }; givedice(rand(t));,Magic Lockpick,MIN2,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Rope Dart,[sword]<d6> damage[;] reduce a|random countdown by <d6>,1,attack(d); sfxdamage(target[;]d); var poss = []; for(eq in self.equipment){ if(eq.skillcard == ~~){ if(eq.countdown > 0 && eq.ready && eq.availablethisturn){ poss.push(eq); }; }; }; if(self.stolencard){ if(self.stolencard.countdown > 0 && self.stolencard.ready){ poss.push(self.stolencard); }; }; if(poss.length > 0){ var r = rand(poss); while(d > 6){ var b = new elements.Dice(); b.basevalue = 6; b.owner = self; r.assigndice(b); d-=6;}; var b = new elements.Dice(); b.basevalue = d; b.owner = self; r.assigndice(b); };,Accelerate,EVEN,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,var poss = []; for(eq in self.equipment){ if(eq.skillcard == ~~){ if(eq.countdown > 0 && eq.ready && eq.availablethisturn){ poss.push(eq); }; }; }; if(self.stolencard){ if(self.stolencard.countdown > 0 && self.stolencard.ready){ poss.push(self.stolencard); }; }; if(poss.length > 0){ var r = rand(poss); while(d > 6){ givedice(6); r.assigndice(self.dicepool[self.dicepool.length - 1]); d-=6;}; givedice(d); r.assigndice(self.dicepool[self.dicepool.length - 1]); };
Rope Dart_upgraded,[sword]<d6> damage[;] reduce a|random countdown by <d6>,1,attack(d); sfxdamage(target[;]d); var poss = []; for(eq in self.equipment){ if(eq.skillcard == ~~){ if(eq.countdown > 0 && eq.ready && eq.availablethisturn){ poss.push(eq); }; }; }; if(self.stolencard){ if(self.stolencard.countdown > 0 && self.stolencard.ready){ poss.push(self.stolencard); }; }; if(poss.length > 0){ var r = rand(poss); while(d > 6){ var b = new elements.Dice(); b.basevalue = 6; b.owner = self; r.assigndice(b); d-=6;}; var b = new elements.Dice(); b.basevalue = d; b.owner = self; r.assigndice(b); };,Accelerate,EVEN|FREE2,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,var poss = []; for(eq in self.equipment){ if(eq.skillcard == ~~){ if(eq.countdown > 0 && eq.ready && eq.availablethisturn){ poss.push(eq); }; }; }; if(self.stolencard){ if(self.stolencard.countdown > 0 && self.stolencard.ready){ poss.push(self.stolencard); }; }; if(poss.length > 0){ var r = rand(poss); while(d > 6){ givedice(6); r.assigndice(self.dicepool[self.dicepool.length - 1]); d-=6;}; givedice(d); r.assigndice(self.dicepool[self.dicepool.length - 1]); };
Rope Dart_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Accelerate,EVEN,,ORANGE,,,,none,0,NO,NO,,,,,,,,,,,,,
Pogo Stick,Deal [sword]1 damage for every|3 cards in your deck ([sword]<var:thirdcardcount>),2,var dmg = self.getvar(~thirdcardcount~); attack(dmg); sfxdamage(target[;]dmg);,Plasma Gun,NORMAL,,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,self.setvar(~thirdcardcount~[;]Deck.getcardlist(~all~).length/3); self.setvar(~halfcardcount~[;]Deck.getcardlist(~all~).length/2); self.setvar(~sixthcardcount~[;]Deck.getcardlist(~all~).length/6);,,self.setvar(~thirdcardcount~[;]Deck.getcardlist(~all~).length/3); self.setvar(~halfcardcount~[;]Deck.getcardlist(~all~).length/2); self.setvar(~sixthcardcount~[;]Deck.getcardlist(~all~).length/6);,,,,,,
Pogo Stick_upgraded,Deal [sword]1 damage for every|2 cards in your deck ([sword]<var:halfcardcount>),2,var dmg = self.getvar(~halfcardcount~); attack(dmg); sfxdamage(target[;]dmg);,Plasma Gun,NORMAL,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,self.setvar(~thirdcardcount~[;]Deck.getcardlist(~all~).length/3); self.setvar(~halfcardcount~[;]Deck.getcardlist(~all~).length/2); self.setvar(~sixthcardcount~[;]Deck.getcardlist(~all~).length/6);,,self.setvar(~thirdcardcount~[;]Deck.getcardlist(~all~).length/3); self.setvar(~halfcardcount~[;]Deck.getcardlist(~all~).length/2); self.setvar(~sixthcardcount~[;]Deck.getcardlist(~all~).length/6);,,,,,,
Pogo Stick_downgraded,Deal [sword]1 damage for every|6 cards in your deck ([sword]<var:sixthcardcount>),2,var dmg = self.getvar(~sixthcardcount~); attack(dmg); sfxdamage(target[;]dmg);,Plasma Gun,NORMAL,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,self.setvar(~thirdcardcount~[;]Deck.getcardlist(~all~).length/3); self.setvar(~halfcardcount~[;]Deck.getcardlist(~all~).length/2); self.setvar(~sixthcardcount~[;]Deck.getcardlist(~all~).length/6);,,self.setvar(~thirdcardcount~[;]Deck.getcardlist(~all~).length/3); self.setvar(~halfcardcount~[;]Deck.getcardlist(~all~).length/2); self.setvar(~sixthcardcount~[;]Deck.getcardlist(~all~).length/6);,,,,,,
Mechanical Charm,Roll two <dicerolled>s[;] increase|value by 1 with each roll,1,if(!simulation){if(self.usecpuinsteadofdice){var dice = [self.roll_totaldice+1]; while(dice[0] > 6){ dice.push(6); dice[0]-=6; }; givedice(dice.concat(dice));};}else{bonus(-10000);};,Snake Eyes,COUNTDOWN,10,GREEN,change_power,change_power,,,0,YES,NO,robotonly,,,,,,,,,,,,
Mechanical Charm_upgraded,Roll three <dicerolled>s[;] increase|value by 1 with each roll,1,if(!simulation){if(self.usecpuinsteadofdice){var dice = [self.roll_totaldice+1]; while(dice[0] > 6){ dice.push(6); dice[0]-=6; }; givedice(dice.concat(dice.concat(dice)));};}else{bonus(-10000);};,Snake Eyes,COUNTDOWN,10,GREEN,,,,,0,YES,NO,robotonly,,,,,,,,,,,,
Mechanical Charm_downgraded,Roll one <dicerolled>[;] increase|value by 1 with each roll,1,if(!simulation){if(self.usecpuinsteadofdice){var dice = [self.roll_totaldice+1]; while(dice[0] > 6){ dice.push(6); dice[0]-=6; }; givedice(dice);};}else{bonus(-10000);};,Snake Eyes,COUNTDOWN,10,GREEN,,,,,0,YES,NO,robotonly,,,,,,,,,,,,
Mechanicalantern,Get a <d6> next turn for|each <d6> you rolled this turn,1,if(!simulation){if(self.usecpuinsteadofdice){inflictself(~stash~+d[;]self.getvar(~mechanical_lantern~+d)); inflictself(~mechanical_lantern~); sfx(~magic_gaindice~);};}else{bonus(-10000);};,Magic Lantern,NORMAL,,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,e.setvar(~rollcheck~[;]0); for(x in [1[;]2[;]3[;]4[;]5[;]6]){ self.setvar(~mechanical_lantern~+x[;]0); };,e.setvar(~rollcheck~[;]0); for(x in [1[;]2[;]3[;]4[;]5[;]6]){ self.setvar(~mechanical_lantern~+x[;]0); };,e.setvar(~rollcheck~[;]0); for(x in [1[;]2[;]3[;]4[;]5[;]6]){ self.setvar(~mechanical_lantern~[;]0); };,,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); var x = self.dicepool[self.dicepool.length - 1]; self.setvar(~mechanical_lantern~+x[;]self.getvar(~mechanical_lantern~+x)+1); };,,,,,,
Mechanicalantern_upgraded,Get a <d6> next turn for|each <d6> you rolled this turn|[gray](2 uses this turn),1,if(!simulation){if(self.usecpuinsteadofdice){inflictself(~stash~+d[;]self.getvar(~mechanical_lantern~+d)); inflictself(~mechanical_lantern~); sfx(~magic_gaindice~);};}else{bonus(-10000);};,Magic Lantern,NORMAL,,YELLOW,,,,,2,YES,NO,excludefromrandomlists,,e.setvar(~rollcheck~[;]0); for(x in [1[;]2[;]3[;]4[;]5[;]6]){ self.setvar(~mechanical_lantern~+x[;]0); };,e.setvar(~rollcheck~[;]0); for(x in [1[;]2[;]3[;]4[;]5[;]6]){ self.setvar(~mechanical_lantern~+x[;]0); };,e.setvar(~rollcheck~[;]0); for(x in [1[;]2[;]3[;]4[;]5[;]6]){ self.setvar(~mechanical_lantern~[;]0); };,,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); var x = self.dicepool[self.dicepool.length - 1]; self.setvar(~mechanical_lantern~+x[;]self.getvar(~mechanical_lantern~+x)+1); };,,,,,,
Mechanicalantern_downgraded,Get a <d6> next turn,1,if(!simulation){if(self.usecpuinsteadofdice){inflictself(~stash~+d[;]1); inflictself(~mechanical_lantern~); sfx(~magic_gaindice~);};}else{bonus(-10000);};,Magic Lantern,NORMAL,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Ballerina Charm,Roll 2 twos,1,givedice([2[;]2]);,Ballerina,COUNTDOWN,4,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Ballerina Charm_upgraded,Roll 2 twos|,1,givedice([2[;]2]);,Ballerina,COUNTDOWN,4,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Ballerina Charm_downgraded,Roll a two,1,givedice(2);,Ballerina,COUNTDOWN,4,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Backlash,Deal [sword]10 damage,1,attack(10); sfxdamage(target[;]10);,Shuriken,MAX3|MAX4,7,RED,change_power,change_power,,none,0,NO,NO,,,,,e.changeslots([~MAX3~|~MAX4~]); e.needstotal=7; e.arrangeslots();,,,,,,,,
Backlash_upgraded,Deal [sword]13 damage,1,attack(13); sfxdamage(target[;]13);,Shuriken,MAX3|MAX4,7,RED,,,,none,0,NO,NO,,,,,e.changeslots([~MAX3~|~MAX4~]); e.needstotal=7; e.arrangeslots();,,,,,,,,
Backlash_downgraded,Deal [sword]7 damage,1,attack(7); sfxdamage(target[;]7);,Shuriken,MAX3|MAX4,7,RED,,,,none,0,NO,NO,,,,,e.changeslots([~MAX3~|~MAX4~]); e.needstotal=7; e.arrangeslots();,,,,,,,,
Magma Storm,[fire]2 dmg to you and enemy|[gray](Reusable),1,attack(2[;]FIRE); sfx(~_fire~); boomerang(2[;]FIRE); sfxdamage(target|2);,Boom!,COUNTDOWN,2,RED,change_power,change_power,,,-1,NO,NO,,1,,,,,,,,,,,
Magma Storm_upgraded,[fire]4 dmg to you and enemy|[gray](Reusable),1,attack(4[;]FIRE); sfx(~_fire~); boomerang(4[;]FIRE); sfxdamage(target|2);,Boom!,COUNTDOWN,2,RED,,,,,-1,NO,NO,,,,,,,,,,,,,
Magma Storm_downgraded,[fire]2 dmg to yourself|[gray](Reusable),1,attackself(2[;]FIRE); sfx(~_fire~);,Boom!,COUNTDOWN,2,RED,,,,,-1,YES,NO,,,,,,,,,,,,,
Expose Weakness,For each [sword]5 damage you|do[;] deal [sword]1 damage|,1,attack(1); sfxdamage(target[;]1); self.setvar(~del~[;]0);,Protection,,,ORANGE,change_power,change_power,,none,-1,NO,NO,excludefromrandomlists,,,,e.setvar(~enemyhealth~[;]target.hp);,e.setvar(~enemyhealth~[;]target.hp);,var diff = e.getvar(~enemyhealth~) - target.hp; if(diff > 0){ e.setvar(~diff~[;]e.getvar(~diff~)+diff); }; var c = 0; if(e.getvar(~diff~) >= 5){ e.doequipmentaction(self[;]target[;]1[;][][;]c[;]true); c+=0.2; e.setvar(~diff~[;]e.getvar(~diff~)-5); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Expose Weakness_upgraded,For each [sword]4 damage you|do[;] deal [sword]1 damage|,1,attack(1); sfxdamage(target[;]1); self.setvar(~del~[;]0);,Protection,,,ORANGE,,,,none,-1,NO,NO,excludefromrandomlists,,,,e.setvar(~enemyhealth~[;]target.hp);,e.setvar(~enemyhealth~[;]target.hp);,var diff = e.getvar(~enemyhealth~) - target.hp; if(diff > 0){ e.setvar(~diff~[;]e.getvar(~diff~)+diff); }; var c = 0; if(e.getvar(~diff~) >= 4){ e.doequipmentaction(self[;]target[;]1[;][][;]c[;]true); c+=0.2; e.setvar(~diff~[;]e.getvar(~diff~)-4); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Expose Weakness_downgraded,For each [sword]5 damage you|do[;] deal [sword]1 damage|,1,attack(1); sfxdamage(target[;]1); self.setvar(~del~[;]0);,Protection,,,ORANGE,,,,none,2,NO,NO,excludefromrandomlists,,,,e.setvar(~enemyhealth~[;]target.hp);,e.setvar(~enemyhealth~[;]target.hp);,var diff = e.getvar(~enemyhealth~) - target.hp; if(diff > 0){ e.setvar(~diff~[;]e.getvar(~diff~)+diff); }; var c = 0; if(e.getvar(~diff~) >= 5){ e.doequipmentaction(self[;]target[;]1[;][][;]c[;]true); c+=0.2; e.setvar(~diff~[;]e.getvar(~diff~)-5); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Critical Hit,Attacks have a 25% chance|to deal double damage,1,inflictself(~criticalhit_baseamount~|25); sfx(~_fury~);,Lucky Shot,DOUBLES|DOUBLES,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Critical Hit_upgraded,Attacks have a 50% chance|to deal double damage,1,inflictself(~criticalhit_baseamount~|50); sfx(~_fury~);,Lucky Shot,DOUBLES|DOUBLES,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Critical Hit_downgraded,Attacks have a 10% chance|to deal double damage,1,inflictself(~criticalhit_baseamount~|15); sfx(~_fury~);,Lucky Shot,DOUBLES|DOUBLES,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Lifesteal,When you do damage[;] do|[sword]<d6> less but heal [heal]<d6> hp,1,inflictself(~lifesteal~|d); sfx(~_cure~);,Blood Sip,MAX3,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Lifesteal_upgraded,When you do damage[;] do|[sword]<d6> less but heal [heal]<d6> hp,1,inflictself(~lifesteal~|d); sfx(~_cure~);,Blood Sip,NORMAL,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Lifesteal_downgraded,When you do damage[;] do|[sword]<d6> less but heal [heal]<d6> hp,1,inflictself(~lifesteal~|d); sfx(~_cure~);,Blood Sip,MAX2,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Preparation,Roll 2 extra dice|on the first turn,1,,Magic Lantern,,,BRIGHTCYAN,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,if(turn == 1){ givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); e.changecolour(~GRAY~); e.animate(~flashandshake~); sfx(~openchest~); };,,,,,,,
Preparation_upgraded,Roll 3 extra dice|on the first turn,1,,Magic Lantern,,,BRIGHTCYAN,,,,none,0,NO,NO,excludefromrandomlists,,,,,if(turn == 1){ givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); e.changecolour(~GRAY~); e.animate(~flashandshake~); sfx(~openchest~); };,,,,,,,
Preparation_downgraded,Roll 1 extra dice|on the first turn,1,,Magic Lantern,,,BRIGHTCYAN,,,,none,0,NO,NO,excludefromrandomlists,,,,,if(turn == 1){ givedice(); e.changecolour(~GRAY~); e.animate(~flashandshake~); sfx(~openchest~); };,,,,,,,
Maintenance,Keep half of any excess|[shield]shield between turns,1,,Revitalize,,,ORANGE,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,var diff = self.maxhp - self.hp; var rem = diff - getstatusself(SHIELD); if(rem < 0){ e.setvar(~remainder~[;](-rem/2)); };,if(e.getvar(~remainder~) > 0){ inflictself(SHIELD[;]e.getvar(~remainder~)); sfx(~_shield~); e.setvar(~remainder~[;]0); e.animate(~flashandshake~); };,,,,,,,
Maintenance_upgraded,Keep all excess|[shield]shield between turns,1,,Revitalize,,,ORANGE,,,,none,0,NO,NO,excludefromrandomlists,,,,var diff = self.maxhp - self.hp; var rem = diff - getstatusself(SHIELD); if(rem < 0){ e.setvar(~remainder~[;]-rem); };,if(e.getvar(~remainder~) > 0){ inflictself(SHIELD[;]e.getvar(~remainder~)); sfx(~_shield~); e.setvar(~remainder~[;]0); e.animate(~flashandshake~); };,,,,,,,
Maintenance_downgraded,No effect,1,,Revitalize,,,ORANGE,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Toxic Trebuchet,Inflict [poison]3 poison,1,inflict(POISON[;]3); sfx(~_poison~);,Goop Gun,NORMAL|NORMAL,7,PURPLE,change_poison,change_power,,,0,NO,NO,,,,,,,,,,,,,
Toxic Trebuchet_upgraded,Inflict [poison]4 poison,1,inflict(POISON[;]4); sfx(~_poison~);,Goop Gun,NORMAL|NORMAL,7,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Toxic Trebuchet_downgraded,Inflict [poison]2 poison,1,inflict(POISON[;]2); sfx(~_poison~);,Goop Gun,NORMAL|NORMAL,7,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Precision Blade,Deal [sword]<d6> damage[;] total|lowers with damage dealt,1,attack(d); sfxdamage(target[;]d);,Catapult,NORMAL|NORMAL,20,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,e.needstotal = 20;,,e.setvar(~enemyhealth~[;]target.hp);,var diff = target.hp - e.getvar(~enemyhealth~); if(diff < 0){ e.needstotal+=diff; if(e.needstotal < 2){ e.needstotal = 2; }; e.animate(~flashandshake~); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Precision Blade_upgraded,Deal [sword]<d6> damage[;] total|lowers with damage dealt,1,attack(d); sfxdamage(target[;]d);,Catapult,NORMAL|NORMAL,15,RED,,,,none,0,NO,NO,excludefromrandomlists,,,e.needstotal = 15;,,e.setvar(~enemyhealth~[;]target.hp);,var diff = target.hp - e.getvar(~enemyhealth~); if(diff < 0){ e.needstotal+=diff; if(e.needstotal < 2){ e.needstotal = 2; }; e.animate(~flashandshake~); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Precision Blade_downgraded,Deal [sword]<d6> damage[;] total|lowers with damage dealt,1,attack(d); sfxdamage(target[;]d);,Catapult,NORMAL,20,RED,,,,none,0,NO,NO,excludefromrandomlists,,,e.needstotal = 20;,,e.setvar(~enemyhealth~[;]target.hp);,var diff = target.hp - e.getvar(~enemyhealth~); if(diff < 0){ e.needstotal+=diff; if(e.needstotal < 2){ e.needstotal = 2; }; e.animate(~flashandshake~); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Fulcrum Blade,Deal [sword]7 damage|(Slots change each turn),1,attack(7); sfxdamage(target[;]7); if(d != e.needstotal){bonus(-100000);};,Shuriken,NORMAL|FREE1,7,PURPLE,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,var target = rand([1[;]2[;]3[;]4[;]5[;]6]); var slots = []; for(i in 0...7){ slots.push(~FREE~+i); }; e.changeslots([~NORMAL~[;]slots[target]]); e.needstotal = target + rand([1[;]2[;]3[;]4[;]5[;]6]); e.animate(~flashandshake~); e.arrangeslots();,,,,,,,
Fulcrum Blade_upgraded,Deal [sword]10 damage|(Slots change each turn),1,attack(10); sfxdamage(target[;]10);  if(d != e.needstotal){bonus(-100000);};,Shuriken,NORMAL|FREE1,7,PURPLE,,,,none,0,NO,NO,excludefromrandomlists,,,,,var target = rand([1[;]2[;]3[;]4[;]5[;]6]); var slots = []; for(i in 0...7){ slots.push(~FREE~+i); }; e.changeslots([~NORMAL~[;]slots[target]]); e.needstotal = target + rand([1[;]2[;]3[;]4[;]5[;]6]); e.animate(~flashandshake~); e.arrangeslots();,,,,,,,
Fulcrum Blade_downgraded,Deal [sword]4 damage|(Slots change each turn),1,attack(4); sfxdamage(target[;]4);  if(d != e.needstotal){bonus(-100000);};,Shuriken,NORMAL|FREE1,7,PURPLE,,,,none,0,NO,NO,excludefromrandomlists,,,,,var target = rand([1[;]2[;]3[;]4[;]5[;]6]); var slots = []; for(i in 0...7){ slots.push(~FREE~+i); }; e.changeslots([~NORMAL~[;]slots[target]]); e.needstotal = target + rand([1[;]2[;]3[;]4[;]5[;]6]); e.animate(~flashandshake~); e.arrangeslots();,,,,,,,
Dainsleif,Reduce the enemy's|maximum hp by [heart]<double>,2,target.maxhp-=d*2; if(target.hp > target.maxhp){ target.hp = target.maxhp; }; sfxdamage(target[;]d*2); sfx(~_drain~); if(getstatus(VAMPIRE) > 0 && target.hp <= 0 && getstatus(~alternate_vampire~) == 0){ target.hp=1; target.maxhp=1; }; if(target.hp <= 0){ pierceattack(1); pierceattack(1); }; screenshake();,Throwing Knife,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Dainsleif_upgraded,Reduce the enemy's|maximum hp by [heart]<double>,2,target.maxhp-=d*2; if(target.hp > target.maxhp){ target.hp = target.maxhp; }; sfxdamage(target[;]d*2); sfx(~_drain~); if(getstatus(VAMPIRE) > 0 && target.hp <= 0 && getstatus(~alternate_vampire~) == 0){ target.hp=1; target.maxhp=1; }; if(target.hp <= 0){ pierceattack(1); pierceattack(1); }; screenshake();,Throwing Knife,NORMAL|FREE2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Dainsleif_downgraded,Reduce the enemy's|maximum hp by [heart]<double>,2,target.maxhp-=d*2; if(target.hp > target.maxhp){ target.hp = target.maxhp; }; sfxdamage(target[;]d*2); sfx(~_drain~); if(getstatus(VAMPIRE) > 0 && target.hp <= 0 && getstatus(~alternate_vampire~) == 0){ target.hp=1; target.maxhp=1; }; if(target.hp <= 0){ pierceattack(1); pierceattack(1); }; screenshake();,Throwing Knife,MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Yoyo,Do [sword]<triple>[;] but you take|[sword]<triple> too in [jinx]<d6> turns,2,attack(d*3); sfxdamage(target[;]d*3); jinx(~Yoyo~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]self[;]self[;]d[;](d * 3));,Whacksies,MAX4,,PINK,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Yoyo_upgraded,Do [sword]<quadruple>[;] but you take|[sword]<quadruple> too in [jinx]<d6> turns,2,attack(d*4); sfxdamage(target[;]d*4); jinx(~Yoyo~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]self[;]self[;]d[;](d * 4));,Whacksies,MAX4,,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Yoyo_downgraded,Do [sword]<d6>[;] but you take|[sword]<d6> too in [jinx]<d6> turns,2,attack(d); sfxdamage(target[;]d); jinx(~Yoyo~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]self[;]self[;]d[;]d);,Whacksies,MAX4,,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Garbage Collection,Deal [sword]<double> damage|(Slot grows on each roll),1,attack(d * 2); sfxdamage(target[;]d*2);,Pea Gun,REQUIRE1,,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,e.changeslots([~REQUIRE1~]); e.setvar(~rollcheck~[;] 0);,e.changeslots([~REQUIRE1~]); e.setvar(~rollcheck~[;] 0);,e.changeslots([~REQUIRE1~]); e.setvar(~rollcheck~[;] 0);,,function updateslots(){var slotlist = [~REQUIRE1~|~REQUIRE2~|~REQUIRE3~|~REQUIRE4~|~REQUIRE5~|~REQUIRE6~|~MAX1~|~MAX2~|~MAX3~|~MAX4~|~MAX5~|~RANGE23~|~RANGE24~|~RANGE25~|~RANGE34~|~RANGE35~|~RANGE45~|~MIN5~|~MIN4~|~MIN3~|~MIN2~|~ODD~|~EVEN~]; var replist = [~MAX2~|~MAX3~|~RANGE24~|~RANGE35~|~MIN4~|~MIN5~|~MAX2~|~MAX3~|~MAX4~|~MAX5~|~NORMAL~|~MAX4~|~MAX5~|~NORMAL~|~RANGE25~|~MIN2~|~MIN3~|~MIN4~|~MIN3~|~MIN2~|~NORMAL~|~NORMAL~|~NORMAL~]; var out = []; for(sl in e.getslots()){var idx = slotlist.indexOf(sl); var newSlot = sl; if(idx != -1){newSlot = replist[idx];}; out.push(newSlot);}; e.changeslots(out);}; while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); if(e.countdown > 0){var currcd = e.remainingcountdown; e.changeslots([~COUNTDOWN_~+(e.countdown+1)]); e.remainingcountdown = currcd+1; }else if(e.needstotal != 0){if(e.needstotal < 12){e.needstotal+=1; e.animate(~flashandshake~);};}else{updateslots();}; };,,,,,,
Garbage Collection_upgraded,Deal [sword]<double> damage|(Slot grows on each roll),1,attack(d * 2); sfxdamage(target[;]d*2);,Pea Gun,REQUIRE1|FREE1,,RED,,,,none,0,NO,NO,excludefromrandomlists,,e.changeslots([~REQUIRE1~[;]~FREE1~]); e.setvar(~rollcheck~[;] 0);,e.changeslots([~REQUIRE1~[;]~FREE1~]); e.setvar(~rollcheck~[;] 0);,e.changeslots([~REQUIRE1~[;]~FREE1~]); e.setvar(~rollcheck~[;] 0);,,function updateslots(){var slotlist = [~REQUIRE1~|~REQUIRE2~|~REQUIRE3~|~REQUIRE4~|~REQUIRE5~|~REQUIRE6~|~MAX1~|~MAX2~|~MAX3~|~MAX4~|~MAX5~|~RANGE23~|~RANGE24~|~RANGE25~|~RANGE34~|~RANGE35~|~RANGE45~|~MIN5~|~MIN4~|~MIN3~|~MIN2~|~ODD~|~EVEN~]; var replist = [~MAX2~|~MAX3~|~RANGE24~|~RANGE35~|~MIN4~|~MIN5~|~MAX2~|~MAX3~|~MAX4~|~MAX5~|~NORMAL~|~MAX4~|~MAX5~|~NORMAL~|~RANGE25~|~MIN2~|~MIN3~|~MIN4~|~MIN3~|~MIN2~|~NORMAL~|~NORMAL~|~NORMAL~]; var out = []; for(sl in e.getslots()){var idx = slotlist.indexOf(sl); var newSlot = sl; if(idx != -1){newSlot = replist[idx];}; out.push(newSlot);}; e.changeslots(out);}; while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); if(e.countdown > 0){var currcd = e.remainingcountdown; e.changeslots([~COUNTDOWN_~+(e.countdown+1)]); e.remainingcountdown = currcd+1; }else if(e.needstotal != 0){if(e.needstotal < 12){e.needstotal+=1; e.animate(~flashandshake~);};}else{updateslots();}; };,,,,,,
Garbage Collection_downgraded,Deal [sword]<d6> damage|(Slot grows on each roll),1,attack(d); sfxdamage(target[;]d);,Pea Gun,REQUIRE1,,RED,,,,none,0,NO,NO,excludefromrandomlists,,e.changeslots([~REQUIRE1~]); e.setvar(~rollcheck~[;] 0);,e.changeslots([~REQUIRE1~]); e.setvar(~rollcheck~[;] 0);,e.changeslots([~REQUIRE1~]); e.setvar(~rollcheck~[;] 0);,,function updateslots(){var slotlist = [~REQUIRE1~|~REQUIRE2~|~REQUIRE3~|~REQUIRE4~|~REQUIRE5~|~REQUIRE6~|~MAX1~|~MAX2~|~MAX3~|~MAX4~|~MAX5~|~RANGE23~|~RANGE24~|~RANGE25~|~RANGE34~|~RANGE35~|~RANGE45~|~MIN5~|~MIN4~|~MIN3~|~MIN2~|~ODD~|~EVEN~]; var replist = [~MAX2~|~MAX3~|~RANGE24~|~RANGE35~|~MIN4~|~MIN5~|~MAX2~|~MAX3~|~MAX4~|~MAX5~|~NORMAL~|~MAX4~|~MAX5~|~NORMAL~|~RANGE25~|~MIN2~|~MIN3~|~MIN4~|~MIN3~|~MIN2~|~NORMAL~|~NORMAL~|~NORMAL~]; var out = []; for(sl in e.getslots()){var idx = slotlist.indexOf(sl); var newSlot = sl; if(idx != -1){newSlot = replist[idx];}; out.push(newSlot);}; e.changeslots(out);}; while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); if(e.countdown > 0){var currcd = e.remainingcountdown; e.changeslots([~COUNTDOWN_~+(e.countdown+1)]); e.remainingcountdown = currcd+1; }else if(e.needstotal != 0){if(e.needstotal < 12){e.needstotal+=1; e.animate(~flashandshake~);};}else{updateslots();}; };,,,,,,
Lunar Beam,Gain [dynamo]1 Beam Power|(Start of turn: Do [sword]<var:dynamo> dmg),1,inflictself(~dynamo~); self.setvar(~dynamo~[;]getstatusself(~dynamo~)); sfx(~_magic~);,Whelm,ODD,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,self.setvar(~dynamo~[;]0);,,var s = getstatusself(~dynamo~); attack(s); sfxdamage(target[;]s); if(target.hp > 0){ e.animate(~flashandshake~); };,,,,,,,
Lunar Beam_upgraded,Gain [dynamo]1 Beam Power|(Start of turn: Do [sword]<var:dynamo> dmg),1,inflictself(~dynamo~); self.setvar(~dynamo~[;]getstatusself(~dynamo~)); sfx(~_magic~);,Whelm,NORMAL,,BRIGHTCYAN,,,,,0,YES,NO,excludefromrandomlists,,,self.setvar(~dynamo~[;]0);,,var s = getstatusself(~dynamo~); attack(s); sfxdamage(target[;]s); if(target.hp > 0){ e.animate(~flashandshake~); };,,,,,,,
Lunar Beam_downgraded,Gain [dynamo]1 Beam Power|(Start of turn: Do [sword]<var:dynamo> dmg),1,inflictself(~dynamo~); self.setvar(~dynamo~[;]getstatusself(~dynamo~)); sfx(~_magic~);,Whelm,REQUIRE1,,BRIGHTCYAN,,,,,0,YES,NO,excludefromrandomlists,,,self.setvar(~dynamo~[;]0);,,var s = getstatusself(~dynamo~); attack(s); sfxdamage(target[;]s); if(target.hp > 0){ e.animate(~flashandshake~); };,,,,,,,
Terra Beam,1-3: Gain [dynamo]<d6> Beam Power|4-6: Deal [sword]<var:dynamo> damage,1,var s = getstatusself(~dynamo~); if(actualdice[0].basevalue < 4){ inflictself(~dynamo~[;]d); self.setvar(~dynamo~[;]getstatusself(~dynamo~)); sfx(~_magic~); }else{ attack(s); sfxdamage(target[;]s); };,Whelm,NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,self.setvar(~dynamo~[;]0);,,,,,,if(d < 4){ e.castdirection = 0; }else{ e.castdirection = 1; };,,,
Terra Beam_upgraded,1-3: Gain [dynamo]<d6> Beam Power|4-6: Deal [sword]<var:dynamo> damage,1,var s = getstatusself(~dynamo~); if(actualdice[0].basevalue < 4){ inflictself(~dynamo~[;]d); self.setvar(~dynamo~[;]getstatusself(~dynamo~)); sfx(~_magic~); }else{ attack(s); sfxdamage(target[;]s); };,Whelm,NORMAL|FREE1,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,self.setvar(~dynamo~[;]0);,,,,,,if(d < 5){ e.castdirection = 0; }else{ e.castdirection = 1; };,,,
Terra Beam_downgraded,1-3: Gain [dynamo]<d6> Beam Power|4-6: Deal [sword]<var:dynamo> damage,1,var s = getstatusself(~dynamo~); if(actualdice[0].basevalue < 4){ inflictself(~dynamo~[;]d); self.setvar(~dynamo~[;]getstatusself(~dynamo~)); sfx(~_magic~); }else{ attack(s); sfxdamage(target[;]s); };,Whelm,EVEN,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,self.setvar(~dynamo~[;]0);,,,,,,if(d < 4){ e.castdirection = 0; }else{ e.castdirection = 1; };,,,
Pea Pod,Gain [mana]1 mana|[gray](Reusable),1,inflictself(MANA[;]1); sfx(~_mana~);,Pea Gun,COUNTDOWN,5,GREEN,change_power,change_power,,,-1,YES,NO,,1,,,,,,,,,,,
Pea Pod_upgraded,Gain [mana]2 mana|[gray](Reusable),1,inflictself(MANA[;]2); sfx(~_mana~);,Pea Gun,COUNTDOWN,5,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Pea Pod_downgraded,Gain [mana]1 mana|[gray](Reusable),1,inflictself(MANA); sfx(~_mana~);,Pea Gun,COUNTDOWN,5,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Bloodroot,Drain [heart]2 health. If above|half health[;] gain [mana]1 mana,1,drain(2); sfx(~_drain~); if(self.hp >= self.maxhp/2){ inflictself(MANA); sfx(~_mana~); };,Blood Sip,COUNTDOWN,6,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,if(self.hp >= self.maxhp/2){ inflictself(MANA); sfx(~_mana~); };
Bloodroot_upgraded,Drain [heart]2 health|Gain [mana]1 mana,1,drain(2); sfx(~_drain~); inflictself(MANA); sfx(~_mana~);,Blood Sip,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(MANA); sfx(~_mana~);
Bloodroot_downgraded,Drain [heart]2 health,1,drain(2); sfx(~_drain~);,Blood Sip,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Stinging Nettle,Deal [sword]<d6> damage[;] twice|if you have [thorns] thorns,1,attack(d); sfxdamage(target|d); if(simulation){if(getstatusself(THORNS) > 0){ attack(d); }};,Plasma Gun,MAX4,,GREEN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,if(simulation){}else{if(getstatusself(THORNS) > 0){function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(~+d+~); sfxdamage(target|~+d+~);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~GREEN~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 400 : -400)|0.1);};};,,,
Stinging Nettle_upgraded,Deal [sword]<d6> damage[;] twice|if you have [thorns] thorns,1,attack(d); sfxdamage(target|d); if(simulation){if(getstatusself(THORNS) > 0){ attack(d); }};,Plasma Gun,MAX5,,GREEN,,,,,0,NO,NO,,,,,,,,,,if(simulation){}else{if(getstatusself(THORNS) > 0){function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(~+d+~); sfxdamage(target|~+d+~);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~GREEN~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 400 : -400)|0.1);};};,,,
Stinging Nettle_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target|d);,Plasma Gun,MAX4,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Dock Leaf,Deal [sword]2 damage[;] heal|[heal]1 per [thorns] thorn you have,1,attack(2); if(getstatusself(THORNS) > 0){ pierceattackself(-getstatusself(THORNS)); sfx(~_heal~); }; sfxdamage(target[;]2);,Pinprick,NORMAL,,GREEN,change_power,change_power,thorns,,0,NO,NO,,1,,,,,,,,,,,if(getstatusself(THORNS) > 0){ pierceattackself(-getstatusself(THORNS)); sfx(~_heal~); };
Dock Leaf_upgraded,Deal [sword]2 damage[;] heal|[heal]2 per [thorns] thorn you have,1,attack(2); if(getstatusself(THORNS) > 0){ pierceattackself(-getstatusself(THORNS)*2); sfx(~_heal~); }; sfxdamage(target[;]2);,Pinprick,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,if(getstatusself(THORNS) > 0){ pierceattackself(-getstatusself(THORNS)); sfx(~_heal~); };
Dock Leaf_downgraded,Deal [sword]2 damage,1,attack(2); sfxdamage(target[;]2);,Pinprick,NORMAL,,GREEN,,,,none,0,NO,NO,,,,,,,,,,,,,if(getstatusself(THORNS) > 0){ pierceattackself(-getstatusself(THORNS)); sfx(~_heal~); };
Dock Leaf?,Deal [sword]2 damage[;] gains|2x healing from [thorns]thorns,1,attack(2); if(getstatusself(THORNS) > 0){ pierceattackself(-getstatusself(THORNS)); sfx(~_heal~); }; sfxdamage(target[;]2);,Needle,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,alternateversion,1,,,,,,,,,,,if(getstatusself(THORNS) > 0){ pierceattackself(-getstatusself(THORNS)); sfx(~_heal~); };
Dock Leaf?_upgraded,Deal [sword]2 damage[;] gains|3x healing from [thorns]thorns,1,attack(2); if(getstatusself(THORNS) > 0){ pierceattackself(-getstatusself(THORNS)*2); sfx(~_heal~); }; sfxdamage(target[;]2);,Needle,NORMAL,,GREEN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,if(getstatusself(THORNS) > 0){ pierceattackself(-getstatusself(THORNS)); sfx(~_heal~); };
Dock Leaf?_downgraded,Deal [sword]2 damage,1,attack(2); sfxdamage(target[;]2);,Needle,NORMAL,,GREEN,,,,none,0,NO,NO,alternateversion,,,,,,,,,,,,if(getstatusself(THORNS) > 0){ pierceattackself(-getstatusself(THORNS)); sfx(~_heal~); };
Hydrangea,Dice value +1|(Cost [mana]1: get a <d6>-1 too),1,var dicearray = [d+1]; if(getstatusself(MANA) > 0){ removestatusself(MANA[;]1); dicearray.push(d-1); }; givedice(dicearray);,Megabump,RANGE34,,PINK,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Hydrangea_upgraded,Dice value +1|(Cost [mana]1: get a <d6>-1 too),1,var dicearray = [d+1]; if(getstatusself(MANA) > 0){ removestatusself(MANA[;]1); dicearray.push(d-1); }; givedice(dicearray);,Megabump,RANGE25,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Hydrangea_downgraded,Dice value +1,1,givedice(d+1);,Megabump,RANGE34,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Rannuncarpus,Using a spell that generates|[mana]mana generates [mana]1 more,1,sfx(~_magic~);,Regenerate,,,ORANGE,change_power,change_power,,,0,YES,NO,excludefromrandomlists,2,,,,e.setvar(~mana~[;]getstatusself(MANA));,if(e.ready && e.shockedsetting == 0 && getstatusself(MANA) > e.getvar(~mana~) ){ inflictself(MANA); e.animate(~flashandshake~); }; e.setvar(~mana~[;]getstatusself(MANA));,,,,,,
Rannuncarpus_upgraded,Using a spell that generates|[mana]mana generates [mana]2 more,1,sfx(~_magic~);,Regenerate,,,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,e.setvar(~mana~[;]getstatusself(MANA));,if(e.ready && e.shockedsetting == 0 && getstatusself(MANA) > e.getvar(~mana~) ){ inflictself(MANA[;]2); e.animate(~flashandshake~); }; e.setvar(~mana~[;]getstatusself(MANA));,,,,,,
Rannuncarpus_downgraded,No effect,1,sfx(~_magic~);,Regenerate,,,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Sunflower,Consume spell in slot <d6>|to gain [mana]8 mana,1,if(Spellbook.isempty(d)) { self.textparticle(~No effect!~); } else { inflictself(MANA[;]8); Spellbook.erase(d); self.getskillcard().animate(~flashandshake~); }; sfx(~_cure~);,Megacurse,NORMAL,,ORANGE,change_power,change_power,,,0,YES,NO,witchonly,1,,,,,,,,,,,
Sunflower_upgraded,Consume spell in slot <d6>|to gain [mana]10 mana,1,if(Spellbook.isempty(d)) { self.textparticle(~No effect!~); } else { inflictself(MANA[;]10); Spellbook.erase(d); self.getskillcard().animate(~flashandshake~); }; sfx(~_cure~);,Megacurse,NORMAL,,ORANGE,,,,,0,YES,NO,witchonly,,,,,,,,,,,,
Sunflower_downgraded,Consume spell in slot <d6>|to gain [mana]<d6> mana,1,if(Spellbook.isempty(d)) { self.textparticle(~No effect!~); } else { inflictself(MANA[;]d); Spellbook.erase(d); self.getskillcard().animate(~flashandshake~); }; sfx(~_cure~);,Megacurse,NORMAL,,ORANGE,,,,,0,YES,NO,witchonly,,,,,,,,,,,,
Ginger,Inflict [weaken]1 weaken|(If [mana]>=3: +[weaken]1 extra),1,if(getstatusself(MANA) >= 3) { inflict(WEAKEN[;] 2); } else { inflict(WEAKEN[;] 1); } ; sfx(~_weaken~);,Theremin,ODD,,ORANGE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Ginger_upgraded,Inflict [weaken]1 weaken|(If [mana]>=3: +[weaken]1 extra),1,if(getstatusself(MANA) >= 3) { inflict(WEAKEN[;] 2); } else { inflict(WEAKEN[;] 1); } ; sfx(~_weaken~);,Theremin,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Ginger_downgraded,Inflict [weaken]1 weaken|(If [mana]>=3: +[weaken]1 extra),1,if(getstatusself(MANA) >= 3) { inflict(WEAKEN[;] 2); } else { inflict(WEAKEN[;] 1); } ; sfx(~_weaken~);,Theremin,REQUIRE1,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Iris,When you deal damage[;] lose|[mana]1 mana but do [sword]2 more,1,,Pea Gun,,,PURPLE,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,1,,,,e.setvar(~enemyhealth~[;]target.hp);,if(e.ready && e.shockedsetting == 0 && target.hp < e.getvar(~enemyhealth~)){ if(getstatusself(MANA) > 0){ target.hp-=2; e.animate(~flashandshake~); removestatusself(MANA); }; }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Iris_upgraded,When you deal damage[;] lose|[mana]1 mana but do [sword]3 more,1,,Pea Gun,,,PURPLE,,,,none,0,NO,NO,excludefromrandomlists,,,,,e.setvar(~enemyhealth~[;]target.hp);,if(e.ready && e.shockedsetting == 0 && target.hp < e.getvar(~enemyhealth~)){ if(getstatusself(MANA) > 0){ target.hp-=3; e.animate(~flashandshake~); removestatusself(MANA); }; }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Iris_downgraded,When you deal damage[;] lose|[mana]1 mana but do [sword]1 more,1,,Pea Gun,,,PURPLE,,,,none,0,NO,NO,excludefromrandomlists,,,,,e.setvar(~enemyhealth~[;]target.hp);,if(e.ready && e.shockedsetting == 0 && target.hp < e.getvar(~enemyhealth~)){ if(getstatusself(MANA) > 0){ target.hp-=1; e.animate(~flashandshake~); removestatusself(MANA); }; }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Rosebud,Deal [sword]<d6> damage|On 5[;] gain [thorns]1 thorns,1,attack(d); sfxdamage(target[;]d); if(d == 5){ inflictself(THORNS); sfx(~_thorns~); };,Needle,ODD,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,if(d == 5){ inflictself(THORNS); sfx(~_thorns~); };
Rosebud_upgraded,Deal [sword]<d6> damage|On 5[;] gain [thorns]1 thorns,1,attack(d); sfxdamage(target[;]d); if(d == 5){ inflictself(THORNS); sfx(~_thorns~); };,Needle,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 5){ inflictself(THORNS); sfx(~_thorns~); };
Rosebud_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Needle,ODD,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Blackberry,Restore [heal]2 health|(Cost [mana]2: gain [thorns]2 thorns),1,attackself(-2); sfx(~_heal~); if(getstatusself(MANA) >= 2){ removestatusself(MANA[;]2); inflictself(THORNS[;]2); sfx(~_cure~); };,Regenerate,MIN4,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Blackberry_upgraded,Restore [heal]2 health|(Cost [mana]2: gain [thorns]2 thorns),1,attackself(-2); sfx(~_heal~); if(getstatusself(MANA) >= 2){ removestatusself(MANA[;]2); inflictself(THORNS[;]2); sfx(~_cure~); };,Regenerate,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Blackberry_downgraded,Restore [heal]2 health|(Cost [mana]2: gain [thorns]2 thorns),1,attackself(-2); sfx(~_heal~); if(getstatusself(MANA) >= 2){ removestatusself(MANA[;]2); inflictself(THORNS[;]2); sfx(~_cure~); };,Regenerate,REQUIRE6,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Thermalily,Burn [fire]1 dice|(Cost [mana]2: +[fire]1 extra),1,inflict(FIRE); sfx(~_fire~); if(getstatusself(MANA) >= 2){ removestatusself(MANA[;]2); inflict(FIRE); };,Ember,NORMAL|NORMAL,5,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Thermalily_upgraded,Burn [fire]1 dice|(Cost [mana]2: +[fire]1 extra),1,inflict(FIRE); sfx(~_fire~); if(getstatusself(MANA) >= 2){ removestatusself(MANA[;]2); inflict(FIRE); };,Ember,MAX4|MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Thermalily_downgraded,Burn [fire]1 dice,1,inflict(FIRE); sfx(~_fire~);,Ember,NORMAL|NORMAL,5,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Snowdrop,Inflict [ice]2 freeze|(If [mana]>=3: do [ice]<d6> damage),1,inflict(ICE|2); sfx(~_ice~); if(getstatusself(MANA) >= 3){ attack(d[;]ICE); sfxdamage(target|d);};,Refrigerator,NORMAL|NORMAL,6,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Snowdrop_upgraded,Inflict [ice]2 freeze|(If [mana]>=3: do [ice]<d6> damage),1,inflict(ICE|2); sfx(~_ice~); if(getstatusself(MANA) >= 3){ attack(d[;]ICE); sfxdamage(target|d);};,Refrigerator,NORMAL|NORMAL,8,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Snowdrop_downgraded,Inflict [ice]2 freeze|(If [mana]>=3: do [ice]<d6> damage),1,inflict(ICE|2); sfx(~_ice~); if(getstatusself(MANA) >= 3){ attack(d[;]ICE); sfxdamage(target|d);};,Refrigerator,NORMAL|NORMAL,4,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
April Showers,Heal [heal]1 health per [mana]mana[;]|then lose all your [mana]mana,1,attackself(-getstatusself(MANA)); sfx(~_heal~); removestatusself(MANA[;]ALL);,Regenerate,ODD,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
April Showers_upgraded,Heal [heal]1 health per [mana]mana[;]|then lose all your [mana]mana,1,attackself(-getstatusself(MANA)); sfx(~_heal~); removestatusself(MANA[;]ALL);,Regenerate,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
April Showers_downgraded,Heal [heal]1 health per [mana]mana[;]|then lose all your [mana]mana,1,attackself(-getstatusself(MANA)); sfx(~_heal~); removestatusself(MANA[;]ALL);,Regenerate,REQUIRE5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Coffee Bean,Gain [mana]1 mana|Roll a new dice,1,inflictself(MANA); givedice(); sfx(~_mana~);,Magic Dice,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Coffee Bean_upgraded,Gain [mana]2 mana|Roll a new dice,1,inflictself(MANA[;]2); givedice(); sfx(~_mana~);,Magic Dice,COUNTDOWN,6,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Coffee Bean_downgraded,Roll a new dice,1,givedice();,Magic Dice,COUNTDOWN,6,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Crocus,Deal [sword]3 damage|(If [mana]>=3: gain [mana]1 mana),1,attack(3); sfxdamage(target[;]3); if(getstatusself(MANA) >= 3){ inflictself(MANA); sfx(~_mana~); };,Pea Gun,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,if(getstatusself(MANA) >= 3){ inflictself(MANA); sfx(~_mana~); };
Crocus_upgraded,Deal [sword]3 damage|(If [mana]>=<d6>: gain [mana]1 mana),1,attack(3); sfxdamage(target[;]3); if(getstatusself(MANA) >= d){ inflictself(MANA); sfx(~_magic~); };,Pea Gun,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,if(getstatusself(MANA) >= d){ inflictself(MANA); sfx(~_magic~); };
Crocus_downgraded,Deal [sword]3 damage,1,attack(3); sfxdamage(target[;]3);,Pea Gun,NORMAL,,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Magic Mistletoe,Deal [sword]4 damage|(If [mana]>=4[]: gain [thorns]2 thorns),1,attack(4); sfxdamage(target[;]4); if(getstatusself(MANA) >= 4) { inflictself(THORNS[;]2); sfx(~_thorns~); };,Shuriken,EVEN,,GREEN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,if(getstatusself(MANA) >= 4) { inflictself(THORNS[;]2); sfx(~_thorns~); };
Magic Mistletoe_upgraded,Deal [sword]4 damage|(If [mana]>=4[]: gain [thorns]2 thorns),1,attack(4); sfxdamage(target[;]4); if(getstatusself(MANA) >= 4) { inflictself(THORNS[;]2); sfx(~_thorns~); };,Shuriken,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,if(getstatusself(MANA) >= 4) { inflictself(THORNS[;]2); sfx(~_thorns~); };
Magic Mistletoe_downgraded,Deal [sword]4 damage|(If [mana]>=4[]: gain [thorns]2 thorns),1,attack(4); sfxdamage(target[;]4); if(getstatusself(MANA) >= 4) { inflictself(THORNS[;]2); sfx(~_thorns~); };,Shuriken,REQUIRE2,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,if(getstatusself(MANA) >= 4) { inflictself(THORNS[;]2); sfx(~_thorns~); };
Magnolia,Even: Cost [mana]1[;] do [sword]<double>|Odd: Gain [mana]1[;] do [sword]<d6>,1,if(d%2 == 0){ if(getstatusself(MANA) >= 1){ removestatusself(MANA); attack(d*2); sfxdamage(target[;]d*2); }; }else{ inflictself(MANA); sfx(~_mana~); attack(d); };,Slick Slash,MAX4,,PINK,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Magnolia_upgraded,Even: Cost [mana]1[;] do [sword]<triple>|Odd: Gain [mana]1[;] do [sword]<d6>,1,if(d%2 == 0){ if(getstatusself(MANA) >= 1){ removestatusself(MANA); attack(d*3); sfxdamage(target[;]d*3); }; }else{ inflictself(MANA); sfx(~_mana~); attack(d); };,Slick Slash,MAX4,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Magnolia_downgraded,Even: Cost [mana]1[;] do [sword]<d6>|Odd: Gain [mana]1,1,if(d%2 == 0){ if(getstatusself(MANA) >= 1){ removestatusself(MANA); attack(d); sfxdamage(target[;]d); }; }else{ inflictself(MANA); sfx(~_mana~); };,Slick Slash,MAX4,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Carnation,Cost [mana]3: [sword]<triple> damage|If [mana] less than 3: gain [mana]1,1,if(getstatusself(MANA) >= 3){ removestatusself(MANA[;]3); sfx(~_mana~); attack(d*3); sfxdamage(target[;]d*3); }; if(getstatusself(MANA) < 3){ inflictself(MANA); sfx(~_mana~); };,Throwing Knife,MAX4,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,if(getstatusself(MANA) >= 3){ e.castdirection = 1; }else{ e.castdirection = 0; };,,,if(getstatusself(MANA) < 3){ inflictself(MANA); sfx(~_mana~); };
Carnation_upgraded,Cost [mana]3: [sword]<triple> damage|If [mana] less than 3: gain [mana]1,1,if(getstatusself(MANA) >= 3){ removestatusself(MANA[;]3); sfx(~_mana~); attack(d*3); sfxdamage(target[;]d*3); }; if(getstatusself(MANA) < 3){ inflictself(MANA); sfx(~_mana~); };,Throwing Knife,MAX5,,RED,,,,,0,NO,NO,,,,,,,,,,if(getstatusself(MANA) >= 3){ e.castdirection = 1; }else{ e.castdirection = 0; };,,,if(getstatusself(MANA) < 3){ inflictself(MANA); sfx(~_mana~); };
Carnation_downgraded,Cost [mana]3: [sword]<d6> damage|If [mana] less than 3: gain [mana]1,1,if(getstatusself(MANA) >= 3){ removestatusself(MANA[;]3); sfx(~_mana~); attack(d*3); sfxdamage(target[;]d*3); }; if(getstatusself(MANA) < 3){ inflictself(MANA); sfx(~_mana~); };,Throwing Knife,MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,if(getstatusself(MANA) >= 3){ e.castdirection = 1; }else{ e.castdirection = 0; };,,,if(getstatusself(MANA) < 3){ inflictself(MANA); sfx(~_mana~); };
Swingset,Do [sword]<d6> damage. In [jinx]<d6>|turns[;] gain [mana]<d6> mana,1,attack(d); sfxdamage(target[;]d); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Swingset~[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~);~[;]self[;]self[;]d[;]d);,Whacksies,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,jinx(~Swingset~[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~);~[;]self[;]self[;]d[;]d); sfx(~_thinghappens~[;]~~[;]0.2);
Swingset_upgraded,Do [sword]<d6> damage. In [jinx]<d6>|turns[;] gain [mana]<double> mana,1,attack(d); sfxdamage(target[;]d); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Swingset~[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~);~[;]self[;]self[;]d[;]d*2);,Whacksies,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,jinx(~Swingset~[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~);~[;]self[;]self[;]d[;]d*2); sfx(~_thinghappens~[;]~~[;]0.2);
Swingset_downgraded,Do [sword]<d6> damage. In [jinx]<d6>|turns[;] gain [mana]<d6> mana,1,attack(d); sfxdamage(target[;]d); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Swingset~[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~);~[;]self[;]self[;]d[;]d);,Whacksies,MAX4,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,jinx(~Swingset~[;]~gain [mana]%VAR% mana~[;]~Gain [mana]%VAR% mana~[;]~inflict(MANA[;]%VAR%); sfx(\~_mana\~);~[;]self[;]self[;]d[;]d); sfx(~_thinghappens~[;]~~[;]0.2);
Pear Spear,Restore [heal]4 health|Gain [mana]1 mana,1,pierceattackself(-4); inflictself(MANA); sfx(~_heal~); sfx(~_mana~[;]~~[;]0.2);,Revitalize,REQUIRE6,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Pear Spear_upgraded,Restore [heal]6 health|Gain [mana]1 mana,1,pierceattackself(-6); inflictself(MANA); sfx(~_heal~); sfx(~_mana~[;]~~[;]0.2);,Revitalize,REQUIRE6,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Pear Spear_downgraded,Restore [heal]2 health|Gain [mana]1 mana,1,pierceattackself(-2); inflictself(MANA); sfx(~_heal~); sfx(~_mana~[;]~~[;]0.2);,Revitalize,REQUIRE6,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Pansy,[sword]1[;] add [weaken]1 weaken. Repeat|per [mana]6 mana you have,1,if(simulation){var times = getstatusself(MANA)/6; for(x in 0...times+1){ attack(1); inflict(WEAKEN); };};,Theremin,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(1); inflict(WEAKEN); sfx(\~_weaken\~); sfxdamage(target|~+d+~);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~ORANGE~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; var times = getstatusself(MANA)/6; for(x in 0...times+1){ makespike(e.x + (e.width)/2 - 200|e.y+((self.isplayer ? 100 : -100)*x)|x/7);};};,,,
Pansy_upgraded,[sword]1[;] add [weaken]1 weaken. Repeat|per [mana]4 mana you have,1,if(simulation){var times = getstatusself(MANA)/4; for(x in 0...times+1){ attack(1); inflict(WEAKEN); };};,Theremin,COUNTDOWN,6,ORANGE,,,,,0,YES,NO,,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(1); inflict(WEAKEN); sfx(\~_weaken\~); sfxdamage(target|~+d+~);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~ORANGE~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; var times = getstatusself(MANA)/4; for(x in 0...times+1){ makespike(e.x + (e.width)/2 - 200|e.y+((self.isplayer ? 100 : -100)*x)|x/7);};};,,,
Pansy_downgraded,[sword]1[;] add [weaken]1 weaken. Repeat|per [mana]8 mana you have,1,if(simulation){var times = getstatusself(MANA)/8; for(x in 0...times+1){ attack(1); inflict(WEAKEN); };};,Theremin,COUNTDOWN,6,ORANGE,,,,,0,YES,NO,,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(1); inflict(WEAKEN); sfx(\~_weaken\~); sfxdamage(target|~+d+~);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~ORANGE~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; var times = getstatusself(MANA)/8; for(x in 0...times+1){ makespike(e.x + (e.width)/2 - 200|e.y+((self.isplayer ? 100 : -100)*x)|x/7);};};,,,
Twolip,Deal [sword]2 damage|Gain [mana]2 mana,1,attack(2); sfxdamage(target[;]2); inflictself(MANA[;]2); sfx(~_mana~);,Pea Gun,REQUIRE2,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,inflictself(MANA[;]2); sfx(~_mana~);
Twolip_upgraded,Do [sword]2[;] gain [mana]2|,1,attack(2); sfxdamage(target[;]2); inflictself(MANA[;]2); sfx(~_mana~);,Pea Gun,REQUIRE2,,RED,,,,,2,NO,NO,,,,,,,,,,,,,inflictself(MANA[;]2); sfx(~_mana~);
Twolip_downgraded,Gain [mana]2 mana,1,inflictself(MANA[;]2); sfx(~_mana~);,Pea Gun,REQUIRE2|REQUIRE2,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Marigold,Duplicate a dice|(Cost [mana]3: re-equip this),1,givedice([d[;]d]);,Clone Device,MAX4,,YELLOW,change_power,change_power,,,1,YES,NO,hidereuseable,1,,,,,,,,if(getstatusself(MANA) >= 3){ removestatusself(MANA[;]3); sfx(~_mana~); e.usesleft += 1; };,,,
Marigold_upgraded,Duplicate a dice|(Cost [mana]3: re-equip this),1,givedice([d[;]d]);,Clone Device,NORMAL,,YELLOW,,,,,1,YES,NO,hidereuseable,,,,,,,,,if(getstatusself(MANA) >= 3){ removestatusself(MANA[;]3); sfx(~_mana~); e.usesleft += 1; };,,,
Marigold_downgraded,Duplicate a dice|(Cost [mana]3: re-equip this),1,givedice([d[;]d]);,Clone Device,MAX2,,YELLOW,,,,none,1,YES,NO,hidereuseable,,,,,,,,,if(getstatusself(MANA) >= 3){ removestatusself(MANA[;]3); sfx(~_mana~); e.usesleft += 1; };,,,
Lavender,Restore [heal]<d6> health|(Cost [mana]<d6>: +[shield]<d6> shield),1,attackself(-d); sfx(~_heal~); if(getstatusself(MANA) >= d){ removestatusself(MANA[;]d); inflictself(SHIELD[;]d); sfx(~_shield~[;]~~[;]0.2); };,Revitalize,MAX3,,PURPLE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Lavender_upgraded,Restore [heal]<d6> health|(Cost [mana]<d6>: +[shield]<d6> shield),1,attackself(-d); sfx(~_heal~); if(getstatusself(MANA) >= d){ removestatusself(MANA[;]d); inflictself(SHIELD[;]d); sfx(~_shield~[;]~~[;]0.2); };,Revitalize,MAX4,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Lavender_downgraded,Restore [heal]<d6> health|(Cost [mana]<d6>: +[shield]<d6> shield),1,attackself(-d); sfx(~_heal~); if(getstatusself(MANA) >= d){ removestatusself(MANA[;]d); inflictself(SHIELD[;]d); sfx(~_shield~[;]~~[;]0.2); };,Revitalize,MAX2,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Begonia,Do [sword]4 per enemy [mana] mana|([curse]Curse self each turn),1,if(getstatus(MANA) > 0){ attack(getstatus(MANA) * 4); sfxdamage(target[;]getstatus(MANA) * 4); };,Megacurse,NORMAL,,ORANGE,change_power,change_power,,,0,YES,NO,excludefromrandomlists|witchonly,1,,,,inflictself(CURSE); sfx(~_curse~); e.animate(~flashandshake~);,,,,,,,
Begonia_upgraded,Do [sword]6 per enemy [mana] mana|([curse]Curse self each turn),1,if(getstatus(MANA) > 0){ attack(getstatus(MANA) * 6); sfxdamage(target[;]getstatus(MANA) * 6); };,Megacurse,NORMAL,,ORANGE,,,,,0,YES,NO,excludefromrandomlists|witchonly,,,,,inflictself(CURSE); sfx(~_curse~); e.animate(~flashandshake~);,,,,,,,
Begonia_downgraded,Do [sword]3 per enemy [mana] mana|([curse]Curse self each turn),1,if(getstatus(MANA) > 0){ attack(getstatus(MANA) * 3); sfxdamage(target[;]getstatus(MANA) * 3); };,Megacurse,NORMAL,,ORANGE,,,,,0,YES,NO,excludefromrandomlists|witchonly,,,,,inflictself(CURSE); sfx(~_curse~); e.animate(~flashandshake~);,,,,,,,
Dogwood,Deal [sword]<d6> damage|(If [mana]>=<d6>: do [sword]<d6> more,1,if(getstatusself(MANA) >= d){ attack(d*2); sfxdamage(target[;]d*2); }else{ attack(d); sfxdamage(target[;]d); };,Plasma Gun,MAX5,,RED,change_power,change_power,,none,0,NO,NO,,1,,,,,,,,,,,
Dogwood_upgraded,Deal [sword]<d6> damage|(If [mana]>=<d6>: do [sword]<d6> more,1,if(getstatusself(MANA) >= d){ attack(d*2); sfxdamage(target[;]d*2); }else{ attack(d); sfxdamage(target[;]d); };,Plasma Gun,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Dogwood_downgraded,Deal [sword]<d6> damage|(If [mana]>=<d6>: do [sword]<d6> more,1,if(getstatusself(MANA) >= d){ attack(d*2); sfxdamage(target[;]d*2); }else{ attack(d); sfxdamage(target[;]d); };,Plasma Gun,MAX3,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Camellia,Duplicate a dice|(If [mana]>=<d6>: get 1 more copy),1,if(getstatusself(MANA) >=d){ givedice([d[;]d[;]d]); sfx(~_mana~); }else{ givedice([d[;]d]); sfx(~_thinghappens~); };,Clone Device,MAX4,,RED,change_power,change_power,,,0,YES,NO,,2,,,,,,,,,,,
Camellia_upgraded,Duplicate a dice|(If [mana]>=<d6>: get 1 more copy),1,if(getstatusself(MANA) >=d){ givedice([d[;]d[;]d]); sfx(~_mana~); }else{ givedice([d[;]d]); sfx(~_thinghappens~); };,Clone Device,NORMAL,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Camellia_downgraded,Duplicate a dice,1,givedice([d[;]d]); sfx(~_thinghappens~);,Clone Device,MAX4,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Wisteria,Gain [mana]1 mana|On 6[;] get [mana]2 more,1,inflictself(MANA); if(d == 6){ inflictself(MANA[;]2); }; sfx(~_mana~);,Lava Drop,EVEN,,PURPLE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Wisteria_upgraded,Gain [mana]1 mana|On 6[;] get [mana]2 more,1,inflictself(MANA); if(d == 6){ inflictself(MANA[;]2); }; sfx(~_mana~);,Lava Drop,NORMAL,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Wisteria_downgraded,Gain [mana]1 mana,1,inflictself(MANA); sfx(~_mana~);,Lava Drop,EVEN,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Plurale Tantrum,Fix your items' grammar|(Always offered as scrap),1,for(eq in self.equipment){ if(eq.ready && eq.availablethisturn){ var d = eq.fulldescription; var l = d.split(~dice~); if(l.length > 1){ eq.fulldescription = l.join(~dices~); eq.animate(~flashandshake~); }; }; }; sfx(~openchest~);,Regenerate,EVEN,,GRAY,change_power,change_power,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Plurale Tantrum_upgraded,Fix your items' grammar|(Always offered as scrap),1,for(eq in self.equipment){ if(eq.ready && eq.availablethisturn){ var d = eq.fulldescription; var l = d.split(~dice~); if(l.length > 1){ eq.fulldescription = l.join(~dices~); eq.animate(~flashandshake~); }; }; }; sfx(~openchest~);,Regenerate,NORMAL,,GRAY,,,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Plurale Tantrum_downgraded,Ficks your item's grammer|(Always offered as scrap),1,for(eq in self.equipment){ if(eq.ready && eq.availablethisturn){ var d = eq.fulldescription; var l = d.split(~dice~); if(l.length > 1){ eq.fulldescription = l.join(~douse~); eq.animate(~flashandshake~); }; }; }; sfx(~openchest~);,Regenerate,EVEN,,GRAY,,,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Blood Regen,Lose [heart]<d6>[;] but heal [heal]2|hp per turn for [regen]<d6> turns,1,if(simulation){ bonus(-1000); }else{ pierceattackself(d); sfx(~_drain~); inflictself(~regen~+d[;]2); };,Regenerate,NORMAL,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Blood Regen_upgraded,Lose [heart]<d6>[;] but heal [heal]2|hp per turn for [regen]<double> turns,1,if(simulation){ bonus(-1000); }else{ pierceattackself(d); sfx(~_drain~); inflictself(~regen~+(d*2)[;]2); };,Regenerate,NORMAL,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Blood Regen_downgraded,Lose [heart]<d6>[;] but heal [heal]1|hp per turn for [regen]<d6> turns,1,if(simulation){ bonus(-1000); }else{ pierceattackself(d); sfx(~_drain~); inflictself(~regen~+d); };,Regenerate,NORMAL,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Sprinkler,Bump a random dice[;]|repeats <d6> times,1,var poss = []; for(dice in self.dicepool){ if(dice.available() && dice.basevalue < 6){ poss.push(dice); }; }; var x = 0; while(x < d){ if(poss.length == 0){ break; }; x+=1; var r = rand(poss); r.basevalue = r.basevalue+1; r.animatereroll(r.basevalue[;]self.screenposition()[;]0); if(r.basevalue == 6){ poss.remove(r); }; }; if(d-x > 0){ givedice(d-x); };,Megabump,MAX4,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Sprinkler_upgraded,Bump a random dice[;]|repeats <d6> times,1,var poss = []; for(dice in self.dicepool){ if(dice.available() && dice.basevalue < 6){ poss.push(dice); }; }; var x = 0; while(x < d){ if(poss.length == 0){ break; }; x+=1; var r = rand(poss); r.basevalue = r.basevalue+1; r.animatereroll(r.basevalue[;]self.screenposition()[;]0); if(r.basevalue == 6){ poss.remove(r); }; }; if(d-x > 0){ givedice(d-x); };,Megabump,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Sprinkler_downgraded,Bump a random dice[;]|repeats <d6> times,1,var poss = []; for(dice in self.dicepool){ if(dice.available() && dice.basevalue < 6){ poss.push(dice); }; }; var x = 0; while(x < d){ if(poss.length == 0){ break; }; x+=1; var r = rand(poss); r.basevalue = r.basevalue+1; r.animatereroll(r.basevalue[;]self.screenposition()[;]0); if(r.basevalue == 6){ poss.remove(r); }; }; if(d-x > 0){ givedice(d-x); };,Megabump,MAX2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Scales of Justdice,Average all your dice values,1,function floordiv(x[;]y){ var t = 0; while(x > 0){ x-=y; t++; }; return(t); }; var tot = 0; var count = 0; var ava=[]; for(dice in self.dicepool){ if(dice.available()){ tot+=dice.basevalue; count+=1; ava.push(dice); }; }; var del = 0; for(dice in ava){ trace(tot); trace(count); trace(~~); del+=0.05; dice.animatereroll(floordiv(tot[;]count)[;]self.screenposition()[;]del); tot-=floordiv(tot[;]count); count-=1; };,Magic Spanner,COUNTDOWN,5,YELLOW,change_power,change_power,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Scales of Justdice_upgraded,Average all your dice values|,1,function floordiv(x[;]y){ var t = 0; while(x > 0){ x-=y; t++; }; return(t); }; var tot = 0; var count = 0; var ava=[]; for(dice in self.dicepool){ if(dice.available()){ tot+=dice.basevalue; count+=1; ava.push(dice); }; }; var del = 0; for(dice in ava){ trace(tot); trace(count); trace(~~); del+=0.05; dice.animatereroll(floordiv(tot[;]count)[;]self.screenposition()[;]del); tot-=floordiv(tot[;]count); count-=1; };,Magic Spanner,COUNTDOWN,5,YELLOW,,,,none,-1,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Scales of Justdice_downgraded,No effect,1,,Magic Spanner,COUNTDOWN,5,YELLOW,,,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Swedge,Deal [sword]<var:swedge> damage[;] twice|[gray](Reusable),1,if(simulation){attack(self.getvar(~swedge~)); attack(self.getvar(~swedge~));};,Finger Guns,NORMAL,,RED,change_power,change_power,,none,-1,YES,NO,excludefromrandomlists,,self.setvar(~swedge~|0); e.setvar(~anim~|0);,self.setvar(~swedge~|0); e.setvar(~anim~|0);,if(getstatusself(~luck+~) > 0){self.setvar(~swedge~|2);} else if(getstatusself(~luck~) > 0){self.setvar(~swedge~|1);}else{self.setvar(~swedge~|0);}; if(self.getvar(~swedge~) > 0 && e.getvar(~anim~) == 0){sfx(~openchest~); e.setvar(~anim~|1); var h = new elements.Animation(); h.applytoequipment(e); e.animation.push(h); h.addcommand(~flash~|null|0.1); h.addcommand(~textparticle~|~[heal] Lucky!~|10021185); };,if(getstatusself(~luck+~) > 0){self.setvar(~swedge~|2);} else if(getstatusself(~luck~) > 0){self.setvar(~swedge~|1);}else{self.setvar(~swedge~|0);}; if(self.getvar(~swedge~) > 0 && e.getvar(~anim~) == 0){sfx(~openchest~); e.setvar(~anim~|1); var h = new elements.Animation(); h.applytoequipment(e); e.animation.push(h); h.addcommand(~flash~|null|0.1); h.addcommand(~textparticle~|~[heal] Lucky!~|10021185); };,if(getstatusself(~luck+~) > 0){self.setvar(~swedge~|2);} else if(getstatusself(~luck~) > 0){self.setvar(~swedge~|1);}else{self.setvar(~swedge~|0);}; if(self.getvar(~swedge~) > 0 && e.getvar(~anim~) == 0){sfx(~openchest~); e.setvar(~anim~|1); var h = new elements.Animation(); h.applytoequipment(e); e.animation.push(h); h.addcommand(~flash~|null|0.1); h.addcommand(~textparticle~|~[heal] Lucky!~|10021185); };,,self.setvar(~swedge~|0); e.setvar(~anim~|0);,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(self.getvar(\~swedge\~)); sfxdamage(target|self.getvar(\~swedge\~));~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~RED~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 200 : -200)|0.1); makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 200 : -200)|0.2);};,,,
Swedge_upgraded,Deal [sword]<var:swedge> damage[;] thrice|[gray](Reusable),1,if(simulation){attack(self.getvar(~swedge~)); attack(self.getvar(~swedge~)); attack(self.getvar(~swedge~));};,Finger Guns,NORMAL,,RED,,,,none,-1,YES,NO,excludefromrandomlists,,self.setvar(~swedge~|0); e.setvar(~anim~|0);,self.setvar(~swedge~|0); e.setvar(~anim~|0);,if(getstatusself(~luck+~) > 0){self.setvar(~swedge~|2);} else if(getstatusself(~luck~) > 0){self.setvar(~swedge~|1);}else{self.setvar(~swedge~|0);}; if(self.getvar(~swedge~) > 0 && e.getvar(~anim~) == 0){sfx(~openchest~); e.setvar(~anim~|1); var h = new elements.Animation(); h.applytoequipment(e); e.animation.push(h); h.addcommand(~flash~|null|0.1); h.addcommand(~textparticle~|~[heal] Lucky!~|10021185); };,if(getstatusself(~luck+~) > 0){self.setvar(~swedge~|2);} else if(getstatusself(~luck~) > 0){self.setvar(~swedge~|1);}else{self.setvar(~swedge~|0);}; if(self.getvar(~swedge~) > 0 && e.getvar(~anim~) == 0){sfx(~openchest~); e.setvar(~anim~|1); var h = new elements.Animation(); h.applytoequipment(e); e.animation.push(h); h.addcommand(~flash~|null|0.1); h.addcommand(~textparticle~|~[heal] Lucky!~|10021185); };,if(getstatusself(~luck+~) > 0){self.setvar(~swedge~|2);} else if(getstatusself(~luck~) > 0){self.setvar(~swedge~|1);}else{self.setvar(~swedge~|0);}; if(self.getvar(~swedge~) > 0 && e.getvar(~anim~) == 0){sfx(~openchest~); e.setvar(~anim~|1); var h = new elements.Animation(); h.applytoequipment(e); e.animation.push(h); h.addcommand(~flash~|null|0.1); h.addcommand(~textparticle~|~[heal] Lucky!~|10021185); };,,self.setvar(~swedge~|0); e.setvar(~anim~|0);,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(self.getvar(\~swedge\~)); sfxdamage(target|self.getvar(\~swedge\~));~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~RED~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 200 : -200)|0.1); makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 400 : -400)|0.2); makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 400 : -400)|0.3);};,,,
Swedge_downgraded,Deal [sword]<var:swedge> damage,1,if(simulation){attack(self.getvar(~swedge~));};,Finger Guns,NORMAL,,RED,,,,none,0,YES,NO,excludefromrandomlists,,self.setvar(~swedge~|0); e.setvar(~anim~|0);,self.setvar(~swedge~|0); e.setvar(~anim~|0);,if(getstatusself(~luck+~) > 0){self.setvar(~swedge~|2);} else if(getstatusself(~luck~) > 0){self.setvar(~swedge~|1);}else{self.setvar(~swedge~|0);}; if(self.getvar(~swedge~) > 0 && e.getvar(~anim~) == 0){sfx(~openchest~); e.setvar(~anim~|1); var h = new elements.Animation(); h.applytoequipment(e); e.animation.push(h); h.addcommand(~flash~|null|0.1); h.addcommand(~textparticle~|~[heal] Lucky!~|10021185); };,if(getstatusself(~luck+~) > 0){self.setvar(~swedge~|2);} else if(getstatusself(~luck~) > 0){self.setvar(~swedge~|1);}else{self.setvar(~swedge~|0);}; if(self.getvar(~swedge~) > 0 && e.getvar(~anim~) == 0){sfx(~openchest~); e.setvar(~anim~|1); var h = new elements.Animation(); h.applytoequipment(e); e.animation.push(h); h.addcommand(~flash~|null|0.1); h.addcommand(~textparticle~|~[heal] Lucky!~|10021185); };,if(getstatusself(~luck+~) > 0){self.setvar(~swedge~|2);} else if(getstatusself(~luck~) > 0){self.setvar(~swedge~|1);}else{self.setvar(~swedge~|0);}; if(self.getvar(~swedge~) > 0 && e.getvar(~anim~) == 0){sfx(~openchest~); e.setvar(~anim~|1); var h = new elements.Animation(); h.applytoequipment(e); e.animation.push(h); h.addcommand(~flash~|null|0.1); h.addcommand(~textparticle~|~[heal] Lucky!~|10021185); };,,self.setvar(~swedge~|0); e.setvar(~anim~|0);,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400;spike.script = ~attack(self.getvar(\~swedge\~)); sfxdamage(target|self.getvar(\~swedge\~));~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~RED~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 200 : -200)|0.1); };,,,
Belated Delivery,In [jinx]<d6> turns[;]|get <d6> new dice,1,var dicearray = []; for(x in 0...d){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; jinx(~Delivery!~[;]~get %VAR% new dice~[;]~Get %VAR% extra dice~[;]~for(x in ~+dicearray+~){inflict(\~stash\~+x);}; sfx(\~_thinghappens\~);~[;]self[;]target[;]d[;]d); sfx(~_magic~);,Magic Six,MAX4,,PINK,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Belated Delivery_upgraded,In [jinx]<d6> turns[;]|get <d6> new dice,1,var dicearray = []; for(x in 0...d){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; jinx(~Delivery!~[;]~get %VAR% new dice~[;]~Get %VAR% extra dice~[;]~for(x in ~+dicearray+~){inflict(\~stash\~+x);}; sfx(\~_thinghappens\~);~[;]self[;]target[;]d[;]d); sfx(~_magic~);,Magic Six,NORMAL,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Belated Delivery_downgraded,In [jinx]<d6> turns[;]|get <d6> new dice,1,var dicearray = []; for(x in 0...d){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; jinx(~Delivery!~[;]~get %VAR% new dice~[;]~Get %VAR% extra dice~[;]~for(x in ~+dicearray+~){inflict(\~stash\~+x);}; sfx(\~_thinghappens\~);~[;]self[;]target[;]d[;]d); sfx(~_magic~);,Magic Six,MAX2,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Auto Turret,Deal [sword]3 damage at the|start of each turn,1,,Bubble Gun,,,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists|cannotreuse|avoidshock|avoidaltpoison,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(3); sfxdamage(target|3);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~RED~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 100 : -100)|-0.2); };,,,,,,,
Auto Turret_upgraded,Deal [sword]4 damage at the|start of each turn,1,,Bubble Gun,,,RED,,,,none,0,NO,NO,excludefromrandomlists|cannotreuse|avoidshock|avoidaltpoison,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(4); sfxdamage(target|4);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~RED~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 100 : -100)|-0.2); };,,,,,,,
Auto Turret_downgraded,Deal [sword]2 damage at the|start of each turn,1,,Bubble Gun,,,RED,,,,none,0,NO,NO,excludefromrandomlists|cannotreuse|avoidshock|avoidaltpoison,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(2); sfxdamage(target|2);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~RED~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 100 : -100)|-0.2); };,,,,,,,
Crescent Pendant,Roll a six[;] return lower dice,1,var x = actualdice[0].basevalue; if(actualdice[1].basevalue < x){ x = actualdice[1].basevalue; }; givedice([6[;]x]);,Magic Six,NORMAL|NORMAL,6,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Crescent Pendant_upgraded,Roll a six[;] return first dice,1,givedice([6[;]actualdice[0].basevalue]);,Magic Six,NORMAL|NORMAL,6,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Crescent Pendant_downgraded,Roll a six,1,givedice([6]);,Magic Six,NORMAL|NORMAL,6,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Cleaver,Deal [sword]10 damage|Cooldown of 1 turn,1,attack(10); sfxdamage(target[;]10); e.availablenextturn = false; e.unavailabledetails = [~On cooldown!~];,Throwing Knife,COUNTDOWN,10,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cleaver_upgraded,Deal [sword]13 damage|Cooldown of 1 turn,1,attack(13); sfxdamage(target[;]13); e.availablenextturn = false; e.unavailabledetails = [~On cooldown!~];,Throwing Knife,COUNTDOWN,10,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cleaver_downgraded,Deal [sword]5 damage|Cooldown of 1 turn,1,attack(5); sfxdamage(target[;]5); e.availablenextturn = false; e.unavailabledetails = [~On cooldown!~];,Throwing Knife,COUNTDOWN,10,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Splutter,Split one dice in two|Return the other,1,var r = rand([0[;]1]); var dicearr = []; dicearr.push(actualdice[r].basevalue); dicearr = dicearr.concat(split(actualdice[1-r].basevalue[;]2)); givedice(dicearr);,Magic Lockpick,MIN2|MIN2,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Splutter_upgraded,Split first dice in two|Return the other,1,givedice(split(actualdice[0].basevalue[;]2).concat(actualdice[1].basevalue));,Magic Lockpick,MIN2|MIN2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Splutter_downgraded,Split one dice in two,1,givedice(split(actualdice[rand([0[;]1])].basevalue));,Magic Lockpick,MIN2|MIN2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Kalis,Deal [sword]1 damage[;] twice|[gray](Reusable),1,,Bubble Gun,NORMAL|NORMAL,,RED,change_power,change_power,,none,-1,YES,NO,,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(1); sfxdamage(target|1);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~RED~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 400|e.y|0.1); makespike(e.x + (e.width)/2|e.y|0.2);};,,,
Kalis_upgraded,Deal [sword]1 damage[;] 3 times|[gray](Reusable),1,,Bubble Gun,NORMAL|NORMAL,,RED,,,,none,-1,YES,NO,,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(1); sfxdamage(target|1);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~RED~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 400|e.y|0.1); makespike(e.x + (e.width)/2|e.y|0.2); makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 150 : -150)|0.3);};,,,
Kalis_downgraded,Deal [sword]1 damage|[gray](Reusable),1,,Bubble Gun,NORMAL|NORMAL,,RED,,,,none,-1,YES,NO,,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(1); sfxdamage(target|1);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~RED~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 100 : -100)|0.1); };,,,
Swizzle,Dice value +1[;] then|flip it upside down,1,var da = []; d = d + 1; while(d > 6){da.push(6); d-=6;}; da.push(d); da[0] = 7 - da[0]; if(da.length > 0){givedice(da);};,Magic Lantern,MAX5,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Swizzle_upgraded,Dice value -1[;] then|flip it upside down,1,var da = []; d = d - 1; while(d > 6){da.push(6); d-=6;}; da.push(d); da[0] = 7 - da[0]; if(da.length > 0){givedice(da);};,Magic Lantern,MIN2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Swizzle_downgraded,Dice value +1[;] then|flip it upside down,1,var da = []; d = d + 1; while(d > 6){da.push(6); d-=6;}; da.push(d); da[0] = 7 - da[0]; if(da.length > 0){givedice(da);};,Magic Lantern,MAX2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Cup of Tea,Restore [heal]4 health|Gain [shield]4 shield,1,pierceattackself(-4); inflictself(SHIELD[;]4); sfx(~_heal~); sfx(~_shield~);,Revitalize,COUNTDOWN,16,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Cup of Tea_upgraded,Restore [heal]5 health|Gain [shield]5 shield,1,pierceattackself(-5); inflictself(SHIELD[;]5);  sfx(~_heal~); sfx(~_shield~);,Revitalize,COUNTDOWN,16,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Cup of Tea_downgraded,Restore [heal]2 health|Gain [shield]2 shield,1,pierceattackself(-2); inflictself(SHIELD[;]2);  sfx(~_heal~); sfx(~_shield~);,Revitalize,COUNTDOWN,16,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Unsettling Dream,Halve the enemy's health,1,pierceattack(target.hp/2); sfxdamage(target[;]target.hp/2);,Throwing Knife,COUNTDOWN,50,PURPLE,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Unsettling Dream_upgraded,Deal damage equal to half|of enemy's max health,1,pierceattack(target.maxhp/2); sfxdamage(target[;]target.maxhp/2);,Throwing Knife,COUNTDOWN,50,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Unsettling Dream_downgraded,Reduce enemy health|by a quarter,1,pierceattack(target.hp/4); sfxdamage(target[;]target.hp/4);,Throwing Knife,COUNTDOWN,50,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Megaclone,Duplicate all your dice,1,var dicearray = []; for(dice in self.dicepool){ if(dice.available()){ dicearray.push(dice.basevalue); }; }; givedice(dicearray);,Clone Device,COUNTDOWN,30,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Megaclone_upgraded,Get 2 copies of|all of your dice,1,var dicearray = []; for(dice in self.dicepool){ if(dice.available()){ dicearray.push(dice.basevalue); dicearray.push(dice.basevalue); }; }; givedice(dicearray);,Clone Device,COUNTDOWN,30,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Megaclone_downgraded,Duplicate one of your dice,1,var dicearray = []; for(dice in self.dicepool){ if(dice.available()){ dicearray.push(dice.basevalue); }; }; givedice(rand(dicearray));,Clone Device,COUNTDOWN,30,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Weapons Hot,Gain [thorns]2 thorns[;] inflict|[weaken]2 weaken[;] gain [fury]Fury,2,inflictself(THORNS[;]2); inflict(WEAKEN[;]2); inflictself(FURY); sfx(~_fury~); sfx(~_cure~);,Fury,COUNTDOWN,25,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,inflictself(THORNS[;]2); inflictself(FURY); sfx(~_fury~);
Weapons Hot_upgraded,Gain [thorns]3 thorns[;] inflict|[weaken]3 weaken[;] gain [fury]Fury,2,inflictself(THORNS[;]3); inflict(WEAKEN[;]3); inflictself(FURY); sfx(~_fury~); sfx(~_cure~);,Fury,COUNTDOWN,25,RED,,,,,0,NO,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,inflictself(THORNS[;]3); inflictself(FURY); sfx(~_fury~);
Weapons Hot_downgraded,Gain [thorns]1 thorns[;] inflict|[weaken]1 weaken[;] gain [fury]Fury,2,inflictself(THORNS[;]1); inflict(WEAKEN[;]1); inflictself(FURY); sfx(~_fury~); sfx(~_cure~);,Fury,COUNTDOWN,25,RED,,,,,0,NO,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,inflictself(THORNS[;]1); inflictself(FURY); sfx(~_fury~);
Threeken,Inflict [weaken]3 weaken,2,inflict(WEAKEN[;]3); sfx(~_weaken~);,Burrower,REQUIRE3,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Threeken_upgraded,Inflict [weaken]3 weaken|[gray](3 uses this turn),2,inflict(WEAKEN[;]3); sfx(~_weaken~);,Burrower,REQUIRE3,,ORANGE,,,,,3,NO,NO,,,,,,,,,,,,,
Threeken_downgraded,Inflict [weaken]3 weaken,2,inflict(WEAKEN[;]3); sfx(~_weaken~);,Burrower,REQUIRE3|REQUIRE3|REQUIRE3,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Crown and Anchor,Even: Inflict [weaken]1 weaken|Odd: Gain [thorns]1 thorns,1,if(d%2 == 0){ inflict(WEAKEN); sfx(~_weaken~); }else{ inflictself(THORNS); sfx(~_thorns~); };,Pinprick,NORMAL,,GREEN,change_power,change_power,,,0,SPIKEDSHIELD,NO,,,,,,,,,,,,,
Crown and Anchor_upgraded,Even: [weaken]1 [;] Odd: [thorns]1 |[gray](Reusable),1,if(d%2 == 0){ inflict(WEAKEN); sfx(~_weaken~); }else{ inflictself(THORNS); sfx(~_thorns~); };,Pinprick,NORMAL,,GREEN,,,,,3,SPIKEDSHIELD,NO,,,,,,,,,,,,,
Crown and Anchor_downgraded,Even: Inflict [weaken]1 weaken|Odd: Gain [thorns]1 thorns,1,if(d%2 == 0){ inflict(WEAKEN); sfx(~_weaken~); }else{ inflictself(THORNS); sfx(~_thorns~); };,Pinprick,MAX3,,GREEN,,,,,0,SPIKEDSHIELD,NO,,,,,,,,,,,,,
Surfive,Survive the next fatal blow,1,inflictself(SURVIVE); sfx(~_survive~);,Phoenix Down,REQUIRE5,,PINK,change_power,change_power,survive,,0,YES,NO,,,,,,,,,,,,,
Surfive_upgraded,Survive the next fatal blow,1,inflictself(SURVIVE); sfx(~_survive~);,Phoenix Down,MIN5,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Surfive_downgraded,Survive the next fatal blow,1,inflictself(SURVIVE); sfx(~_survive~);,Phoenix Down,REQUIRE5|REQUIRE5,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Surfive?,Survive for 3 turns...|[gray](once per battle),1,inflictself(SURVIVE); sfx(~_survive~);,Phoenix Down?,REQUIRE5,,PINK,change_power,change_power,,,0,YES,YES,alternateversion,,,,,,,,,,,,
Surfive?_upgraded,Survive for 3 turns...|[gray](once per battle),1,inflictself(SURVIVE); sfx(~_survive~);,Phoenix Down?,MIN5,,PINK,,,,,0,YES,YES,alternateversion,,,,,,,,,,,,
Surfive?_downgraded,Survive for 3 turns...|[gray](once per battle),1,inflictself(SURVIVE); sfx(~_survive~);,Phoenix Down?,REQUIRE5|REQUIRE5,,PINK,,,,,0,YES,YES,alternateversion,,,,,,,,,,,,
Illumineight,Get both dice next turn,1,inflictself(~illuminate~); [for(ad in actualdice) inflictself(~stash~+ad.basevalue) ]; sfx(~magic_gaindice~);,Magic Lantern,NORMAL|NORMAL,8,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Illumineight_upgraded,Get both dice next turn|,1,inflictself(~illuminate~); [for(ad in actualdice) inflictself(~stash~+ad.basevalue) ]; sfx(~magic_gaindice~);,Magic Lantern,NORMAL|NORMAL,8,YELLOW,,,,,8,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Illumineight_downgraded,Get both dice next turn|,1,inflictself(~illuminate~); [for(ad in actualdice) inflictself(~stash~+ad.basevalue) ]; sfx(~magic_gaindice~);,Magic Lantern,ODD|ODD,8,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Curseven,Inflict [curse]7 curses[;] enemy|keeps them between turns,1,inflict(CURSE[;]7); sfx(~_curse~); for(st in target.status){trace(st.type); if(st.type == ~curse~){st.remove_at_endturn = false;};};,Ragnarok,COUNTDOWN,77,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Curseven_upgraded,Inflict [curse]7 curses[;] enemy|keeps them between turns|,1,inflict(CURSE[;]7); sfx(~_curse~); for(st in target.status){trace(st.type); if(st.type == ~curse~){st.remove_at_endturn = false;};};,Ragnarok,COUNTDOWN,77,PURPLE,,,,,7,NO,NO,,,,,,,,,,,,,
Curseven_downgraded,Inflict [curse]1 curse[;] enemy|keeps them between turns,1,inflict(CURSE[;]1); sfx(~_curse~); for(st in target.status){trace(st.type); if(st.type == ~curse~){st.remove_at_endturn = false;};};,Ragnarok,COUNTDOWN,77,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Tesseract,Gain a blessing 4 times|([heal]3[;] [shield]4[;] [dodge]1[;] [thorns]1[;] [reduce]1[]),1,var shield = false; var dodge = false; var heal = false; for(x in 0...4){ var r = rand([0[;]1[;]2[;]3[;]4]); if(r == 0){ attackself(-3); heal = true; }else if(r == 1){ inflictself(SHIELD[;]4); shield = true; }else if(r == 2){ inflictself(DODGE); dodge = true; }else if(r == 3){ inflictself(THORNS); shield = true; }else if(r == 4){ inflictself(REDUCE); shield = true; }; }; if(shield){ sfx(~_shield~); }; if(heal){ sfx(~_heal~); }; if(dodge){ sfx(~_dodge~); };,Power Up,COUNTDOWN,40,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Tesseract_upgraded,Gain a blessing 6 times|([heal]3[;] [shield]4[;] [dodge]1[;] [thorns]1[;] [reduce]1[]),1,var shield = false; var dodge = false; var heal = false; for(x in 0...6){ var r = rand([0[;]1[;]2[;]3[;]4]); if(r == 0){ attackself(-3); heal = true; }else if(r == 1){ inflictself(SHIELD[;]4); shield = true; }else if(r == 2){ inflictself(DODGE); dodge = true; }else if(r == 3){ inflictself(THORNS); shield = true; }else if(r == 4){ inflictself(REDUCE); shield = true; }; }; if(shield){ sfx(~_shield~); }; if(heal){ sfx(~_heal~); }; if(dodge){ sfx(~_dodge~); };,Power Up,COUNTDOWN,40,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Tesseract_downgraded,Gain a blessing 2 times|([heal]3[;] [shield]4[;] [dodge]1[;] [thorns]1[;] [reduce]1[]),1,var shield = false; var dodge = false; var heal = false; for(x in 0...2){ var r = rand([0[;]1[;]2[;]3[;]4]); if(r == 0){ attackself(-3); heal = true; }else if(r == 1){ inflictself(SHIELD[;]4); shield = true; }else if(r == 2){ inflictself(DODGE); dodge = true; }else if(r == 3){ inflictself(THORNS); shield = true; }else if(r == 4){ inflictself(REDUCE); shield = true; }; }; if(shield){ sfx(~_shield~); }; if(heal){ sfx(~_heal~); }; if(dodge){ sfx(~_dodge~); };,Power Up,COUNTDOWN,40,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Locktrick,Dice value +1[;] then|split it in two,1,if(d == 6){ givedice(rand([[1[;]6][;][2[;]5][;][3[;]4][;][4[;]3][;][5[;]2][;][6[;]1]])); }else{ givedice(split(d+1)); };,Magic Lockpick,ODD,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Locktrick_upgraded,Dice value +1[;] then|split it in two,1,if(d == 6){ givedice(rand([[1[;]6][;][2[;]5][;][3[;]4][;][4[;]3][;][5[;]2][;][6[;]1]])); }else{ givedice(split(d+1)); };,Magic Lockpick,MAX5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Locktrick_downgraded,Split a dice in two,1,givedice(split(d));,Magic Lockpick,ODD,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Momentum,Take an extra turn[;]|immediately,1,inflictself(EXTRATURN); if(self.getvar(~furytest~) == 0){ self.endturnnow(); }; sfx(~_fury~);,Time Stop,COUNTDOWN,60,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,self.setvar(~furytest~[;]getstatusself(FURY));,,donothing();,
Momentum_upgraded,Take an extra turn[;]|after you end this one,1,inflictself(EXTRATURN); sfx(~_fury~);,Time Stop,COUNTDOWN,60,YELLOW,,,,,0,YES,NO,,,,,,,,,,self.setvar(~furytest~[;]getstatusself(FURY));,,donothing();,
Momentum_downgraded,Roll an extra dice,1,givedice();,Time Stop,COUNTDOWN,60,YELLOW,,,,,0,YES,NO,,,,,,,,,,self.setvar(~furytest~[;]getstatusself(FURY));,,donothing();,
Death Penalty,Deal [sword]<d6> damage|10% chance to curse enemy,1,var odds = 10; if(getstatusself(~luck~) > 0){ odds += 10 * getstatusself(~luck~); } else if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); sfxdamage(target|d); if(chance(odds)) { self.textparticle(~Success!~); inflict(CURSE); sfx(~_curse~); },Dramatic Pause,MAX5,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Death Penalty_upgraded,Deal [sword]<d6> damage|25% chance to curse enemy,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } else if(getstatusself(~luck+~) > 0){ odds = 100; } attack(d); sfxdamage(target|d); if(chance(odds)) { self.textparticle(~Success!~); inflict(CURSE); sfx(~_curse~); },Dramatic Pause,MAX5,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Death Penalty_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target|d);,Dramatic Pause,MAX5,,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Full House,Roll a 1[;] 2[;] 3[;] 4[;] 5 and 6,1,givedice([1[;]2[;]3[;]4[;]5[;]6]);,Clone Device,COUNTDOWN,42,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Full House_upgraded,Roll a 1[;] 2[;] 3[;] 4[;] 5 and 6|[gray](2 uses this turn),1,givedice([1[;]2[;]3[;]4[;]5[;]6]);,Clone Device,COUNTDOWN,42,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Full House_downgraded,Roll a 1[;] 2[;] and 3,1,givedice([1[;]2[;]3]);,Clone Device,COUNTDOWN,42,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Hairpin,Dice value +1[;] 50%|chance to get -1 instead,1,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 50; } else if(getstatusself(~luck+~) > 0){ odds = 100; }; if(chance(odds)) { self.textparticle(~Success?~); if(d > 1){ givedice(d-1); }; }else{ givedice(d+1); };,Megabump,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Hairpin_upgraded,Dice value +1[;] 50%|chance to get -1 instead|[gray](3 uses per turn),1,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 50; } else if(getstatusself(~luck+~) > 0){ odds = 100; }; if(chance(odds)) { self.textparticle(~Success?~); if(d > 1){ givedice(d-1); }; }else{ givedice(d+1); };,Megabump,NORMAL,,GREEN,,,,,3,YES,NO,,,,,,,,,,,,,
Hairpin_downgraded,Dice value -1,1,givedice(d-1);,Megabump,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Limited Moon,Do [sword]<double>[;] 50% chance|to hit you for [sword]<double> too,1,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 50; } else if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d*2); sfxdamage(target|d*2); if(chance(odds)) { self.textparticle(~Success?~); boomerang(d*2); },Two Handed Knife,NORMAL,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Limited Moon_upgraded,Do [sword]<double>[;] 50% chance|to hit you for [sword]<d6> too,1,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 50; } else if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d*2); sfxdamage(target|d*2); if(chance(odds)) { self.textparticle(~Success?~); boomerang(d); },Two Handed Knife,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Limited Moon_downgraded,Do [sword]<d6>[;] 50% chance|to hit you for [sword]<double> too,1,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 50; } else if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d); sfxdamage(target[;]d); if(chance(odds)) { self.textparticle(~Success?~); boomerang(d*2); },Two Handed Knife,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Conformer,Dice value = half of|your CPU counter (<var:halfcpucounter>),1,givedice(self.getvar(~halfcpucounter~));,Magic Six,EVEN,,GREEN,change_power,change_power,,,0,YES,NO,robotonly|excludefromrandomlists,,,,self.setvar(~halfcpucounter~[;]0);,,if(self.roll_total % 2 == 0){ self.setvar(~halfcpucounter~[;]self.roll_total/2); }else{ self.setvar(~halfcpucounter~[;](self.roll_total-1)/2); };,,,,,,
Conformer_upgraded,Dice value = half of|your CPU counter (<var:halfcpucounter>),1,givedice(self.getvar(~halfcpucounter~));,Magic Six,NORMAL,,GREEN,,,,,0,YES,NO,robotonly|excludefromrandomlists,,,,self.setvar(~halfcpucounter~[;]0);,,if(self.roll_total % 2 == 0){ self.setvar(~halfcpucounter~[;]self.roll_total/2); }else{ self.setvar(~halfcpucounter~[;](self.roll_total-1)/2); };,,,,,,
Conformer_downgraded,Dice value = half of|your CPU counter (<var:halfcpucounter>),1,givedice(self.getvar(~halfcpucounter~));,Magic Six,REQUIRE6,,GREEN,,,,,0,YES,NO,robotonly|excludefromrandomlists,,,,self.setvar(~halfcpucounter~[;]0);,,if(self.roll_total % 2 == 0){ self.setvar(~halfcpucounter~[;]self.roll_total/2); }else{ self.setvar(~halfcpucounter~[;](self.roll_total-1)/2); };,,,,,,
Marvellous Cheer,[sword]3 damage. On jackpot[;]|drain [heart]3 hp instead,1,if(!simulation){if(self.usecpuinsteadofdice){if(self.roll_jackpot > 0){ drain(3); sfx(~_drain~); }else{ attack(3); sfxdamage(target[;]3); };};}else{bonus(-10000);};,Life Leech,COUNTDOWN,7,RED,change_power,change_power,,,0,NO,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,
Marvellous Cheer_upgraded,[sword]3 damage. On jackpot[;]|drain [heart]3 hp as well,1,if(!simulation){if(self.usecpuinsteadofdice){attack(3); if(self.roll_jackpot > 0){ drain(3); sfx(~_drain~[;]~~[;]0.2); }; sfxdamage(target[;]3);};}else{bonus(-10000);};,Life Leech,COUNTDOWN,7,RED,,,,,0,NO,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,
Marvellous Cheer_downgraded,Deal [sword]3 damage,1,attack(3); sfxdamage(target[;]3);,Life Leech,COUNTDOWN,7,RED,,,,none,0,NO,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,
Solder,Combine dice|[gray](Reusable),1,givedice(d);,Magic Six,NORMAL|NORMAL,6,GREEN,change_power,change_power,,,2,YES,NO,,,,,,,,,,,,,
Solder_upgraded,Combine dice|[gray](Reusable),1,givedice(d);,Magic Six,NORMAL|NORMAL,6,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Solder_downgraded,Combine dice,1,givedice(d);,Magic Six,NORMAL|NORMAL,6,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Velcro,Average the dice values,1,givedice([(actualdice[0].basevalue + actualdice[1].basevalue) / 2[;](actualdice[0].basevalue + actualdice[1].basevalue + 1) / 2]);,Magic Six,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Velcro_upgraded,Average the dice values|[gray](3 uses this turn),1,givedice([(actualdice[0].basevalue + actualdice[1].basevalue) / 2[;](actualdice[0].basevalue + actualdice[1].basevalue + 1) / 2]);,Magic Six,NORMAL|NORMAL,,GREEN,,,,,3,YES,NO,,,,,,,,,,,,,
Velcro_downgraded,Average the dice values,1,givedice([(actualdice[0].basevalue + actualdice[1].basevalue) / 2[;](actualdice[0].basevalue + actualdice[1].basevalue + 1) / 2]);,Magic Six,MAX3|MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Tin Snips,Combine dice[;] then|split total in three,1,if(d == 1){ givedice(1); }else if(d == 2){ givedice([1[;]1]); self.textparticle(~Nice try~); }else if(d < 13){ var values = [[[]][;][[]][;][[1[;]1[;]1]][;][[1[;]1[;]2]][;][[1[;]2[;]2][;][1[;]1[;]3]][;][[1[;]1[;]4][;][1[;]2[;]3][;][2[;]2[;]2]][;][[1[;]1[;]5][;][1[;]2[;]4][;][1[;]3[;]3][;][2[;]2[;]3]][;][[1[;]1[;]6][;][1[;]2[;]5][;][1[;]3[;]4][;][2[;]2[;]4][;][2[;]3[;]3]][;][[1[;]2[;]6][;][1[;]3[;]5][;][1[;]4[;]4][;][2[;]3[;]4][;][3[;]3[;]3]][;][[1[;]3[;]6][;][1[;]4[;]5][;][2[;]2[;]6][;][2[;]3[;]5][;][2[;]4[;]4][;][3[;]3[;]4]][;][[1[;]4[;]6][;][1[;]5[;]5][;][2[;]4[;]5][;][3[;]3[;]5][;][3[;]4[;]4]][;][[1[;]5[;]6][;][2[;]4[;]6][;][3[;]3[;]6][;][3[;]4[;]5][;][4[;]4[;]4]]]; var idxs = [[0[;]1[;]2][;][0[;]2[;]1][;][1[;]0[;]2][;][1[;]2[;]0][;][2[;]0[;]1][;][2[;]1[;]0]]; var val = rand(values[d-1]); var idx = rand(idxs); givedice([val[idx[0]][;]val[idx[1]][;]val[idx[2]]]); }else{ givedice(d); }; //consider trying your own split function?,Magic Six,MIN2|MIN2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Tin Snips_upgraded,Combine then split into 3|[gray](2 uses this turn),1,if(d == 1){ givedice(1); }else if(d == 2){ givedice([1[;]1]); self.textparticle(~Nice try~); }else if(d < 13){ var values = [[[]][;][[]][;][[1[;]1[;]1]][;][[1[;]1[;]2]][;][[1[;]2[;]2][;][1[;]1[;]3]][;][[1[;]1[;]4][;][1[;]2[;]3][;][2[;]2[;]2]][;][[1[;]1[;]5][;][1[;]2[;]4][;][1[;]3[;]3][;][2[;]2[;]3]][;][[1[;]1[;]6][;][1[;]2[;]5][;][1[;]3[;]4][;][2[;]2[;]4][;][2[;]3[;]3]][;][[1[;]2[;]6][;][1[;]3[;]5][;][1[;]4[;]4][;][2[;]3[;]4][;][3[;]3[;]3]][;][[1[;]3[;]6][;][1[;]4[;]5][;][2[;]2[;]6][;][2[;]3[;]5][;][2[;]4[;]4][;][3[;]3[;]4]][;][[1[;]4[;]6][;][1[;]5[;]5][;][2[;]4[;]5][;][3[;]3[;]5][;][3[;]4[;]4]][;][[1[;]5[;]6][;][2[;]4[;]6][;][3[;]3[;]6][;][3[;]4[;]5][;][4[;]4[;]4]]]; var idxs = [[0[;]1[;]2][;][0[;]2[;]1][;][1[;]0[;]2][;][1[;]2[;]0][;][2[;]0[;]1][;][2[;]1[;]0]]; var val = rand(values[d-1]); var idx = rand(idxs); givedice([val[idx[0]][;]val[idx[1]][;]val[idx[2]]]); }else{ givedice(d); }; //consider trying your own split function?,Magic Six,MIN2|MIN2,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Tin Snips_downgraded,Split a dice in three,1,givedice(split(d[;]3[;]false));,Magic Six,MIN3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Triskaidekaphobia,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Shuriken,NORMAL|NORMAL|NORMAL,13,PURPLE,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Triskaidekaphobia_upgraded,Deal [sword]<d6> damage[;]|return first dice,1,attack(d); sfxdamage(target[;]d); givedice(actualdice[0].basevalue);,Shuriken,NORMAL|NORMAL|NORMAL,13,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Triskaidekaphobia_downgraded,Deal [sword]7 damage,1,attack(7); sfxdamage(target[;]7);,Shuriken,NORMAL|NORMAL|NORMAL,13,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Hexatomb,Lose [heart]<d6> health|Gain [fury] Fury,1,pierceattackself(d); inflictself(FURY); sfx(~_drain~); sfx(~_fury~);,Steel Skin,NORMAL,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Hexatomb_upgraded,Lose [heart]<d6> hp[;] gain [fury] Fury|[gray](2 uses this turn),1,pierceattackself(d); inflictself(FURY); sfx(~_drain~); sfx(~_fury~);,Steel Skin,NORMAL,,RED,,,,,2,YES,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Hexatomb_downgraded,Lose [heart]<d6> health|Gain [fury] Fury,1,pierceattackself(d); inflictself(FURY); sfx(~_drain~); sfx(~_fury~);,Steel Skin,MIN4,,RED,,,,,0,YES,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Bowsaw,Chop the higher dice so both|are equal (keep the excess),1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a == b){ givedice([a[;]b]); }else{ var max = a; var min = b; if(b > a){ max = b; min = a; }; givedice([min[;]min[;]max-min]); };,Magic Six,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Bowsaw_upgraded,Chop the higher dice so both|are equal (keep the excess)|[gray](2 uses this turn),1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a == b){ givedice([a[;]b]); }else{ var max = a; var min = b; if(b > a){ max = b; min = a; }; givedice([min[;]min[;]max-min]); };,Magic Six,NORMAL|NORMAL,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Bowsaw_downgraded,Set the higher dice equal|to the lower dice,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a == b){ givedice([a[;]b]); }else{ var max = a; var min = b; if(b > a){ max = b; min = a; }; givedice([min[;]min]); };,Magic Six,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Belt Sander,Split 1s from the higher|dice until they're equal,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; var max = a; var min = b; if(b > a){ max = b; min = a; }; var dicearray = [min[;]min]; if(max-min > 0){ for(x in 0...max-min){ dicearray.push(1); }; }; givedice(dicearray);,Magic Six,MIN4|MIN4,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Belt Sander_upgraded,Split 1s from the higher|dice until they're equal,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; var max = a; var min = b; if(b > a){ max = b; min = a; }; var dicearray = [min[;]min]; if(max-min > 0){ for(x in 0...max-min){ dicearray.push(1); }; }; givedice(dicearray);,Magic Six,MIN3|MIN3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Belt Sander_downgraded,Return 2 ones,1,givedice([1[;]1]);,Magic Six,MIN4|MIN4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Blind Rage,Gain [fury] fury[;] but|also [curse] curse yourself,1,inflictself(FURY); sfx(~_fury~); inflictself(CURSE); sfx(~_curse~);,Dramatic Pause,EVEN,,PURPLE,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Blind Rage_upgraded,Gain [fury] fury and [curse] curse|[gray](3 uses this turn),1,inflictself(FURY); sfx(~_fury~); inflictself(CURSE); sfx(~_curse~);,Dramatic Pause,EVEN,,PURPLE,,,,,3,YES,NO,excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Blind Rage_downgraded,[curse] Curse yourself,1,inflictself(CURSE); sfx(~_curse~);,Dramatic Pause,EVEN,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Crystal Skull,Deal [sword]<triple> damage|([curse]Curse yourself each turn),1,attack(d*3); sfxdamage(target[;]d*3);,Dramatic Pause,MAX5,,PURPLE,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,inflictself(CURSE); sfx(~_curse~); e.animate(~flashandshake~);,,,,,,,
Crystal Skull_upgraded,Deal [sword]<triple> damage|([curse]Curse yourself each turn),1,attack(d*3); sfxdamage(target[;]d*3);,Dramatic Pause,NORMAL,,PURPLE,,,,none,0,NO,NO,excludefromrandomlists,,,,,inflictself(CURSE); sfx(~_curse~); e.animate(~flashandshake~);,,,,,,,
Crystal Skull_downgraded,Deal [sword]<d6> damage|([curse]Curse yourself each turn),1,attack(d); sfxdamage(target[;]d);,Dramatic Pause,MAX5,,PURPLE,,,,none,0,NO,NO,excludefromrandomlists,,,,,inflictself(CURSE); sfx(~_curse~); e.animate(~flashandshake~);,,,,,,,
Jail Bat,Deal [sword]<d6> damage|(Receive [lock]1 lock each turn),1,attack(d); sfxdamage(target[;]d);,Shuriken,MAX4|MAX4,,PURPLE,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,inflictself(LOCK); sfx(~_lock~);,e.animate(~flashandshake~); sfx(~_lock~);,,,,,,,
Jail Bat_upgraded,Deal [sword]<d6> damage|(Receive [lock]1 lock each turn),1,attack(d); sfxdamage(target[;]d);,Shuriken,MAX5|MAX5,,PURPLE,,,,none,0,NO,NO,excludefromrandomlists,,,,inflictself(LOCK); sfx(~_lock~);,e.animate(~flashandshake~); sfx(~_lock~);,,,,,,,
Jail Bat_downgraded,Deal [sword]<double> damage|(Receive [lock]1 lock each turn),1,attack(d); sfxdamage(target[;]d);,Shuriken,MAX2|MAX2,,PURPLE,,,,none,0,NO,NO,excludefromrandomlists,,,,inflictself(LOCK); sfx(~_lock~);,e.animate(~flashandshake~); sfx(~_lock~);,,,,,,,
Baseball Bat,Deal [sword]<double> damage[;] give|enemy the dice next turn,1,attack(d*2); sfxdamage(target[;]d*2); inflict(~stash~+d); inflict(~batted~);,Magic Lantern,MAX5,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Baseball Bat_upgraded,Deal [sword]<double> damage[;] give|enemy the dice next turn,1,attack(d*2); sfxdamage(target[;]d*2); inflict(~stash~+d); inflict(~batted~);,Magic Lantern,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Baseball Bat_downgraded,Deal [sword]<double> damage[;] give|enemy the dice next turn,1,attack(d*2); sfxdamage(target[;]d*2); inflict(~stash~+d); inflict(~batted~);,Magic Lantern,MAX3,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Super Spatula,Flip a dice[;] twice!|(Always offered as scrap),1,givedice(d);,Megaflip,NORMAL,,GRAY,change_power,change_power,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Super Spatula_upgraded,Flip a dice [red]FOUR[] times!|(Always offered as scrap),1,givedice(d);,Megaflip,NORMAL,,GRAY,,,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Super Spatula_downgraded,Flip a dice[;] twice!|(Always offered as scrap),1,givedice(d);,Megaflip,MAX3,,GRAY,,,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
One Weird Tip,Roll [red]THREE[] extra dice!|The results will [yellow]SHOCK[] you!,1,if(getstatusself(~luck+~) > 0){self.textparticle(~[heal] Lucky!~); sfx(~useitem~); var da = []; for(x in 0...3){da.push(rand([1|2|3|4|5|6]));}; givedice(da);}else if(getstatusself(~luck~) > 0){self.textparticle(~[heal] Lucky!~); sfx(~useitem~); givedice([1|2|1]);};else{givedice([1[;]1[;]1]);}; var poss = []; for(eq in self.equipment){ if(eq.ready && eq.skillcard == ~~){ poss.push(eq); }; }; if(poss.length > 0){ inflictself(SHOCK); self.applyequipmentcurses(); }else{ inflictself(~mf_malware~); };,GADGET.PDF.EXE,COUNTDOWN,6,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
One Weird Tip_upgraded,Roll [red]FOUR[] extra dice!|The results will [yellow]SHOCK[] you!,1,if(getstatusself(~luck+~) > 0){self.textparticle(~[heal] Lucky!~); sfx(~useitem~); var da = []; for(x in 0...4){da.push(rand([1|2|3|4|5|6]));}; givedice(da);}else if(getstatusself(~luck~) > 0){self.textparticle(~[heal] Lucky!~); sfx(~useitem~); givedice([1|2|2|1]);};else{givedice([1[;]1[;]1|1]);}; var poss = []; for(eq in self.equipment){ if(eq.ready && eq.skillcard == ~~){ poss.push(eq); }; }; if(poss.length > 0){ inflictself(SHOCK); self.applyequipmentcurses(); }else{ inflictself(~mf_malware~); };,GADGET.PDF.EXE,COUNTDOWN,6,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
One Weird Tip_downgraded,Roll [red]TWO[] extra dice!|The results will [yellow]SHOCK[] you!,1,if(getstatusself(~luck+~) > 0){self.textparticle(~[heal] Lucky!~); sfx(~useitem~); var da = []; for(x in 0...2){da.push(rand([1|2|3|4|5|6]));}; givedice(da);}else if(getstatusself(~luck~) > 0){self.textparticle(~[heal] Lucky!~); sfx(~useitem~); givedice([1|2]);};else{givedice([1[;]1]);}; var poss = []; for(eq in self.equipment){ if(eq.ready && eq.skillcard == ~~){ poss.push(eq); }; }; if(poss.length > 0){ inflictself(SHOCK); self.applyequipmentcurses(); }else{ inflictself(~mf_malware~); };,GADGET.PDF.EXE,COUNTDOWN,6,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Dynamo,Gain [dynamo]2 Beam Power|,1,inflictself(~dynamo~[;]2); self.setvar(~dynamo~[;]getstatusself(~dynamo~)); sfx(~_magic~); for(eq in self.equipment){ if(eq.name == ~Focus Beam~ # eq.name == ~Solar Beam~ # eq.name == ~Lunar Beam~ # eq.name == ~Terra Beam~){ eq.animate(~flashandshake~); }; };,Beam Dream,COUNTDOWN,6,GREEN,change_power,change_power,,,-1,YES,NO,excludefromrandomlists,,,self.setvar(~dynamo~[;]0);,,,,,,,,,
Dynamo_upgraded,Gain [dynamo]3 Beam Power|,1,inflictself(~dynamo~[;]3); self.setvar(~dynamo~[;]getstatusself(~dynamo~)); sfx(~_magic~); for(eq in self.equipment){ if(eq.name == ~Focus Beam~ # eq.name == ~Solar Beam~ # eq.name == ~Lunar Beam~ # eq.name == ~Terra Beam~){ eq.animate(~flashandshake~); }; };,Beam Dream,COUNTDOWN,6,GREEN,,,,,-1,YES,NO,excludefromrandomlists,,,self.setvar(~dynamo~[;]0);,,,,,,,,,
Dynamo_downgraded,Gain [dynamo]1 Beam Power|,1,inflictself(~dynamo~[;]1); self.setvar(~dynamo~[;]getstatusself(~dynamo~)); sfx(~_magic~); for(eq in self.equipment){ if(eq.name == ~Focus Beam~ # eq.name == ~Solar Beam~ # eq.name == ~Lunar Beam~ # eq.name == ~Terra Beam~){ eq.animate(~flashandshake~); }; };,Beam Dream,COUNTDOWN,6,GREEN,,,,none,-1,YES,NO,excludefromrandomlists,,,self.setvar(~dynamo~[;]0);,,,,,,,,,
Radical Wrench,Combine dice[;]|rolls over at 4,1,var dicearray = []; var x = d; while(x > 4){ dicearray.push(4); x = x - 4; }; dicearray.push(x); givedice(dicearray);,Magic Spanner,MAX5|MAX5,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Radical Wrench_upgraded,Combine dice[;]|rolls over at 3,1,var dicearray = []; var x = d; while(x > 3){ dicearray.push(3); x = x - 3; }; dicearray.push(x); givedice(dicearray);,Magic Spanner,MAX5|MAX5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Radical Wrench_downgraded,Combine dice,1,givedice(d);,Magic Spanner,MAX5|MAX5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Rodela,Deal [sword] equal to higher dice|Gain [shield] equal to lower dice,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; var max = a; var min = b; if(b > max){ min = a; max = b; }; attack(max); inflictself(SHIELD[;]min); sfxdamage(target[;]max); sfx(~_shield~);,Steel Skin,NORMAL|NORMAL,7,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; var max = a; var min = b; if(b > max){ min = a; max = b; }; inflictself(SHIELD[;]min); sfx(~_shield~);
Rodela_upgraded,Deal [sword] equal to first dice|Gain [shield] equal to second dice,1,attack(actualdice[0].basevalue); inflictself(SHIELD[;]actualdice[1].basevalue); sfxdamage(target[;]actualdice[0].basevalue); sfx(~_shield~);,Steel Skin,NORMAL|NORMAL,7,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD[;]actualdice[1].basevalue); sfx(~_shield~);
Rodela_downgraded,Deal [sword] equal to lower dice|Gain [shield] equal to lower dice,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; var max = a; var min = b; if(b > max){ min = a; max = b; }; attack(min); inflictself(SHIELD[;]min); sfxdamage(target[;]min); sfx(~_shield~);,Steel Skin,NORMAL|NORMAL,7,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; var max = a; var min = b; if(b > max){ min = a; max = b; }; inflictself(SHIELD[;]min); sfx(~_shield~);
Triangle Wave,Odd: Both dice values +1|Even: Both dice values -1,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a%2 == 0){ givedice([a-1[;]b-1]); } else { givedice([a+1[;]b+1]); };,Megabump,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Triangle Wave_upgraded,Odd: both +1[;] Even: both -1|[grey](3 uses this turn),1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a%2 == 0){ givedice([a-1[;]b-1]); } else { givedice([a+1[;]b+1]); };,Megabump,DOUBLES|DOUBLES,,GREEN,,,,,3,YES,NO,,,,,,,,,,,,,
Triangle Wave_downgraded,Both dice values -1,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; givedice([a-1[;]b-1]);,Megabump,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Square Wave,1-3: Roll two ones|4-6: Roll two sixes,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a < 4){ givedice([1|1]); } else { givedice([6|6]); };,Megabump,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Square Wave_upgraded,1-3: Roll three ones|4-6: Roll three sixes,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a < 4){ givedice([1|1|1]); } else { givedice([6|6|6]); };,Megabump,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Square Wave_downgraded,1-3: Roll a 1|4-6: Roll a 6,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a < 4){ givedice([1]); } else { givedice([6]); };,Megabump,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Kerfuffle,Do [sword] equal to one dice|Duplicate the other,2,var r = rand([0[;]1]); attack(actualdice[r].basevalue); sfxdamage(target[;]actualdice[r].basevalue); givedice([actualdice[1-r].basevalue[;]actualdice[1-r].basevalue]);,Shuriken,MAX4|MAX4,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,var r = rand([0[;]1]); givedice([actualdice[1-r].basevalue[;]actualdice[1-r].basevalue]);
Kerfuffle_upgraded,Do [sword] equal to one dice|Duplicate the other,2,var r = rand([0[;]1]); attack(actualdice[r].basevalue); sfxdamage(target[;]actualdice[r].basevalue); givedice([actualdice[1-r].basevalue[;]actualdice[1-r].basevalue]);,Shuriken,NORMAL|NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,var r = rand([0[;]1]); givedice([actualdice[1-r].basevalue[;]actualdice[1-r].basevalue]);
Kerfuffle_downgraded,Do [sword] equal to one dice,2,var r = rand([0[;]1]); attack(actualdice[r].basevalue); sfxdamage(target[;]actualdice[r].basevalue);,Shuriken,MAX4|MAX4,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Slice And Dice,Deal [sword]<d6> damage[;] then [sword]1|dmg per turn for <d6> turns,1,if(simulation){ bonus(-1000); }else{ attack(d); sfxdamage(target[;]d); inflict(~bleed~+d); };,Slick Slash,MAX4,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Slice And Dice_upgraded,Deal [sword]<d6> damage[;] then [sword]1|dmg per turn for <d6> turns,1,if(simulation){ bonus(-1000); }else{ attack(d); sfxdamage(target[;]d); inflict(~bleed~+d); };,Slick Slash,MAX5,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Slice And Dice_downgraded,Deal [sword]<d6> damage[;] then [sword]1|dmg per turn for <d6> turns,1,if(simulation){ bonus(-1000); }else{ attack(d); sfxdamage(target[;]d); inflict(~bleed~+d); };,Slick Slash,MAX2,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Blunt Sword,[sword]<d6> dmg. On 6[;] deal [sword]1|dmg per turn for 3 turns,2,if(simulation){ bonus(-1000); }else{ attack(d); sfxdamage(target[;]d); if(d == 6){ inflict(~bleed3~); }; };,Slick Slash,NORMAL,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Blunt Sword_upgraded,[sword]<d6> dmg. On 6[;] deal [sword]1|dmg per turn for 6 turns,2,if(simulation){ bonus(-1000); }else{ attack(d); sfxdamage(target[;]d); if(d == 6){ inflict(~bleed6~); }; };,Slick Slash,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Blunt Sword_downgraded,Deal [sword]<d6> damage,2,if(simulation){ bonus(-1000); }else{ attack(d); sfxdamage(target[;]d); };,Slick Slash,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Blunt Dagger,[sword]1[;] add <d6> turns of Bleed|[gray](Reuseable),1,if(simulation){ bonus(-1000); }else{ attack(1); sfxdamage(target[;]d); inflict(~bleed~+d); };,Slick Slash,MAX3,,RED,change_power,change_power,,none,-1,NO,NO,,,,,,,,,,,,,
Blunt Dagger_upgraded,[sword]1[;] add <d6> turns of Bleed|[gray](Reuseable),1,if(simulation){ bonus(-1000); }else{ attack(1); sfxdamage(target[;]d); inflict(~bleed~+d); };,Slick Slash,MAX5,,RED,,,,none,-1,NO,NO,,,,,,,,,,,,,
Blunt Dagger_downgraded,Deal [sword]1 damage|[gray](Reusable),1,if(simulation){ bonus(-1000); }else{ attack(1); sfxdamage(target[;]1); };,Slick Slash,MAX3,,RED,,,,none,-1,NO,NO,,,,,,,,,,,,,
Blood to Dice,Lose [heart]<d6> health. On 6[;]|get +1 dice this fight,1,pierceattackself(d); sfx(~_drain~); if(d == 6){ self.extradice+=1; sfx(~magic_gaindice~[;]~~[;]0.2); };,Steel Skin,NORMAL,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Blood to Dice_upgraded,Lose [heart]<d6> health. On 4-6[;]|get +1 dice this fight,1,pierceattackself(d); sfx(~_drain~); if(d >= 4){ self.extradice+=1; sfx(~magic_gaindice~[;]~~[;]0.2); };,Steel Skin,NORMAL,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Blood to Dice_downgraded,Lose [heart]<d6> health,1,pierceattackself(d); sfx(~_drain~);,Steel Skin,NORMAL,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Helium Balloon,Roll 3 more dice[;] but fill|all your dice with helium,1,if(simulation){bonus(-10000);}else{inflictself(~helium~); var amount = 3; var dicearray = []; for(x in 0...amount){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray);};,Magic Six,COUNTDOWN,6,PINK,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Helium Balloon_upgraded,Roll 4 more dice[;] but fill|all your dice with helium,1,if(simulation){bonus(-10000);}else{inflictself(~helium~); var amount = 4; var dicearray = []; for(x in 0...amount){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray);};,Magic Six,COUNTDOWN,6,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Helium Balloon_downgraded,Roll 2 more dice[;] but fill|all your dice with helium,1,if(simulation){bonus(-10000);}else{inflictself(~helium~); var amount = 2; var dicearray = []; for(x in 0...amount){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray);};,Magic Six,COUNTDOWN,6,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Powerfield,Gain [reduce]1 reduce. On jackpot[;]|gain [dodge]1 dodge as well,1,if(self.roll_jackpot > 0){ inflictself(DODGE); sfx(~_dodge~[;]~~[;]0.2); }; inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,REQUIRE3,,ORANGE,change_power,change_power,,,0,YES,NO,robotonly,,,,,,,,,,,,
Powerfield_upgraded,Gain [reduce]2 reduce. On jackpot[;]|gain [dodge]1 dodge as well,1,if(self.roll_jackpot > 0){ inflictself(DODGE); sfx(~_dodge~[;]~~[;]0.2); }; inflictself(REDUCE[;]2); sfx(~_shield~);,Pillow Fort,REQUIRE3,,ORANGE,,,,,0,YES,NO,robotonly,,,,,,,,,,,,
Powerfield_downgraded,Gain [reduce]1 reduce,1,inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,REQUIRE3,,ORANGE,,,,,0,YES,NO,robotonly,,,,,,,,,,,,
Virtual Memory,Reduce CPU counter by <d6>|On jackpot[;] heal [heal]<d6> instead,1,if(!simulation){if(self.usecpuinsteadofdice){if(self.roll_jackpot > 0){ attackself(-d); sfx(~_heal~); }else{ adjustrobotcounter(-d); };};}else{bonus(-10000);};,Regenerate,MAX4,,GREEN,change_power,change_power,,,0,YES,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,
Virtual Memory_upgraded,Reduce CPU counter by <d6>|On jackpot[;] heal [heal]<d6> instead,1,if(!simulation){if(self.usecpuinsteadofdice){if(self.roll_jackpot > 0){ attackself(-d); sfx(~_heal~); }else{ adjustrobotcounter(-d); };};}else{bonus(-10000);};,Regenerate,MAX5,,GREEN,,,,,0,YES,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,
Virtual Memory_downgraded,Reduce CPU counter by <d6>|On jackpot[;] heal [heal]<d6> instead,1,if(!simulation){if(self.usecpuinsteadofdice){if(self.roll_jackpot > 0){ attackself(-d); sfx(~_heal~); }else{ adjustrobotcounter(-d); };};}else{bonus(-10000);};,Regenerate,MAX2,,GREEN,,,,,0,YES,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,
Chronomancy,Heal [heal]5 hp. On jackpot[;]|take an extra turn too,1,attackself(-5); sfx(~_heal~); if(!simulation){if(self.usecpuinsteadofdice){if(self.roll_jackpot > 0){ inflictself(EXTRATURN); sfx(~_magic~[;]~~[;]0.3);};};}else{bonus(-10000);};,Time Stop,COUNTDOWN,24,GREEN,change_power,change_power,,,0,YES,NO,robotonly,,,,,,,,,,,,
Chronomancy_upgraded,Heal [heal]5 hp. On jackpot[;]|take an extra turn too|Immune to errors,1,attackself(-5); sfx(~_heal~); if(!simulation){if(self.usecpuinsteadofdice){if(self.roll_jackpot > 0){ inflictself(EXTRATURN); sfx(~_magic~[;]~~[;]0.3);};};}else{bonus(-10000);};,Time Stop,COUNTDOWN,24,GREEN,,,,,0,YES,NO,robotonly|errorimmune,,,,,,,,,,,,
Chronomancy_downgraded,Heal [heal]1 hp. On jackpot[;]|take an extra turn too,1,attackself(-1); sfx(~_heal~); if(!simulation){if(self.usecpuinsteadofdice){if(self.roll_jackpot > 0){ inflictself(EXTRATURN); sfx(~_magic~[;]~~[;]0.3);};};}else{bonus(-10000);};,Time Stop,COUNTDOWN,24,GREEN,,,,,0,YES,NO,robotonly,,,,,,,,,,,,
Crystal Rock,Deal [sword]<d6> damage|[gray](once per battle),1,attack(d); sfxdamage(target[;]d);,Throwing Knife,MAX3|FREE6,,RED,change_power,change_power,,none,0,NO,YES,,,,,,,,,,,,,
Crystal Rock_upgraded,Deal [sword]<d6> damage|[gray](once per battle),1,attack(d); sfxdamage(target[;]d);,Throwing Knife,NORMAL|FREE6,,RED,,,,none,0,NO,YES,,,,,,,,,,,,,
Crystal Rock_downgraded,Deal [sword]<d6> damage|[gray](once per battle),1,attack(d); sfxdamage(target[;]d);,Throwing Knife,MAX3|FREE3,,RED,,,,none,0,NO,YES,,,,,,,,,,,,,
Bingo,Hit Jackpot[;] but get no|dice or rewards from it,1,if(!simulation){self.roll_jackpot = 1; sfx(~jackpot_autoroll~);}else{bonus(-10000);};,Unlimited Limit,MIN4,,YELLOW,change_power,change_power,,,0,YES,NO,robotonly,,,,,,,,,,,,
Bingo_upgraded,Hit Jackpot[;] but get no|dice or rewards from it,1,if(!simulation){self.roll_jackpot = 1; sfx(~jackpot_autoroll~);}else{bonus(-10000);};,Unlimited Limit,NORMAL,,YELLOW,,,,,0,YES,NO,robotonly,,,,,,,,,,,,
Bingo_downgraded,Hit Jackpot[;] but get no|dice or rewards from it,1,if(!simulation){self.roll_jackpot = 1; sfx(~jackpot_autoroll~);}else{bonus(-10000);};,Unlimited Limit,MIN5,,YELLOW,,,,,0,YES,NO,robotonly,,,,,,,,,,,,
Copy Paste,Duplicate a dice|(not sure which one though),1,givedice([e.getvar(~firstdice~)[;]e.getvar(~firstdice~)]);,Replicate,ODD,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,e.setvar(~firstdice~[;]self.dicepool[0].basevalue);,,,,,,,
Copy Paste_upgraded,Duplicate a dice|(not sure which one though),1,givedice([e.getvar(~firstdice~)[;]e.getvar(~firstdice~)]);,Replicate,NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,e.setvar(~firstdice~[;]self.dicepool[0].basevalue);,,,,,,,
Copy Paste_downgraded,Duplicate a dice|(not sure which one though),1,givedice([e.getvar(~firstdice~)[;]e.getvar(~firstdice~)]);,Replicate,REQUIRE5,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,e.setvar(~firstdice~[;]self.dicepool[0].basevalue);,,,,,,,
Cauldron Cauldron,Do [sword]1[;] get a new dice[;]|get a new cauldron,1,var eqlist = getequipmentlist(null|[]|[~witchonly~|~robotonly~|~excludefromrandomlists~|~alternateversion~]); var cauldrons = []; for(eq in eqlist){if(eq.indexOf(~Cauldron~) > -1){cauldrons.push(eq);};}; var c = rand(cauldrons); trace(c); attack(1); sfxdamage(target[;]1); givedice(); giveequipment(c);,Magic Lockpick,NORMAL,,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists|cannotreuse,,,,,,,,,,,,var cauldrons = [~Gold~[;]~Silver~[;]~Iron~[;]~Copper~[;]~Electrum~[;]~Amber~[;]~Quartz~[;]~Blood~[;]~Glass~[;]~Ash~[;]~Stash~[;]~Mossy~[;]~Trash~[;]~Hat~]; givedice(); giveequipment(rand(cauldrons)+~ Cauldron~);
Cauldron Cauldron_upgraded,Do [sword]2[;] get 2 new dice[;]|get a new cauldron,1,var eqlist = getequipmentlist(null|[]|[~witchonly~|~robotonly~|~excludefromrandomlists~|~alternateversion~]); var cauldrons = []; for(eq in eqlist){if(eq.indexOf(~Cauldron~) > -1){cauldrons.push(eq);};}; var c = rand(cauldrons); attack(2); sfxdamage(target[;]2); var r = []; for(x in [0|1]){r.push(rand(1|2|3|4|5|6));}; givedice(r); giveequipment(c);,Magic Lockpick,NORMAL|NORMAL,,GRAY,,,,,0,NO,NO,excludefromrandomlists|cannotreuse,,,,,,,,,,,,var cauldrons = [~Gold~[;]~Silver~[;]~Iron~[;]~Copper~[;]~Electrum~[;]~Amber~[;]~Quartz~[;]~Blood~[;]~Glass~[;]~Ash~[;]~Stash~[;]~Mossy~[;]~Trash~[;]~Hat~]; givedice(); giveequipment(rand(cauldrons)+~ Cauldron~);
Cauldron Cauldron_downgraded,Deal [sword]1 damage[;] get|a new cauldron,1,var eqlist = getequipmentlist(null|[]|[~witchonly~|~robotonly~|~excludefromrandomlists~|~alternateversion~]); var cauldrons = []; for(eq in eqlist){if(eq.indexOf(~Cauldron~) > -1){cauldrons.push(eq);};}; var c = rand(cauldrons); attack(1); sfxdamage(target[;]1); giveequipment(c);,Magic Lockpick,NORMAL,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|cannotreuse,,,,,,,,,,,,var cauldrons = [~Gold~[;]~Silver~[;]~Iron~[;]~Copper~[;]~Electrum~[;]~Amber~[;]~Quartz~[;]~Blood~[;]~Glass~[;]~Ash~[;]~Stash~[;]~Mossy~[;]~Trash~[;]~Hat~]; giveequipment(rand(cauldrons)+~ Cauldron~);
Scrap Cauldron,Do [sword]1[;] get a [quote]new[quote] dice|(Always offered as scrap),1,attack(1); givedice(d); sfxdamage(target[;]1);,Bubble Gun,NORMAL,,GRAY,change_power,change_power,,,0,NO,NO,appearsforparts,,,,,,,,,,,,givedice(d);
Scrap Cauldron_upgraded,Do [sword]2[;] get 2 [quote]new[quote] dice|(Always offered as scrap),1,attack(2); givedice([actualdice[0].basevalue[;]actualdice[1].basevalue]); sfxdamage(target[;]2);,Bubble Gun,NORMAL|NORMAL,,GRAY,,,,,0,NO,NO,appearsforparts,,,,,,,,,,,,givedice(d);
Scrap Cauldron_downgraded,Deal [sword]1 damage|(Always offered as scrap),1,attack(1); sfxdamage(target[;]1);,Bubble Gun,NORMAL,,GRAY,,,,none,0,NO,NO,appearsforparts,,,,,,,,,,,,
Bayonet,Deal [sword]<d6> damage[;]|reusable on 3 or less,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX5,,RED,change_power,change_power,,none,1,NO,NO,hidereuseable,,,,,,,,,if(d <= 3) { e.usesleft += 1; };,,,
Bayonet_upgraded,Deal [sword]<d6> damage[;]|reusable on 3 or less,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,NORMAL,,RED,,,,none,1,NO,NO,hidereuseable,,,,,,,,,if(d <= 3) { e.usesleft += 1; };,,,
Bayonet_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX5,,RED,,,,none,1,NO,NO,,,,,,,,,,,,,
Phaser,Deal [sword]<d6> damage[;]|reusable on jackpot,1,attack(d); sfxdamage(target[;]d); if(self.roll_jackpot > 0){ sfx(~_magic~); };,Bubble Gun,MAX4|FREE1,,YELLOW,change_power,change_power,,,1,NO,NO,excludefromrandomlists|hidereuseable,,,,,,,,,if(self.roll_jackpot > 0) { e.usesleft += 1; };,,,
Phaser_upgraded,Deal [sword]<d6> damage[;]|reusable on jackpot,1,attack(d); sfxdamage(target[;]d); if(self.roll_jackpot > 0){ sfx(~_magic~); };,Bubble Gun,NORMAL|FREE1,,YELLOW,,,,,1,NO,NO,excludefromrandomlists|hidereuseable,,,,,,,,,if(self.roll_jackpot > 0) { e.usesleft += 1; };,,,
Phaser_downgraded,Deal [sword]<d6> damage[;]|reusable on jackpot,1,attack(d); sfxdamage(target[;]d); if(self.roll_jackpot > 0){ sfx(~_magic~); };,Bubble Gun,MAX3|FREE1,,YELLOW,,,,,1,NO,NO,excludefromrandomlists|hidereuseable,,,,,,,,,if(self.roll_jackpot > 0) { e.usesleft += 1; };,,,
Flamecrower,Reduce countdowns by <d6>|[gray](once per battle),1,for(x in actualdice){ boostcountdowns(x.basevalue); }; sfx(~_thinghappens~);,Accelerate,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,YES,excludefromrandomlists,,,,,,,,,,,,
Flamecrower_upgraded,Reduce countdowns by <d6>|[gray](once per battle),2,for(x in actualdice){ boostcountdowns(x.basevalue); }; sfx(~_thinghappens~);,Accelerate,NORMAL|NORMAL|NORMAL|NORMAL,,GREEN,,,,,0,YES,YES,excludefromrandomlists,,,,,,,,,,,,
Flamecrower_downgraded,Reduce countdowns by <d6>|[gray](once per battle),1,for(x in actualdice){ boostcountdowns(x.basevalue); }; sfx(~_thinghappens~);,Accelerate,MAX3|MAX3,,GREEN,,,,,0,YES,YES,excludefromrandomlists,,,,,,,,,,,,
Canesword,Deal [sword]<d6> dmg. On 6[;] next|item has +1 use this turn,2,attack(d); sfxdamage(target[;]d); if(d == 6){ inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); };,Efficiency,EVEN,,GREEN,change_power,change_power,reequipnext,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); };
Canesword_upgraded,Deal [sword]<d6> dmg. On 6[;] next|item has +1 use this turn,2,attack(d); sfxdamage(target[;]d); if(d == 6){ inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); };,Efficiency,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); };
Canesword_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Efficiency,EVEN,,GREEN,,,,none,0,NO,NO,,,,,,,,,,,,,
Canesword?,[sword]<d6> damage. On 6[;]|keep the next dice you use,2,attack(d); sfxdamage(target[;]d); if(d == 6){ inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); };,Efficiency,EVEN,,GREEN,change_power,change_power,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Canesword?_upgraded,[sword]<d6> damage. On 6[;]|keep the next dice you use,2,attack(d); sfxdamage(target[;]d); if(d == 6){ inflictself(REEQUIPNEXT); sfx(~_recycle~[;]~~[;]0.2); };,Efficiency,NORMAL,,GREEN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Canesword?_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Efficiency,EVEN,,GREEN,,,,none,0,NO,NO,alternateversion,,,,,,,,,,,,
Unnamed Tool,Set all of your|countdowns to 16,1,for(eq in self.equipment){ if(eq.remainingcountdown != 0){ eq.remainingcountdown = 16; eq.animate(~flashandshake~); }; }; sfx(~openchest~);,Accelerate,NORMAL|NORMAL,8,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Unnamed Tool_upgraded,Set all of your|countdowns to 16,1,for(eq in self.equipment){ if(eq.remainingcountdown != 0){ eq.remainingcountdown = 16; eq.animate(~flashandshake~); }; }; sfx(~openchest~);,Accelerate,NORMAL|NORMAL,7,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Unnamed Tool_downgraded,Set all of your|countdowns to 16,1,for(eq in self.equipment){ if(eq.remainingcountdown != 0){ eq.remainingcountdown = 16; eq.animate(~flashandshake~); }; }; sfx(~openchest~);,Accelerate,NORMAL|NORMAL,10,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Crackleslash,Deal [sword]<d6> damage[;] reusable|if <d6> isn't your uptick,2,attack(d); sfxdamage(target[;]d);,Pea Gun,RANGE25,,BRIGHTCYAN,change_power,change_power,,none,1,NO,NO,excludefromrandomlists|hidereuseable,,,,,,,,,if(d != self.getvar(~uptick~)) { e.usesleft +=1; };,,,
Crackleslash_upgraded,Deal [sword]<d6> damage[;] reusable|if <d6> isn't your uptick,2,attack(d); sfxdamage(target[;]d);,Pea Gun,NORMAL,,BRIGHTCYAN,,,,none,1,NO,NO,excludefromrandomlists|hidereuseable,,,,,,,,,if(d != self.getvar(~uptick~)) { e.usesleft +=1; };,,,
Crackleslash_downgraded,Deal [sword]<d6> damage[;] reusable|if <d6> isn't your uptick,2,attack(d); sfxdamage(target[;]d);,Pea Gun,RANGE34,,BRIGHTCYAN,,,,none,1,NO,NO,excludefromrandomlists|hidereuseable,,,,,,,,,if(d != self.getvar(~uptick~)) { e.usesleft +=1; };,,,
Virtual Machine,Your first calculation each|turn instead only increases|the CPU counter by 2,1,,Magic Dice,,,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists|robotonly,,,,e.changecolour(~RED~); e.setvar(~done~[;]0);,,if(e.getvar(~done~) == 0){ if(self.roll_totaldice == 1){ e.setvar(~done~[;]1); adjustrobotcounter(-self.roll_total + 2); e.changecolour(~GRAY~); e.animate(~flashandshake~); }; };,,,,,,
Virtual Machine_upgraded,Your first calculation each|turn doesn't increase|the CPU counter,1,,Magic Dice,,,RED,,,,none,0,NO,NO,excludefromrandomlists|robotonly,,,,e.changecolour(~RED~); e.setvar(~done~[;]0);,,if(e.getvar(~done~) == 0){ if(self.roll_totaldice == 1){ e.setvar(~done~[;]1); adjustrobotcounter(-self.roll_total); e.changecolour(~GRAY~); e.animate(~flashandshake~); }; };,,,,,,
Virtual Machine_downgraded,No effect,1,,Magic Dice,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Junkblaster,Do [sword]2 dmg[;] roll a 1|Immune to errors|,1,givedice(1); attack(2); sfxdamage(target[;]2);,Snake Eyes,COUNTDOWN,4,GRAY,change_power,change_power,,none,-1,NO,NO,errorimmune|robotonly,,,,,,,,,,,,givedice(1);
Junkblaster_upgraded,Do [sword]3 dmg[;] roll a 1|Immune to errors|,1,givedice(1); attack(3); sfxdamage(target[;]3);,Snake Eyes,COUNTDOWN,4,GRAY,,,,none,-1,NO,NO,errorimmune|robotonly,,,,,,,,,,,,givedice(1);
Junkblaster_downgraded,Deal [sword]1 damage|Immune to errors|,1,attack(1); sfxdamage(target[;]1);,Snake Eyes,COUNTDOWN,4,GRAY,,,,none,-1,NO,NO,errorimmune|robotonly,,,,,,,,,,,,
Oven Gloves,Gain [reduce]2 reduce for|your turn only,1,inflictself(REDUCE[;]2); sfx(~_shield~); self.setvar(~removereduce~[;]self.getvar(~removereduce~)+2);,Pillow Fort,NORMAL,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,self.setvar(~removereduce~[;]0);,,,,removestatusself(REDUCE[;]self.getvar(~removereduce~)); self.setvar(~removereduce~[;]0);,,,,
Oven Gloves_upgraded,Gain [reduce]5 reduce for|your turn only,1,inflictself(REDUCE[;]5); sfx(~_shield~); self.setvar(~removereduce~[;]self.getvar(~removereduce~)+5);,Pillow Fort,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,self.setvar(~removereduce~[;]0);,,,,removestatusself(REDUCE[;]self.getvar(~removereduce~)); self.setvar(~removereduce~[;]0);,,,,
Oven Gloves_downgraded,Gain [reduce]1 reduce for|your turn only,1,inflictself(REDUCE[;]1); sfx(~_shield~); self.setvar(~removereduce~[;]self.getvar(~removereduce~)+2);,Pillow Fort,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,self.setvar(~removereduce~[;]0);,,,,removestatusself(REDUCE[;]self.getvar(~removereduce~)); self.setvar(~removereduce~[;]0);,,,,
Electric Fence,Always starts [shock]shocked|Gain [shield]<d6> shield,1,inflictself(SHIELD[;]d); sfx(~_shield~);,Static Shock,NORMAL,,ORANGE,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,e.active=false;,if(runscript(~morefluff/isalt~|[~shock~])){e.animate(~alternate_shock~);}else{e.animate(SHOCK);}; e.active=true;,,,,,,,
Electric Fence_upgraded,Always starts [shock]shocked|Gain [shield]<d6> shield,1,inflictself(SHIELD[;]d); sfx(~_shield~);,Static Shock,NORMAL|FREE1,,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,e.active=false;,if(runscript(~morefluff/isalt~|[~shock~])){e.animate(~alternate_shock~);}else{e.animate(SHOCK);}; e.active=true;,,,,,,,
Electric Fence_downgraded,Always starts [shock]shocked|Gain [shield]<d6> shield,1,inflictself(SHIELD[;]d); sfx(~_shield~);,Static Shock,MAX3,,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,e.active=false;,if(runscript(~morefluff/isalt~|[~shock~])){e.animate(~altshock_and_weaken~);}else{e.animate(~shock_and_weaken~);}; e.active=true;,,,,,,,
Graphics Card,Set CPU counter to 0,1,if(!simulation){if(self.usecpuinsteadofdice){adjustrobotcounter(-self.roll_total);};}else{bonus(-10000);};,Accelerate,LOCKED6,,PINK,change_power,change_power,,none,0,YES,NO,robotonly,,,,,,,,,,,,
Graphics Card_upgraded,Set CPU counter to 0,1,if(!simulation){if(self.usecpuinsteadofdice){adjustrobotcounter(-self.roll_total);};}else{bonus(-10000);};,Accelerate,LOCKED5,,PINK,,,,none,0,YES,NO,robotonly,,,,,,,,,,,,
Graphics Card_downgraded,Set CPU counter to 0,1,if(!simulation){if(self.usecpuinsteadofdice){adjustrobotcounter(-self.roll_total);};}else{bonus(-10000);};,Accelerate,LOCKED7,,PINK,,,,none,0,YES,NO,robotonly,,,,,,,,,,,,
Ultimeh Weapon,Do [sword]<d6> damage[;] double on|jackpot[;] immune to errors,1,if(!simulation && self.usecpuinsteadofdice && self.roll_jackpot > 0){ attack(d*2); sfxdamage(target[;]d*2); }else{ attack(d); sfxdamage(target[;]d); };,Pea Gun,MAX4,,RED,change_power,change_power,,none,0,NO,NO,robotonly|errorimmune,,,,,,,,,,,,
Ultimeh Weapon_upgraded,Do [sword]<d6> damage[;] double on|jackpot[;] immune to errors,1,if(!simulation && self.usecpuinsteadofdice && self.roll_jackpot > 0){ attack(d*2); sfxdamage(target[;]d*2); }else{ attack(d); sfxdamage(target[;]d); };,Pea Gun,MAX4|FREE2,,RED,,,,none,0,NO,NO,robotonly|errorimmune,,,,,,,,,,,,
Ultimeh Weapon_downgraded,Do [sword]<d6> damage[;] double on|jackpot[;] immune to errors,1,if(!simulation && self.usecpuinsteadofdice && self.roll_jackpot > 0){ attack(d*2); sfxdamage(target[;]d*2); }else{ attack(d); sfxdamage(target[;]d); };,Pea Gun,MAX2,,RED,,,,none,0,NO,NO,robotonly|errorimmune,,,,,,,,,,,,
Even Buster Sword,Do [sword]<d6>[;] double on error|Immune to errors,1,if(!simulation && self.usecpuinsteadofdice && self.roll_total >= self.roll_target && self.roll_jackpot == 0){ attack(d*2); sfxdamage(target[;]d*2); }else{ attack(d); sfxdamage(target[;]d); };,Pea Gun,MAX4,,GRAY,change_power,change_power,,none,0,NO,NO,robotonly|errorimmune,,,,,,,,,,,,
Even Buster Sword_upgraded,Do [sword]<d6>[;] double on error|Immune to errors,1,if(!simulation && self.usecpuinsteadofdice && self.roll_total >= self.roll_target && self.roll_jackpot == 0){ attack(d*2); sfxdamage(target[;]d*2); }else{ attack(d); sfxdamage(target[;]d); };,Pea Gun,MAX5,,GRAY,,,,none,0,NO,NO,robotonly|errorimmune,,,,,,,,,,,,
Even Buster Sword_downgraded,Do [sword]<d6>[;] double on error|Immune to errors,1,if(!simulation && self.usecpuinsteadofdice && self.roll_total >= self.roll_target && self.roll_jackpot == 0){ attack(d*2); sfxdamage(target[;]d*2); }else{ attack(d); sfxdamage(target[;]d); };,Pea Gun,MAX3,,GRAY,,,,none,0,NO,NO,robotonly|errorimmune,,,,,,,,,,,,
Bang Snaps,Deal [sword]3 damage|[gray](2 uses this turn),1,attack(3); sfxdamage(target[;]3);,Double Tap,NORMAL,,YELLOW,change_power,change_power,,none,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bang Snaps_upgraded,Deal [sword]4 damage|[gray](2 uses this turn),1,attack(4); sfxdamage(target[;]4);,Double Tap,NORMAL,,YELLOW,,,,none,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bang Snaps_downgraded,Deal [sword]1 damage|[gray](2 uses this turn),1,attack(1); sfxdamage(target[;]1);,Double Tap,NORMAL,,YELLOW,,,,none,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Firecracker,Duplicate a dice[;] but|burn both copies,1,givedice([d|d]); for(x in 0...2){ var anim = ~fire~; if(runscript(~morefluff/isalt~|[~fire~])){anim = ~alternate_fire~;}; self.dicepool[self.dicepool.length-(2-x)].animate(anim[;](x*1.0)/5+0.5); };,Boom!,MAX4,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Firecracker_upgraded,Duplicate a dice[;] but|burn both copies,1,givedice([d|d]); for(x in 0...2){ var anim = ~fire~; if(runscript(~morefluff/isalt~|[~fire~])){anim = ~alternate_fire~;}; self.dicepool[self.dicepool.length-(2-x)].animate(anim[;](x*1.0)/5+0.5); };,Boom!,NORMAL,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Firecracker_downgraded,Duplicate a dice[;] but|burn both copies,1,givedice([d|d]); for(x in 0...2){ var anim = ~fire~; if(runscript(~morefluff/isalt~|[~fire~])){anim = ~alternate_fire~;}; self.dicepool[self.dicepool.length-(2-x)].animate(anim[;](x*1.0)/5+0.5); };,Boom!,MAX2,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Sparkler,Deal [sword]1 damage[;]|heal [heal]2 when snapped,1,attack(1); sfxdamage(target[;]1);,Revitalize,NORMAL,,GREEN,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,for(x in 0...snap){ attackself(-2); }; sfx(~_heal~[;]~~[;]0.4);,,
Sparkler_upgraded,Deal [sword]3 damage[;]|heal [heal]2 when snapped,1,attack(3); sfxdamage(target[;]1);,Revitalize,NORMAL,,GREEN,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,for(x in 0...snap){ attackself(-2); }; sfx(~_heal~[;]~~[;]0.4);,,
Sparkler_downgraded,No effect|Heal [heal]2 when snapped,1,,Revitalize,NORMAL,,GREEN,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,for(x in 0...snap){ attackself(-2); }; sfx(~_heal~[;]~~[;]0.4);,,
Rose Bush,Deal [sword]1 damage|(Start of turn: gain [thorns]1[]),1,attack(1); sfxdamage(target[;]2);,Pinprick,NORMAL,,GREEN,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,if(self.equipment.indexOf(e) > -1){e.animate(~flashandshake~); inflictself(THORNS[;]1); sfx(~_thorns~); };,,,,,,,
Rose Bush_upgraded,Deal [sword]1 damage|(Start of turn: gain [thorns]2[]),1,attack(1); sfxdamage(target[;]2);,Pinprick,NORMAL,,GREEN,,,,none,0,NO,NO,excludefromrandomlists,,,,,if(self.equipment.indexOf(e) > -1){e.animate(~flashandshake~); inflictself(THORNS[;]2); sfx(~_thorns~); };,,,,,,,
Rose Bush_downgraded,No effect|(Start of turn: gain [thorns]1),1,,Pinprick,NORMAL,,GREEN,,,,none,0,NO,NO,excludefromrandomlists,,,,,if(self.equipment.indexOf(e) > -1){e.animate(~flashandshake~); inflictself(THORNS[;]1); sfx(~_thorns~); };,,,,,,,
Crown of Thorns,Gain [shield]1 shield per|[thorns] thorn you have,1,inflictself(SHIELD[;]getstatusself(THORNS)); sfx(~_shield~);,Barricade,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Crown of Thorns_upgraded,Gain [shield]2 shield per|[thorns] thorn you have,1,inflictself(SHIELD[;]getstatusself(THORNS)*2); sfx(~_shield~);,Barricade,NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Crown of Thorns_downgraded,Gain [shield]1 shield per|[thorns] thorn you have,1,inflictself(SHIELD[;]getstatusself(THORNS)); sfx(~_shield~);,Barricade,EVEN,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Spiked Drink,Lose [heart]3 health|(Start of turn: heal [heal]3[]),2,pierceattackself(3); sfx(~_drain~);,Steel Skin,NORMAL,,PURPLE,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,if(self.equipment.indexOf(e) > -1){ e.animate(~flashandshake~); attackself(-3); sfx(~_heal~); };,,,,,,,
Spiked Drink_upgraded,Lose [heart]3 health|(Start of turn: heal [heal]4[]),2,pierceattackself(3); sfx(~_drain~);,Steel Skin,NORMAL,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,if(self.equipment.indexOf(e) > -1){ e.animate(~flashandshake~); attackself(-4); sfx(~_heal~); };,,,,,,,
Spiked Drink_downgraded,Lose [heart]3 health|(Start of turn: heal [heal]3[]),2,pierceattackself(3); sfx(~_drain~);,Steel Skin,EVEN,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,if(self.equipment.indexOf(e) > -1){ e.animate(~flashandshake~); attackself(-3); sfx(~_heal~); };,,,,,,,
Twinkle,Get an extra dice next turn,1,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lightstatus~); sfx(~magic_gaindice~); var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total); self.setvar(~doublestashcount~[;]total*2); self.setvar(~triplestashcount~[;]total*3); self.setvar(~quadruplestashcount~[;]total*4);,Magic Lantern,EVEN,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Twinkle_upgraded,Get an extra dice next turn,1,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lightstatus~); sfx(~magic_gaindice~); var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total); self.setvar(~doublestashcount~[;]total*2); self.setvar(~triplestashcount~[;]total*3); self.setvar(~quadruplestashcount~[;]total*4);,Magic Lantern,NORMAL,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Twinkle_downgraded,Get an extra dice next turn,1,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lightstatus~); sfx(~magic_gaindice~); var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total); self.setvar(~doublestashcount~[;]total*2); self.setvar(~triplestashcount~[;]total*3); self.setvar(~quadruplestashcount~[;]total*4);,Magic Lantern,EVEN|EVEN,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Dazzling Light,Deal [sword]3 damage for each|dice stashed for next turn|(currently: [sword]<var:triplestashcount> damage),1,var total = 0; for(x in 1...7){ total+=getstatusself(~stash~+x); }; attack(total*3); sfxdamage(target[;]total*3);,Magic Lantern,NORMAL,,YELLOW,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,self.setvar(~stashcount~[;]0); self.setvar(~doublestashcount~[;]0); self.setvar(~triplestashcount~[;]0); self.setvar(~quadruplestashcount~[;]0);,,var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total); self.setvar(~doublestashcount~[;]total*2); self.setvar(~triplestashcount~[;]total*3); self.setvar(~quadruplestashcount~[;]total*4);,,,,,,
Dazzling Light_upgraded,Deal [sword]4 damage for each|dice stashed for next turn|(currently: [sword]<var:quadruplestashcount> damage),1,var total = 0; for(x in 1...7){ total+=getstatusself(~stash~+x); }; attack(total*4); sfxdamage(target[;]total*4);,Magic Lantern,NORMAL,,YELLOW,,,,none,0,NO,NO,excludefromrandomlists,,,,self.setvar(~stashcount~[;]0); self.setvar(~doublestashcount~[;]0); self.setvar(~triplestashcount~[;]0); self.setvar(~quadruplestashcount~[;]0);,,var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total); self.setvar(~doublestashcount~[;]total*2); self.setvar(~triplestashcount~[;]total*3); self.setvar(~quadruplestashcount~[;]total*4);,,,,,,
Dazzling Light_downgraded,Deal [sword]1 damage for each|dice stashed for next turn|(currently: [sword]<var:stashcount> damage),1,var total = 0; for(x in 1...7){ total+=getstatusself(~stash~+x); }; attack(total); sfxdamage(target[;]total);,Magic Lantern,NORMAL,,YELLOW,,,,none,0,NO,NO,excludefromrandomlists,,,,self.setvar(~stashcount~[;]0); self.setvar(~doublestashcount~[;]0); self.setvar(~triplestashcount~[;]0); self.setvar(~quadruplestashcount~[;]0);,,var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total); self.setvar(~doublestashcount~[;]total*2); self.setvar(~triplestashcount~[;]total*3); self.setvar(~quadruplestashcount~[;]total*4);,,,,,,
Solar Blessing,Heal [heal]1 health for each|dice stashed for next turn|(currently: [heal]<var:stashcount> health),1,var total = 0; for(x in 1...7){ total+=getstatusself(~stash~+x); }; attackself(-total); sfx(~_heal~);,Magic Lantern,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,self.setvar(~stashcount~[;]0); self.setvar(~doublestashcount~[;]0); self.setvar(~triplestashcount~[;]0); self.setvar(~quadruplestashcount~[;]0);,,var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total); self.setvar(~doublestashcount~[;]total*2); self.setvar(~triplestashcount~[;]total*3); self.setvar(~quadruplestashcount~[;]total*4);,,,,,,
Solar Blessing_upgraded,Heal [heal]2 health for each|dice stashed for next turn|(currently: [heal]<var:doublestashcount> health),1,var total = 0; for(x in 1...7){ total+=getstatusself(~stash~+x); }; attackself(-total*2); sfx(~_heal~);,Magic Lantern,NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,self.setvar(~stashcount~[;]0); self.setvar(~doublestashcount~[;]0); self.setvar(~triplestashcount~[;]0); self.setvar(~quadruplestashcount~[;]0);,,var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total); self.setvar(~doublestashcount~[;]total*2); self.setvar(~triplestashcount~[;]total*3); self.setvar(~quadruplestashcount~[;]total*4);,,,,,,
Solar Blessing_downgraded,Heal [heal]1 health for each|dice stashed for next turn|(currently: [heal]<var:stashcount> health),1,var total = 0; for(x in 1...7){ total+=getstatusself(~stash~+x); }; attackself(-total); sfx(~_heal~);,Magic Lantern,EVEN,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,self.setvar(~stashcount~[;]0); self.setvar(~doublestashcount~[;]0); self.setvar(~triplestashcount~[;]0); self.setvar(~quadruplestashcount~[;]0);,,var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total); self.setvar(~doublestashcount~[;]total*2); self.setvar(~triplestashcount~[;]total*3); self.setvar(~quadruplestashcount~[;]total*4);,,,,,,
Rusty Broadsword,Deal [sword]<d6> damage[;] double|if your health is 50% or less,2,if(self.hp * 2 <= self.maxhp){ attack(d*2); sfxdamage(target[;]d*2); }else{ attack(d); sfxdamage(target[;]d); };,Regenerate,MAX5,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Rusty Broadsword_upgraded,Deal [sword]<d6> damage[;] double|if your health is 50% or less,2,if(self.hp * 2 <= self.maxhp){ attack(d*2); sfxdamage(target[;]d*2); }else{ attack(d); sfxdamage(target[;]d); };,Regenerate,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Rusty Broadsword_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Regenerate,MAX5,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Rusty Shield,Gain [shield]<d6> shield[;] double|if your health is 50% or less,2,if(self.hp * 2 <= self.maxhp){ inflictself(SHIELD[;]d*2); }else{ inflictself(SHIELD[;]d); }; sfx(~_shield~);,Barricade,MAX4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Rusty Shield_upgraded,Gain [shield]<d6> shield[;] double|if your health is 50% or less,2,if(self.hp * 2 <= self.maxhp){ inflictself(SHIELD[;]d*2); }else{ inflictself(SHIELD[;]d); }; sfx(~_shield~);,Barricade,MAX5,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Rusty Shield_downgraded,Gain [shield]<d6> shield,2,inflictself(SHIELD[;]d); sfx(~_shield~);,Barricade,MAX4,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Shield Boss,Gain [shield]4 shield,2,inflictself(SHIELD[;]4); sfx(~_shield~);,Coin Clippers,REQUIRE1,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Shield Boss_upgraded,Gain [shield]4 shield|Return the dice,2,inflictself(SHIELD[;]4); sfx(~_shield~); givedice(d);,Coin Clippers,REQUIRE1,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Shield Boss_downgraded,Gain [shield]<d6> shield,2,inflictself(SHIELD[;]d); sfx(~_shield~);,Coin Clippers,REQUIRE1,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Star Shooter,Inflict a random status|[gray](Reuseable),1,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase());,Stardust,COUNTDOWN,6,PINK,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,
Star Shooter_upgraded,Inflict 2x a random status|[gray](Reuseable),1,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfx(~_~ + randstatus.toLowerCase());,Stardust,COUNTDOWN,6,PINK,,,,,-1,NO,NO,,,,,,,,,,,,,
Star Shooter_downgraded,Inflict a random status,1,var randstatus = rand([FIRE[;]POISON[;]BLIND]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase());,Stardust,COUNTDOWN,6,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Starsword,Deal [sword]<d6> damage. On 6[;]|inflict a random status,2,attack(d); sfxdamage(target[;]d); if(d == 6){ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2); };,Stardust,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Starsword_upgraded,Deal [sword]<d6> damage. On 6[;]|inflict 2x a random status,2,attack(d); sfxdamage(target[;]d); if(d == 6){ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2); };,Stardust,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Starsword_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Stardust,NORMAL,,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Starspike,[sword]<d6>[;] add random status|[gray](Reuseable),1,attack(d); sfxdamage(target[;]d); var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,REQUIRE1|REQUIRE1,,PINK,change_power,change_power,,,-1,NO,NO,,1,,,,,,,,,,,
Starspike_upgraded,[sword]<double>[;] add random status|[gray](Reuseable),1,attack(d*2); sfxdamage(target[;]d*2); var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,REQUIRE1|REQUIRE1,,PINK,,,,,-1,NO,NO,,,,,,,,,,,,,
Starspike_downgraded,Deal [sword]<d6> damage|,1,attack(d); sfxdamage(target[;]d);,Stardust,REQUIRE1|REQUIRE1,,PINK,,,,none,-1,NO,NO,,,,,,,,,,,,,
Spatuplicate,Flip a dice upside down[;]|and return the original,1,givedice([7-d[;]d]);,Megaflip,MIN4,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Spatuplicate_upgraded,Flip a dice upside down[;]|and return the original,1,givedice([7-d[;]d]);,Megaflip,MIN3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Spatuplicate_downgraded,Flip a dice upside down[;]|and return the original,1,givedice([7-d[;]d]);,Megaflip,MIN5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Starshine,Inflict a random status,1,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase());,Stardust,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Starshine_upgraded,Inflict 2 random statuses,1,for(x in [0[;]0.2]){ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]x); };,Stardust,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Starshine_downgraded,Inflict a random status,1,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase());,Stardust,MAX3,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Berserker Rage,Whenever you attack[;] lose|[heart]3 and roll an extra dice,1,pierceattackself(3); sfx(~_drain~); givedice();,Steel Skin,,,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,e.setvar(~enemyhealth~[;]target.hp);,if(target.hp < e.getvar(~enemyhealth~)){ e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Berserker Rage_upgraded,Whenever you attack[;] lose|[heart]2 and roll an extra dice,1,pierceattackself(2); sfx(~_drain~); givedice();,Steel Skin,,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,e.setvar(~enemyhealth~[;]target.hp);,if(target.hp < e.getvar(~enemyhealth~)){ e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Berserker Rage_downgraded,Whenever you attack[;] lose|[heart]6 and roll an extra dice,1,pierceattackself(6); sfx(~_drain~); givedice();,Steel Skin,,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,e.setvar(~enemyhealth~[;]target.hp);,if(target.hp < e.getvar(~enemyhealth~)){ e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Defibrilator,Lose [heart]1[;] reactivate gadgets|[gray](Reuseable),1,pierceattackself(1); sfx(~_drain~); Gadget.reactivate(self[;] ALL);,Blood Sip,EVEN,,PURPLE,change_power,change_power,,,-1,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Defibrilator_upgraded,Lose [heart]1[;] reactivate gadgets|[gray](Reuseable),1,pierceattackself(1); sfx(~_drain~); Gadget.reactivate(self[;] ALL);,Blood Sip,NORMAL,,PURPLE,,,,,-1,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Defibrilator_downgraded,Lose [heart]1[;] reactivate gadgets|[gray](Reuseable),1,pierceattackself(1); sfx(~_drain~); Gadget.reactivate(self[;] ALL);,Blood Sip,EVEN|EVEN,,PURPLE,,,,,-1,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Slapjack,Next turn[;] discarding cards|gives you dice in return,2,inflictself(~mf_slapjack~); sfx(~_thinghappens~);,Regenerate,NORMAL|NORMAL,,ORANGE,change_power,change_power,,,0,YES,NO,excludefromrandomlists|finale,,,,,,,,,,,,
Slapjack_upgraded,Next turn[;] discarding cards|gives you dice in return,2,inflictself(~mf_slapjack~); sfx(~_thinghappens~);,Regenerate,NORMAL,,ORANGE,,,,,0,YES,NO,excludefromrandomlists|finale,,,,,,,,,,,,
Slapjack_downgraded,Next turn[;] discarding cards|gives you dice in return,2,inflictself(~mf_slapjack~); sfx(~_thinghappens~);,Regenerate,NORMAL|NORMAL|NORMAL|NORMAL,,ORANGE,,,,,0,YES,NO,excludefromrandomlists|finale,,,,,,,,,,,,
6 Years Bad Luck,Enemy loses 1 dice this fight|(minimum of 1),2,if(target.dice + target.extradice > 1){ target.extradice--; sfx(~_curse~); screenshake(); }else{ target.textparticle(~No effect!~); };,Infinity Mirror,REQUIRE1,,ORANGE,change_power,change_power,,,0,NO,NO,finale,,,,,,,,,,,,
6 Years Bad Luck_upgraded,Enemy loses 1 dice this fight|(minimum of 1),2,if(target.dice + target.extradice > 1){ target.extradice--; sfx(~_curse~); screenshake(); }else{ target.textparticle(~No effect!~); };,Infinity Mirror,ODD,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
6 Years Bad Luck_downgraded,Enemy loses 1 dice this fight|(minimum of 1),2,if(target.dice + target.extradice > 1){ target.extradice--; sfx(~_curse~); screenshake(); }else{ target.textparticle(~No effect!~); };,Infinity Mirror,REQUIRE1|REQUIRE1,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Star of the Show,Inflict a random status|[gray](Reuseable),2,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase());,Infinity Mirror,COUNTDOWN,4,ORANGE,change_power,change_power,,,-1,NO,NO,finale,,,,,,,,,,,,
Star of the Show_upgraded,Inflict 2x a random status|[gray](Reuseable),2,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfx(~_~ + randstatus.toLowerCase());,Infinity Mirror,COUNTDOWN,4,ORANGE,,,,,-1,NO,NO,finale,,,,,,,,,,,,
Star of the Show_downgraded,Inflict a random status,2,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase());,Infinity Mirror,COUNTDOWN,4,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Emergency Barricade,Gain [shield]1 shield|[gray](Reuseable),2,inflictself(SHIELD); sfx(~_shield~);,Magic Dice,NORMAL,,ORANGE,change_power,change_power,,,-1,YES,NO,finale,,,,,,,,,,,,
Emergency Barricade_upgraded,Gain [shield]1[;] heal [heal]1|[gray](Reuseable),2,inflictself(SHIELD); attackself(-1); sfx(~_heal~); sfx(~_shield~[;]~~[;]0.3);,Magic Dice,NORMAL,,ORANGE,,,,,-1,YES,NO,finale,,,,,,,,,,,,
Emergency Barricade_downgraded,Gain [shield]1 shield|[gray](Reuseable),2,inflictself(SHIELD); sfx(~_shield~);,Magic Dice,EVEN,,ORANGE,,,,,-1,YES,NO,finale,,,,,,,,,,,,
Drill Bit,Reactivate your gadgets,1,Gadget.reactivate(self[;] ALL); sfx(~_thinghappens~);,Efficiency,COUNTDOWN,5,PURPLE,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Drill Bit_upgraded,Reactivate your gadgets|,1,Gadget.reactivate(self[;] ALL); sfx(~_thinghappens~);,Efficiency,COUNTDOWN,5,PURPLE,,,,,3,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Drill Bit_downgraded,No effect,1,,Efficiency,COUNTDOWN,5,PURPLE,,,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Really Spiky Shield,Gain [shield]<d6> shield|(Enemy has [thorns]1 each turn),2,inflictself(SHIELD[;]d); sfx(~_shield~);,Coin Clippers,MAX4|FREE2,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,inflict(THORNS);,e.animate(~flashandshake~); sfx(~_thorns~);,,,,,,,
Really Spiky Shield_upgraded,Gain [shield]<d6> shield|(Enemy has [thorns]1 each turn),2,inflictself(SHIELD[;]d); sfx(~_shield~);,Coin Clippers,MAX5|FREE2,,ORANGE,,,,,0,YES,NO,,,,,inflict(THORNS);,e.animate(~flashandshake~); sfx(~_thorns~);,,,,,,,
Really Spiky Shield_downgraded,Gain [shield]<d6> shield|(Enemy has [thorns]1 each turn),2,inflictself(SHIELD[;]d); sfx(~_shield~);,Coin Clippers,MAX4,,ORANGE,,,,,0,YES,NO,,,,,inflict(THORNS);,e.animate(~flashandshake~); sfx(~_thorns~);,,,,,,,
Really Spiky Shield?,Gain [shield]<d6> shield|(Enemy has [thorns]1 each turn),2,inflictself(SHIELD[;]d); sfx(~_shield~);,Coin Clippers,MAX4|FREE2,,ORANGE,change_power,change_power,,,0,YES,NO,alternateversion,,,,inflict(THORNS);,e.animate(~flashandshake~); sfx(~_thorns~);,,,,,,,
Really Spiky Shield?_upgraded,Gain [shield]<d6> shield|(Enemy has [thorns]1 each turn),2,inflictself(SHIELD[;]d); sfx(~_shield~);,Coin Clippers,MAX5|FREE2,,ORANGE,,,,,0,YES,NO,alternateversion,,,,inflict(THORNS);,e.animate(~flashandshake~); sfx(~_thorns~);,,,,,,,
Really Spiky Shield?_downgraded,Gain [shield]<d6> shield|(Enemy has [thorns]1 each turn),2,inflictself(SHIELD[;]d); sfx(~_shield~);,Coin Clippers,MAX4,,ORANGE,,,,,0,YES,NO,alternateversion,,,,inflict(THORNS);,e.animate(~flashandshake~); sfx(~_thorns~);,,,,,,,
Pandora's Box,Roll 3 extra dice|Receive [vanish] Vanish,1,var dicearray = []; for(x in 0...3){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray); inflictself(VANISH); sfx(~_thinghappens~);,Magic Six,COUNTDOWN,6,PINK,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Pandora's Box_upgraded,Roll 4 extra dice|Receive [vanish] Vanish,1,var dicearray = []; for(x in 0...4){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray); inflictself(VANISH); sfx(~_thinghappens~);,Magic Six,COUNTDOWN,6,PINK,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Pandora's Box_downgraded,Roll an extra dice|Receive [vanish] Vanish,1,givedice(); inflictself(VANISH); sfx(~_thinghappens~);,Magic Six,COUNTDOWN,6,PINK,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Primal Slash,If enemy's health is a prime|number[;] do [sword]<double> damage,1,var h = target.hp; var flag = true; if(h == 1){ flag = false; self.textparticle(~1 is not a prime!~); }; if(h > 2){for(x in 2...h){ if(h%x == 0){ flag = false; }; };}; if(h == 2){ flag = true; }; if(flag){ attack(2*d); sfxdamage(target[;]2*d); }else{ self.textparticle(~No effect!~); };,Catapult,MAX5,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Primal Slash_upgraded,If enemy's health is a prime|number[;] do [sword]<double> damage,1,var h = target.hp; var flag = true; if(h == 1){ flag = false; self.textparticle(~1 is not a prime!~); }; if(h > 2){for(x in 2...h){ if(h%x == 0){ flag = false; }; };}; if(h == 2){ flag = true; }; if(flag){ attack(2*d); sfxdamage(target[;]2*d); }else{ self.textparticle(~No effect!~); };,Catapult,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Primal Slash_downgraded,If enemy's health is a prime|number[;] do [sword]<d6> damage,1,var h = target.hp; var flag = true; if(h == 1){ flag = false; target.textparticle(~1 is not a prime!~); }; if(h > 2){for(x in 2...h){ if(h%x == 0){ flag = false; }; };}; if(h == 2){ flag = true; }; if(flag){ attack(d); sfxdamage(target[;]d); }else{ self.textparticle(~No effect!~); };,Catapult,MAX5,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Super Lockpick,Split a dice in two|Receive [vanish] Vanish|,1,givedice(split(d)); inflictself(VANISH);,Magic Lockpick,NORMAL,,GREEN,change_power,change_power,,,-1,YES,NO,,,,,,,,,,,,,
Super Lockpick_upgraded,Split a dice in three|Receive [vanish] Vanish|,1,givedice(split(d[;]3)); inflictself(VANISH);,Magic Lockpick,NORMAL,,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Super Lockpick_downgraded,Split a dice in two|Receive [vanish] Vanish,1,givedice(split(d));,Magic Lockpick,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Rockfall,Roll two dice that are|lower than <d6>,1,if(d >= 2){ var t = []; var x = 1; while(x < d){ t.push(x); x+=1; }; givedice([rand(t)[;]rand(t)]); };,Magic Dice,MIN3,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Rockfall_upgraded,Roll three dice that are|lower than <d6>,1,if(d >= 2){ var t = []; var x = 1; while(x < d){ t.push(x); x+=1; }; givedice([rand(t)|rand(t)|rand(t)]); };,Magic Dice,MIN3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Rockfall_downgraded,Roll a dice that is|lower than <d6>,1,if(d >= 2){ var t = []; var x = 1; while(x < d){ t.push(x); x+=1; }; givedice(rand(t)]); };,Magic Dice,MIN3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Bucket of Water,Set CPU counter to 0|Shock [shock]all your items,1,sfx(~_shock~); if(!simulation){if(self.usecpuinsteadofdice){adjustrobotcounter(-self.roll_total);};}else{bonus(-10000);}; inflictself(SHOCK[;]ALL); self.applyequipmentcurses();,Jackhammer,EVEN,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,robotonly,,,,,,,,,,,,
Bucket of Water_upgraded,Set CPU counter to 0|Shock [shock]all your items,1,sfx(~_shock~); if(!simulation){if(self.usecpuinsteadofdice){adjustrobotcounter(-self.roll_total);};}else{bonus(-10000);}; inflictself(SHOCK[;]ALL); self.applyequipmentcurses();,Jackhammer,NORMAL,,BRIGHTCYAN,,,,,0,YES,NO,robotonly,,,,,,,,,,,,
Bucket of Water_downgraded,Reduce CPU counter by half|Shock [shock]all your items,1,sfx(~_shock~); if(!simulation){if(self.usecpuinsteadofdice){adjustrobotcounter(-(self.roll_total/2));};}else{bonus(-10000);}; inflictself(SHOCK[;]ALL); self.applyequipmentcurses();,Jackhammer,EVEN,,BRIGHTCYAN,,,,,0,YES,NO,robotonly,,,,,,,,,,,,
Starstream,Each attack of [sword]4 or more|also inflicts a random status|,1,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,,,PINK,change_power,change_power,,,-1,YES,NO,,,,,,e.setvar(~enemyhealth~[;]target.hp);,if(target.hp + 3 < e.getvar(~enemyhealth~)){ e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Starstream_upgraded,Each attack of [sword]4 or more|also inflicts 2x random status|,1,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,,,PINK,,,,,-1,YES,NO,,,,,,e.setvar(~enemyhealth~[;]target.hp);,if(target.hp + 3 < e.getvar(~enemyhealth~)){ e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Starstream_downgraded,Each attack of [sword]8 or more|also inflicts a random status|,1,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,,,PINK,,,,,-1,YES,NO,,,,,,e.setvar(~enemyhealth~[;]target.hp);,if(target.hp + 7 < e.getvar(~enemyhealth~)){ e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Envenomate,Your next attack (up to [sword]<d6>|dmg) instead inflicts [poison]<d6>,1,inflictself(~envenomate~|d); sfx(~_magic~); sfx(~_poison~);,Goop Gun,MAX3,,PURPLE,change_power,change_power,,,0,YES,NO,,,,,,e.setvar(~enemyhealth~[;]target.hp);,if(target.hp + 2 < e.getvar(~enemyhealth~)){ e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Envenomate_upgraded,Your next attack (up to|[sword]<d6> dmg) instead inflicts [poison]<d6>,1,inflictself(~envenomate~|d); sfx(~_magic~); sfx(~_poison~);,Goop Gun,MAX4,,PURPLE,,,,,0,YES,NO,,,,,,e.setvar(~enemyhealth~[;]target.hp);,if(target.hp + 2 < e.getvar(~enemyhealth~)){ e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Envenomate_downgraded,Your next attack (up to|[sword]<d6> dmg) instead inflicts [poison]<d6>,1,inflictself(~envenomate~|d); sfx(~_magic~); sfx(~_poison~);,Goop Gun,MAX2,,PURPLE,,,,,0,YES,NO,,,,,,e.setvar(~enemyhealth~[;]target.hp);,if(target.hp + 2 < e.getvar(~enemyhealth~)){ e.doequipmentaction(self[;]target[;]e.castdirection[;][][;]0[;]true); }; e.setvar(~enemyhealth~[;]target.hp);,,,,,,
Breakthrough,Deal [sword]<d6> damage|On 6[;] gain [reduce]1 reduce,2,attack(d); sfxdamage(target[;]d); if(d == 6){ inflictself(REDUCE); sfx(~_shield~[;]~~[;]0.2); };,Protection,NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ inflictself(REDUCE); sfx(~_shield~[;]~~[;]0.2); };
Breakthrough_upgraded,Deal [sword]<d6> damage|On 6[;] gain [reduce]2 reduce,2,attack(d); sfxdamage(target[;]d); if(d == 6){ inflictself(REDUCE[;]2); sfx(~_shield~[;]~~[;]0.2); };,Protection,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ inflictself(REDUCE|2); sfx(~_shield~[;]~~[;]0.2); };
Breakthrough_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Protection,NORMAL,,ORANGE,,,,none,0,NO,NO,,,,,,,,,,,,,
Amplify,Duplicate all other|<d6>s you have,1,var dicearray = []; for(mydice in self.dicepool){ if(mydice.basevalue == d && mydice != actualdice[0]){ dicearray.push(d); }; }; givedice(dicearray);,Clone Device,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Amplify_upgraded,Duplicate all other <d6>s you|have[;] and return this dice,1,var dicearray = []; for(mydice in self.dicepool){ if(mydice.basevalue == d){ dicearray.push(d); }; }; givedice(dicearray);,Clone Device,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Amplify_downgraded,Duplicate all other|<d6>s you have,1,var dicearray = []; for(mydice in self.dicepool){ if(mydice.basevalue == d && mydice != actualdice[0]){ dicearray.push(d); }; }; givedice(dicearray);,Clone Device,MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Reboot,Reroll this dice[;] and|all other <d6>s you have,1,var c = 0; for(mydice in self.dicepool){ if(mydice.basevalue == d && mydice.available()){ mydice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()[;] c * 0.05); c+=1; }; }; givedice();,Magic Spanner,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Reboot_upgraded,Reroll this and other <d6>s|[gray](2 uses this turn),1,var c = 0; for(mydice in self.dicepool){ if(mydice.basevalue == d && mydice.available()){ mydice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()[;] c * 0.05); c+=1; }; }; givedice();,Magic Spanner,NORMAL,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Reboot_downgraded,Reroll all other <d6>s you have,1,var c = 0; for(mydice in self.dicepool){ if(mydice.basevalue == d && mydice.available()){ mydice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()[;] c * 0.05); c+=1; }; };,Magic Spanner,NORMAL,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Sticky Sword,Deal [sword]<d6> damage|On 7[;] lock [lock]1 dice,2,attack(d); sfxdamage(target[;]d); if(d == 7){ inflict(LOCK); sfx(~_lock~[;]~~[;]0.2); };,Padlock,EVEN|ODD,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 7){ inflict(LOCK); sfx(~_lock~[;]~~[;]0.2); };
Sticky Sword_upgraded,Deal [sword]<d6> damage|On 7[;] lock [lock]1 dice,2,attack(d); sfxdamage(target[;]d); if(d == 7){ inflict(LOCK); sfx(~_lock~[;]~~[;]0.2); };,Padlock,MIN2|MAX5,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 7){ inflict(LOCK); sfx(~_lock~[;]~~[;]0.2); };
Sticky Sword_downgraded,Deal [sword]<d6> damage|On 7[;] lock [lock]1 dice,2,attack(d); sfxdamage(target[;]d); if(d == 7){ inflict(LOCK); sfx(~_lock~[;]~~[;]0.2); };,Padlock,EVEN|ODD,7,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,if(d == 7){ inflict(LOCK); sfx(~_lock~[;]~~[;]0.2); };
Lancestave,[sword]<d6>[;] add status on doubles:|1:[shock] 2:[weaken] 3:[ice] 4:[fire],2,attack(d); sfxdamage(target[;]d); if(actualdice[0].basevalue == actualdice[1].basevalue){ var effs = [SHOCK[;]WEAKEN[;]ICE[;]FIRE]; inflict(effs[(d/2)-1]); var sounds=[~_shock~[;]~_weaken~[;]~_ice~[;]~_fire~]; sfx(sounds[(d/2)-1][;]~~[;]0.2); };,Stardust,MAX4|MAX4,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Lancestave_upgraded,[sword]<d6>[;] 2x status on doubles:|1:[shock] 2:[weaken] 3:[ice] 4:[fire],2,attack(d); sfxdamage(target[;]d); if(actualdice[0].basevalue == actualdice[1].basevalue){ var effs = [SHOCK[;]WEAKEN[;]ICE[;]FIRE]; inflict(effs[(d/2)-1][;]2); var sounds=[~_shock~[;]~_weaken~[;]~_ice~[;]~_fire~]; sfx(sounds[(d/2)-1][;]~~[;]0.2); };,Stardust,MAX4|MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Lancestave_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Stardust,MAX4|MAX4,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Helmet Headbutt,Deal [sword]<d6> damage|Gain [reduce]1 reduce,2,attack(d); sfxdamage(target[;]d); inflictself(REDUCE); sfx(~_shield~[;]~~[;]0.2);,Pillow Fort,EVEN,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(REDUCE); sfx(~_shield~);
Helmet Headbutt_upgraded,Deal [sword]<d6> damage|Gain [reduce]1 reduce,2,attack(d); sfxdamage(target[;]d); inflictself(REDUCE); sfx(~_shield~[;]~~[;]0.2);,Pillow Fort,EVEN|FREE2,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(REDUCE); sfx(~_shield~);
Helmet Headbutt_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Pillow Fort,EVEN,,ORANGE,,,,none,0,NO,NO,,,,,,,,,,,,,
Sundew,Deal [sword]<d6> damage|Restore half of [heal]<d6> health,2,attack(d); attackself(-d/2); sfxdamage(target[;]d); sfx(~_heal~[;]~~[;]0.2);,Regenerate,MAX5,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,attackself(-d/2); sfx(~_heal~[;]~~[;]0.2);
Sundew_upgraded,Deal [sword]<d6> damage|Restore half of [heal]<d6> health,2,attack(d); attackself(-d/2); sfxdamage(target[;]d); sfx(~_heal~[;]~~[;]0.2);,Regenerate,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-d/2); sfx(~_heal~[;]~~[;]0.2);
Sundew_downgraded,Deal [sword]<d6> damage|Restore half of [heal]<d6> health,2,attack(d); attackself(-d/2); sfxdamage(target[;]d); sfx(~_heal~[;]~~[;]0.2);,Regenerate,MAX3,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-d/2); sfx(~_heal~[;]~~[;]0.2);
Zap Cannon,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d); sfx(~_plasma~);,Plasma Gun,MIN3,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Zap Cannon_upgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d); sfx(~_plasma~);,Plasma Gun,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Zap Cannon_downgraded,Deal [sword]3 damage,1,attack(3); sfxdamage(target[;]3); sfx(~_plasma~);,Plasma Gun,MIN3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Glaive,Deal [sword]<d6> damage|,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,ODD,,RED,change_power,change_power,,none,3,NO,NO,,,,,,,,,,,,,
Glaive_upgraded,Deal [sword]<d6> damage|,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,ODD|FREE1,,RED,,,,none,3,NO,NO,,,,,,,,,,,,,
Glaive_downgraded,Deal [sword]<d6> damage|,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,REQUIRE5,,RED,,,,none,3,NO,NO,,,,,,,,,,,,,
Sarissa,Deal [sword]<d6> damage[;]|reusable on evens,2,attack(d); sfxdamage(target[;]d);,Shuriken,MAX5,,RED,change_power,change_power,,none,-1,NO,NO,hidereuseable,,,,,,,,,if(d % 2 == 0) { e.usesleft += 1; };,,,
Sarissa_upgraded,Deal [sword]<d6> damage[;]|reusable on odds,2,attack(d); sfxdamage(target[;]d);,Shuriken,MAX5,,RED,,,,none,-1,NO,NO,hidereuseable,,,,,,,,,if(d % 2 == 1) { e.usesleft += 1; };,,,
Sarissa_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Shuriken,MAX5,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Hoplon,Gain [shield]<d6> shield|Reuseable on 1,1,inflictself(SHIELD[;]d); sfx(~_shield~);,Barricade,MAX3,,ORANGE,change_power,change_power,,,1,YES,NO,hidereuseable,,,,,,,,,if(d == 1) { e.usesleft+= 1; };,,,
Hoplon_upgraded,Gain [shield]<d6> shield|Reuseable on 2,1,inflictself(SHIELD[;]d); sfx(~_shield~);,Barricade,MAX3|FREE1,,ORANGE,,,,,1,YES,NO,hidereuseable,,,,,,,,,if(d == 2) { e.usesleft+= 1; };,,,
Hoplon_downgraded,Gain [shield]<d6> shield|Reuseable on 1,1,inflictself(SHIELD[;]d); sfx(~_shield~);,Barricade,MAX2,,ORANGE,,,,,1,YES,NO,hidereuseable,,,,,,,,,if(d == 1) { e.usesleft+= 1; };,,,
Clipeus,Gain [shield]3 shield|Reuseable on 6,1,inflictself(SHIELD[;]3); sfx(~_shield~);,Barricade,MIN4,,ORANGE,change_power,change_power,,,1,YES,NO,hidereuseable,,,,,,,,,if(d == 6) { e.usesleft += 1; };,,,
Clipeus_upgraded,Gain [shield]3 shield|Reuseable on 6,1,inflictself(SHIELD[;]3); sfx(~_shield~);,Barricade,NORMAL,,ORANGE,,,,,1,YES,NO,hidereuseable,,,,,,,,,if(d == 6) { e.usesleft += 1; };,,,
Clipeus_downgraded,Gain [shield]2 shield|Reuseable on 6,1,inflictself(SHIELD[;]2); sfx(~_shield~);,Barricade,MIN4,,ORANGE,,,,,1,YES,NO,hidereuseable,,,,,,,,,if(d == 6) { e.usesleft += 1; };,,,
Sunder,Do [sword]<double> the higher dice|Take [sword]<d6> the lower dice,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; var max = a; var min = b; if(b > max){ min = a; max = b; }; attack(max*2); boomerang(min); sfxdamage(target[;]max*2);,Two Handed Knife,MAX5|MAX5,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Sunder_upgraded,Do [sword]<double> the higher dice|Take [sword]<d6> the lower dice,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; var max = a; var min = b; if(b > max){ min = a; max = b; }; attack(max*2); boomerang(min); sfxdamage(target[;]max*2);,Two Handed Knife,NORMAL|NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Sunder_downgraded,Do [sword]<double> the lower dice|Take [sword]<d6> the higher dice,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; var max = a; var min = b; if(b > max){ min = a; max = b; }; attack(min*2); boomerang(max); sfxdamage(target[;]min*2);,Two Handed Knife,MAX5|MAX5,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Petrification Spell,An enemy item can only be|activated with a <slotdoubles> next turn,1,inflict(~petrified~+d); sfx(~_weaken~); sfx(~_lock~|~~|0.3);,Padlock,DOUBLES|DOUBLES,,GRAY,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Petrification Spell_upgraded,An enemy item can only be|activated with a <d6> next turn,1,inflict(~petrified~+d); sfx(~_weaken~); sfx(~_lock~|~~|0.3);,Padlock,NORMAL,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Petrification Spell_downgraded,An enemy item can only be|activated with a 6 next turn,1,inflict(~petrified6~); sfx(~_weaken~); sfx(~_lock~|~~|0.3);,Padlock,REQUIRE6|REQUIRE6,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Polymorph,Replace an enemy item|with another random item,1,inflict(~polymorph~); sfx(~_thinghappens~); ,Mass Polymorph,COUNTDOWN,12,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Polymorph_upgraded,Replace ALL enemy items|with other random items,1,inflict(~polymorphall~); sfx(~_thinghappens~); ,Mass Polymorph,COUNTDOWN,12,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Polymorph_downgraded,No effect,1,,Mass Polymorph,COUNTDOWN,12,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Pencil,Roll an extra dice,1,givedice();,Magic Dice,COUNTDOWN,4,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Pencil_upgraded,Roll an extra dice|[gray](2 uses this turn),1,givedice();,Magic Dice,COUNTDOWN,4,BRIGHTCYAN,,,,,2,YES,NO,,,,,,,,,,,,,
Pencil_downgraded,Roll an extra|[ice] frozen dice,1,givedice(); var last; for(mydice in self.dicepool){if(mydice.available()){last = mydice;};}; var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim = ~alternate_ice~; sfx(~_dicefreeze~);}; last.animate(anim);,Magic Dice,COUNTDOWN,4,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Vent Steam,Calculate again[;] do [ice]dmg|equal to number calculated,1,if(simulation){bonus(-9999999);}else if(self.usecpuinsteadofdice){robotroll(); var d = 0; for (mydice in self.dicepool){ if (mydice.available()){ d = mydice.basevalue; } }; attack(d[;]ICE); sfx(~_ice~); sfxdamage(d);};,Arctic Storm,COUNTDOWN,3,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,robotroll();
Vent Steam_upgraded,Calculate again[;] do [ice]dmg|equal to number calculated|,1,if(simulation){bonus(-9999999);}else if(self.usecpuinsteadofdice){robotroll(); var d = 0; for (mydice in self.dicepool){ if (mydice.available()){ d = mydice.basevalue; } }; attack(d[;]ICE); sfx(~_ice~); sfxdamage(d);};,Arctic Storm,COUNTDOWN,3,BRIGHTCYAN,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,robotroll();
Vent Steam_downgraded,Calculate again[;] deal|[ice]1 damage,1,if(simulation){bonus(100);}else if(self.usecpuinsteadofdice){robotroll();}; attack(1[;]ICE); sfx(~_ice~); sfxdamage(target|1);,Arctic Storm,COUNTDOWN,3,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,robotroll();
Freezing Trap,Deal [shock]2 damage[;] freeze [ice]1|dice[;] stun [stun]1 equipment,1,attack(2[;]SHOCK); sfx(~_ice~); inflict(~mf_stun~); inflict(ICE[;]1); sfx(~_shock~);,Zap Shrine,COUNTDOWN,10,BRIGHTCYAN,change_power,change_power,ice,,0,NO,NO,,1,,,,,,,,,,,
Freezing Trap_upgraded,Deal [shock]4 damage[;] freeze [ice]2|dice[;] stun [stun]1 equipment,1,attack(4[;]SHOCK); sfx(~_ice~); inflict(~mf_stun~); inflict(ICE[;]2); sfx(~_shock~);,Zap Shrine,COUNTDOWN,10,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Freezing Trap_downgraded,Deal [shock]2 damage[;]|freeze [ice]1 dice,1,attack(2|SHOCK); sfxdamage(target[;]2); inflict(ICE); sfx(~_ice~);,Zap Shrine,COUNTDOWN,10,BRIGHTCYAN,,,,none,0,NO,NO,,,,,,,,,,,,,
Freezing Trap?,Deal [shock]2 damage[;] freeze [ice]1|dice[;] stun [stun]1 dice,1,attack(2[;]SHOCK); sfx(~_ice~); inflict(~mf_stun~); inflict(ICE[;]1); sfx(~_shock~);,Zap Shrine,COUNTDOWN,10,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,alternateversion,1,,,,,,,,,,,
Freezing Trap?_upgraded,Deal [shock]4 damage[;] freeze [ice]2|dice[;] stun [stun]1 dice,1,attack(4[;]SHOCK); sfx(~_ice~); inflict(~mf_stun~); inflict(ICE[;]2); sfx(~_shock~);,Zap Shrine,COUNTDOWN,10,BRIGHTCYAN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Freezing Trap?_downgraded,Deal [shock]2 damage[;]|freeze [ice]1 dice,1,attack(2|SHOCK); sfxdamage(target[;]2); inflict(ICE); sfx(~_ice~);,Zap Shrine,COUNTDOWN,10,BRIGHTCYAN,,,,none,0,NO,NO,alternateversion,,,,,,,,,,,,
Frost Siphon,Drain [heart]3 health for each|[ice]frozen enemy dice,1,drain(getstatus(ICE)*3); sfx(~_drain~); sfx(~_ice~);,Life Leech,COUNTDOWN,10,BRIGHTCYAN,change_power,change_power,ice,,0,NO,NO,,1,,,,,,,,,,,
Frost Siphon_upgraded,Drain [heart]4 health for each|[ice]frozen enemy dice,1,drain(getstatus(ICE)*4); sfx(~_drain~); sfx(~_ice~);,Life Leech,COUNTDOWN,10,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Frost Siphon_downgraded,Drain [heart]2 health for each|[ice]frozen enemy dice,1,drain(getstatus(ICE)*2); sfx(~_drain~); sfx(~_ice~);,Life Leech,COUNTDOWN,10,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Frost Siphon?,Drain [heart]3 health for each|[ice]freeze on enemy,1,drain(getstatus(ICE)*3); sfx(~_drain~); sfx(~_ice~);,Life Leech,COUNTDOWN,10,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,alternateversion,1,,,,,,,,,,,
Frost Siphon?_upgraded,Drain [heart]4 health for each|[ice]freeze on enemy,1,drain(getstatus(ICE)*4); sfx(~_drain~); sfx(~_ice~);,Life Leech,COUNTDOWN,10,BRIGHTCYAN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Frost Siphon?_downgraded,Drain [heart]2 health for each|[ice]freeze on enemy,1,drain(getstatus(ICE)*2); sfx(~_drain~); sfx(~_ice~);,Life Leech,COUNTDOWN,10,BRIGHTCYAN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Glaciate,Freeze [ice]all of|everyone's dice,1,inflict(ICE[;]ALL); var t = 0; for(mydice in self.dicepool){ if (mydice.available()){ var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim=~alternate_ice~; sfx(~_dicefreeze~|~~|t);}; mydice.animate(anim[;]t); t+=0.1; }; };,Blowtorch,COUNTDOWN,12,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,var t = 0; for(mydice in self.dicepool){ if (mydice.available()){ var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim=~alternate_ice~; sfx(~_dicefreeze~|~~|t);}; mydice.animate(anim[;]t); t+=0.1; }; };
Glaciate_upgraded,[ice]Freeze everyone's dice[;] do|[ice]1 dmg per dice frozen,1,var total = 0; total+=target.dice; total+=target.extradice; inflict(ICE[;]ALL); var t = 0; for (mydice in self.dicepool){  var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim=~alternate_ice~; sfx(~_dicefreeze~|~~|t);}; mydice.animate(anim[;]t); t+=1; }; }; attack(total+t[;]ICE); sfxdamage(target[;]total); sfx(~_ice~);,Blowtorch,COUNTDOWN,12,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,var t = 0; for(mydice in self.dicepool){ if (mydice.available()){ var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim=~alternate_ice~; sfx(~_dicefreeze~|~~|t);}; mydice.animate(anim[;]t); t+=0.1; }; };
Glaciate_downgraded,Freeze [ice]all of|your dice,1,var t = 0; for (mydice in self.dicepool){ if (mydice.available()){  var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim=~alternate_ice~; sfx(~_dicefreeze~|~~|t);}; mydice.animate(anim[;]t); t+=0.1; }; }; ,Blowtorch,COUNTDOWN,12,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Cryoshock,[ice]10 dmg + [ice]2 freeze|[gray](once per battle),1,attack(10[;]ICE); inflict(ICE[;]2); sfx(~_ice~); sfxdamage(target|10);,Blowtorch,COUNTDOWN,10,BRIGHTCYAN,change_power,change_power,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Cryoshock_upgraded,[ice]13 dmg + [ice]4 freeze|[gray](once per battle),1,attack(13[;]ICE); inflict(ICE[;]4); sfx(~_ice~); sfxdamage(target|13);,Blowtorch,COUNTDOWN,10,BRIGHTCYAN,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Cryoshock_downgraded,[ice]5 dmg + [ice]1 freeze|[gray](once per battle),1,attack(5[;]ICE); inflict(ICE[;]1); sfx(~_ice~); sfxdamage(target|5);,Blowtorch,COUNTDOWN,10,BRIGHTCYAN,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Ice Lash,1-3: freeze [ice]<d6> dice|4-6: do [ice]<d6> damage,2,var x = actualdice[0].basevalue; if(x < 4){ inflict(ICE[;]d); }else{ attack(d[;]ICE); sfxdamage(target|d); }; sfx(~_ice~);,Blowtorch,NORMAL,,BRIGHTCYAN,change_power,change_power,ice,,0,NO,NO,,,,,,,,,,,,,
Ice Lash_upgraded,1-3: freeze [ice]3 dice|4-6: do [ice]6 damage,2,var x = actualdice[0].basevalue; if(x < 4){ inflict(ICE[;]3); }else{ attack(6[;]ICE); sfxdamage(target|6); }; sfx(~_ice~);,Blowtorch,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Ice Lash_downgraded,1-3: freeze [ice]<d6> dice|4-6: do [ice]<d6> damage,2,var x = actualdice[0].basevalue; if(x < 4){ inflict(ICE[;]d); }else{ attack(d[;]ICE); sfxdamage(target|d); }; sfx(~_ice~);,Blowtorch,EVEN,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Ice Lash?,1-3: inflict [ice]<d6> freeze|4-6: do [ice]<d6> damage,2,var x = actualdice[0].basevalue; if(x < 4){ inflict(ICE[;]d); }else{ attack(d[;]ICE); sfxdamage(target|d); }; sfx(~_ice~);,Blowtorch,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Ice Lash?_upgraded,1-3: inflict [ice]3 freeze|4-6: do [ice]6 damage,2,var x = actualdice[0].basevalue; if(x < 4){ inflict(ICE[;]3); }else{ attack(6[;]ICE); sfxdamage(target|6); }; sfx(~_ice~);,Blowtorch,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Ice Lash?_downgraded,1-3: inflict [ice]<d6> freeze|4-6: do [ice]<d6> damage,2,var x = actualdice[0].basevalue; if(x < 4){ inflict(ICE[;]d); }else{ attack(d[;]ICE); sfxdamage(target|d); }; sfx(~_ice~);,Blowtorch,EVEN,,BRIGHTCYAN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Cryocautery,Freeze [ice]2 dice[;]|inflict [poison]2 poison,1,inflict(ICE[;]2); sfx(~_ice~); inflict(POISON[;]2); sfx(~_poison~);,Goop Gun,COUNTDOWN,10,BRIGHTCYAN,change_power,change_power,ice,,0,NO,NO,,1,,,,,,,,,,,
Cryocautery_upgraded,Freeze [ice]3 dice[;]|inflict [poison]3 poison,1,inflict(ICE[;]3); sfx(~_ice~); inflict(POISON[;]3); sfx(~_poison~);,Goop Gun,COUNTDOWN,10,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Cryocautery_downgraded,Freeze [ice]1 dice[;]|inflict [poison]1 poison,1,inflict(ICE[;]1); sfx(~_ice~); inflict(POISON[;]1); sfx(~_poison~);,Goop Gun,COUNTDOWN,10,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Cryocautery?,Inflict [ice]2 freeze[;]|inflict [poison]2 poison,1,inflict(ICE[;]2); sfx(~_ice~); inflict(POISON[;]2); sfx(~_poison~);,Goop Gun,COUNTDOWN,10,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,alternateversion,1,,,,,,,,,,,
Cryocautery?_upgraded,Inflict [ice]3 freeze[;]|inflict [poison]3 poison,1,inflict(ICE[;]3); sfx(~_ice~); inflict(POISON[;]3); sfx(~_poison~);,Goop Gun,COUNTDOWN,10,BRIGHTCYAN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Cryocautery?_downgraded,Inflict [ice]1 freeze[;]|inflict [poison]1 poison,1,inflict(ICE[;]1); sfx(~_ice~); inflict(POISON[;]1); sfx(~_poison~);,Goop Gun,COUNTDOWN,10,BRIGHTCYAN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Green Dragon's Blade,Deal [sword]<d6> damage|Freeze [ice]1 dice for each|damage over 5 this does,2,var h = target.hp; attack(d); sfxdamage(target[;]d); h-=target.hp; if(h > 5){ inflict(ICE[;]h - 5); sfx(~_ice~); };,Ember,MAX5,,GREEN,change_power,change_power,ice,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Green Dragon's Blade_upgraded,Deal [sword]<d6> damage|Freeze [ice]1 dice for each|damage over 4 this does,2,var h = target.hp; attack(d); sfxdamage(target[;]d); h-=target.hp; if(h > 4){ inflict(ICE[;]h - 4); sfx(~_ice~); };,Ember,MAX5,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Green Dragon's Blade_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Ember,MAX5,,GREEN,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Green Dragon's Blade?,Deal [sword]<d6> damage|Inflict [ice]1 freeze for each|damage over 5 this does,2,var h = target.hp; attack(d); sfxdamage(target[;]d); h-=target.hp; if(h > 5){ inflict(ICE[;]h - 5); sfx(~_ice~); };,Ember,MAX5,,GREEN,change_power,change_power,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Green Dragon's Blade?_upgraded,Deal [sword]<d6> damage|Inflict [ice]1 freeze for each|damage over 6 this does,2,var h = target.hp; attack(d); sfxdamage(target[;]d); h-=target.hp; if(h > 4){ inflict(ICE[;]h - 4); sfx(~_ice~); };,Ember,MAX5,,GREEN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Green Dragon's Blade?_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Ember,MAX5,,GREEN,,,,none,0,NO,NO,alternateversion,,,,,,,,,,,,
Frost Fling,Deal [ice]2 damage[;] roll a 1|[gray](Reusable),2,attack(2[;]ICE); sfx(~_ice~); givedice(1); sfxdamage(target|2);,Ember,MIN2,,BRIGHTCYAN,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,givedice(1);
Frost Fling_upgraded,Deal [ice]3 damage[;] roll a 1|[gray](Reusable),2,attack(3[;]ICE); sfx(~_ice~); givedice(1); sfxdamage(target|3);,Ember,MIN2,,BRIGHTCYAN,,,,,-1,NO,NO,,,,,,,,,,,,,givedice(1);
Frost Fling_downgraded,Deal [ice]2 damage[;] roll a 1,2,attack(2[;]ICE); sfx(~_ice~); givedice(1); sfxdamage(target|2);,Ember,MIN2,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,givedice(1);
Icy Iceblade of Iciness,Deal [ice]<double> damage|While equipped[;] [ice]ALL of|your dice are frozen,2,attack(d*2[;]ICE); sfx(~_ice~); sfxdamage(target|d*2);,Ember,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,if(runscript(~morefluff/isalt~|[~ice~])){inflictself(ICE|5); }else{inflictself(ICE|ALL);};,,,,,,,,
Icy Iceblade of Iciness_upgraded,Deal [ice]<double> damage|While equipped[;] [ice]ALL of|your dice are frozen,2,attack(d*2[;]ICE); sfx(~_ice~); sfxdamage(target|d*2);,Ember,NORMAL|FREE1,,BRIGHTCYAN,,,,,0,NO,NO,,,,,if(runscript(~morefluff/isalt~|[~ice~])){inflictself(ICE|5); }else{inflictself(ICE|ALL);};,,,,,,,,
Icy Iceblade of Iciness_downgraded,Deal [ice]<double> damage|While equipped[;] [ice]ALL of|your dice are frozen,2,attack(d*2[;]ICE); sfx(~_ice~); sfxdamage(target|d*2);,Ember,MAX3,,BRIGHTCYAN,,,,,0,NO,NO,,,,,if(runscript(~morefluff/isalt~|[~ice~])){inflictself(ICE|5); }else{inflictself(ICE|ALL);};,,,,,,,,
Splinters,Roll two [ice]frozen[] dice|[gray](Reusable),1,var amount = 2; var dicearray = []; for(x in 0...amount){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray); for(x in 0...amount){ var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim = ~alternate_ice~; sfx(~_dicefreeze~|~~|(x*1.0)/5+0.5);}; self.dicepool[self.dicepool.length-(amount-x)].animate(anim[;](x*1.0)/5+0.5); };,Snake Eyes,COUNTDOWN,8,BRIGHTCYAN,change_power,change_power,,,-1,YES,NO,,1,,,,,,,,,,,
Splinters_upgraded,Roll three [ice]frozen[] dice|[gray](Reusable),1,var amount = 3; var dicearray = []; for(x in 0...amount){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray); for(x in 0...amount){ var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim = ~alternate_ice~; sfx(~_dicefreeze~|~~|(x*1.0)/5+0.5);}; self.dicepool[self.dicepool.length-(amount-x)].animate(anim[;](x*1.0)/5+0.5); };,Snake Eyes,COUNTDOWN,8,BRIGHTCYAN,,,,,-1,YES,NO,,,,,,,,,,,,,
Splinters_downgraded,Roll a [ice]frozen[] dice|[gray](Reusable),1,var amount = 1; var dicearray = []; for(x in 0...amount){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray); for(x in 0...amount){ var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim = ~alternate_ice~; sfx(~_dicefreeze~|~~|(x*1.0)/5+0.5);}; self.dicepool[self.dicepool.length-(amount-x)].animate(anim[;](x*1.0)/5+0.5); };,Snake Eyes,COUNTDOWN,8,BRIGHTCYAN,,,,,-1,YES,NO,,,,,,,,,,,,,
Comet Storm,[ice]2 dmg to you and enemy|[gray](Reusable),1,attack(2[;]ICE); sfx(~_ice~); boomerang(2[;]ICE); sfxdamage(target|2);,Boom!,COUNTDOWN,2,BRIGHTCYAN,change_power,change_power,,,-1,NO,NO,,1,,,,,,,,,,,
Comet Storm_upgraded,[ice]4 dmg to you and enemy|[gray](Reusable),1,attack(4[;]ICE); sfx(~_ice~); boomerang(4[;]ICE); sfxdamage(target|4);,Boom!,COUNTDOWN,2,BRIGHTCYAN,,,,,-1,NO,NO,,,,,,,,,,,,,
Comet Storm_downgraded,[ice]2 dmg to yourself|[gray](Reusable),1,attackself(2[;]ICE); sfx(~_ice~);,Boom!,COUNTDOWN,2,BRIGHTCYAN,,,,,-1,YES,NO,,,,,,,,,,,,,
Cryolily,Freeze [ice]1 dice|(Cost [mana]2: +[ice]1 extra),1,inflict(ICE); sfx(~_ice~); if(getstatusself(MANA) >= 2){ removestatusself(MANA[;]2); inflict(ICE); };,Refrigerator,NORMAL|NORMAL,5,BRIGHTCYAN,change_power,change_power,ice,,0,NO,NO,,1,,,,,,,,,,,
Cryolily_upgraded,Freeze [ice]1 dice|(Cost [mana]2: +[ice]1 extra),1,inflict(ICE); sfx(~_ice~); if(getstatusself(MANA) >= 2){ removestatusself(MANA[;]2); inflict(ICE); };,Refrigerator,MAX4|MAX4,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Cryolily_downgraded,Freeze [ice]1 dice,1,inflict(ICE); sfx(~_ice~);,Refrigerator,NORMAL|NORMAL,5,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Cryolily?,Inflict [ice]1 freeze|(Cost [mana]2: +[ice]1 extra),1,inflict(ICE); sfx(~_ice~); if(getstatusself(MANA) >= 2){ removestatusself(MANA[;]2); inflict(ICE); };,Refrigerator,NORMAL|NORMAL,5,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,alternateversion,1,,,,,,,,,,,
Cryolily?_upgraded,Inflict [ice]1 freeze|(Cost [mana]2: +[ice]1 extra),1,inflict(ICE); sfx(~_ice~); if(getstatusself(MANA) >= 2){ removestatusself(MANA[;]2); inflict(ICE); };,Refrigerator,MAX4|MAX4,,BRIGHTCYAN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Cryolily?_downgraded,Inflict [ice]1 freeze,1,inflict(ICE); sfx(~_ice~);,Refrigerator,NORMAL|NORMAL,5,BRIGHTCYAN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Magic Smoke,[fire]Burn yourself[;]|restore [heal]<d6> health,1,inflictself(FIRE); attackself(-d); sfx(~_fire~); sfx(~_heal~);,Ember,MAX5,,RED,change_power,change_power,,,0,YES,NO,robotonly,,,,,,,,,,,,
Magic Smoke_upgraded,[fire]Burn yourself[;]|restore [heal]<d6> health,1,inflictself(FIRE); attackself(-d); sfx(~_fire~); sfx(~_heal~);,Ember,NORMAL,,RED,,,,,0,YES,NO,robotonly,,,,,,,,,,,,
Magic Smoke_downgraded,[fire]Burn yourself[;]|restore [heal]<d6> health,1,inflictself(FIRE); attackself(-d); sfx(~_fire~); sfx(~_heal~);,Ember,MAX3,,RED,,,,,0,YES,NO,robotonly,,,,,,,,,,,,
Firewall,[lock]Lock all [fire]burning|enemy dice,2,inflict(LOCK[;]getstatus(FIRE)); sfx(~_fire~); sfx(~_lock~);,Padlock,EVEN,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Firewall_upgraded,[lock]Lock all [fire]burning|enemy dice,2,inflict(LOCK[;]getstatus(FIRE)); sfx(~_fire~); sfx(~_lock~);,Padlock,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Firewall_downgraded,[lock]Lock up to 1 [fire]burning|enemy dice,2,if(getstatus(FIRE) > 0){ inflict(LOCK[;]1); }; sfx(~_fire~); sfx(~_lock~);,Padlock,EVEN,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Chimney Fire,Inflict [weaken]1 weaken[;] [fire]1|burn and [poison]2 poison,1,inflict(FIRE[;]1); inflict(WEAKEN[;]1); inflict(POISON[;]2); sfx(~_fire~); sfx(~_weaken~);,Burrower,COUNTDOWN,12,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Chimney Fire_upgraded,Inflict [weaken]1 weaken[;] [fire]2|burn and [poison]3 poison,1,inflict(FIRE[;]2); inflict(WEAKEN[;]1); inflict(POISON[;]3); sfx(~_fire~); sfx(~_weaken~);,Burrower,COUNTDOWN,12,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Chimney Fire_downgraded,Inflict [weaken]1 weaken[;] [fire]1|burn or [poison]1 poison,1,var f = [FIRE[;]WEAKEN[;]POISON]; inflict(rand(f)[;]1); sfx(~_fire~); sfx(~_weaken~);,Burrower,COUNTDOWN,12,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Flaming Dirk,Deal [fire]<d6> damage|On even[;] burn [fire]2 dice,1,attack(d[;]FIRE); sfx(~_fire~); if(d%2 == 0){ inflict(FIRE[;]2); }; sfxdamage(target|d);,Blowtorch,MAX4,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Flaming Dirk_upgraded,Deal [fire]<d6> damage|On even[;] burn [fire]2 dice,1,attack(d[;]FIRE); sfx(~_fire~); if(d%2 == 0){ inflict(FIRE[;]2); }; sfxdamage(target|d);,Blowtorch,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Flaming Dirk_downgraded,Deal [fire]<d6> damage,1,attack(d[;]FIRE); sfx(~_fire~); sfxdamage(target|d);,Blowtorch,MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Everflame,[fire]<double> damage. Next turn[;]|you receive [fire]<d6> burn,2,attack(d*2[;]FIRE); inflictself(~mf_burnnextturn~|d); sfx(~_fire~); sfxdamage(target|d*2);,Blowtorch,MAX5,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,jinx(~Everflame~[;]~receive [fire]%VAR% burn~[;]~Receive [fire]%VAR% burn~[;]~inflict(FIRE[;]%VAR%); sfx(\~_fire\~);~[;]self[;]self[;]1[;]d); sfx(~_fire~);
Everflame_upgraded,[fire]<double> damage. Next turn[;]|you receive [fire]<d6> burn,2,attack(d*2[;]FIRE); inflictself(~mf_burnnextturn~|d); sfx(~_fire~); sfxdamage(target|d*2);,Blowtorch,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,jinx(~Everflame~[;]~receive [fire]%VAR% burn~[;]~Receive [fire]%VAR% burn~[;]~inflict(FIRE[;]%VAR%); sfx(\~_fire\~);~[;]self[;]self[;]1[;]d); sfx(~_fire~);
Everflame_downgraded,[fire]<d6> damage. Next turn[;]|you receive [fire]<d6> burn,2,attack(d[;]FIRE); inflictself(~mf_burnnextturn~|d); sfx(~_fire~); sfxdamage(target|d*2);,Blowtorch,MAX5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,jinx(~Everflame~[;]~receive [fire]%VAR% burn~[;]~Receive [fire]%VAR% burn~[;]~inflict(FIRE[;]%VAR%); sfx(\~_fire\~);~[;]self[;]self[;]1[;]d); sfx(~_fire~);
Cinderstorm,Double the enemy's|[fire]burn,1,inflict(FIRE[;]getstatus(FIRE)); sfx(~_fire~);,Blowtorch,COUNTDOWN,6,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Cinderstorm_upgraded,Triple the enemy's|[fire]burn,1,inflict(FIRE[;]getstatus(FIRE)*2); sfx(~_fire~);,Blowtorch,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Cinderstorm_downgraded,Burn [fire]1 dice,1,inflict(FIRE[;]1); sfx(~_fire~);,Blowtorch,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Pyrodrop,Burn [fire]2 dice|(If [mana]>=3: do [fire]<d6> damage),1,inflict(FIRE|2); sfx(~_fire~); if(getstatusself(MANA) >= 3){ attack(d[;]FIRE); sfxdamage(target|d); };,Ember,NORMAL|NORMAL,6,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Pyrodrop_upgraded,Burn [fire]2 dice|(If [mana]>=3: do [fire]<d6> damage),1,inflict(FIRE|2); sfx(~_fire~); if(getstatusself(MANA) >= 3){ attack(d[;]FIRE); sfxdamage(target|d); };,Ember,NORMAL|NORMAL,8,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Pyrodrop_downgraded,Burn [fire]2 dice|(If [mana]>=3: do [fire]<d6> damage),1,inflict(FIRE|2); sfx(~_fire~); if(getstatusself(MANA) >= 3){ attack(d[;]FIRE); sfxdamage(target|d); };,Ember,NORMAL|NORMAL,4,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Battle Sax,Deal [weaken]<double> damage|Weaken [weaken]1 item,2,attack(d*2[;]WEAKEN); sfxdamage(target[;]d*2); sfx(~_weaken~); inflict(WEAKEN);,Burrower,MAX3,,ORANGE,change_power,change_power,weaken,,0,NO,NO,finale,,,,,,,,,,,,
Battle Sax_upgraded,Deal [weaken]<double> damage|Weaken [weaken]2 items,2,attack(d*2[;]WEAKEN); sfxdamage(target[;]d*2); sfx(~_weaken~); inflict(WEAKEN[;]2);,Burrower,MAX3,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Battle Sax_downgraded,Deal [weaken]<double> damage,2,attack(d*2[;]WEAKEN); sfxdamage(target[;]d*2); sfx(~_weaken~);,Burrower,MAX3,,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Battle Sax?,Inflict [weaken]1 weaken[;] then|deal [weaken]<double> damage,2,inflict(WEAKEN); attack(d*2[;]WEAKEN); sfxdamage(target[;]d*2); sfx(~_weaken~);,Burrower,MAX3,,ORANGE,change_power,change_power,,,0,NO,NO,alternateversion|finale,,,,,,,,,,,,
Battle Sax?_upgraded,Inflict [weaken]2 weaken[;] then|deal [weaken]<double> damage,2,inflict(WEAKEN[;]2); attack(d*2[;]WEAKEN); sfxdamage(target[;]d*2); sfx(~_weaken~);,Burrower,MAX3,,ORANGE,,,,,0,NO,NO,alternateversion|finale,,,,,,,,,,,,
Battle Sax?_downgraded,Deal [weaken]<double> damage,2,attack(d*2[;]WEAKEN); sfxdamage(target[;]d*2); sfx(~_weaken~);,Burrower,MAX3,,ORANGE,,,,,0,NO,NO,alternateversion|finale,,,,,,,,,,,,
Nerf Hammer,At the start of each turn[;]|make a random enemy|item harder to play,2,inflict(~nerfed~); sfx(~_thinghappens~); ,Burrower,COUNTDOWN,15,ORANGE,change_power,change_power,,,0,NO,NO,finale,,,,,,,,,,,,
Nerf Hammer_upgraded,At the start of each turn[;]|make 2 random enemy|items harder to play,2,inflict(~nerfed~|2); sfx(~_thinghappens~); ,Burrower,COUNTDOWN,15,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Nerf Hammer_downgraded,No effect,2,sfx(~_curse~);,Burrower,COUNTDOWN,15,ORANGE,,,,,0,NO,NO,finale,,,,,,,,,,,,
Healing Boomerang,Restore [heal]<double> health[;]|for you and the enemy,1,attack(-d*2); sfx(~_heal~); attackself(-d*2);,Regenerate,MAX4,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Healing Boomerang_upgraded,Restore [heal]<double> health[;]|for you and the enemy,1,attack(-d*2); sfx(~_heal~); attackself(-d*2);,Regenerate,MAX5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Healing Boomerang_downgraded,Restore [heal]<double> health[;]|for the enemy,1,attack(-d*2); sfx(~_heal~);,Regenerate,MAX4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Mossy Cauldron,Restore [heal]1 health[;] get a|new dice with lower value,1,attackself(-1); sfx(~_heal~); if(actualdice[0].basevalue >= 2){ var t = []; var x = 1; while(x < actualdice[0].basevalue){ t.push(x); x+=1; }; givedice(rand(t)); };,Revitalize,MIN2,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Mossy Cauldron_upgraded,[heal]1[;] reroll with lower value|,1,attackself(-1); sfx(~_heal~); if(actualdice[0].basevalue >= 2){ var t = []; var x = 1; while(x < actualdice[0].basevalue){ t.push(x); x+=1; }; givedice(rand(t)); };,Revitalize,MIN2,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Mossy Cauldron_downgraded,Restore [heal]1 health,1,attackself(-1); sfx(~_heal~);,Revitalize,MIN2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Trash Cauldron,Inflict [poison]1 poison[;] lose [heart]1|health[;] get a new dice,1,inflict(POISON); sfx(~_poison~[;]~~[;]0.2); pierceattackself(1); sfx(~_drain~); givedice();,Goop Gun,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,pierceattackself(1); sfx(~_drain~); givedice();
Trash Cauldron_upgraded,Add [poison]1[;] lose [heart]1 [;] reroll dice|,1,inflict(POISON); sfx(~_poison~[;]~~[;]0.2); pierceattackself(1); sfx(~_drain~); givedice();,Goop Gun,NORMAL,,PURPLE,,,,,2,NO,NO,,,,,,,,,,,,,pierceattackself(1); sfx(~_drain~); givedice();
Trash Cauldron_downgraded,Inflict [poison]1 poison[;] lose [heart]1 hp,1,inflict(POISON); sfx(~_poison~[;]~~[;]0.2); pierceattackself(1); sfx(~_drain~);,Goop Gun,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Ash Cauldron,Burn [fire]1 dice[;] get a new|burning dice with higher value,1,inflict(FIRE); sfx(~_fire~); if(actualdice[0].basevalue <=6){ var t = []; var x = 6; while(x > actualdice[0].basevalue){ t.push(x); x-=1; }; givedice(rand(t)); }else{ givedice(6); };  var anim = ~fire~; if(runscript(~morefluff/isalt~|[~fire~])){anim=~alternate_fire~; };self.dicepool[self.dicepool.length - 1].animate(anim);,Ember,MAX5,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,if(actualdice[0].basevalue <=6){ var t = []; var x = 6; while(x > actualdice[0].basevalue){ t.push(x); x-=1; }; givedice(rand(t)); }else{ givedice(6); }; self.dicepool[self.dicepool.length - 1].animate(~fire~);
Ash Cauldron_upgraded,[fire]1[;] get a higher burning dice|,1,inflict(FIRE); sfx(~_fire~); if(actualdice[0].basevalue <=6){ var t = []; var x = 6; while(x > actualdice[0].basevalue){ t.push(x); x-=1; }; givedice(rand(t)); }else{ givedice(6); };  var anim = ~fire~; if(runscript(~morefluff/isalt~|[~fire~])){anim=~alternate_fire~; };self.dicepool[self.dicepool.length - 1].animate(anim);,Ember,MAX5,,RED,,,,,2,NO,NO,,,,,,,,,,,,,if(actualdice[0].basevalue <=6){ var t = []; var x = 6; while(x > actualdice[0].basevalue){ t.push(x); x-=1; }; givedice(rand(t)); }else{ givedice(6); }; self.dicepool[self.dicepool.length - 1].animate(~fire~);
Ash Cauldron_downgraded,Burn [fire]1 dice,1,inflict(FIRE); sfx(~_fire~);,Ember,MAX5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Stash Cauldron,Deal [sword]1 damage[;] get a|new dice next turn,1,attack(1); sfxdamage(target[;]1); inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~illuminate~); sfx(~magic_gaindice~);,Magic Lantern,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~illuminate~); sfx(~magic_gaindice~);
Stash Cauldron_upgraded,[sword]1[;] get a new dice next turn|,1,attack(1); sfxdamage(target[;]1); inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~illuminate~); sfx(~magic_gaindice~);,Magic Lantern,NORMAL,,YELLOW,,,,,2,NO,NO,,,,,,,,,,,,,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~illuminate~); sfx(~magic_gaindice~);
Stash Cauldron_downgraded,Deal [sword]1 damage,1,attack(1); sfxdamage(target[;]1);,Magic Lantern,NORMAL,,YELLOW,,,,none,0,NO,NO,,,,,,,,,,,,,
Hat Cauldron,Gain [reduce]1 reduce|Get a new dice,1,inflictself(REDUCE); sfx(~_shield~); givedice();,Pillow Fort,MIN5,,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Hat Cauldron_upgraded,Gain [reduce]1[;] reroll dice|,1,inflictself(REDUCE); sfx(~_shield~); givedice();,Pillow Fort,MIN5,,ORANGE,,,,,2,YES,NO,,,,,,,,,,,,,
Hat Cauldron_downgraded,Gain [reduce]1 reduce,1,inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,MIN5,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Trebuchet,[sword]<d6> dmg next turn (<var:trebuchet>)|,1,self.setvar(~trebuchet~[;]self.getvar(~trebuchet~)+d); sfx(~jackpot_increasecounter~);,Catapult,MAX4,,RED,change_power,change_power,,,-1,YES,NO,excludefromrandomlists,,self.setvar(~trebuchet~[;]0);,self.setvar(~trebuchet~[;]0);,,if(self.getvar(~trebuchet~) > 0){ attack(self.getvar(~trebuchet~)); sfxdamage(target[;]self.getvar(~trebuchet~)); self.setvar(~trebuchet~[;]0); if(target.hp > 0){ e.animate(~flashandshake~); }; };,,,,,,,
Trebuchet_upgraded,[sword]<d6> dmg next turn (<var:trebuchet>)|,1,self.setvar(~trebuchet~[;]self.getvar(~trebuchet~)+d); sfx(~jackpot_increasecounter~);,Catapult,MAX4|FREE1,,RED,,,,,-1,YES,NO,excludefromrandomlists,,self.setvar(~trebuchet~[;]0);,self.setvar(~trebuchet~[;]0);,,if(self.getvar(~trebuchet~) > 0){ attack(self.getvar(~trebuchet~)); sfxdamage(target[;]self.getvar(~trebuchet~)); self.setvar(~trebuchet~[;]0); if(target.hp > 0){ e.animate(~flashandshake~); }; };,,,,,,,
Trebuchet_downgraded,[sword]<d6> dmg next turn (<var:trebuchet>)|,1,self.setvar(~trebuchet~[;]self.getvar(~trebuchet~)+d); sfx(~jackpot_increasecounter~);,Catapult,MAX2,,RED,,,,,-1,YES,NO,excludefromrandomlists,,self.setvar(~trebuchet~[;]0);,self.setvar(~trebuchet~[;]0);,,if(self.getvar(~trebuchet~) > 0){ attack(self.getvar(~trebuchet~)); sfxdamage(target[;]self.getvar(~trebuchet~)); self.setvar(~trebuchet~[;]0); if(target.hp > 0){ e.animate(~flashandshake~); }; };,,,,,,,
Magnetic Dagger,Deal [sword]<d6> damage[;] swap|to taking damage instead|[gray](Reuseable),1,trace(e.castdirection); if(e.castdirection == 0){ attack(d); sfxdamage(target[;]d); }else{ attackself(d); sfxdamage(self[;]d); };,Two Handed Knife,MAX4,,RED,change_power,change_power,,none,-1,NO,NO,excludefromrandomlists,,e.fulldescription=~Deal [sword]<d6> damage[;] swap~+~#~.charAt(0)+~to dealing damage instead~+~#~.charAt(0)+~[gray](Reuseable)~; e.setvar(~direction~[;]0);,,,,,,,if(e.getvar(~direction~) == 1){ e.setvar(~direction~[;]0); e.castdirection = 0; e.fulldescription=~Deal [sword]<d6> damage[;] swap~+~#~.charAt(0)+~to dealing damage instead~+~#~.charAt(0)+~[gray](Reuseable)~; }else{ e.castdirection = 1; e.setvar(~direction~[;]1); e.fulldescription=~Take [sword]<d6> damage[;] swap~+~#~.charAt(0)+~to dealing damage instead~+~#~.charAt(0)+~[gray](Reuseable)~; };,,,
Magnetic Dagger_upgraded,Deal [sword]<d6> damage[;] swap|to taking damage instead|[gray](Reuseable),1,trace(e.castdirection); if(e.castdirection == 0){ attack(d); sfxdamage(target[;]d); }else{ attackself(d); sfxdamage(self[;]d); };,Two Handed Knife,MAX5,,RED,,,,none,-1,NO,NO,excludefromrandomlists,,e.fulldescription=~Deal [sword]<d6> damage[;] swap~+~#~.charAt(0)+~to dealing damage instead~+~#~.charAt(0)+~[gray](Reuseable)~; e.setvar(~direction~[;]0);,,,,,,,if(e.getvar(~direction~) == 0){ e.setvar(~direction~[;]1); e.castdirection = 0; e.fulldescription=~Deal [sword]<d6> damage[;] swap~+~#~.charAt(0)+~to dealing damage instead~+~#~.charAt(0)+~[gray](Reuseable)~; }else{ e.castdirection = 1; e.setvar(~direction~[;]0); e.fulldescription=~Take [sword]<d6> damage[;] swap~+~#~.charAt(0)+~to dealing damage instead~+~#~.charAt(0)+~[gray](Reuseable)~; };,,,
Magnetic Dagger_downgraded,Deal [sword]<d6> damage[;] swap|to taking damage instead|[gray](Reuseable),1,trace(e.castdirection); if(e.castdirection == 0){ attack(d); sfxdamage(target[;]d); }else{ attackself(d); sfxdamage(self[;]d); };,Two Handed Knife,MAX2,,RED,,,,none,-1,NO,NO,excludefromrandomlists,,e.fulldescription=~Deal [sword]<d6> damage[;] swap~+~#~.charAt(0)+~to dealing damage instead~+~#~.charAt(0)+~[gray](Reuseable)~; e.setvar(~direction~[;]0);,,,,,,,if(e.getvar(~direction~) == 0){ e.setvar(~direction~[;]1); e.castdirection = 0; e.fulldescription=~Deal [sword]<d6> damage[;] swap~+~#~.charAt(0)+~to dealing damage instead~+~#~.charAt(0)+~[gray](Reuseable)~; }else{ e.castdirection = 1; e.setvar(~direction~[;]0); e.fulldescription=~Take [sword]<d6> damage[;] swap~+~#~.charAt(0)+~to dealing damage instead~+~#~.charAt(0)+~[gray](Reuseable)~; };,,,
Nether Portal,Duplicate dice[;] [curse] curse self|,1,if(simulation){ bonus(-1000000); }else{ givedice([d[;]d]); sfx(~_curse~); inflictself(CURSE); };,Dramatic Pause,MAX4,,PURPLE,change_power,change_power,,none,-1,YES,NO,,,,,,,,,,,,,
Nether Portal_upgraded,Duplicate dice[;] [curse] curse self|,1,if(simulation){ bonus(-1000000); }else{ givedice([d[;]d]); sfx(~_curse~); inflictself(CURSE); };,Dramatic Pause,NORMAL,,PURPLE,,,,none,-1,YES,NO,,,,,,,,,,,,,
Nether Portal_downgraded,Duplicate dice[;] [curse] curse self,1,if(simulation){ bonus(-1000000); }else{ givedice([d[;]d]); sfx(~_curse~); inflictself(CURSE); };,Dramatic Pause,MAX4,,PURPLE,,,,none,0,YES,NO,,,,,,,,,,,,,
Booster Pack,Roll an extra dice for|every rolled 6 you have,1,var ret = []; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue == 6){ret.push(rand([1|2|3|4|5|6]));};}; givedice(ret);,Magic Six,COUNTDOWN,6,PINK,change_power,change_power,,none,0,YES,NO,,,,,,,,,,,,,
Booster Pack_upgraded,Roll an extra dice for|every rolled 5 or 6 you have,1,var ret = []; for(mydice in self.dicepool){if(mydice.available() && (mydice.basevalue == 6 # mydice.basevalue == 5)){ret.push(rand([1|2|3|4|5|6]));};}; givedice(ret);,Magic Six,COUNTDOWN,6,PINK,,,,none,0,YES,NO,,,,,,,,,,,,,
Booster Pack_downgraded,Roll an extra dice|if you have a 6,1,var ret = []; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue == 6){ret = rand([1|2|3|4|5|6]);};}; givedice(ret);,Magic Six,COUNTDOWN,6,PINK,,,,none,0,YES,NO,,,,,,,,,,,,,
Tabula Rasa,Swap your current spells|with your stored ones,1,for(x in 1...7){ if(Spellbook.spellname(x) != ~Tabula Rasa~){ var temp = self.getvar(~tabulaspell~+x); self.setvar(~tabulaspell~+x[;]Spellbook.spellname(x)); Spellbook.changespellflash(x[;]temp); }; }; sfx(~_thinghappens~);,Magic Dice,NORMAL,,PINK,change_power,change_power,,,0,YES,NO,excludefromrandomlists,1,for(x in 1...7){ if(self.getvar(~tabulaspell~+x) == 0){ if(x == 1){ self.setvar(~tabulaspell~+1[;]~Cauldron~); }else if(x == 2){ self.setvar(~tabulaspell~+2[;]~Infliction~); }else{ self.setvar(~tabulaspell~+x[;]~~); }; }; };,,,,,,,for(x in 1...7){ if(self.getvar(~tabulaspell~+x) == 0){ if(x == 1){ self.setvar(~tabulaspell~+1[;]~Cauldron~); }else if(x == 2){ self.setvar(~tabulaspell~+2[;]~Infliction~); }else{ self.setvar(~tabulaspell~+x[;]~~); }; }; };,,,
Tabula Rasa_upgraded,Swap your current spells|with your stored ones|,1,for(x in 1...7){ if(Spellbook.spellname(x) != ~Tabula Rasa~){ var temp = self.getvar(~tabulaspell~+x); self.setvar(~tabulaspell~+x[;]Spellbook.spellname(x)); Spellbook.changespellflash(x[;]temp); }; }; sfx(~_thinghappens~);,Magic Dice,NORMAL,,PINK,,,,,-1,YES,NO,excludefromrandomlists,,for(x in 1...7){ if(self.getvar(~tabulaspell~+x) == 0){ if(x == 1){ self.setvar(~tabulaspell~+1[;]~Cauldron~); }else if(x == 2){ self.setvar(~tabulaspell~+2[;]~Infliction~); }else{ self.setvar(~tabulaspell~+x[;]~~); }; }; };,,,,,,,for(x in 1...7){ if(self.getvar(~tabulaspell~+x) == 0){ if(x == 1){ self.setvar(~tabulaspell~+1[;]~Cauldron~); }else if(x == 2){ self.setvar(~tabulaspell~+2[;]~Infliction~); }else{ self.setvar(~tabulaspell~+x[;]~~); }; }; };,,,
Tabula Rasa_downgraded,Swap your current spells|with your stored ones,1,for(x in 1...7){ if(Spellbook.spellname(x) != ~Tabula Rasa~){ var temp = self.getvar(~tabulaspell~+x); self.setvar(~tabulaspell~+x[;]Spellbook.spellname(x)); Spellbook.changespellflash(x[;]temp); }; }; sfx(~_thinghappens~);,Magic Dice,EVEN,,PINK,,,,,0,YES,NO,excludefromrandomlists,,for(x in 1...7){ if(self.getvar(~tabulaspell~+x) == 0){ if(x == 1){ self.setvar(~tabulaspell~+1[;]~Cauldron~); }else if(x == 2){ self.setvar(~tabulaspell~+2[;]~Infliction~); }else{ self.setvar(~tabulaspell~+x[;]~~); }; }; };,,,,,,,for(x in 1...7){ if(self.getvar(~tabulaspell~+x) == 0){ if(x == 1){ self.setvar(~tabulaspell~+1[;]~Cauldron~); }else if(x == 2){ self.setvar(~tabulaspell~+2[;]~Infliction~); }else{ self.setvar(~tabulaspell~+x[;]~~); }; }; };,,,
Flip Flop,Swap the spells in these two|slots[;] and return the dice,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; var temp = Spellbook.spellname(a); Spellbook.changespellflash(a[;]Spellbook.spellname(b)); Spellbook.changespellflash(b[;]temp); sfx(~_thinghappens~); givedice([actualdice[0].basevalue[;]actualdice[1].basevalue]);,Magic Dice,NORMAL|NORMAL,,PINK,change_power,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Flip Flop_upgraded,Swap the spells in these two|slots[;] and return the dice|,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; var temp = Spellbook.spellname(a); Spellbook.changespellflash(a[;]Spellbook.spellname(b)); Spellbook.changespellflash(b[;]temp); sfx(~_thinghappens~); givedice([actualdice[0].basevalue[;]actualdice[1].basevalue]);,Magic Dice,NORMAL|NORMAL,,PINK,,,,,-1,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Flip Flop_downgraded,Swap the spells|in these two slots,1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; var temp = Spellbook.spellname(a); Spellbook.changespellflash(a[;]Spellbook.spellname(b)); Spellbook.changespellflash(b[;]temp); sfx(~_thinghappens~);,Magic Dice,NORMAL|NORMAL,,PINK,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Trianguleight,Roll 3 dice that|add up to 8,1,var values = [[1[;] 1[;] 6][;][1[;] 2[;] 5][;][1[;] 3[;] 4][;][2[;] 2[;] 4][;][2[;] 3[;] 3]]; var idxs = [[0[;]1[;]2][;][0[;]2[;]1][;][1[;]0[;]2][;][1[;]2[;]0][;][2[;]0[;]1][;][2[;]1[;]0]]; var val = rand(values); var idx = rand(idxs); givedice([val[idx[0]][;]val[idx[1]][;]val[idx[2]]]);,Magic Dice,COUNTDOWN,8,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Trianguleight_upgraded,Roll 3 dice that sum to 8|,1,var values = [[1[;] 1[;] 6][;][1[;] 2[;] 5][;][1[;] 3[;] 4][;][2[;] 2[;] 4][;][2[;] 3[;] 3]]; var idxs = [[0[;]1[;]2][;][0[;]2[;]1][;][1[;]0[;]2][;][1[;]2[;]0][;][2[;]0[;]1][;][2[;]1[;]0]]; var val = rand(values); var idx = rand(idxs); givedice([val[idx[0]][;]val[idx[1]][;]val[idx[2]]]);,Magic Dice,COUNTDOWN,8,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Trianguleight_downgraded,Roll 3 dice that|add up to 3,1,givedice([1[;]1[;]1]);,Magic Dice,COUNTDOWN,8,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Segfault,Deal [sword]3 damage|Return any excess dice used,1,attack(3); sfxdamage(target[;]3);,Pea Gun,COUNTDOWN,5,RED,change_power,change_power,,,0,NO,NO,curseavoid,,,,,,,,,var total = 0; for(x in e.dicehistory){ total+=x.basevalue; }; if(total - e.countdown > 0){ givedice(total - e.countdown); }; e.dicehistory = [];,,,
Segfault_upgraded,Deal [sword]5 damage|Return any excess dice used,1,attack(5); sfxdamage(target[;]5);,Pea Gun,COUNTDOWN,5,RED,,,,,0,NO,NO,curseavoid,,,,,,,,,var total = 0; for(x in e.dicehistory){ total+=x.basevalue; }; if(total - e.countdown > 0){ givedice(total - e.countdown); }; e.dicehistory = [];,,,
Segfault_downgraded,Deal [sword]3 damage,1,attack(3); sfxdamage(target[;]3); e.dicehistory = [];,Pea Gun,COUNTDOWN,5,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Urumi,Deal [sword]<d6> damage. On 1[;]|reduce countdowns by 6,2,attack(d); sfxdamage(target[;]d); if(d == 1){ boostcountdowns(6); };,Accelerate,NORMAL,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,if(d == 1){ boostcountdowns(6); };
Urumi_upgraded,Deal [sword]<d6> damage. On odd[;]|reduce countdowns by 6,2,attack(d); sfxdamage(target[;]d); if(d % 2 == 1){ boostcountdowns(6); };,Accelerate,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,if(d%2 == 1){ boostcountdowns(6); };
Urumi_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Accelerate,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Perpetual Motor,Deal [sword]<d6> damage|On 8[;] take an extra turn,1,attack(d); sfxdamage(target[;]d); if(d == 8){ inflictself(EXTRATURN); sfx(~_thinghappens~); };,Time Stop,MAX3|MAX3,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 8){ inflictself(EXTRATURN); sfx(~_thinghappens~); };
Perpetual Motor_upgraded,Deal [sword]<d6> damage|On 9[;] take an extra turn,1,attack(d); sfxdamage(target[;]d); if(d == 9){ inflictself(EXTRATURN); sfx(~_thinghappens~); };,Time Stop,MAX4|MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 9){ inflictself(EXTRATURN); sfx(~_thinghappens~); };
Perpetual Motor_downgraded,Deal [sword]<d6> damage|On 8[;] take an extra turn,1,attack(d); sfxdamage(target[;]d); if(d == 8){ inflictself(EXTRATURN); sfx(~_thinghappens~); };,Time Stop,MAX2|MAX2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 8){ inflictself(EXTRATURN); sfx(~_thinghappens~); };
Synchrotron,Deal [sword]6 damage[;] double if|all dice used are the same,1,var amount = 6; if(e.getvar(~diff~) == 0){ attack(amount*2); sfxdamage(target[;]amount*2); }else{ attack(amount); sfxdamage(target[;]amount); }; e.dicehistory = []; e.setvar(~reset~[;]1);,Accelerate,COUNTDOWN,12,YELLOW,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,if(e.getvar(~reset~) == 1){ e.setvar(~diff~[;]0); e.setvar(~reset~[;]0); e.changecolour(~YELLOW~); };,,,if(e.getvar(~diff~) == 0){ var val = e.dicehistory[0].basevalue; var flag = true; for(x in e.dicehistory){ if(x.basevalue != val){ flag = false; }; }; if(!flag){ e.changecolour(~RED~); e.animate(~flashandshake~); sfx(~_weaken~); e.setvar(~diff~[;]1); }; };,,,,,
Synchrotron_upgraded,Deal [sword]8 damage[;] double if|all dice used are the same,1,var amount = 8; if(e.getvar(~diff~) == 0){ attack(amount*2); sfxdamage(target[;]amount*2); }else{ attack(amount); sfxdamage(target[;]amount); }; e.dicehistory = []; e.setvar(~reset~[;]1);,Accelerate,COUNTDOWN,12,YELLOW,,,,none,0,NO,NO,excludefromrandomlists,,,,if(e.getvar(~reset~) == 1){ e.setvar(~diff~[;]0); e.setvar(~reset~[;]0); e.changecolour(~YELLOW~); };,,,if(e.getvar(~diff~) == 0){ var val = e.dicehistory[0].basevalue; var flag = true; for(x in e.dicehistory){ if(x.basevalue != val){ flag = false; }; }; if(!flag){ e.changecolour(~RED~); e.animate(~flashandshake~); sfx(~_weaken~); e.setvar(~diff~[;]1); }; };,,,,,
Synchrotron_downgraded,Deal [sword]4 damage[;] double if|all dice used are the same,1,var amount = 4; if(e.getvar(~diff~) == 0){ attack(amount*2); sfxdamage(target[;]amount*2); }else{ attack(amount); sfxdamage(target[;]amount); }; e.dicehistory = []; e.setvar(~reset~[;]1);,Accelerate,COUNTDOWN,12,YELLOW,,,,none,0,NO,NO,excludefromrandomlists,,,,if(e.getvar(~reset~) == 1){ e.setvar(~diff~[;]0); e.setvar(~reset~[;]0); e.changecolour(~YELLOW~); };,,,if(e.getvar(~diff~) == 0){ var val = e.dicehistory[0].basevalue; var flag = true; for(x in e.dicehistory){ if(x.basevalue != val){ flag = false; }; }; if(!flag){ e.changecolour(~RED~); e.animate(~flashandshake~); sfx(~_weaken~); e.setvar(~diff~[;]1); }; };,,,,,
Dice Storage,Return each dice|used on this item,1,trace(e.dicehistory); givedice(e.dicehistory); e.dicehistory = [];,Magic Dice,COUNTDOWN,3,GRAY,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Dice Storage_upgraded,Return each dice used|Duplicate one of them,1,trace(e.dicehistory); givedice(e.dicehistory.concat([rand(e.dicehistory)])); e.dicehistory = [];,Magic Dice,COUNTDOWN,3,GRAY,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Dice Storage_downgraded,Roll a low dice|(value 1-3),1,givedice(rand([1[;]2[;]3])); e.dicehistory = [];,Magic Dice,COUNTDOWN,3,GRAY,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Really Sharp Spike,Deal [sword]10 damage[;] errors|on anything but a 1,1,attack(10); sfxdamage(target[;]10);,Unlucky Roll,COUNTDOWN,4,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,if(e.getvar(~cursed~) == 1){ e.remainingcountdown = e.countdown; e.setvar(~cursed~[;]0); };,,,for(d in e.dicehistory){ if(d.basevalue != 1){ roboterror(self[;][e]); e.setvar(~cursed~[;]1); sfx(~_curse~); e.dicehistory = []; }; };,,,,,
Really Sharp Spike_upgraded,Deal [sword]12 damage[;] errors|on anything but a 1,1,attack(12); sfxdamage(target[;]12);,Unlucky Roll,COUNTDOWN,4,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,if(e.getvar(~cursed~) == 1){ e.remainingcountdown = e.countdown; e.setvar(~cursed~[;]0); };,,,for(d in e.dicehistory){ if(d.basevalue != 1){ roboterror(self[;][e]); e.setvar(~cursed~[;]1); sfx(~_curse~); e.dicehistory = []; }; };,,,,,
Really Sharp Spike_downgraded,Deal [sword]5 damage[;] errors|on anything but a 1,1,attack(5); sfxdamage(target[;]5);,Unlucky Roll,COUNTDOWN,4,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,if(e.getvar(~cursed~) == 1){ e.remainingcountdown = e.countdown; e.setvar(~cursed~[;]0); };,,,for(d in e.dicehistory){ if(d.basevalue != 1){ roboterror(self[;][e]); e.setvar(~cursed~[;]1); sfx(~_curse~); e.dicehistory = []; }; };,,,,,
Broken Cauldron,Reroll dice,1,givedice();,Broken Gadget,NORMAL,,GRAY,change_power,change_power,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Broken Cauldron_upgraded,Reroll dice|,1,givedice();,Broken Gadget,NORMAL,,GRAY,,,,none,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Broken Cauldron_downgraded,No effect,1,sfx(~_curse~);,Broken Gadget,NORMAL,,GRAY,,,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Min Night Charm,Get 3 copies of the lowest|dice used in this (<evar:minval>),1,var m = e.getvar(~minval~); givedice([m[;]m[;]m]); e.dicehistory = [];,Replicate,COUNTDOWN,12,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,e.setvar(~minval~[;]0);,e.setvar(~minval~[;]0);,e.setvar(~minval~[;]0);,,,var m = 7; for(x in e.dicehistory){ if(x.basevalue < m){ m = x.basevalue; }; }; if(m < 7){ e.setvar(~minval~[;]m); };,,,,,
Min Night Charm_upgraded,Get 4 copies of the lowest|dice used in this (<evar:minval>),1,var m = e.getvar(~minval~); givedice([m[;]m[;]m[;]m]); e.dicehistory = [];,Replicate,COUNTDOWN,12,GREEN,,,,,0,YES,NO,excludefromrandomlists,,e.setvar(~minval~[;]0);,e.setvar(~minval~[;]0);,e.setvar(~minval~[;]0);,,,var m = 7; for(x in e.dicehistory){ if(x.basevalue < m){ m = x.basevalue; }; }; if(m < 7){ e.setvar(~minval~[;]m); };,,,,,
Min Night Charm_downgraded,Get 2 copies of the lowest|dice used in this (<evar:minval>),1,var m = e.getvar(~minval~); givedice([m[;]m]); e.dicehistory = [];,Replicate,COUNTDOWN,12,GREEN,,,,,0,YES,NO,excludefromrandomlists,,e.setvar(~minval~[;]0);,e.setvar(~minval~[;]0);,e.setvar(~minval~[;]0);,,,var m = 7; for(x in e.dicehistory){ if(x.basevalue < m){ m = x.basevalue; }; }; if(m < 7){ e.setvar(~minval~[;]m); };,,,,,
Speedometer,Deal [sword]10 damage[;] evens|reduce countdown at 2x rate,1,attack(10); sfxdamage(target[;]10);,Throwing Knife,COUNTDOWN,20,YELLOW,change_power,change_power,,none,0,NO,NO,,,,,,,,var l =  e.dicehistory[e.dicehistory.length-1].basevalue; if(l % 2 == 0){ e.remainingcountdown-=l; e.dicehistory.push(1); };,,e.dicehistory = [];,,,
Speedometer_upgraded,Deal [sword]10 damage[;] evens|reduce countdown at 3x rate,1,attack(10); sfxdamage(target[;]10);,Throwing Knife,COUNTDOWN,20,YELLOW,,,,none,0,NO,NO,,,,,,,,var l =  e.dicehistory[e.dicehistory.length-1].basevalue; if(l % 2 == 0){ e.remainingcountdown-=l*2; e.dicehistory.push(1); };,,e.dicehistory = [];,,,
Speedometer_downgraded,Deal [sword]10 damage,1,attack(10); sfxdamage(target[;]10);,Throwing Knife,COUNTDOWN,20,YELLOW,,,,none,0,NO,NO,,,,,,,,,,e.dicehistory = [];,,,
Starpocalypse,Randomize all statuses|on enemy,1,var amount = 0; removestatus(~lantern~[;]ALL); removestatus(~illuminate~[;]ALL); var statuses = [FIRE[;]ICE[;]SHOCK[;]WEAKEN[;]POISON[;]CURSE[;]LOCK[;]BLIND[;]~counter_1~[;]~counter_2~[;]~counter_3~[;]~counter_4~[;]~counter_5~[;]~counter_6~[;]~stash1~[;]~stash2~[;]~stash3~[;]~stash4~[;]~stash5~[;]~stash6~[;]SHIELD[;]THORNS[;]FURY[;]SURVIVE[;]REDUCE[;]DODGE[;]SILENCE]; var inflicts= [FIRE[;]ICE[;]SHOCK[;]WEAKEN[;]POISON[;]CURSE[;]LOCK[;]BLIND[;]~counter_~+rand([1[;]2[;]3[;]4[;]5[;]6])[;]~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])[;]SHIELD[;]THORNS[;]FURY[;]SURVIVE[;]REDUCE[;]DODGE]; for(s in statuses){ amount+=getstatus(s); removestatus(s[;]ALL); }; if(amount > 0){ for(x in 0...amount){ inflict(rand(inflicts)); }; }; sfx(~_magic~); sfx(~_thinghappens~); for(x in 1...7){ if(getstatus(~stash~+x) > 0){ inflict(~illuminate~); }; };,Stardust,REQUIRE5|REQUIRE5,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,donothing();,
Starpocalypse_upgraded,Randomize all statuses|on enemy,1,var amount = 0; removestatus(~lantern~[;]ALL); removestatus(~illuminate~[;]ALL); var statuses = [FIRE[;]ICE[;]SHOCK[;]WEAKEN[;]POISON[;]CURSE[;]LOCK[;]BLIND[;]~counter_1~[;]~counter_2~[;]~counter_3~[;]~counter_4~[;]~counter_5~[;]~counter_6~[;]~stash1~[;]~stash2~[;]~stash3~[;]~stash4~[;]~stash5~[;]~stash6~[;]SHIELD[;]THORNS[;]FURY[;]SURVIVE[;]REDUCE[;]DODGE[;]SILENCE]; var inflicts= [FIRE[;]ICE[;]SHOCK[;]WEAKEN[;]POISON[;]CURSE[;]LOCK[;]BLIND[;]~counter_~+rand([1[;]2[;]3[;]4[;]5[;]6])[;]~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])[;]SHIELD[;]THORNS[;]FURY[;]SURVIVE[;]REDUCE[;]DODGE]; for(s in statuses){ amount+=getstatus(s); removestatus(s[;]ALL); }; if(amount > 0){ for(x in 0...amount){ inflict(rand(inflicts)); }; }; sfx(~_magic~); sfx(~_thinghappens~); for(x in 1...7){ if(getstatus(~stash~+x) > 0){ inflict(~illuminate~); }; };,Stardust,REQUIRE5,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,donothing();,
Starpocalypse_downgraded,Randomize all statuses|on enemy,1,var amount = 0; removestatus(~lantern~[;]ALL); removestatus(~illuminate~[;]ALL); var statuses = [FIRE[;]ICE[;]SHOCK[;]WEAKEN[;]POISON[;]CURSE[;]LOCK[;]BLIND[;]~counter_1~[;]~counter_2~[;]~counter_3~[;]~counter_4~[;]~counter_5~[;]~counter_6~[;]~stash1~[;]~stash2~[;]~stash3~[;]~stash4~[;]~stash5~[;]~stash6~[;]SHIELD[;]THORNS[;]FURY[;]SURVIVE[;]REDUCE[;]DODGE[;]SILENCE]; var inflicts= [FIRE[;]ICE[;]SHOCK[;]WEAKEN[;]POISON[;]CURSE[;]LOCK[;]BLIND[;]~counter_~+rand([1[;]2[;]3[;]4[;]5[;]6])[;]~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])[;]SHIELD[;]THORNS[;]FURY[;]SURVIVE[;]REDUCE[;]DODGE]; for(s in statuses){ amount+=getstatus(s); removestatus(s[;]ALL); }; if(amount > 0){ for(x in 0...amount){ inflict(rand(inflicts)); }; }; sfx(~_magic~); sfx(~_thinghappens~); for(x in 1...7){ if(getstatus(~stash~+x) > 0){ inflict(~illuminate~); }; };,Stardust,REQUIRE5|REQUIRE5|REQUIRE5,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,donothing();,
Gift Box,Odd: Replace this with <var:contents>|Even: Reroll the contents!,2,if(d%2 == 1){ replacemewith(self.getvar(~contents~)); sfx(~_thinghappens~); }else{ var x = rand(getequipment()); self.setvar(~contents~[;]x); trace(x); self.textparticle(~Now contains ~+self.getvar(~contents~)); }; inflictself(REEQUIPNEXT[;]self.getvar(~reequip~));,Mass Polymorph,NORMAL,,GREEN,change_power,change_power,,none,0,YES,NO,excludefromrandomlists,,var x = rand(getequipment()); self.setvar(~contents~[;]x); trace(x);,,,,,,,self.setvar(~reequip~[;]getstatusself(REEQUIPNEXT)); removestatusself(REEQUIPNEXT[;]ALL);,,e.preventdefault = true; e.maintainfury = true;,
Gift Box_upgraded,Odd: Replace this with <evar:contents>+|Even: Reroll the contents!,2,if(d%2 == 1){ replacemewith(self.getvar(~contents~)); sfx(~_thinghappens~); }else{ self.setvar(~contents~[;]rand(getequipment())); self.textparticle(~Now contains ~+self.getvar(~contents~)); }; inflictself(REEQUIPNEXT[;]self.getvar(~reequip~));,Mass Polymorph,NORMAL,,GREEN,,,,none,0,YES,NO,excludefromrandomlists,,var x = rand(getequipment()); self.setvar(~contents~[;]x); trace(x);,,,,,,,self.setvar(~reequip~[;]getstatusself(REEQUIPNEXT)); removestatusself(REEQUIPNEXT[;]ALL);,,e.preventdefault = true; e.maintainfury = true;,
Gift Box_downgraded,Odd: Replace this with <evar:contents>|Even: Reroll the contents!,2,if(d%2 == 1){ replacemewith(self.getvar(~contents~)); sfx(~_thinghappens~); }else{ self.setvar(~contents~[;]rand(getequipment())); self.textparticle(~Now contains ~+self.getvar(~contents~)); }; inflictself(REEQUIPNEXT[;]self.getvar(~reequip~));,Mass Polymorph,DOUBLES|DOUBLES,,GREEN,,,,none,0,YES,NO,excludefromrandomlists,,var x = rand(getequipment()); self.setvar(~contents~[;]x); trace(x);,,,,,,,self.setvar(~reequip~[;]getstatusself(REEQUIPNEXT)); removestatusself(REEQUIPNEXT[;]ALL);,,e.preventdefault = true; e.maintainfury = true;,
Coin Flip,Reroll each of your dice|into either a 6 or a 1,1,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(rand([1[;]6])[;] self.screenposition()[;] c * 0.05);  c++; }; }; sfx(~_magic~);,Magic Dice,COUNTDOWN,5,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Coin Flip_upgraded,Reroll dice into 6s or 1s|,1,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(rand([1[;]6])[;] self.screenposition()[;] c * 0.05);  c++; }; }; sfx(~_magic~);,Magic Dice,COUNTDOWN,5,YELLOW,,,,,2,YES,NO,,,,,,,,,,,,,
Coin Flip_downgraded,Reroll each of your dice|into either a 2 or a 1,1,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(rand([1[;]2])[;] self.screenposition()[;] c * 0.05);  c++; }; }; sfx(~_magic~);,Magic Dice,COUNTDOWN,5,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Secateurs,Deal damage equal to 3x big|dice divided by the little dice,1,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x < y){ var temp = x; x = y; y = temp; }; var damage = (3*x)/y; attack(damage); sfxdamage(target[;]damage);,Plasma Gun,MIN2|MIN2,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Secateurs_upgraded,Deal damage equal to 4x big|dice divided by the little dice,1,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x < y){ var temp = x; x = y; y = temp; }; var damage = (4*x)/y; attack(damage); sfxdamage(target[;]damage);,Plasma Gun,MIN2|MIN2,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Secateurs_downgraded,Deal damage equal to big|dice divided by the little dice,1,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x < y){ var temp = x; x = y; y = temp; }; var damage = (x)/y; attack(damage); sfxdamage(target[;]damage);,Plasma Gun,MIN2|MIN2,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Sharpened Gun,[sword]6[;] lose [heart]1 whenever|this countdown is reduced,1,attack(6); sfxdamage(target[;]6); sfx(~_plasma~);,Two Handed Knife,COUNTDOWN,5,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,e.dicehistory = [];,,,,,if(e.dicehistory.length > 0){ e.dicehistory = []; pierceattackself(1); sfx(~_drain~); e.animate(~flashandshake~); };,,,,,
Sharpened Gun_upgraded,[sword]8[;] lose [heart]1 whenever|this countdown is reduced,1,attack(8); sfxdamage(target[;]8); sfx(~_plasma~);,Two Handed Knife,COUNTDOWN,5,RED,,,,none,0,NO,NO,excludefromrandomlists,,e.dicehistory = [];,,,,,if(e.dicehistory.length > 0){ e.dicehistory = []; pierceattackself(1); sfx(~_drain~); e.animate(~flashandshake~); };,,,,,
Sharpened Gun_downgraded,[sword]6[;] lose [heart]2 whenever|this countdown is reduced,1,attack(6); sfxdamage(target[;]6); sfx(~_plasma~);,Two Handed Knife,COUNTDOWN,5,RED,,,,none,0,NO,NO,excludefromrandomlists,,e.dicehistory = [];,,,,,if(e.dicehistory.length > 0){ e.dicehistory = []; pierceattackself(2); sfx(~_drain~); e.animate(~flashandshake~); };,,,,,
Healing Totem,Heal [heal]1 hp whenever|this countdown is reduced,1,self.textparticle(~Out of uses!~);,Revitalize,COUNTDOWN,6,GREEN,change_power,change_power,,none,0,YES,NO,excludefromrandomlists,,e.dicehistory = [];,,,,,if(e.dicehistory.length > 0){ e.dicehistory = []; attackself(-1); sfx(~_heal~); e.animate(~flashandshake~); };,,,,,
Healing Totem_upgraded,Heal [heal]2 hp whenever|this countdown is reduced,1,self.textparticle(~Out of uses!~);,Revitalize,COUNTDOWN,6,GREEN,,,,none,0,YES,NO,excludefromrandomlists,,e.dicehistory = [];,,,,,if(e.dicehistory.length > 0){ e.dicehistory = []; attackself(-2); sfx(~_heal~); e.animate(~flashandshake~); };,,,,,
Healing Totem_downgraded,No effect,1,sfx(~_curse~);,Revitalize,COUNTDOWN,6,GREEN,,,,,0,YES,NO,excludefromrandomlists,,e.dicehistory = [];,,,,,,,,,,
Chain Dagger,Do [sword]6[;] reduce counts by 3|,2,attack(6); boostcountdowns(3); sfxdamage(target[;]6);,Accelerate,COUNTDOWN,12,RED,change_power,change_power,,none,2,NO,NO,,,,,,,,,,,,,
Chain Dagger_upgraded,Do [sword]6[;] reduce counts by 3|,2,attack(6); boostcountdowns(3); sfxdamage(target[;]6);,Accelerate,COUNTDOWN,12,RED,,,,none,-1,NO,NO,,,,,,,,,,,,,
Chain Dagger_downgraded,Reduce countdowns by 3|,2,boostcountdowns(3);,Accelerate,COUNTDOWN,12,RED,,,,none,2,NO,NO,,,,,,,,,,,,,
Digging Bar,Reduce countdowns by 2|Repeat this <d6> more times,1,var s = new elements.Skill(~mf_blankskill~); s.script=~boostcountdowns(2);~; s.execute(self|target); var tw = new motion.actuators.SimpleActuator(null|0.5|null);  tw._repeat = d; tw.onRepeat(s.execute|[self|target]); tw.move(); s.remove();,Accelerate,MAX3,,ORANGE,change_power,change_power,,none,0,YES,NO,,,,,,,,,,,,,
Digging Bar_upgraded,Reduce countdowns by 2|Repeat this <d6> more times,1,var s = new elements.Skill(~mf_blankskill~); s.script=~boostcountdowns(2);~; s.execute(self|target); var tw = new motion.actuators.SimpleActuator(null|0.5|null);  tw._repeat = d; tw.onRepeat(s.execute|[self|target]); tw.move(); s.remove();,Accelerate,MAX4,,ORANGE,,,,none,0,YES,NO,,,,,,,,,,,,,
Digging Bar_downgraded,Reduce countdowns by 2|Repeat this <d6> more times,1,var s = new elements.Skill(~mf_blankskill~); s.script=~boostcountdowns(2);~; s.execute(self|target); var tw = new motion.actuators.SimpleActuator(null|0.5|null);  tw._repeat = d; tw.onRepeat(s.execute|[self|target]); tw.move(); s.remove();,Accelerate,MAX2,,ORANGE,,,,none,0,YES,NO,,,,,,,,,,,,,
Heavy Gatling,Deal [sword]2 dmg whenever|this countdown is reduced,1,self.textparticle(~Out of ammo!~); sfx(~jackpot_increasecounter~);,Accelerate,COUNTDOWN,15,RED,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,e.dicehistory = [];,,,,,if(e.dicehistory.length > 0){ e.dicehistory = []; attack(2); sfxdamage(target[;]2); e.animate(~flashandshake~); };,,,,,
Heavy Gatling_upgraded,Deal [sword]3 dmg whenever|this countdown is reduced,1,self.textparticle(~Out of ammo!~); sfx(~jackpot_increasecounter~);,Accelerate,COUNTDOWN,15,RED,,,,,0,YES,NO,excludefromrandomlists,,e.dicehistory = [];,,,,,if(e.dicehistory.length > 0){ e.dicehistory = []; attack(3); sfxdamage(target[;]3); e.animate(~flashandshake~); };,,,,,
Heavy Gatling_downgraded,Deal [sword]1 dmg whenever|this countdown is reduced,1,self.textparticle(~Out of ammo!~); sfx(~jackpot_increasecounter~);,Accelerate,COUNTDOWN,15,RED,,,,,0,YES,NO,excludefromrandomlists,,e.dicehistory = [];,,,,,if(e.dicehistory.length > 0){ e.dicehistory = []; attack(1); sfxdamage(target[;]1); e.animate(~flashandshake~); };,,,,,
Brick,Deal [sword]6 damage|[gray](once per battle),1,attack(6); sfxdamage(target[;]d);,Throwing Knife,NORMAL,,RED,change_power,change_power,,none,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Brick_upgraded,Deal [sword]8 damage|[gray](once per battle),1,attack(8); sfxdamage(target[;]8);,Throwing Knife,NORMAL,,RED,,,,none,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Brick_downgraded,Deal [sword]3 damage|[gray](once per battle),1,attack(3); sfxdamage(target[;]3);,Throwing Knife,NORMAL,,RED,,,,none,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Crass Knuckles,Deal [sword]<d6> damage[;] on|doubles[;] gain [fury] fury instead,2,if(actualdice[0].basevalue == actualdice[1].basevalue){ inflictself(FURY); sfx(~_fury~[;]~~[;]0.2); }else{attack(d); sfxdamage(target[;]d); };,Fury,MAX4|MAX4,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(actualdice[0].basevalue == actualdice[1].basevalue){ inflictself(FURY); sfx(~_fury~[;]~~[;]0.2); };
Crass Knuckles_upgraded,Deal [sword]<d6> damage[;] on|doubles[;] gain [fury] fury,2,if(actualdice[0].basevalue == actualdice[1].basevalue){ inflictself(FURY); sfx(~_fury~[;]~~[;]0.2); }else{attack(d); sfxdamage(target[;]d); };,Fury,MAX5|MAX5,,RED,,,,,0,NO,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(actualdice[0].basevalue == actualdice[1].basevalue){ inflictself(FURY); sfx(~_fury~[;]~~[;]0.2); };
Crass Knuckles_downgraded,Deal [sword]<d6> damage[;] on|doubles[;] gain [fury] fury,2,if(actualdice[0].basevalue == actualdice[1].basevalue){ inflictself(FURY); sfx(~_fury~[;]~~[;]0.2); }else{attack(d); sfxdamage(target[;]d); };,Fury,MAX3|MAX3,,RED,,,,none,0,NO,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,if(actualdice[0].basevalue == actualdice[1].basevalue){ inflictself(FURY); sfx(~_fury~[;]~~[;]0.2); };
Three Shooter,Deal [sword]<d6> damage|[gray](Reuseable),1,attack(d); sfxdamage(target[;]d);,Pea Gun,REQUIRE3|FREE3|REQUIRE3,,RED,change_power,change_power,,none,3,NO,NO,,,,,,,,,,,,,
Three Shooter_upgraded,Deal [sword]<d6> damage|[gray](Reuseable),1,attack(d); sfxdamage(target[;]d);,Pea Gun,REQUIRE3|FREE3|REQUIRE3,,RED,,,,none,-1,NO,NO,,,,,,,,,,,,,
Three Shooter_downgraded,Deal [sword]<d6> damage|[gray](Reuseable),1,attack(d); sfxdamage(target[;]d);,Pea Gun,REQUIRE3|REQUIRE3|REQUIRE3,,RED,,,,none,3,NO,NO,,,,,,,,,,,,,
Leeching Spell,Drain [heart]<slotdoubles> health|(Start of turn: lose [heart]3[]),1,drain(d); sfx(~_drain~);,Life Leech,DOUBLES|DOUBLES,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,pierceattackself(3); sfx(~_drain~); e.animate(~flashandshake~);,,,,,,,
Leeching Spell_upgraded,Drain [heart]<d6> health|(Start of turn: lose [heart]3[]),1,drain(d); sfx(~_drain~);,Life Leech,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,pierceattackself(3); sfx(~_drain~); e.animate(~flashandshake~);,,,,,,,
Leeching Spell_downgraded,Deal [sword]<slotdoubles> damage|(Start of turn: lose [heart]3[]),1,attack(d); sfxdamage(target[;]d);,Life Leech,DOUBLES|DOUBLES,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,pierceattackself(3); sfx(~_drain~); e.animate(~flashandshake~);,,,,,,,
Blood Transfer,Deal [sword]<d6> damage. On 3[;]|also drain [heart]2 health,2,attack(d); sfxdamage(target[;]d); if(simulation){if(d == 3){ drain(2); bonus(500);};};,Life Leech,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~drain(2); sfx(\~_drain\~);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~RED~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; if(d == 3){makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 400 : -400)|0.1);};};,,,
Blood Transfer_upgraded,Deal [sword]<d6> damage. On 3 or|less[;] also drain [heart]2 health,2,attack(d); sfxdamage(target[;]d); if(simulation){if(d <= 3){ drain(2); bonus(500);};};,Life Leech,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~drain(2); sfx(\~_drain\~);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~RED~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; if(d <= 3){makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 400 : -400)|0.1);};};,,,
Blood Transfer_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Life Leech,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Gem of Healing,Recover [heal]5 health at|the end of battle,1,,Revitalize,,,GREEN,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,attackself(-5); sfx(~_heal~);,,,,,,,,,
Gem of Healing_upgraded,Recover [heal]7 health at|the end of battle,1,,Revitalize,,,GREEN,,,,none,0,NO,NO,excludefromrandomlists,,,attackself(-7); sfx(~_heal~);,,,,,,,,,
Gem of Healing_downgraded,Recover [heal]3 health at|the end of battle,1,,Revitalize,,,GREEN,,,,none,0,NO,NO,excludefromrandomlists,,,attackself(-3); sfx(~_heal~);,,,,,,,,,
Generous Sword,Deal [sword]<d6> damage|(Enemy heals [heal]3 each turn),2,attack(d); sfxdamage(target[;]d);,Regenerous,NORMAL|FREE3,,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,attack(-3); e.animate(~flashandshake~); sfx(~_heal~);,,,,,,,
Generous Sword_upgraded,Deal [sword]<d6> damage|(Enemy heals [heal]3 each turn),2,attack(d); sfxdamage(target[;]d);,Regenerous,NORMAL|FREE5,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,attack(-3); e.animate(~flashandshake~); sfx(~_heal~);,,,,,,,
Generous Sword_downgraded,Deal [sword]<d6> damage|(Enemy heals [heal]3 each turn),2,attack(d); sfxdamage(target[;]d);,Regenerous,NORMAL,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,attack(-3); e.animate(~flashandshake~); sfx(~_heal~);,,,,,,,
Ornamental Shield,Gain [shield]4 shield|Gain [thorns]1 thorn,1,inflictself(SHIELD[;]4); sfx(~_shield~); inflictself(THORNS); sfx(~_thorns~);,Spikes Shield,COUNTDOWN,9,ORANGE,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Ornamental Shield_upgraded,Gain [shield]5 shield|Gain [thorns]2 thorns,1,inflictself(SHIELD[;]5); sfx(~_shield~); inflictself(THORNS[;]2); sfx(~_thorns~);,Spikes Shield,COUNTDOWN,9,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Ornamental Shield_downgraded,Gain [shield]4 shield,1,inflictself(SHIELD[;]4); sfx(~_shield~);,Spikes Shield,COUNTDOWN,9,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Execute,Deal [sword]<d6> damage[;] double|if enemy is at [heart]<double> hp,2,if(target.hp == d*2){ attack(d*2); sfxdamage(target[;]d*2); }else{ attack(d); sfxdamage(target[;]d); };,Plasma Gun,NORMAL,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Execute_upgraded,Deal [sword]<d6> damage[;] triple|if enemy is at [heart]<triple> hp,2,if(target.hp == d*3){ attack(d*3); sfxdamage(target[;]d*3); }else{ attack(d); sfxdamage(target[;]d); };,Plasma Gun,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Execute_downgraded,Deal [sword]<d6> damage[;] double|if enemy is at [heart]<double> hp,2,if(target.hp == d*2){ attack(d*2); sfxdamage(target[;]d*2); }else{ attack(d); sfxdamage(target[;]d); };,Plasma Gun,MAX4,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Reconstructificate,Swap Scrap/Broken gadgets|and equipment for new ones,1,var swaps = []; var smallcount = 0; var bigcount = 0; for (eq in self.equipment) { if (eq.hastag(~appearsforparts~) # eq.name.indexOf(~Broken~) > -1) { swaps.push(eq.name); if (eq.size == 1) { smallcount += 1; } else { bigcount += 1; }; }; }; for (x in swaps) { removeequipment(x[;] self); }; var neweq = []; if (smallcount > 0) { for (x in 0...smallcount) { neweq.push(rand(getequipmentlist(null | [~small~] | [~excludefromrandomlists~ | ~robotonly~ | ~witchonly~ | ~cannotsteal~ | ~final~ | ~powercard~ | ~alternateversion~]))); }; }; if (bigcount > 0) { for (x in 0...bigcount) { neweq.push(rand(getequipmentlist(null | [~large~] | [~excludefromrandomlists~ | ~robotonly~ | ~witchonly~ | ~cannotsteal~ | ~final~ | ~powercard~ | ~alternateversion~]))); }; }; if (neweq.length > 0) { giveequipment(neweq[;] true[;] false); }; Gadget.changegadget(self|~Broken Gadget~|rand(loadtext(~diceydungeons/encyclopedia~))|true); Gadget.reactivate(self[;] ALL); sfx(~upgradeequipment~);,Revitalize,ODD,,RED,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Reconstructificate_upgraded,Swap Scrap/Broken gadgets|and equipment for new ones,1,var swaps = []; var smallcount = 0; var bigcount = 0; for (eq in self.equipment) { if (eq.hastag(~appearsforparts~) # eq.name.indexOf(~Broken~) > -1) { swaps.push(eq.name); if (eq.size == 1) { smallcount += 1; } else { bigcount += 1; }; }; }; for (x in swaps) { removeequipment(x[;] self); }; var neweq = []; if (smallcount > 0) { for (x in 0...smallcount) { neweq.push(rand(getequipmentlist(null | [~small~] | [~excludefromrandomlists~ | ~robotonly~ | ~witchonly~ | ~cannotsteal~ | ~final~ | ~powercard~ | ~alternateversion~]))); }; }; if (bigcount > 0) { for (x in 0...bigcount) { neweq.push(rand(getequipmentlist(null | [~large~] | [~excludefromrandomlists~ | ~robotonly~ | ~witchonly~ | ~cannotsteal~ | ~final~ | ~powercard~ | ~alternateversion~]))); }; }; if (neweq.length > 0) { giveequipment(neweq[;] true[;] false); }; Gadget.changegadget(self|~Broken Gadget~|rand(loadtext(~diceydungeons/encyclopedia~))|true); Gadget.reactivate(self[;] ALL); sfx(~upgradeequipment~);,Revitalize,NORMAL,,RED,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Reconstructificate_downgraded,Swap Scrap/Broken gadgets|and equipment for new ones,1,var swaps = []; var smallcount = 0; var bigcount = 0; for (eq in self.equipment) { if (eq.hastag(~appearsforparts~) # eq.name.indexOf(~Broken~) > -1) { swaps.push(eq.name); if (eq.size == 1) { smallcount += 1; } else { bigcount += 1; }; }; }; for (x in swaps) { removeequipment(x[;] self); }; var neweq = []; if (smallcount > 0) { for (x in 0...smallcount) { neweq.push(rand(getequipmentlist(null | [~small~] | [~excludefromrandomlists~ | ~robotonly~ | ~witchonly~ | ~cannotsteal~ | ~final~ | ~powercard~ | ~alternateversion~]))); }; }; if (bigcount > 0) { for (x in 0...bigcount) { neweq.push(rand(getequipmentlist(null | [~large~] | [~excludefromrandomlists~ | ~robotonly~ | ~witchonly~ | ~cannotsteal~ | ~final~ | ~powercard~ | ~alternateversion~]))); }; }; if (neweq.length > 0) { giveequipment(neweq[;] true[;] false); }; Gadget.changegadget(self|~Broken Gadget~|rand(loadtext(~diceydungeons/encyclopedia~))|true); Gadget.reactivate(self[;] ALL); sfx(~upgradeequipment~);,Revitalize,REQUIRE5,,RED,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Scrap Remote,Break your gadget|(Always offered as scrap),1,Gadget.changegadget(self[;] Gadget.getcurrentgadget(self)[;] ~Broken Gadget~); Gadget.reactivate(self[;] ALL); sfx(~upgradeequipment~);,Broken Gadget,EVEN,,GRAY,change_power,change_power,,,0,YES,NO,excludefromrandomlists|appearsforparts,,,,,,,,,,,,
Scrap Remote_upgraded,Break your gadget|(Always offered as scrap),1,Gadget.changegadget(self[;] Gadget.getcurrentgadget(self)[;] ~Broken Gadget~); Gadget.reactivate(self[;] ALL); sfx(~upgradeequipment~);,Broken Gadget,NORMAL,,GRAY,,,,,0,YES,NO,excludefromrandomlists|appearsforparts,,,,,,,,,,,,
Scrap Remote_downgraded,Break your gadget|(Always offered as scrap),1,Gadget.changegadget(self[;] Gadget.getcurrentgadget(self)[;] ~Broken Gadget~); Gadget.reactivate(self[;] ALL); sfx(~upgradeequipment~);,Broken Gadget,REQUIRE6,,GRAY,,,,,0,YES,NO,excludefromrandomlists|appearsforparts,,,,,,,,,,,,
Staple Gun,Combine dice[;] excess is|converted into damage,1,if(d > 6){ attack(d-6); sfxdamage(target[;]d-6); givedice(6); }else{ givedice(d); };,Magic Spanner,MAX5|MAX5,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Staple Gun_upgraded,Combine dice[;] excess is|converted into damage,1,if(d > 6){ attack(d-6); sfxdamage(target[;]d-6); givedice(6); }else{ givedice(d); };,Magic Spanner,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Staple Gun_downgraded,Combine dice[;] excess is|converted into damage,1,if(d > 6){ attack(d-6); sfxdamage(target[;]d-6); givedice(6); }else{ givedice(d); };,Magic Spanner,MAX3|MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Spikemail,Gain [thorns]<d6> thorns|[grey](once per battle),1,inflictself(THORNS[;]d); sfx(~_thorns~);,Pinprick,MAX4,,GREEN,change_power,change_power,,,0,YES,YES,excludefromrandomlists,,,,,,,,,,,,
Spikemail_upgraded,Gain [thorns]<d6> thorns|[grey](once per battle),1,inflictself(THORNS[;]d); sfx(~_thorns~);,Pinprick,MAX5,,GREEN,,,,,0,YES,YES,excludefromrandomlists,,,,,,,,,,,,
Spikemail_downgraded,Gain [thorns]<d6> thorns|[grey](once per battle),1,inflictself(THORNS[;]d); sfx(~_thorns~);,Pinprick,MAX2,,GREEN,,,,,0,YES,YES,excludefromrandomlists,,,,,,,,,,,,
Hairdryer,[fire]<d6> dmg + [fire]1 burn[;] twice|if enemy is [ice] frozen,1,if(getstatus(ICE) > 0){ attack(d[;]FIRE); inflict(FIRE); sfx(~_fire~[;]~~[;]0.2); }; attack(d[;]FIRE); inflict(FIRE); sfx(~_fire~); ,Blowtorch,MAX4,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Hairdryer_upgraded,[fire]<d6> dmg + [fire]1 burn[;] twice|if enemy is [ice] frozen,1,if(getstatus(ICE) > 0){ attack(d[;]FIRE); inflict(FIRE); sfx(~_fire~[;]~~[;]0.2); }; attack(d[;]FIRE); inflict(FIRE); sfx(~_fire~);,Blowtorch,MAX5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Hairdryer_downgraded,Deal [fire]<d6> damage|Inflict [fire]1 burn,1,attack(d[;]FIRE); inflict(FIRE); sfx(~_fire~);,Blowtorch,MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Breath Mints,[ice]<d6> dmg + [ice]1 freeze[;] twice|if enemy is [fire] burning,1,if(getstatus(FIRE) > 0){ attack(d[;]ICE); inflict(ICE); sfx(~_ice~[;]~~[;]0.2); }; attack(d[;]ICE); inflict(ICE); sfx(~_ice~);,Refrigerator,MAX4,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Breath Mints_upgraded,[ice]<d6> dmg + [ice]1 freeze[;] twice|if enemy is [fire] burning,1,if(getstatus(FIRE) > 0){ attack(d[;]ICE); inflict(ICE); sfx(~_ice~[;]~~[;]0.2); }; attack(d[;]ICE); inflict(ICE); sfx(~_ice~);,Refrigerator,MAX5,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Breath Mints_downgraded,Deal [ice]<d6> damage|Inflict [ice]1 freeze,1,attack(d[;]ICE); inflict(ICE); sfx(~_ice~);,Refrigerator,MAX4,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Mirrorblade,[sword]<slotdoubles> damage. On double|6[;] get +1 dice this fight,2,attack(d); sfxdamage(target[;]d); if(actualdice[0].basevalue == 6 && actualdice[1].basevalue == 6){ self.extradice+=1; sfx(~magic_gaindice~); };,Infinity Mirror,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ self.extradice+=1; sfx(~magic_gaindice~); };
Mirrorblade_upgraded,[sword]2x<slotdoubles> damage. On double|6[;] get +1 dice this fight,2,attack(d*2); sfxdamage(target[;]d*2); if(actualdice[0].basevalue == 6 && actualdice[1].basevalue == 6){ self.extradice+=1; sfx(~magic_gaindice~); };,Infinity Mirror,DOUBLES|DOUBLES,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ self.extradice+=1; sfx(~magic_gaindice~); };
Mirrorblade_downgraded,Deal [sword]<slotdoubles> damage,2,attack(d); sfxdamage(target[;]d);,Infinity Mirror,DOUBLES|DOUBLES,,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Panic Button,Gain [shield]<double> shield|Lose 1 dice this fight,1,self.extradice--; inflictself(SHIELD[;]d*2); sfx(~_shield~); sfx(~magic_gaindice~);,Barricade,MAX5,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Panic Button_upgraded,Gain [shield]<double> shield|Lose 1 dice this fight,1,self.extradice--; inflictself(SHIELD[;]d*2); sfx(~_shield~); sfx(~magic_gaindice~);,Barricade,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Panic Button_downgraded,Gain [shield]<double> shield|Lose 2 dice this fight,1,self.extradice-=2; inflictself(SHIELD[;]d*2); sfx(~_shield~); sfx(~magic_gaindice~);,Barricade,MAX5,,ORANGE,,,,none,0,YES,NO,,,,,,,,,,,,,
Necrosis,Inflict [poison]1 per 10 health|you are missing ([poison]<var:health_10>[]),1,function divten(x[;]y){ if(y == 0){ return 0; }; if(x == 0){ return 0; }; var total = 0; var start = 0; while(start < x){ start+=y; total+=1; }; return total; }; self.setvar(~health_10~[;]divten(self.maxhp-self.hp[;]10)); if(self.getvar(~health_10~) > 0){ inflict(POISON[;]self.getvar(~health_10~)); sfx(~_poison~); }else{ target.textparticle(~No effect!~); };,Goop Gun,ODD,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,function divten(x[;]y){ if(y == 0){ return 0; }; if(x == 0){ return 0; }; var total = 0; var start = 0; while(start < x){ start+=y; total+=1; }; return total; }; self.setvar(~health_10~[;]divten(self.maxhp-self.hp[;]10));,,function divten(x[;]y){ if(y == 0){ return 0; }; if(x == 0){ return 0; }; var total = 0; var start = 0; while(start < x){ start+=y; total+=1; }; return total; }; self.setvar(~health_10~[;]divten(self.maxhp-self.hp[;]10));,function divten(x[;]y){ if(y == 0){ return 0; }; if(x == 0){ return 0; }; var total = 0; var start = 0; while(start < x){ start+=y; total+=1; }; return total; }; self.setvar(~health_10~[;]divten(self.maxhp-self.hp[;]10));,,,,,
Necrosis_upgraded,Inflict [poison]1 per 10 health|you are missing ([poison]<var:health_10>[]),1,function divten(x[;]y){ if(y == 0){ return 0; }; if(x == 0){ return 0; }; var total = 0; var start = 0; while(start < x){ start+=y; total+=1; }; return total; }; self.setvar(~health_10~[;]divten(self.maxhp-self.hp[;]10)); if(self.getvar(~health_10~) > 0){ inflict(POISON[;]self.getvar(~health_10~)); sfx(~_poison~); }else{ target.textparticle(~No effect!~); };,Goop Gun,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,function divten(x[;]y){ if(y == 0){ return 0; }; if(x == 0){ return 0; }; var total = 0; var start = 0; while(start < x){ start+=y; total+=1; }; return total; }; self.setvar(~health_10~[;]divten(self.maxhp-self.hp[;]10));,,function divten(x[;]y){ if(y == 0){ return 0; }; if(x == 0){ return 0; }; var total = 0; var start = 0; while(start < x){ start+=y; total+=1; }; return total; }; self.setvar(~health_10~[;]divten(self.maxhp-self.hp[;]10));,function divten(x[;]y){ if(y == 0){ return 0; }; if(x == 0){ return 0; }; var total = 0; var start = 0; while(start < x){ start+=y; total+=1; }; return total; }; self.setvar(~health_10~[;]divten(self.maxhp-self.hp[;]10));,,,,,
Necrosis_downgraded,Inflict [poison]1 per 10 health|you are missing ([poison]<var:health_10>[]),1,function divten(x[;]y){ if(y == 0){ return 0; }; if(x == 0){ return 0; }; var total = 0; var start = 0; while(start < x){ start+=y; total+=1; }; return total; }; self.setvar(~health_10~[;]divten(self.maxhp-self.hp[;]10)); if(self.getvar(~health_10~) > 0){ inflict(POISON[;]self.getvar(~health_10~)); sfx(~_poison~); }else{ target.textparticle(~No effect!~); };,Goop Gun,ODD|ODD,,PURPLE,,,,,0,NO,NO,,,,,function divten(x[;]y){ if(y == 0){ return 0; }; if(x == 0){ return 0; }; var total = 0; var start = 0; while(start < x){ start+=y; total+=1; }; return total; }; self.setvar(~health_10~[;]divten(self.maxhp-self.hp[;]10));,,function divten(x[;]y){ if(y == 0){ return 0; }; if(x == 0){ return 0; }; var total = 0; var start = 0; while(start < x){ start+=y; total+=1; }; return total; }; self.setvar(~health_10~[;]divten(self.maxhp-self.hp[;]10));,function divten(x[;]y){ if(y == 0){ return 0; }; if(x == 0){ return 0; }; var total = 0; var start = 0; while(start < x){ start+=y; total+=1; }; return total; }; self.setvar(~health_10~[;]divten(self.maxhp-self.hp[;]10));,,,,,
CPU Shooter,Every 3 times you calculate|each turn[;] deal [sword]3 dmg|,1,attack(3); sfxdamage(target[;]3);,Pea Gun,,,RED,change_power,change_power,,,-1,NO,NO,excludefromrandomlists|robotonly,,,,e.setvar(~rollcheck~[;] 0);,,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); if(e.getvar(~rollcheck~) % 3 == 0){ e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); }; };,,,,,,
CPU Shooter_upgraded,Every 2 times you calculate|each turn[;] deal [sword]3 dmg|,1,attack(3); sfxdamage(target[;]3);,Pea Gun,,,RED,,,,,-1,NO,NO,excludefromrandomlists|robotonly,,,,e.setvar(~rollcheck~[;] 0);,,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); if(e.getvar(~rollcheck~) % 2 == 0){ e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); }; };,,,,,,
CPU Shooter_downgraded,Every 3 times you calculate|each turn[;] deal [sword]2 dmg|,1,attack(3); sfxdamage(target[;]3);,Pea Gun,,,RED,,,,,-1,NO,NO,excludefromrandomlists|robotonly,,,,e.setvar(~rollcheck~[;] 0);,,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); if(e.getvar(~rollcheck~) % 3 == 0){ e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); }; };,,,,,,
Nanoleech,Deal [sword]<d6> damage|Drain [heart]1 health,1,attack(d); sfxdamage(target[;]d); ,Life Leech,ODD,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~drain(1); sfx(\~_drain\~);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~RED~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 400 : -400)|0.1);};,,,
Nanoleech_upgraded,Deal [sword]<d6> damage|Drain [heart]1 health,1,attack(d); sfxdamage(target[;]d); ,Life Leech,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~drain(1); sfx(\~_drain\~);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~RED~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 400 : -400)|0.1);};,,,
Nanoleech_downgraded,Deal [sword]<d6> damage|Drain [heart]1 health,1,attack(d); sfxdamage(target[;]d); ,Life Leech,REQUIRE1,,RED,,,,,0,NO,NO,,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~drain(1); sfx(\~_drain\~);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~RED~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 400 : -400)|0.1);};,,,
Megaleech,Deal [sword]<d6> damage|Drain [heart]1 health,1,attack(d); sfxdamage(target[;]d); ,Life Leech,NORMAL|NORMAL,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~drain(1); sfx(\~_drain\~);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~RED~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 400 : -400)|0.1);};,,,
Megaleech_upgraded,Deal [sword]<d6> damage|Drain [heart]2 health,1,attack(d); sfxdamage(target[;]d); ,Life Leech,NORMAL|NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~drain(2); sfx(\~_drain\~);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~RED~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 400 : -400)|0.1);};,,,
Megaleech_downgraded,Deal [sword]<d6> damage|Drain [heart]1 health,1,attack(d); sfxdamage(target[;]d); ,Life Leech,MAX3|MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~drain(1); sfx(\~_drain\~);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~RED~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 400 : -400)|0.1);};,,,
Scrap Turret,Take [sword]1 damage each turn|(Always offered as scrap),1,attackself(1); sfx(~_magic~);,Bubble Gun,,,GREY,change_power,change_power,,,0,NO,NO,excludefromrandomlists|appearsforparts|cannotreuse,,,,,e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true);,,,,,,,
Scrap Turret_upgraded,Take [sword]2 damage each turn|(Always offered as scrap),1,attackself(2); sfx(~_magic~);,Bubble Gun,,,GREY,,,,,0,NO,NO,excludefromrandomlists|appearsforparts|cannotreuse,,,,,e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true);,,,,,,,
Scrap Turret_downgraded,No effect|(Always offered as scrap),1,,Bubble Gun,,,GREY,,,,,0,NO,NO,excludefromrandomlists|appearsforparts|cannotreuse,,,,,e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true);,,,,,,,
Blightmare,Inflict [poison]999 poison,2,inflict(POISON[;]999); sfx(~_poison~);,Goop Gun,COUNTDOWN,99,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Blightmare_upgraded,Inflict [poison]9999 poison,2,inflict(POISON[;]9999); sfx(~_poison~);,Goop Gun,COUNTDOWN,99,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Blightmare_downgraded,Inflict [poison]9 poison,2,inflict(POISON[;]9); sfx(~_poison~);,Goop Gun,COUNTDOWN,99,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Dodgy Chronometer,Take an extra turn[;] errors|on every turn after the 1st,1,inflictself(EXTRATURN); sfx(~_magic~);,Time Stop,COUNTDOWN,18,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,if(turn > 1){ roboterror(self[;][e]); };,,,,,,,
Dodgy Chronometer_upgraded,Take an extra turn[;] errors|on every turn after the 2nd,1,inflictself(EXTRATURN); sfx(~_magic~);,Time Stop,COUNTDOWN,18,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,if(turn > 2){ roboterror(self[;][e]); };,,,,,,,
Dodgy Chronometer_downgraded,No effect[;] errors on|every turn after the 1st,1,,Time Stop,COUNTDOWN,18,YELLOW,,,,none,0,YES,NO,excludefromrandomlists,,,,,if(turn > 1){ roboterror(self[;][e]); };,,,,,,,
Cherry Bomb,Start of turn: deal [sword]5 dmg|[gray](once per battle),1,,Throwing Knife,,,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,1,,,if(e.getvar(~error~) == 1){ roboterror(self[;][e]); };,if(e.getvar(~error~) != 1){ attack(5); sfxdamage(target[;]5); e.setvar(~error~[;]1); roboterror(self[;][e]); };,,,,,,,
Cherry Bomb_upgraded,Start of turn: deal [sword]8 dmg|[gray](once per battle),1,,Throwing Knife,,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,if(e.getvar(~error~) == 1){ roboterror(self[;][e]); };,if(e.getvar(~error~) != 1){ attack(8); sfxdamage(target[;]8); e.setvar(~error~[;]1); roboterror(self[;][e]); };,,,,,,,
Cherry Bomb_downgraded,Start of turn: deal [sword]1 dmg|[gray](once per battle),1,,Throwing Knife,,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,if(e.getvar(~error~) == 1){ roboterror(self[;][e]); };,if(e.getvar(~error~) != 1){ attack(1); sfxdamage(target[;]1); e.setvar(~error~[;]1); roboterror(self[;][e]); };,,,,,,,
Snail Bat,Deal [sword]<double> damage|(Unlocks after turn 4),2,attack(d*2); sfxdamage(target[;]d*2);,Whacksies,NORMAL,,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,if(turn == 3){e.availablethisturn=false; e.unavailabledetails=[~Unlocks in 1 more turn~];}else if(turn < 4){ e.availablethisturn=false; e.unavailabledetails=[~Unlocks in ~+(4-turn)+~ more turns~];}else if(turn == 4){e.availablethisturn=false; e.unavailabledetails=[~Unlocking...~];};,if(turn == 4){ e.animate(~flashandshake~); sfx(~upgradeequipment~); e.availablethisturn=true; };,,,,,,,
Snail Bat_upgraded,Deal [sword]<double> damage|(Unlocks after turn 3),2,attack(d*2); sfxdamage(target[;]d*2);,Whacksies,NORMAL,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,if(turn == 2){e.availablethisturn=false; e.unavailabledetails=[~Unlocks in 1 more turn~];}else if(turn < 3){ e.availablethisturn=false; e.unavailabledetails=[~Unlocks in ~+(3-turn)+~ more turns~];}else if(turn == 3){e.availablethisturn=false; e.unavailabledetails=[~Unlocking...~];};,if(turn == 3){ e.animate(~flashandshake~); sfx(~upgradeequipment~); e.availablethisturn=true; };,,,,,,,
Snail Bat_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Whacksies,NORMAL,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,if(turn == 3){e.availablethisturn=false; e.unavailabledetails=[~Unlocks in 1 more turn~];}else if(turn < 4){ e.availablethisturn=false; e.unavailabledetails=[~Unlocks in ~+(4-turn)+~ more turns~];}else if(turn == 4){e.availablethisturn=false; e.unavailabledetails=[~Unlocking...~];};,if(turn == 4){ e.animate(~flashandshake~); sfx(~upgradeequipment~); e.availablethisturn=true; };,,,,,,,
Grandfather Clock,[sword]10 damage[;] countdown|reduces by 3 each turn,1,attack(10); sfxdamage(target[;]10);,Accelerate,COUNTDOWN,20,RED,change_power,change_power,,none,0,NO,NO,,,,,,givedice(3); e.assigndice(self.dicepool[self.dicepool.length-1]);,,,,,,,
Grandfather Clock_upgraded,[sword]10 damage[;] countdown|reduces by 5 each turn,1,attack(10); sfxdamage(target[;]10);,Accelerate,COUNTDOWN,20,RED,,,,none,0,NO,NO,,,,,,givedice(5); e.assigndice(self.dicepool[self.dicepool.length-1]);,,,,,,,
Grandfather Clock_downgraded,[sword]5 damage[;] countdown|reduces by 3 each turn,1,attack(5); sfxdamage(target[;]5);,Accelerate,COUNTDOWN,20,RED,,,,none,0,NO,NO,,,,,,givedice(3); e.assigndice(self.dicepool[self.dicepool.length-1]);,,,,,,,
Jade Blade,Deal [sword]<d6> damage|(Enemy gets [thorns]1 each turn),2,attack(d); sfxdamage(target[;]d);,Pinprick,MAX5|FREE3,,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,inflict(THORNS); e.animate(~flashandshake~); sfx(~_thorns~);,,,,,,,
Jade Blade_upgraded,Deal [sword]<d6> damage|(Enemy gets [thorns]1 each turn),2,attack(d); sfxdamage(target[;]d);,Pinprick,MAX5|FREE5,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,inflict(THORNS); e.animate(~flashandshake~); sfx(~_thorns~);,,,,,,,
Jade Blade_downgraded,Deal [sword]<d6> damage|(Enemy gets [thorns]1 each turn),2,attack(d); sfxdamage(target[;]d);,Pinprick,MAX5,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,inflict(THORNS); e.animate(~flashandshake~); sfx(~_thorns~);,,,,,,,
Backup Drive,Gain [shield]2 shield|on errors,1,inflictself(SHIELD[;]2); sfx(~_shield~);,Barricade,,,ORANGE,change_power,change_power,,,0,YES,NO,excludefromrandomlists|errorimmune|robotonly,,,,e.setvar(~error~[;]0); e.changecolour(~ORANGE~);,,if (e.availablethisturn && e.ready && e.shockedsetting == 0 && self.roll_total >= self.roll_target && self.roll_jackpot <= 0 && e.getvar(~error~) == 0) { e.setvar(~error~[;]1); e.animate(~flashandshake~); e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); };,,,,,,
Backup Drive_upgraded,Gain excess CPU as|[shield] shield on errors,1,inflictself(SHIELD[;]self.roll_realtotal-self.roll_target); sfx(~_shield~);,Barricade,,,ORANGE,,,,,0,YES,NO,excludefromrandomlists|errorimmune|robotonly,,,,e.setvar(~error~[;]0); e.changecolour(~ORANGE~);,,if (e.availablethisturn && e.ready && e.shockedsetting == 0 && self.roll_total >= self.roll_target && self.roll_jackpot <= 0 && e.getvar(~error~) == 0) { e.setvar(~error~[;]1); e.animate(~flashandshake~); e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); };,,,,,,
Backup Drive_downgraded,Gain [shield]1 shield|on errors,1,inflictself(SHIELD[;]1); sfx(~_shield~);,Barricade,,,ORANGE,,,,,0,YES,NO,excludefromrandomlists|errorimmune|robotonly,,,,e.setvar(~error~[;]0); e.changecolour(~ORANGE~);,,if (e.availablethisturn && e.ready && e.shockedsetting == 0 && self.roll_total >= self.roll_target && self.roll_jackpot <= 0 && e.getvar(~error~) == 0) { e.setvar(~error~[;]1); e.animate(~flashandshake~); e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); };,,,,,,
Overconfidence,Deal [sword]5 damage|on jackpot,1,attack(5); sfxdamage(target[;]5);,Plasma Gun,,,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists|robotonly|shockavoid,,,,e.setvar(~jackpot~[;]0); e.changecolour(~RED~);,,if (e.availablethisturn && e.ready && e.shockedsetting == 0 && self.roll_jackpot > 0 && e.getvar(~jackpot~) == 0) { e.setvar(~jackpot~[;]1); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); };,,,,,,
Overconfidence_upgraded,Deal [sword]7 damage|on jackpot,1,attack(7); sfxdamage(target[;]7);,Plasma Gun,,,RED,,,,none,0,NO,NO,excludefromrandomlists|robotonly|shockavoid,,,,e.setvar(~jackpot~[;]0); e.changecolour(~RED~);,,if (e.availablethisturn && e.ready && e.shockedsetting == 0 && self.roll_jackpot > 0 && e.getvar(~jackpot~) == 0) { e.setvar(~jackpot~[;]1); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); };,,,,,,
Overconfidence_downgraded,Deal [sword]3 damage|on jackpot,1,attack(3); sfxdamage(target[;]3);,Plasma Gun,,,RED,,,,none,0,NO,NO,excludefromrandomlists|robotonly|shockavoid,,,,e.setvar(~jackpot~[;]0); e.changecolour(~RED~);,,if (e.availablethisturn && e.ready && e.shockedsetting == 0 && self.roll_jackpot > 0 && e.getvar(~jackpot~) == 0) { e.setvar(~jackpot~[;]1); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); };,,,,,,
Superconductor,Deal [sword]<triple> damage|(Unlocks on jackpot),1,attack(d*3); sfxdamage(target[;]d*3);,Plasma Gun,MAX4,,YELLOW,change_power,change_power,,none,0,NO,NO,excludefromrandomlists|robotonly|shockavoid,,,,if(e.availablethisturn){e.setvar(~jackpot~|1); e.availablethisturn = false; e.unavailabledetails = [~Locked until you hit Jackpot~];}else{e.setvar(~jackpot~|0);}; ,,if (e.ready && self.roll_jackpot > 0 && e.getvar(~jackpot~) == 1) { e.setvar(~jackpot~[;]0); e.animate(~flashandshake~); e.availablethisturn = true;};,,,,,,
Superconductor_upgraded,Deal [sword]<triple> damage|(Unlocks on jackpot),1,attack(d*3); sfxdamage(target[;]d*3);,Plasma Gun,MAX5,,YELLOW,,,,none,0,NO,NO,excludefromrandomlists|robotonly|shockavoid,,,,if(e.availablethisturn){e.setvar(~jackpot~|1); e.availablethisturn = false; e.unavailabledetails = [~Locked until you hit Jackpot~];}else{e.setvar(~jackpot~|0);}; ,,if (e.ready && self.roll_jackpot > 0 && e.getvar(~jackpot~) == 1) { e.setvar(~jackpot~[;]0); e.animate(~flashandshake~); e.availablethisturn = true;};,,,,,,
Superconductor_downgraded,Deal [sword]<double> damage|(Unlocks on jackpot),1,attack(d*2); sfxdamage(target[;]d*2);,Plasma Gun,MAX4,,YELLOW,,,,none,0,NO,NO,excludefromrandomlists|robotonly|shockavoid,,,,if(e.availablethisturn){e.setvar(~jackpot~|1); e.availablethisturn = false; e.unavailabledetails = [~Locked until you hit Jackpot~];}else{e.setvar(~jackpot~|0);}; ,,if (e.ready && self.roll_jackpot > 0 && e.getvar(~jackpot~) == 1) { e.setvar(~jackpot~[;]0); e.animate(~flashandshake~); e.availablethisturn = true;};,,,,,,
Ravage,Drain [heart]1 health for|each rolled 6 you have,1,var amount = 0; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == 6){ amount+=1; }; }; drain(amount); sfx(~_drain~);,Blood Sip,COUNTDOWN,4,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Ravage_upgraded,Drain [heart]1 health for|each even dice you have,1,var amount = 0; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue % 2 == 0){ amount+=1; }; }; drain(amount); sfx(~_drain~);,Blood Sip,COUNTDOWN,4,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Ravage_downgraded,Drain [heart]1 health for|every two 6s you have,1,var amount = 0; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == 6){ amount+=1; }; }; drain(amount/2); sfx(~_drain~);,Blood Sip,COUNTDOWN,4,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Duplihate,Deal [sword]3 damage for each|duplicate dice you have,1,var founds = [0[;]0[;]0[;]0[;]0[;]0[;]0]; for(mydice in self.dicepool){ if(mydice.available()){ founds[mydice.basevalue]+=1; }; }; var total = 0; for(x in founds){ if(x > 1){ total+=x-1; }; }; attack(total*3); sfxdamage(target[;]total*3); sfx(~_magic~);,Ember,DOUBLES|DOUBLES,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Duplihate_upgraded,Deal [sword]3 damage for each|duplicate dice you have,1,var founds = [0[;]0[;]0[;]0[;]0[;]0[;]0]; for(mydice in self.dicepool){ if(mydice.available()){ founds[mydice.basevalue]+=1; }; }; var total = 0; for(x in founds){ if(x > 1){ total+=x-1; }; }; attack(total*3); sfxdamage(target[;]total*3); sfx(~_magic~);,Ember,NORMAL|NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Duplihate_downgraded,Deal [sword]3 damage for each|duplicate dice you have,1,var founds = [0[;]0[;]0[;]0[;]0[;]0[;]0]; for(mydice in self.dicepool){ if(mydice.available()){ founds[mydice.basevalue]+=1; }; }; var total = 0; for(x in founds){ if(x > 1){ total+=x-1; }; }; attack(total*3); sfxdamage(target[;]total*3); sfx(~_magic~);,Ember,REQUIRE4|REQUIRE4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Vampire Blade,Drain [heart]1 health|,1,drain(d); sfx(~_drain~);,Blood Sip,MIN4,,RED,change_power,change_power,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,self.maxhp-=1; if(self.hp > self.maxhp){ self.hp = self.maxhp; }; sfx(~_drain~);
Vampire Blade_upgraded,Drain [heart]1 health|,1,drain(d); sfx(~_drain~);,Blood Sip,MIN3,,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,self.maxhp-=1; if(self.hp > self.maxhp){ self.hp = self.maxhp; }; sfx(~_drain~);
Vampire Blade_downgraded,Drain [heart]1 health|,1,drain(d); sfx(~_drain~);,Blood Sip,MIN5,,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,self.maxhp-=1; if(self.hp > self.maxhp){ self.hp = self.maxhp; }; sfx(~_drain~);
Black Hole,Deal [sword]<d6> damage|(Start of turn: lose an item),2,attack(d); sfxdamage(target[;]d);,Plasma Gun,NORMAL|FREE4,,PURPLE,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,var poss = []; for(eq in self.equipment){ if(eq.ready && eq.skillcard == ~~){ poss.push(eq); }; }; var r = rand(poss); roboterror(self[;][r]); e.animate(~flashandshake~); sfx(~_curse~);,,,,,,,
Black Hole_upgraded,Deal [sword]<d6> damage|(Start of turn: lose an item),2,attack(d); sfxdamage(target[;]d);,Plasma Gun,NORMAL|FREE6,,PURPLE,,,,none,0,NO,NO,excludefromrandomlists,,,,,var poss = []; for(eq in self.equipment){ if(eq.ready && eq.skillcard == ~~){ poss.push(eq); }; }; var r = rand(poss); roboterror(self[;][r]); e.animate(~flashandshake~); sfx(~_curse~);,,,,,,,
Black Hole_downgraded,Deal [sword]<d6> damage|(Start of turn: lose an item),2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX3|FREE4,,PURPLE,,,,none,0,NO,NO,excludefromrandomlists,,,,,var poss = []; for(eq in self.equipment){ if(eq.ready && eq.skillcard == ~~){ poss.push(eq); }; }; var r = rand(poss); roboterror(self[;][r]); e.animate(~flashandshake~); sfx(~_curse~);,,,,,,,
Mirror Calling,You and your enemy get|+1 dice this fight,1,self.extradice++; target.extradice++; sfx(~magic_gaindice~);,Infinity Mirror,NORMAL,,PURPLE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Mirror Calling_upgraded,You and your enemy get|+2 dice this fight,1,self.extradice+=2; target.extradice+=2; sfx(~magic_gaindice~);,Infinity Mirror,NORMAL,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Mirror Calling_downgraded,You and your enemy get|+1 dice this fight,1,self.extradice++; target.extradice++; sfx(~magic_gaindice~);,Infinity Mirror,REQUIRE6,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Reaper,Your next attack heals you|for the damage dealt,1,inflictself(~reaper~|1); sfx(~_cure~);,Revitalize,REQUIRE4,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Reaper_upgraded,Your next attack heals you|for the damage dealt,1,inflictself(~reaper~|1); sfx(~_cure~);,Revitalize,EVEN,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Reaper_downgraded,Your next attack heals you|for the damage dealt,1,inflictself(~reaper~|1); sfx(~_cure~);,Revitalize,REQUIRE4|REQUIRE4,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Imperishability,Your items are reuseable|during turn 5,1,,Efficiency,,,GREEN,change_power,change_power,,none,0,YES,NO,excludefromrandomlists,,,,e.changecolour(~GRAY~);,if(turn == 5){ inflictself(~recycle~); sfx(~_recycle~); e.animate(~flashandshake~); e.changecolour(~GREEN~); };,,,,,,,
Imperishability_upgraded,Your items are reusable|during and after turn 5,1,,Efficiency,,,GREEN,,,,none,0,YES,NO,excludefromrandomlists,,,,e.changecolour(~GRAY~);,if(turn >= 5){ inflictself(~recycle~); sfx(~_recycle~); e.animate(~flashandshake~); e.changecolour(~GREEN~); };,,,,,,,
Imperishability_downgraded,No effect,1,,Efficiency,,,GREEN,,,,none,0,YES,NO,excludefromrandomlists,,,,e.changecolour(~GRAY~);,,,,,,,,
Insult To Injury,If you dealt 40+ damage this|turn[;] take an extra turn|(current damage: <var:difference>),1,if(self.getvar(~targethealth~)-target.hp >= 40){ inflictself(EXTRATURN); sfx(~_magic~); }else{ self.textparticle(~No effect!~); };,Time Stop,NORMAL,,GREEN,change_power,change_power,,none,0,YES,NO,excludefromrandomlists,,,,self.setvar(~targethealth~[;]target.hp); e.changecolour(~GREEN~); self.setvar(~difference~[;]0);,,self.setvar(~difference~[;]self.getvar(~targethealth~)-target.hp); if(self.getvar(~difference~) >= 40){ e.changecolour(~YELLOW~); sfx(~_fury~); e.animate(~flashandshake~); };,,,,,,
Insult To Injury_upgraded,If you dealt 30+ damage this|turn[;] take an extra turn|(current damage: <var:difference>),1,if(self.getvar(~targethealth~)-target.hp >= 30){ inflictself(EXTRATURN); sfx(~_magic~); }else{ self.textparticle(~No effect!~); };,Time Stop,NORMAL,,GREEN,,,,none,0,YES,NO,excludefromrandomlists,,,,self.setvar(~targethealth~[;]target.hp); e.changecolour(~GREEN~); self.setvar(~difference~[;]0);,,self.setvar(~difference~[;]self.getvar(~targethealth~)-target.hp); if(self.getvar(~difference~) >= 30){ e.changecolour(~YELLOW~); sfx(~_fury~); e.animate(~flashandshake~); };,,,,,,
Insult To Injury_downgraded,If you dealt 60+ damage this|turn[;] take an extra turn|(current damage: <var:difference>),1,if(self.getvar(~targethealth~)-target.hp >= 60){ inflictself(EXTRATURN); sfx(~_magic~); }else{ self.textparticle(~No effect!~); };,Time Stop,NORMAL,,GREEN,,,,none,0,YES,NO,excludefromrandomlists,,,,self.setvar(~targethealth~[;]target.hp); e.changecolour(~GREEN~); self.setvar(~difference~[;]0);,,self.setvar(~difference~[;]self.getvar(~targethealth~)-target.hp); if(self.getvar(~difference~) >= 60){ e.changecolour(~YELLOW~); sfx(~_fury~); e.animate(~flashandshake~); };,,,,,,
Fairy In A Bottle,If you start your turn on [heart]1|health[;] restore [heal]15 health,1,attackself(-15); sfx(~_survive~);,Revitalize,,,GREEN,change_power,change_power,,none,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,if(self.hp == 1){ e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); };,,,,,,,
Fairy In A Bottle_upgraded,If you start your turn on [heart]1|health[;] restore [heal]20 health,1,attackself(-20); sfx(~_survive~);,Revitalize,,,GREEN,,,,none,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,if(self.hp == 1){ e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); };,,,,,,,
Fairy In A Bottle_downgraded,If you start your turn on [heart]1|health[;] restore [heal]10 health,1,attackself(-10); sfx(~_survive~);,Revitalize,,,GREEN,,,,none,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,if(self.hp == 1){ e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); };,,,,,,,
Shielding Potion,Gain [shield]12 shield|[gray](once per battle),2,inflictself(SHIELD[;]12); sfx(~_shield~);,Coin Clippers,COUNTDOWN,8,ORANGE,change_power,change_power,,,0,YES,YES,,,,,,,,,,,,,
Shielding Potion_upgraded,Gain [shield]15 shield|[gray](once per battle),2,inflictself(SHIELD[;]15); sfx(~_shield~);,Coin Clippers,COUNTDOWN,8,ORANGE,,,,,0,YES,YES,,,,,,,,,,,,,
Shielding Potion_downgraded,Gain [shield]8 shield|[gray](once per battle),2,inflictself(SHIELD[;]8); sfx(~_shield~);,Coin Clippers,COUNTDOWN,8,ORANGE,,,,,0,YES,YES,,,,,,,,,,,,,
Brass Beast,Deal [sword]<d6> damage|Slot increases each turn|[gray](Reuseable),2,attack(d); sfxdamage(target[;]d);,Whelm,REQUIRE1,,ORANGE,change_power,change_power,,none,-1,NO,NO,excludefromrandomlists,,,,var slots = [null[;]~REQUIRE1~[;]~MAX2~[;]~MAX3~[;]~MAX4~[;]~MAX5~[;]~NORMAL~]; if(turn < 7){ e.changeslots([slots[turn]]); }else{ e.changeslots([~NORMAL~]); };,,,,,,,,
Brass Beast_upgraded,Deal [sword]<d6> damage|Slot increases each turn|[gray](Reuseable),2,attack(d); sfxdamage(target[;]d);,Whelm,REQUIRE1|FREE1,,ORANGE,,,,none,-1,NO,NO,excludefromrandomlists,,,,var slots = [null[;]~REQUIRE1~[;]~MAX2~[;]~MAX3~[;]~MAX4~[;]~MAX5~[;]~NORMAL~]; if(turn < 7){ e.changeslots([slots[turn][;]~FREE1~]); }else{ e.changeslots([~NORMAL~[;]~FREE1~]); };,,,,,,,,
Brass Beast_downgraded,Deal [sword]<d6> damage|Slot increases each turn,2,attack(d); sfxdamage(target[;]d);,Whelm,REQUIRE1,,ORANGE,,,,none,0,NO,NO,excludefromrandomlists,,,,var slots = [null[;]~REQUIRE1~[;]~MAX2~[;]~MAX3~[;]~MAX4~[;]~MAX5~[;]~NORMAL~]; if(turn < 7){ e.changeslots([slots[turn]]); }else{ e.changeslots([~NORMAL~]); };,,,,,,,,
Minigun,Deal [sword]<d6> damage|Gains +1 use each turn|[gray](Reuseable),2,attack(d); sfxdamage(target[;]d);,Whelm,MAX5,,RED,change_power,change_power,,none,1,NO,NO,,,,,e.usesleft = turn; e.updatereuseabledescription();,,,,,,,,
Minigun_upgraded,Deal [sword]<d6> damage|Gains +1 use each turn|[gray](Reuseable),2,attack(d); sfxdamage(target[;]d);,Whelm,MAX5,,RED,,,,none,2,NO,NO,,,,,e.usesleft = turn+1; e.updatereuseabledescription();,,,,,,,,
Minigun_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Whelm,MAX4,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Glowstick,Deal [sword]<d6> damage|Get an extra dice next turn,1,attack(d); sfxdamage(target[;]d); inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); sfx(~magic_gaindice~);  inflictself(~lightstatus~);,Magic Lantern,EVEN,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); sfx(~magic_gaindice~);  inflictself(~lightstatus~);
Glowstick_upgraded,Deal [sword]<d6> damage|Get an extra dice next turn,1,attack(d); sfxdamage(target[;]d); inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); sfx(~magic_gaindice~); inflictself(~lightstatus~);,Magic Lantern,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); sfx(~magic_gaindice~);  inflictself(~lightstatus~);
Glowstick_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Magic Lantern,EVEN,,YELLOW,,,,none,0,NO,NO,,,,,,,,,,,,,
Dice Magnet,If enemy has more than 1|dice[;] steal a dice this fight|[gray](once per battle),1,if(target.dice + target.extradice + target.bonusdice > 1){ target.extradice-=1; givedice(); self.extradice+=1; sfx(~magic_gaindice~); };,Infinity Mirror,COUNTDOWN,20,YELLOW,change_power,change_power,,,0,NO,YES,,,,,,,,,,,,,
Dice Magnet_upgraded,If enemy has more than 1|dice[;] steal a dice this fight,1,if(target.dice + target.extradice + target.bonusdice > 1){ target.extradice-=1; givedice(); self.extradice+=1; sfx(~magic_gaindice~); };,Infinity Mirror,COUNTDOWN,20,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Dice Magnet_downgraded,If enemy has more than 1|dice[;] steal a dice this turn,1,if(target.dice + target.extradice + target.bonusdice > 1){ target.bonusdice-=1; givedice(); sfx(~magic_gaindice~); };,Infinity Mirror,COUNTDOWN,20,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Duoplicate,Duplicate both dice,2,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; givedice([a[;]a[;]b[;]b]);,Clone Device,MIN4|MIN4,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Duoplicate_upgraded,Duplicate both dice,2,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; givedice([a[;]a[;]b[;]b]);,Clone Device,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Duoplicate_downgraded,Duplicate a dice,2,givedice([d[;]d]);,Clone Device,MIN4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Malediction,Inflict [curse] curse and [lock] lock,2,inflict(CURSE); sfx(~_curse~); inflict(LOCK); sfx(~_lock~[;]~~[;]0.2);,Dramatic Pause,COUNTDOWN,12,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Malediction_upgraded,Inflict [curse]2 curses|and [lock]1 lock,2,inflict(CURSE[;]2); sfx(~_curse~); inflict(LOCK); sfx(~_lock~[;]~~[;]0.2);,Dramatic Pause,COUNTDOWN,12,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Malediction_downgraded,Inflict [curse] curse,2,inflict(CURSE); sfx(~_curse~);,Dramatic Pause,COUNTDOWN,12,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
One With Everything,Inflict lots of statuses:|[fire] [ice] [shock] [weaken] [poison] [blind] [curse],1,var t = 0; var stats = [FIRE[;]ICE[;]SHOCK[;]WEAKEN[;]POISON[;]BLIND[;]CURSE]; for(x in stats){ inflict(x); sfx(~_~ + x.toLowerCase()[;]~~[;]0.1*t); t+=1; };,Stardust,COUNTDOWN,16,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
One With Everything_upgraded,Inflict lots of statuses:|[fire] [ice] [shock] [weaken] [poison] [blind] [curse] [lock],1,var t = 0; var stats = [FIRE[;]ICE[;]SHOCK[;]WEAKEN[;]POISON[;]BLIND[;]CURSE[;]LOCK]; for(x in stats){ inflict(x); sfx(~_~ + x.toLowerCase()[;]~~[;]0.1*t); t+=1; };,Stardust,COUNTDOWN,16,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
One With Everything_downgraded,Inflict a random status:|[fire] [ice] [shock] [weaken] [poison] [blind] [curse],1,var stats = [FIRE[;]ICE[;]SHOCK[;]WEAKEN[;]POISON[;]BLIND[;]CURSE]; var r = rand(stats); inflict(r); sfx(~_~ + r.toLowerCase());,Stardust,COUNTDOWN,16,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Caps Lock,lOCK [lock]ALL DICE|lOCK YOURS NEXT TURN,1,inflict(LOCK[;]ALL); sfx(~_lock~); inflictself(~mf_capslock~);,Padlock,REQUIRE5|REQUIRE5,,GRAY,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Caps Lock_upgraded,lOCK [lock]ALL DICE|lOCK YOURS NEXT TURN,1,inflict(LOCK[;]ALL); sfx(~_lock~); inflictself(~mf_capslock~);,Padlock,MIN5|MIN5,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Caps Lock_downgraded,lOCK [lock]ALL DICE|lOCK YOURS NEXT TURN,1,inflict(LOCK[;]ALL); sfx(~_lock~); inflictself(~mf_capslock~);,Padlock,REQUIRE5|REQUIRE5|REQUIRE5,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Stock Up,Get 2 copies of the smallest|dice you don't have,1,var founds = [0[;]0[;]0[;]0[;]0[;]0[;]0]; for(mydice in self.dicepool){ if(mydice.available()){ founds[mydice.basevalue] = 1; }; }; var min = 0; for(x in 1...7){ if(founds[x] != 1){ min = x; break; }; }; if(min != 0){ givedice([min[;]min]); };,Magic Dice,COUNTDOWN,6,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Stock Up_upgraded,Get 3 copies of the smallest|dice you don't have,1,var founds = [0[;]0[;]0[;]0[;]0[;]0[;]0]; for(mydice in self.dicepool){ if(mydice.available()){ founds[mydice.basevalue] = 1; }; }; var min = 0; for(x in 1...7){ if(founds[x] != 1){ min = x; break; }; }; if(min != 0){ givedice([min[;]min[;]min]); };,Magic Dice,COUNTDOWN,6,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Stock Up_downgraded,Get a copy of the smallest|dice you don't have,1,var founds = [0[;]0[;]0[;]0[;]0[;]0[;]0]; for(mydice in self.dicepool){ if(mydice.available()){ founds[mydice.basevalue] = 1; }; }; var min = 0; for(x in 1...7){ if(founds[x] != 1){ min = x; break; }; }; if(min != 0){ givedice([min]); };,Magic Dice,COUNTDOWN,6,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Headcrack,Deal [sword]<d6> damage[;] return|the dice on 3 or less,2,attack(d); sfxdamage(target[;]d); if(d<=3){ givedice(d); };,Magic Dice,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d<=3){ givedice(d); };
Headcrack_upgraded,Deal [sword]<d6> damage[;] return|the dice on 4 or less,2,attack(d); sfxdamage(target[;]d); if(d<=4){ givedice(d); };,Magic Dice,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,if(d<=4){ givedice(d); };
Headcrack_downgraded,Deal [sword]<d6> damage[;] return|the dice on 3 or less,2,attack(d); sfxdamage(target[;]d); if(d<=3){ givedice(d); };,Magic Dice,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,if(d<=3){ givedice(d); };
Mysterious Blade,Deal [sword]<d6> damage|Blind dice deal [sword]6 instead,2,if(actualdice[0].blind){ attack(6); sfxdamage(target[;]6); sfx(~_blind~); }else{ attack(d); sfxdamage(target[;]d); };,Smoke Cloud,NORMAL,,GRAY,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Mysterious Blade_upgraded,Deal [sword]<d6> damage|Blind dice deal [sword]7 instead,2,if(actualdice[0].blind){ attack(7); sfxdamage(target[;]7); sfx(~_blind~); }else{ attack(d); sfxdamage(target[;]d); };,Smoke Cloud,NORMAL|FREE1,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Mysterious Blade_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Smoke Cloud,NORMAL,,GRAY,,,,none,0,NO,NO,,,,,,,,,,,,,
Juice Box,Heal [heal]2 health|[gray](2 uses this turn),1,attackself(-2); sfx(~_heal~);,Revitalize,NORMAL,,GREEN,change_power,change_power,,,2,YES,NO,,,,,,,,,,,,,
Juice Box_upgraded,Heal [heal]2 health|[gray](4 uses this turn),1,attackself(-2); sfx(~_heal~);,Revitalize,NORMAL,,GREEN,,,,,4,YES,NO,,,,,,,,,,,,,
Juice Box_downgraded,Heal [heal]1 health|[gray](2 uses this turn),1,attackself(-1); sfx(~_heal~);,Revitalize,NORMAL,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Field Dressing,Heal [heal]1 health|[gray](Reuseable),2,attackself(-1); sfx(~_heal~);,Regenerate,NORMAL,,GREEN,change_power,change_power,,,-1,YES,NO,,,,,,,,,,,,,
Field Dressing_upgraded,Heal [heal]2 health|[gray](Reuseable),2,attackself(-2); sfx(~_heal~);,Regenerate,NORMAL,,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Field Dressing_downgraded,Heal [heal]1 health|[gray](Reuseable),2,attackself(-1); sfx(~_heal~);,Regenerate,EVEN,,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Starburst,Deal [sword]3 damage for each|unique status on enemy,1,var amount = 3; var total = 0; for(x in target.status){if(!x.invisible){ total+=amount;} }; if(total > 0){ attack(total); sfxdamage(target[;]total); };,Stardust,EVEN,,PINK,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Starburst_upgraded,Deal [sword]3 damage for each|unique status on enemy,1,var amount = 3; var total = 0; for(x in target.status){if(!x.invisible){ total+=amount;} }; if(total > 0){ attack(total); sfxdamage(target[;]total); };,Stardust,NORMAL,,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Starburst_downgraded,Deal [sword]2 damage for each|unique status on enemy,1,var amount = 2; var total = 0; for(x in target.status){if(!x.invisible){ total+=amount;} }; if(total > 0){ attack(total); sfxdamage(target[;]total); };,Stardust,EVEN,,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Starsear,Increase all enemy|status effects by 1,1,for(x in target.status){ if(x.stacks == true && x.name != ~extradamage~){ inflict(x.type[;]1); }; }; sfx(~_thinghappens~);,Stardust,ODD,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Starsear_upgraded,Double all enemy|status effects,1,for(x in target.status){ if(x.stacks == true && x.name != ~extradamage~){ inflict(x.type[;]x.value); }; }; sfx(~_thinghappens~);,Stardust,ODD,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Starsear_downgraded,Increase a random enemy|status effect by 1,1,var poss = []; for(st in target.status){ if(st.stacks == true && st.name != ~extradamage~){ poss.push(st); }; }; if(poss.length > 0){ var r = rand(poss); inflict(r.type[;]1); sfx(~_thinghappens~); };,Stardust,ODD,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Evil Eye,Lock [lock]1 dice|Return this dice,2,inflict(LOCK); sfx(~_lock~); givedice(d);,Padlock,REQUIRE1,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Evil Eye_upgraded,Lock [lock]1 dice|Return this dice,2,inflict(LOCK); sfx(~_lock~); givedice(d);,Padlock,ODD,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Evil Eye_downgraded,Lock [lock]1 dice,2,inflict(LOCK); sfx(~_lock~);,Padlock,REQUIRE1,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Rosary,[shock] Shock yourself[;]|recover [heal]<d6> health,1,inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_shock~); attackself(-d); sfx(~_heal~);,Static Shock,MAX4,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Rosary_upgraded,[shock] Shock yourself[;]|recover [heal]<d6> health,1,inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_shock~); attackself(-d); sfx(~_heal~);,Static Shock,MAX5,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Rosary_downgraded,[shock] Shock yourself[;]|recover [heal]<d6> health,1,inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_shock~); attackself(-d); sfx(~_heal~);,Static Shock,MAX2,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Plug Socket,[shock] Shock self[;] reroll dice|,1,inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_shock~); var da = []; for(x in actualdice){ da.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(da);,Static Shock,NORMAL,,YELLOW,change_power,change_power,,,-1,YES,NO,,1,,,,,,,,,,,
Plug Socket_upgraded,[shock] Shock self[;] reroll dice|,1,inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_shock~); var da = []; for(x in actualdice){ da.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(da);,Static Shock,NORMAL|NORMAL,,YELLOW,,,,,-1,YES,NO,,,,,,,,,,,,,
Plug Socket_downgraded,[shock] Shock self[;] reroll dice|,1,inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_shock~); var da = []; for(x in actualdice){ da.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(da);,Static Shock,MIN4,,YELLOW,,,,,-1,YES,NO,,,,,,,,,,,,,
Suspicious Box,Contents mysterious,1,sfx(~_curse~);,Megacurse,MAX5,,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,function checkslots(val){ var sl = e.getslots(); if(sl.length > 1){ return false; }; var s = sl[0]; if(s == ~EVEN~ && val %2 == 0){ return true; }; if(s == ~ODD~ && val %2 == 1){ return true; }; if(s == ~REQUIRE~+val){ return true; }; for(x in 1...val+1){ if(s == ~MIN~+x){ return true; }; }; for(x in val...7){ if(s == ~MAX~+x){ return true; }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1] && val >= r[0] && val <= r[1]){ return true; } }; return false; }; var oldx = e.x; var oldy = e.y; var eqlist = getparticularequipment([~small~]); var flag = false; while(!flag){ e.create(rand(eqlist)); flag = checkslots(d) && e.usesleft == 0; }; e.x = oldx; e.y = oldy; e.scriptendturn+=~e.create(\~Suspicious Box\~);~;,,e.preventdefault=true; e.maintainfury=true;,
Suspicious Box_upgraded,Contents mysterious,1,sfx(~_curse~);,Megacurse,NORMAL,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,function checkslots(val){ var sl = e.getslots(); if(sl.length > 1){ return false; }; var s = sl[0]; if(s == ~EVEN~ && val %2 == 0){ return true; }; if(s == ~ODD~ && val %2 == 1){ return true; }; if(s == ~REQUIRE~+val){ return true; }; for(x in 1...val+1){ if(s == ~MIN~+x){ return true; }; }; for(x in val...7){ if(s == ~MAX~+x){ return true; }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1] && val >= r[0] && val <= r[1]){ return true; } }; return false; }; var oldx = e.x; var oldy = e.y; var eqlist = getparticularequipment([~large~]); var flag = false; while(!flag){ e.create(rand(eqlist)[;]true); flag = checkslots(d) && e.usesleft == 0; }; e.x = oldx; e.y = oldy; e.scriptendturn+=~e.create(\~Suspicious Box\~[;]true);~;,,e.preventdefault=true; e.maintainfury=true;,
Suspicious Box_downgraded,Contents mysterious,1,sfx(~_curse~);,Megacurse,MAX3,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,function checkslots(val){ var sl = e.getslots(); if(sl.length > 1){ return false; }; var s = sl[0]; if(s == ~EVEN~ && val %2 == 0){ return true; }; if(s == ~ODD~ && val %2 == 1){ return true; }; if(s == ~REQUIRE~+val){ return true; }; for(x in 1...val+1){ if(s == ~MIN~+x){ return true; }; }; for(x in val...7){ if(s == ~MAX~+x){ return true; }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1] && val >= r[0] && val <= r[1]){ return true; } }; return false; }; var oldx = e.x; var oldy = e.y; var eqlist = getparticularequipment([~small~]); var flag = false; while(!flag){ e.create(rand(eqlist)); flag = checkslots(d) && e.usesleft == 0; }; e.x = oldx; e.y = oldy; e.scriptendturn+=~e.create(\~Suspicious Box\~);~;,,e.preventdefault=true; e.maintainfury=true;,
Frostfire,[fire]<d6> damage + [fire]1 burn|(Swaps to [ice] form each turn),2,attack(d[;]FIRE); inflict(FIRE); sfx(~_fire~); sfxdamage(target|d);,Blowtorch,EVEN,,RED,change_power,change_power,,,0,NO,NO,,,,e.y = 9999;,,,,,if(target.hp > 0){e.create(~Firefrost~[;]e.originallyupgraded);};,,,,
Frostfire_upgraded,[fire]<d6> damage + [fire]1 burn|(Swaps to [ice] form each turn),2,attack(d[;]FIRE); inflict(FIRE); sfx(~_fire~); sfxdamage(target|d);,Blowtorch,NORMAL,,RED,,,,,0,NO,NO,,,,e.y = 9999;,,,,,if(target.hp > 0){e.create(~Firefrost+~[;]e.originallyupgraded);};,,,,
Frostfire_downgraded,Deal [fire]<d6> damage,2,attack(d[;]FIRE); sfx(~_fire~); sfxdamage(target|d);,Blowtorch,EVEN,,RED,,,,,0,NO,NO,,,,e.y = 9999;,,,,,,,,,
Firefrost,[ice]<d6> damage + [ice]1 freeze|(Swaps to [fire] form each turn),2,attack(d[;]ICE); inflict(ICE); sfx(~_ice~); sfxdamage(target|d);,Flash Freeze,ODD,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,e.y = 9999;,,,,,if(target.hp > 0){e.create(~Frostfire~[;]e.originallyupgraded);};,,,,
Firefrost_upgraded,[ice]<d6> damage + [ice]1 freeze|(Swaps to [fire] form each turn),2,attack(d[;]ICE); inflict(ICE); sfx(~_ice~); sfxdamage(target|d);,Flash Freeze,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,e.y = 9999;,,,,,if(target.hp > 0){e.create(~Frostfire+~[;]e.originallyupgraded);};,,,,
Firefrost_downgraded,Deal [ice]<d6> damage,2,attack(d[;]ICE); sfx(~_ice~); sfxdamage(target|d);,Flash Freeze,ODD,,BRIGHTCYAN,,,,,0,NO,NO,,,,e.y = 9999;,,,,,,,,,
Precognition,Gain a random blessing|next turn ([shield][heal][reduce][fury][thorns][]),1,var effects=[~inflict(SHIELD[;]4); sfx(\~_shield\~);~[;]~inflict(REDUCE); sfx(\~_shield\~);~[;]~inflict(FURY); sfx(\~_fury\~);~[;]~attack(-4); sfx(\~_heal\~);~[;]~inflict(THORNS); sfx(\~_thorns\~);~]; var descs=[~Receive [shield]4 shield~[;]~Receive [reduce]1 reduce~[;]~Receive [fury] Fury~[;]~Recover [heal]4 health~[;]~Receive [thorns]1 thorns~]; var r = rand([0[;]1[;]2[;]3[;]4]); jinx(~Precognition~[;]descs[r].toLowerCase()[;]descs[r][;]effects[r][;]self[;]self[;]1[;]d); sfx(~_thinghappens~);,Power Up,COUNTDOWN,5,PURPLE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,donothing();,
Precognition_upgraded,Gain 2 random blessings|next turn ([shield][heal][reduce][fury][thorns][]),1,var effects=[~inflict(SHIELD[;]4); sfx(\~_shield\~);~[;]~inflict(REDUCE); sfx(\~_shield\~);~[;]~inflict(FURY); sfx(\~_fury\~);~[;]~attack(-4); sfx(\~_heal\~);~[;]~inflict(THORNS); sfx(\~_thorns\~);~]; var descs=[~Receive [shield]4 shield~[;]~Receive [reduce]1 reduce~[;]~Receive [fury] Fury~[;]~Recover [heal]4 health~[;]~Receive [thorns]1 thorns~]; for(x in [0[;]0]){ var r = rand([0[;]1[;]2[;]3[;]4]); jinx(~Precognition~[;]descs[r].toLowerCase()[;]descs[r][;]effects[r][;]self[;]target[;]1[;]d); }; sfx(~_thinghappens~);,Power Up,COUNTDOWN,5,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,donothing();,
Precognition_downgraded,Get nothing next turn,1,jinx(~Precognition~[;]~Do nothing~[;]~do nothing~[;]~inflict(\~nothing\~); sfx(\~_thinghappens[;]\~); ~[;]self[;]self[;]1[;]1); sfx(~_thinghappens~);,Power Up,COUNTDOWN,5,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,donothing();,
Mind Blast,Deal [sword]4 damage for|each Precognition jinx,2,var damage = 4; var total = 0; if(self.status.length > 0){ for(st in self.status){ if(st.name == ~Precognition~){ total+=1; }; }; attack(damage*total); sfxdamage(target[;]damage*total); sfx(~_magic~); };,Power Up,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Mind Blast_upgraded,Deal [sword]6 damage for|each Precognition jinx,2,var damage = 6; var total = 0; if(self.status.length > 0){ for(st in self.status){ if(st.name == ~Precognition~){ total+=1; }; }; attack(damage*total); sfxdamage(target[;]damage*total); sfx(~_magic~); };,Power Up,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Mind Blast_downgraded,Deal [sword]2 damage for|each Precognition jinx,2,var damage =2; var total = 0; if(self.status.length > 0){ for(st in self.status){ if(st.name == ~Precognition~){ total+=1; }; }; attack(damage*total); sfxdamage(target[;]damage*total); sfx(~_magic~); };,Power Up,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Recognition,Trigger Precognition jinxes[;]|and keep a copy of them,1,if(self.status.length > 0){ var t = self.status.copy(); for(st in t){ if(st.name == ~Precognition~){jinx(~Precognition~[;]st.jinxtooltipdescription[;]st.jinxcarddescription[;]st.jinxscript[;]self[;]target[;]st.value+1[;]d); st.add(1-st.value); }else if (st.type.split(~_~)[0] == ~jinx~){ st.add(1); st.updatedescription();}; }; boostjinxcountdowns(self[;]1); }; sfx(~_thinghappens~);,Power Up,NORMAL,,PURPLE,change_power,change_power,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Recognition_upgraded,Trigger Precognition jinxes[;]|and keep a copy of them|Return the dice,1,if(self.status.length > 0){ var t = self.status.copy(); for(st in t){ if(st.name == ~Precognition~){jinx(~Precognition~[;]st.jinxtooltipdescription[;]st.jinxcarddescription[;]st.jinxscript[;]self[;]target[;]st.value+1[;]d); st.add(1-st.value); }else if (st.type.split(~_~)[0] == ~jinx~){ st.add(1); st.updatedescription();}; }; boostjinxcountdowns(self[;]1); }; sfx(~_thinghappens~); givedice(d);,Power Up,NORMAL,,PURPLE,,,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Recognition_downgraded,Trigger Precognition jinxes,1,if(self.status.length > 0){ var t = self.status.copy(); for(st in t){ if(st.name == ~Precognition~){ st.add(1-st.value); }else if (st.type.split(~_~)[0] == ~jinx~){ st.add(1); st.updatedescription(); }; }; boostjinxcountdowns(self[;]1); }; sfx(~_thinghappens~);,Power Up,NORMAL,,PURPLE,,,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Bureaucratic Blade,1: [sword]1 dmg[;] 2: [sword]2 dmg|3: [sword]3 dmg[;] 4: [sword]4 dmg|5: [sword]5 dmg[;] 6: [sword]6 dmg,2,if(d == 1){ attack(1); sfxdamage(target[;]1); }; if(d == 2){ attack(2); sfxdamage(target[;]2); }; if(d == 3){ attack(3); sfxdamage(target[;]3); }; if(d == 4){ attack(4); sfxdamage(target[;]4); }; if(d == 5){ attack(5); sfxdamage(target[;]5); }; if(d == 6){ attack(6); sfxdamage(target[;]6); };,Health Down,NORMAL,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Bureaucratic Blade_upgraded,1: [sword]2 dmg[;] 2: [sword]3 dmg|3: [sword]4 dmg[;] 4: [sword]5 dmg|5: [sword]6 dmg[;] 6: [sword]7 dmg,2,if(d == 1){ attack(2); sfxdamage(target[;]2); }; if(d == 2){ attack(3); sfxdamage(target[;]3); }; if(d == 3){ attack(4); sfxdamage(target[;]4); }; if(d == 4){ attack(5); sfxdamage(target[;]5); }; if(d == 5){ attack(6); sfxdamage(target[;]6); }; if(d == 6){ attack(7); sfxdamage(target[;]7); };,Health Down,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Bureaucratic Blade_downgraded,1: [sword]1 dmg[;] 2: [sword]2 dmg|3: [sword]3 dmg[;] 4: [sword]4 dmg,2,if(d == 1){ attack(1); sfxdamage(target[;]1); }; if(d == 2){ attack(2); sfxdamage(target[;]2); }; if(d == 3){ attack(3); sfxdamage(target[;]3); }; if(d == 4){ attack(4); sfxdamage(target[;]4); };,Health Down,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Angelfire,Burn [fire]1 dice[;] then heal|[heal]2 hp per burning enemy dice,1,inflict(FIRE); sfx(~_fire~); attackself(-2*getstatus(FIRE)); sfx(~_heal~); sfx(~_survive~);,Blowtorch,COUNTDOWN,9,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,attackself(-2*getstatus(FIRE)); sfx(~_heal~); sfx(~_survive~);
Angelfire_upgraded,Burn [fire]1 dice[;] then heal|[heal]3 hp per burning enemy dice,1,inflict(FIRE); sfx(~_fire~); attackself(-3*getstatus(FIRE)); sfx(~_heal~); sfx(~_survive~);,Blowtorch,COUNTDOWN,9,RED,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-3*getstatus(FIRE)); sfx(~_heal~); sfx(~_survive~);
Angelfire_downgraded,Burn [fire]1 dice[;] then heal|[heal]1 hp per burning enemy dice,1,inflict(FIRE); sfx(~_fire~); attackself(-1*getstatus(FIRE)); sfx(~_heal~); sfx(~_survive~);,Blowtorch,COUNTDOWN,9,RED,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-1*getstatus(FIRE)); sfx(~_heal~); sfx(~_survive~);
Angelfrost,Freeze [ice]1 dice[;] then heal|[heal]2 hp per frozen enemy dice,1,inflict(ICE); sfx(~_ice~); attackself(-2*getstatus(ICE)); sfx(~_heal~); sfx(~_survive~);,Flash Freeze,COUNTDOWN,9,BRIGHTCYAN,change_power,change_power,ice,,0,NO,NO,,,,,,,,,,,,,attackself(-2*getstatus(ICE)); sfx(~_heal~); sfx(~_survive~);
Angelfrost_upgraded,Freeze [ice]1 dice[;] then heal|[heal]3 hp per frozen enemy dice,1,inflict(ICE); sfx(~_ice~); attackself(-3*getstatus(ICE)); sfx(~_heal~); sfx(~_survive~);,Flash Freeze,COUNTDOWN,9,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-3*getstatus(ICE)); sfx(~_heal~); sfx(~_survive~);
Angelfrost_downgraded,Freeze [ice]1 dice[;] then heal|[heal]1 hp per frozen enemy dice,1,inflict(ICE); sfx(~_ice~); attackself(-1*getstatus(ICE)); sfx(~_heal~); sfx(~_survive~);,Flash Freeze,COUNTDOWN,9,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-1*getstatus(ICE)); sfx(~_heal~); sfx(~_survive~);
Angelfrost?,Inflict [ice]1 freeze[;] then heal|[heal]2 hp per freeze on enemy,1,inflict(ICE); sfx(~_ice~); attackself(-2*getstatus(ICE)); sfx(~_heal~); sfx(~_survive~);,Flash Freeze,COUNTDOWN,9,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,alternateversion,,,,,,,,,,,,attackself(-2*getstatus(ICE)); sfx(~_heal~); sfx(~_survive~);
Angelfrost?_upgraded,Inflict [ice]1 freeze[;] then heal|[heal]3 hp per freeze on enemy,1,inflict(ICE); sfx(~_ice~); attackself(-3*getstatus(ICE)); sfx(~_heal~); sfx(~_survive~);,Flash Freeze,COUNTDOWN,9,BRIGHTCYAN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,attackself(-3*getstatus(ICE)); sfx(~_heal~); sfx(~_survive~);
Angelfrost?_downgraded,Inflict [ice]1 freeze[;] then heal|[heal]1 hp per freeze on enemy,1,inflict(ICE); sfx(~_ice~); attackself(-1*getstatus(ICE)); sfx(~_heal~); sfx(~_survive~);,Flash Freeze,COUNTDOWN,9,BRIGHTCYAN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,attackself(-1*getstatus(ICE)); sfx(~_heal~); sfx(~_survive~);
Mass Counterspell,Lock enemy dice matching|values of your current dice,2,var flag = false; for(mydice in self.dicepool){ if(mydice.available()){ flag = true; inflict(~counter_~+mydice.basevalue); }; }; if(flag){ sfx(~_lock~); sfx(~_magic~); };,Padlock,NORMAL|NORMAL,9,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Mass Counterspell_upgraded,Lock enemy dice matching|values of your current dice,2,var flag = false; for(mydice in self.dicepool){ if(mydice.available()){ flag = true; inflict(~counter_~+mydice.basevalue); }; }; if(flag){ sfx(~_lock~); sfx(~_magic~); };,Padlock,NORMAL|NORMAL,7,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Mass Counterspell_downgraded,Lock enemy dice matching|values of your current dice,2,var flag = false; for(mydice in self.dicepool){ if(mydice.available()){ flag = true; inflict(~counter_~+mydice.basevalue); }; }; if(flag){ sfx(~_lock~); sfx(~_magic~); };,Padlock,NORMAL|NORMAL,11,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Mass Grimoire,Activate equipment that|can take a single <slotdoubles>,1,function checkslots(eq[;]val){ var sl = eq.getslots(); if(sl.length > 1){ return false; }; var s = sl[0]; if(s == ~NORMAL~){ return true; }; if(s == ~EVEN~ && val %2 == 0){ return true; }; if(s == ~ODD~ && val %2 == 1){ return true; }; if(s == ~REQUIRE~+val){ return true; }; for(x in 1...val+1){ if(s == ~MIN~+x){ return true; }; }; for(x in val...7){ if(s == ~MAX~+x){ return true; }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1] && val >= r[0] && val <= r[1]){ return true; } }; return false; }; var goodeq = []; var counts = []; for(eq in self.equipment){ if(eq.ready && eq.skillcard == ~~ && !eq.needsdoubles){ if(eq.countdown > 0){ if(eq.remainingcountdown <= d){ counts.push(eq); }; }else{ if(checkslots(eq[;]d)){ goodeq.push(eq); }; }; }; }; var del = 0; if(goodeq.length > 0){ for(eq in goodeq){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); eq.doequipmentaction(self[;]target[;]eq.castdirection[;]eq.assigneddice[;]del); del+=0.1; }; }; if(counts.length > 0){ for(eq in counts){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); }; }; sfx(~_thinghappens~);,Magic Dice,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,none,0,YES,NO,excludefromrandomlists,2,,,,,,,,,,,
Mass Grimoire_upgraded,Activate items that take <slotdoubles>|,1,function checkslots(eq[;]val){ var sl = eq.getslots(); if(sl.length > 1){ return false; }; var s = sl[0]; if(s == ~NORMAL~){ return true; }; if(s == ~EVEN~ && val %2 == 0){ return true; }; if(s == ~ODD~ && val %2 == 1){ return true; }; if(s == ~REQUIRE~+val){ return true; }; for(x in 1...val+1){ if(s == ~MIN~+x){ return true; }; }; for(x in val...7){ if(s == ~MAX~+x){ return true; }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1] && val >= r[0] && val <= r[1]){ return true; } }; return false; }; var goodeq = []; var counts = []; for(eq in self.equipment){ if(eq.ready && eq.skillcard == ~~ && !eq.needsdoubles){ if(eq.countdown > 0){ if(eq.remainingcountdown <= d){ counts.push(eq); }; }else{ if(checkslots(eq[;]d)){ goodeq.push(eq); }; }; }; }; var del = 0; if(goodeq.length > 0){ for(eq in goodeq){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); eq.doequipmentaction(self[;]target[;]eq.castdirection[;]eq.assigneddice[;]del); del+=0.1; }; }; if(counts.length > 0){ for(eq in counts){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); }; }; sfx(~_thinghappens~);,Magic Dice,DOUBLES|DOUBLES,,PURPLE,,,,none,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Mass Grimoire_downgraded,No effect,1,sfx(~_thinghappens~);,Magic Dice,DOUBLES|DOUBLES,,PURPLE,,,,none,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Essence Detonator,Invoke your essences[;]|consuming them,1,var essences = [~base~[;]~fire~[;]~ice~[;]~shock~[;]~weaken~[;]~poison~[;]~dark~]; var descs = [~Take [sword]4 damage~[;]~Receive [fire]1 burn~[;]~Receive [ice]1 freeze~[;]~Receive [shock]1 shock~[;]~Receive [weaken]1 weaken~[;]~Receive [poison]2 poison~[;]~Receive a bad status~]; var effs = [~attack(4); sfxdamage(null[;]3);~[;]~inflict(FIRE); sfx(\~_fire\~);~[;]~inflict(ICE); sfx(\~_ice\~);~[;]~inflict(SHOCK); sfx(\~_shock\~);~[;]~inflict(WEAKEN); sfx(\~_weaken\~);~[;]~inflict(POISON[;]2); sfx(\~_poison\~);~[;]~var stat = rand([\~curse\~[;]\~lock\~[;]\~stun\~]); if(stat == \~curse\~){inflict(CURSE); sfx(\~_curse\~);}; if(stat == \~lock\~){inflict(LOCK); sfx(\~_lock\~);}; if(stat == \~stun\~){inflict(\~mf_stun\~); sfx(\~_shock\~);};~]; if(target.status.length > 0){ var t = target.status.copy(); for(st in t){ if (st.type.split(~_~)[0] == ~jinx~){ st.add(1); }; }; for(st in 0...essences.length){ if(getstatus(~essence_~+essences[st]) > 0){ for(x in 0...getstatus(~essence_~+essences[st])){ jinx(~Invocation~[;]descs[st].toLowerCase()[;]descs[st][;]effs[st][;]target[;]self[;]1[;]1); }; removestatus(~essence_~+essences[st][;]ALL); }; }; boostjinxcountdowns(target[;]1); }; sfx(~_thinghappens~); sfx(~_magic~);,Unlimited Limit,MAX3,,PINK,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Essence Detonator_upgraded,Invoke your essences[;]|consuming them,1,var essences = [~base~[;]~fire~[;]~ice~[;]~shock~[;]~weaken~[;]~poison~[;]~dark~]; var descs = [~Take [sword]4 damage~[;]~Receive [fire]1 burn~[;]~Receive [ice]1 freeze~[;]~Receive [shock]1 shock~[;]~Receive [weaken]1 weaken~[;]~Receive [poison]2 poison~[;]~Receive a bad status~]; var effs = [~attack(4); sfxdamage(null[;]3);~[;]~inflict(FIRE); sfx(\~_fire\~);~[;]~inflict(ICE); sfx(\~_ice\~);~[;]~inflict(SHOCK); sfx(\~_shock\~);~[;]~inflict(WEAKEN); sfx(\~_weaken\~);~[;]~inflict(POISON[;]2); sfx(\~_poison\~);~[;]~var stat = rand([\~curse\~[;]\~lock\~[;]\~stun\~]); if(stat == \~curse\~){inflict(CURSE); sfx(\~_curse\~);}; if(stat == \~lock\~){inflict(LOCK); sfx(\~_lock\~);}; if(stat == \~stun\~){inflict(\~mf_stun\~); sfx(\~_shock\~);};~]; if(target.status.length > 0){ var t = target.status.copy(); for(st in t){ if (st.type.split(~_~)[0] == ~jinx~){ st.add(1); }; }; for(st in 0...essences.length){ if(getstatus(~essence_~+essences[st]) > 0){ for(x in 0...getstatus(~essence_~+essences[st])){ jinx(~Invocation~[;]descs[st].toLowerCase()[;]descs[st][;]effs[st][;]target[;]self[;]1[;]1); }; removestatus(~essence_~+essences[st][;]ALL); }; }; boostjinxcountdowns(target[;]1); }; sfx(~_thinghappens~); sfx(~_magic~);,Unlimited Limit,NORMAL,,PINK,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Essence Detonator_downgraded,Invoke your essences[;]|consuming them,1,var essences = [~base~[;]~fire~[;]~ice~[;]~shock~[;]~weaken~[;]~poison~[;]~dark~]; var descs = [~Take [sword]4 damage~[;]~Receive [fire]1 burn~[;]~Receive [ice]1 freeze~[;]~Receive [shock]1 shock~[;]~Receive [weaken]1 weaken~[;]~Receive [poison]2 poison~[;]~Receive a bad status~]; var effs = [~attack(4); sfxdamage(null[;]3);~[;]~inflict(FIRE); sfx(\~_fire\~);~[;]~inflict(ICE); sfx(\~_ice\~);~[;]~inflict(SHOCK); sfx(\~_shock\~);~[;]~inflict(WEAKEN); sfx(\~_weaken\~);~[;]~inflict(POISON[;]2); sfx(\~_poison\~);~[;]~var stat = rand([\~curse\~[;]\~lock\~[;]\~stun\~]); if(stat == \~curse\~){inflict(CURSE); sfx(\~_curse\~);}; if(stat == \~lock\~){inflict(LOCK); sfx(\~_lock\~);}; if(stat == \~stun\~){inflict(\~mf_stun\~); sfx(\~_shock\~);};~]; if(target.status.length > 0){ var t = target.status.copy(); for(st in t){ if (st.type.split(~_~)[0] == ~jinx~){ st.add(1); }; }; for(st in 0...essences.length){ if(getstatus(~essence_~+essences[st]) > 0){ for(x in 0...getstatus(~essence_~+essences[st])){ jinx(~Invocation~[;]descs[st].toLowerCase()[;]descs[st][;]effs[st][;]target[;]self[;]1[;]1); }; removestatus(~essence_~+essences[st][;]ALL); }; }; boostjinxcountdowns(target[;]1); }; sfx(~_thinghappens~); sfx(~_magic~);,Unlimited Limit,MAX2,,PINK,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Basic Essence,Inflict [sword]1 base essence|(Invoke: take [sword]4 damage),1,inflict(~essence_base~[;]1); sfx(~_thinghappens~);,Unlimited Limit,NORMAL,,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Basic Essence_upgraded,Inflict [sword]2 base essence|(Invoke: take [sword]4 damage),1,inflict(~essence_base~[;]2); sfx(~_thinghappens~);,Unlimited Limit,NORMAL,,GRAY,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Basic Essence_downgraded,Inflict [sword]1 base essence|(Invoke: take [sword]4 damage),1,inflict(~essence_base~[;]1); sfx(~_thinghappens~);,Unlimited Limit,EVEN,,GRAY,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flame Essence,Inflict [fire]2 flame essence|(Invoke: receive [fire]1 burn),1,inflict(~essence_fire~[;]2); sfx(~_thinghappens~);,Unlimited Limit,EVEN,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flame Essence_upgraded,Inflict [fire]3 flame essence|(Invoke: receive [fire]1 burn),1,inflict(~essence_fire~[;]3); sfx(~_thinghappens~);,Unlimited Limit,EVEN,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flame Essence_downgraded,Inflict [fire]1 flame essence|(Invoke: receive [fire]1 burn),1,inflict(~essence_fire~[;]1); sfx(~_thinghappens~);,Unlimited Limit,EVEN,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Frost Essence,Inflict [ice]1 frost essence|(Invoke: receive [ice]1 freeze),1,inflict(~essence_ice~); sfx(~_thinghappens~);,Unlimited Limit,ODD,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Frost Essence_upgraded,Inflict [ice]1 frost essence|(Invoke: receive [ice]1 freeze),1,inflict(~essence_ice~); sfx(~_thinghappens~);,Unlimited Limit,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Frost Essence_downgraded,Inflict [ice]1 frost essence|(Invoke: receive [ice]1 freeze),1,inflict(~essence_ice~); sfx(~_thinghappens~);,Unlimited Limit,REQUIRE5,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Air Essence,Inflict [shock]2 air essence|(Invoke: receive [shock]1 shock),1,inflict(~essence_air~[;]2); sfx(~_thinghappens~);,Unlimited Limit,EVEN,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Air Essence_upgraded,Inflict [shock]3 air essence|(Invoke: receive [shock]1 shock),1,inflict(~essence_air~[;]3); sfx(~_thinghappens~);,Unlimited Limit,EVEN,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Air Essence_downgraded,Inflict [shock]1 air essence|(Invoke: receive [shock]1 shock),1,inflict(~essence_air~); sfx(~_thinghappens~);,Unlimited Limit,EVEN,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Earth Essence,Inflict [weaken]1 earth essence|(Invoke: receive [weaken]1 weaken),1,inflict(~essence_earth~); sfx(~_thinghappens~);,Unlimited Limit,EVEN,,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Earth Essence_upgraded,Inflict [weaken]1 earth essence|(Invoke: receive [weaken]1 weaken),1,inflict(~essence_earth~); sfx(~_thinghappens~);,Unlimited Limit,NORMAL,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Earth Essence_downgraded,Inflict [weaken]1 earth essence|(Invoke: receive [weaken]1 weaken),1,inflict(~essence_earth~); sfx(~_thinghappens~);,Unlimited Limit,REQUIRE5,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dark Essence,Inflict [curse]1 dark essence|(Invoke: receive a bad status),1,inflict(~essence_dark~); sfx(~_thinghappens~);,Unlimited Limit,MIN4,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dark Essence_upgraded,Inflict [curse]1 dark essence|(Invoke: receive a bad status),1,inflict(~essence_dark~); sfx(~_thinghappens~);,Unlimited Limit,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dark Essence_downgraded,Inflict [curse]1 dark essence|(Invoke: receive a bad status),1,inflict(~essence_dark~); sfx(~_thinghappens~);,Unlimited Limit,MIN5,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Chromatic Essence,Inflict 2x random essence:|[sword] [fire] [ice] [shock] [weaken] [poison] [curse],1,var essences = [~base~[;]~fire~[;]~ice~[;]~shock~[;]~weaken~[;]~poison~[;]~dark~]; for(x in [0[;]1]){ inflict(~essence_~+rand(essences)); }; sfx(~_thinghappens~);,Unlimited Limit,COUNTDOWN,5,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Chromatic Essence_upgraded,Inflict 3x random essence:|[sword] [fire] [ice] [shock] [weaken] [poison] [curse],1,var essences = [~base~[;]~fire~[;]~ice~[;]~shock~[;]~weaken~[;]~poison~[;]~dark~]; for(x in [0[;]1[;]2]){ inflict(~essence_~+rand(essences)); }; sfx(~_thinghappens~);,Unlimited Limit,COUNTDOWN,5,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Chromatic Essence_downgraded,Inflict a random essence:|[sword] [fire] [ice] [shock] [weaken] [poison] [curse],1,var essences = [~base~[;]~fire~[;]~ice~[;]~shock~[;]~weaken~[;]~poison~[;]~dark~]; for(x in [0]){ inflict(~essence_~+rand(essences)); }; sfx(~_thinghappens~);,Unlimited Limit,COUNTDOWN,5,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Incapacitate,Deal [sword]4 damage|Stun [stun]1 equipment,1,attack(4); sfxdamage(target|4); inflict(~mf_stun~); sfx(~_shock~);,Zap Shrine,NORMAL|NORMAL,8,YELLOW,change_power,change_power,stun,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Incapacitate_upgraded,Deal [sword]4 damage|Stun [stun]1 equipment,1,attack(4); sfxdamage(target|4); inflict(~mf_stun~); sfx(~_shock~);,Zap Shrine,NORMAL|NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Incapacitate_downgraded,Deal [sword]4 damage|Stun [stun]1 equipment,1,attack(4); sfxdamage(target|4); inflict(~mf_stun~); sfx(~_shock~);,Zap Shrine,REQUIRE4|REQUIRE4,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Incapacitate?,Deal [sword]4 damage|Stun [stun]1 dice,1,attack(4); sfxdamage(target|4); inflict(~mf_stun~); sfx(~_shock~);,Zap Shrine,NORMAL|NORMAL,8,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Incapacitate?_upgraded,Deal [sword]4 damage|Stun [stun]1 dice,1,attack(4); sfxdamage(target|4); inflict(~mf_stun~); sfx(~_shock~);,Zap Shrine,NORMAL|NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Incapacitate?_downgraded,Deal [sword]4 damage|Stun [stun]1 dice,1,attack(4); sfxdamage(target|4); inflict(~mf_stun~); sfx(~_shock~);,Zap Shrine,REQUIRE4|REQUIRE4,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dark Bargain,Lose 1 dice this fight[;] but|get 3 extra dice next turn,1,self.extradice-=1; for(x in [0[;]0[;]0]){ inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); }; inflictself(~illuminate~); sfx(~magic_gaindice~);,Infinity Mirror,COUNTDOWN,8,PURPLE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Dark Bargain_upgraded,Lose 1 dice this fight[;] but|get 4 extra dice next turn,1,self.extradice-=1; for(x in [0[;]0[;]0[;]0]){ inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); }; inflictself(~illuminate~); sfx(~magic_gaindice~);,Infinity Mirror,COUNTDOWN,8,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Dark Bargain_downgraded,Lose 1 dice this fight[;] but|get 2 extra dice next turn,1,self.extradice-=1; for(x in [0[;]0]){ inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); }; inflictself(~illuminate~); sfx(~magic_gaindice~);,Infinity Mirror,COUNTDOWN,8,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Recycling Spell,Next item has +1|use this turn,1,inflictself(REEQUIPNEXT); sfx(~_recycle~);,Efficiency,MIN5,,GREEN,change_power,change_power,reequipnext,,0,YES,NO,,1,,,,,,,,,,,
Recycling Spell_upgraded,Next item has +1|use this turn,1,inflictself(REEQUIPNEXT); sfx(~_recycle~);,Efficiency,MIN3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Recycling Spell_downgraded,Next item has +1|use this turn,1,inflictself(REEQUIPNEXT); sfx(~_recycle~);,Efficiency,REQUIRE6,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Recycling Spell?,Keep the next dice you|use[;] and return this one,1,inflictself(REEQUIPNEXT); sfx(~_recycle~); givedice(d);,Efficiency,MIN5,,GREEN,change_power,change_power,,,0,YES,NO,alternateversion,1,,,,,,,,,,,
Recycling Spell?_upgraded,Keep the next dice you|use[;] and return this one,1,inflictself(REEQUIPNEXT); sfx(~_recycle~); givedice(d);,Efficiency,MIN3,,GREEN,,,,,0,YES,NO,alternateversion,,,,,,,,,,,,
Recycling Spell?_downgraded,Keep the next dice you|use[;] and return this one,1,inflictself(REEQUIPNEXT); sfx(~_recycle~); givedice(d);,Efficiency,REQUIRE6,,GREEN,,,,,0,YES,NO,alternateversion,,,,,,,,,,,,
Umbrella,Gain [reduce]1 reduce|Return the dice,1,inflictself(REDUCE); sfx(~_shield~); givedice([actualdice[0].basevalue[;]actualdice[1].basevalue]);,Pillow Fort,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Umbrella_upgraded,Gain [reduce]1 reduce|Return the dice,1,inflictself(REDUCE); sfx(~_shield~); givedice([actualdice[0].basevalue[;]actualdice[1].basevalue]);,Pillow Fort,NORMAL|NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Umbrella_downgraded,Gain [reduce]1 reduce,1,inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,DOUBLES|DOUBLES,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Dead Branch,Your [gray]Once per Battle[] items|are replaced with different|items after being used,1,,Efficiency,,,PURPLE,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,for(eq in self.equipment){ if(eq.onceperbattle){ eq.script = eq.script.split(~/*DEAD BRANCH ONCE*/~)[0]; eq.script = eq.script+~/*DEAD BRANCH ONCE*/ e.create(rand(getparticularequipment([\~small\~]))); e.animate(\~curse\~); e.ready = false; e.x = -9999; e.y = -9999; e.scriptaftercombat = e.scriptaftercombat+\~/*DEAD BRANCH BACK*/ e.create(\\\~~+eq.name+~\\\~); /*DEAD BRANCH BACK*/ \~; /*DEAD BRANCH ONCE*/~; }; };,,,,,,,,
Dead Branch_upgraded,Your [gray]Once per Battle[] items|are replaced with different|upgraded items after being used,1,,Efficiency,,,PURPLE,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dead Branch_downgraded,No effect,1,,Efficiency,,,PURPLE,,,,none,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Philosopher's Stone,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,inflictself(SHIELD|2); sfx(~_shield~);
Philosopher's Stone_upgraded,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD|2); sfx(~_shield~);
Philosopher's Stone_downgraded,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,MAX2,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD|2); sfx(~_shield~);
Magnum Opus,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,NORMAL|NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,inflictself(SHIELD|2); sfx(~_shield~);
Magnum Opus_upgraded,Deal [sword]<d6> damage|Gain [shield]4 shield,1,attack(d); inflictself(SHIELD[;]4); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,NORMAL|NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD|4); sfx(~_shield~);
Magnum Opus_downgraded,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,MAX3|MAX3,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD|2); sfx(~_shield~);
Prestidigitate,Deal [sword]<d6> damage[;] roll an|extra low dice next turn,1,attack(d); sfxdamage(target[;]d); sfx(~_magic~); inflictself(~stash~+rand([1[;]2[;]3])); inflictself(~lantern~); sfx(~magic_gaindice~);,Magic Lantern,MAX3,,YELLOW,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);
Prestidigitate_upgraded,Deal [sword]<d6> damage[;] roll an|extra low dice next turn,1,attack(d); sfxdamage(target[;]d); sfx(~_magic~); inflictself(~stash~+rand([1[;]2[;]3])); inflictself(~lantern~); sfx(~magic_gaindice~);,Magic Lantern,MAX5,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);
Prestidigitate_downgraded,Deal [sword]<d6> damage[;] roll an|extra low dice next turn,1,attack(d); sfxdamage(target[;]d); sfx(~_magic~); inflictself(~stash~+rand([1[;]2[;]3])); inflictself(~lantern~); sfx(~magic_gaindice~);,Magic Lantern,MAX2,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);
Conjurate,Deal [sword]<d6> damage[;] roll an|extra low dice next turn,1,attack(d); sfxdamage(target[;]d); sfx(~_magic~); inflictself(~stash~+rand([1[;]2[;]3])); inflictself(~lantern~); sfx(~magic_gaindice~);,Magic Lantern,NORMAL|NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,2,,,,,,,,,,,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);
Conjurate_upgraded,Deal [sword]<d6> damage[;] roll 2|extra low dice next turn,1,attack(d); sfxdamage(target[;]d); sfx(~_magic~); inflictself(~stash~+rand([1[;]2[;]3])); inflictself(~stash~+rand([1[;]2[;]3])); inflictself(~lantern~); sfx(~magic_gaindice~);,Magic Lantern,NORMAL|NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);
Conjurate_downgraded,Deal [sword]<d6> damage[;] roll an|extra low dice next turn,1,attack(d); sfxdamage(target[;]d); sfx(~_magic~); inflictself(~stash~+rand([1[;]2[;]3])); inflictself(~lantern~); sfx(~magic_gaindice~);,Magic Lantern,MAX3|MAX3,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflictself(~lantern~); sfx(~magic_gaindice~);
Autumn Equinox,Replace ALL your spells with|new ones of the same colour,1,if(e.assigneddice.length > 0){ for (mydice in e.assigneddice) mydice.veryfastconsumedice(); }; var spelllist = Spellbook.getspelllist(); for(x in 1...7){ if(!Spellbook.isempty(x)){ var spellname = Spellbook.spellname(x); e.create(spellname); var colour = e.equipmentcol; while(e.name == spellname # e.equipmentcol != colour){ e.create(rand(spelllist)); }; Spellbook.changespellflash(x[;]e.name); }; }; sfx(~_thinghappens~); e.create(~Autumn Equinox~); e.ready=false; e.y= -9999;,Mass Polymorph,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,YES,NO,excludefromrandomlists|witchonly,1,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Autumn Equinox_upgraded,Replace ALL your spells with|new ones of the same colour,1,if(e.assigneddice.length > 0){ for (mydice in e.assigneddice) mydice.veryfastconsumedice(); }; var spelllist = Spellbook.getspelllist(); for(x in 1...7){ if(!Spellbook.isempty(x)){ var spellname = Spellbook.spellname(x); e.create(spellname); var colour = e.equipmentcol; while(e.name == spellname # e.equipmentcol != colour){ e.create(rand(spelllist)); }; Spellbook.changespellflash(x[;]e.name); }; }; sfx(~_thinghappens~); e.create(~Autumn Equinox~[;]true); e.ready=false; e.y= -9999;,Mass Polymorph,NORMAL|NORMAL,,ORANGE,,,,,0,YES,NO,excludefromrandomlists|witchonly,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Autumn Equinox_downgraded,Replace ALL your spells with|new ones of the same colour,1,if(e.assigneddice.length > 0){ for (mydice in e.assigneddice) mydice.veryfastconsumedice(); }; var spelllist = Spellbook.getspelllist(); for(x in 1...7){ if(!Spellbook.isempty(x)){ var spellname = Spellbook.spellname(x); e.create(spellname); var colour = e.equipmentcol; while(e.name == spellname # e.equipmentcol != colour){ e.create(rand(spelllist)); }; Spellbook.changespellflash(x[;]e.name); }; }; sfx(~_thinghappens~); e.create(~Autumn Equinox~); e.ready=false; e.y= -9999;,Mass Polymorph,REQUIRE2|REQUIRE2,,ORANGE,,,,,0,YES,NO,excludefromrandomlists|witchonly,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Prismatic Power,If all spells in your Spellbook|have different colours[;] [sword]10,1,var cols = []; var flag = true; for(x in 1...7){ if(Spellbook.isempty(x)){ flag = false; }else{ e.create(Spellbook.spellname(x)); if(cols.indexOf(e.equipmentcol) == -1){ cols.push(e.equipmentcol); }else{ flag=false; }; }; }; if(flag){ attack(10); sfxdamage(target[;]10); sfx(~_magic~); }else{ target.textparticle(~No effect!~); };,Pea Gun,COUNTDOWN,6,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|witchonly,1,,,,,,,,,,,
Prismatic Power_upgraded,If all spells in your Spellbook|have different colours[;] [sword]14,1,var cols = []; var flag = true; for(x in 1...7){ if(Spellbook.isempty(x)){ flag = false; }else{ e.create(Spellbook.spellname(x)); if(cols.indexOf(e.equipmentcol) == -1){ cols.push(e.equipmentcol); }else{ flag=false; }; }; }; if(flag){ attack(14); sfxdamage(target[;]14); sfx(~_magic~); }else{ target.textparticle(~No effect!~); };,Pea Gun,COUNTDOWN,6,PINK,,,,,0,NO,NO,excludefromrandomlists|witchonly,,,,,,,,,,,,
Prismatic Power_downgraded,If all spells in your Spellbook|have different colours[;] [sword]5,1,var cols = []; var flag = true; for(x in 1...7){ if(Spellbook.isempty(x)){ flag = false; }else{ e.create(Spellbook.spellname(x)); if(cols.indexOf(e.equipmentcol) == -1){ cols.push(e.equipmentcol); }else{ flag=false; }; }; }; if(flag){ attack(5); sfxdamage(target[;]5); sfx(~_magic~); }else{ target.textparticle(~No effect!~); };,Pea Gun,COUNTDOWN,6,PINK,,,,,0,NO,NO,excludefromrandomlists|witchonly,,,,,,,,,,,,
Silhouette,Deal [sword]<d6> damage|Inflict [blind]1 blind,1,attack(d); sfxdamage(target[;]d); inflict(BLIND); sfx(~_blind~);,Smoke Cloud,MIN4|FREE2,,GRAY,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Silhouette_upgraded,Deal [sword]<d6> damage|Inflict [blind]1 blind,1,attack(d); sfxdamage(target[;]d); inflict(BLIND); sfx(~_blind~);,Smoke Cloud,NORMAL|FREE2,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Silhouette_downgraded,Deal [sword]<d6> damage|Inflict [blind]1 blind,1,attack(d); sfxdamage(target[;]d); inflict(BLIND); sfx(~_blind~);,Smoke Cloud,MIN4,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Bolas,[sword]4 dmg[;] return the dice if|you have another Bolas,1,var flag = false; if(self.name == ~Jester~){ for(x in 0...4){ var card = Deck.getcard(x); if(card != null && card.equipment.rawname == ~Bolas~){ flag = true; }; }; }else{ for(eq in self.equipment){ if(eq.availablethisturn && eq.ready && eq.rawname == ~Bolas~){ flag = true; }; }; }; attack(4); sfxdamage(target[;]4); if(flag){ givedice(d); };,Pea Gun,NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,var dicearray = []; for(x in 0...snap){ dicearray.push(6); }; givedice(dicearray);,,var flag = false; if(self.name == ~Jester~){ for(x in 0...4){ var card = Deck.getcard(x); if(card != null && card.equipment.rawname == ~Bolas~){ flag = true; }; }; }else{ for(eq in self.equipment){ if(eq.availablethisturn && eq.ready && eq.rawname == ~Bolas~){ flag = true; }; }; }; if(flag){ givedice(d); };
Bolas_upgraded,[sword]6 dmg[;] return the dice if|you have another Bolas,1,var flag = false; if(self.name == ~Jester~){ for(x in 0...4){ var card = Deck.getcard(x); if(card != null && card.equipment.rawname == ~Bolas~){ flag = true; }; }; }else{ for(eq in self.equipment){ if(eq.availablethisturn && eq.ready && eq.rawname == ~Bolas~){ flag = true; }; }; }; attack(6); sfxdamage(target[;]6); if(flag){ givedice(d); };,Pea Gun,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,var dicearray = []; for(x in 0...snap){ dicearray.push(6); }; givedice(dicearray);,,var flag = false; if(self.name == ~Jester~){ for(x in 0...4){ var card = Deck.getcard(x); if(card != null && card.equipment.rawname == ~Bolas~){ flag = true; }; }; }else{ for(eq in self.equipment){ if(eq.availablethisturn && eq.ready && eq.rawname == ~Bolas~){ flag = true; }; }; }; if(flag){ givedice(d); };
Bolas_downgraded,[sword]4 dmg[;] return the dice if|you have another Bolas,1,var flag = false; if(self.name == ~Jester~){ for(x in 0...4){ var card = Deck.getcard(x); if(card != null && card.equipment.rawname == ~Bolas~){ flag = true; }; }; }else{ for(eq in self.equipment){ if(eq.availablethisturn && eq.ready && eq.rawname == ~Bolas~){ flag = true; }; }; }; attack(4); sfxdamage(target[;]4); if(flag){ givedice(d); };,Pea Gun,MIN4,,ORANGE,,,,none,0,NO,NO,,,,,,,,,,,var dicearray = []; for(x in 0...snap){ dicearray.push(6); }; givedice(dicearray);,,var flag = false; if(self.name == ~Jester~){ for(x in 0...4){ var card = Deck.getcard(x); if(card != null && card.equipment.rawname == ~Bolas~){ flag = true; }; }; }else{ for(eq in self.equipment){ if(eq.availablethisturn && eq.ready && eq.rawname == ~Bolas~){ flag = true; }; }; }; if(flag){ givedice(d); };
Turnstile,Deal [sword]4 damage|Reduce countdowns by <d6>,1,attack(4); sfxdamage(target[;]4); boostcountdowns(d);,Life Leech,MAX4,,RED,change_power,change_power,,none,0,NO,NO,,1,,,,,,,,,,,boostcountdowns(d);
Turnstile_upgraded,Deal [sword]4 damage|Reduce countdowns by <d6>,1,attack(4); sfxdamage(target[;]4); boostcountdowns(d);,Life Leech,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,boostcountdowns(d);
Turnstile_downgraded,Deal [sword]4 damage|Reduce countdowns by <d6>,1,attack(4); sfxdamage(target[;]4); boostcountdowns(d);,Life Leech,MAX2,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,boostcountdowns(d);
Mana Cannon,Deal [sword]4 damage|(Cost [mana]1: re-equip this),1,attack(4); sfxdamage(target[;]4); sfx(~_magic~);,Plasma Gun,COUNTDOWN,4,YELLOW,change_power,change_power,,,1,NO,NO,hidereuseable,1,,,,,,,,if(getstatusself(MANA) >= 1){ removestatusself(MANA[;]1); sfx(~_mana~); e.usesleft +=1; };,,,
Mana Cannon_upgraded,Deal [sword]7 damage|(Cost [mana]1: re-equip this),1,attack(7); sfxdamage(target[;]7); sfx(~_magic~);,Plasma Gun,COUNTDOWN,4,YELLOW,,,,,1,NO,NO,hidereuseable,,,,,,,,,if(getstatusself(MANA) >= 1){ removestatusself(MANA[;]1); sfx(~_mana~); e.usesleft +=1; };,,,
Mana Cannon_downgraded,Deal [sword]2 damage|(Cost [mana]1: re-equip this),1,attack(2); sfxdamage(target[;]2); sfx(~_magic~);,Plasma Gun,COUNTDOWN,4,YELLOW,,,,,1,NO,NO,hidereuseable,,,,,,,,,if(getstatusself(MANA) >= 1){ removestatusself(MANA[;]1); sfx(~_mana~); e.usesleft +=1; };,,,
Plague Stave,Deal [sword]6 damage|Inflict [poison]2 poison,2,attack(6); sfxdamage(target[;]6); sfx(~_magic~); inflict(POISON[;]2); sfx(~_poison~);,Goop Gun,COUNTDOWN,8,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Plague Stave_upgraded,Deal [sword]8 damage|Inflict [poison]2 poison,2,attack(8); sfxdamage(target[;]8); sfx(~_magic~); inflict(POISON[;]2); sfx(~_poison~);,Goop Gun,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Plague Stave_downgraded,Deal [sword]6 damage,2,attack(6); sfxdamage(target[;]6); sfx(~_magic~);,Goop Gun,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Asklepios,Deal [sword]6 damage|Restore [heal]3 health,2,attack(6); sfxdamage(target[;]6); sfx(~_magic~); attackself(-3); sfx(~_heal~[;]~~[;]0.2);,Regenerate,COUNTDOWN,8,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,attackself(-3); sfx(~_heal~[;]~~[;]0.2);
Asklepios_upgraded,Deal [sword]8 damage|Restore [heal]3 health,2,attack(8); sfxdamage(target[;]8); sfx(~_magic~); attackself(-3); sfx(~_heal~[;]~~[;]0.2);,Regenerate,COUNTDOWN,8,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-3); sfx(~_heal~[;]~~[;]0.2);
Asklepios_downgraded,Deal [sword]3 damage|Restore [heal]3 health,2,attack(3); sfxdamage(target[;]3); sfx(~_magic~); attackself(-3); sfx(~_heal~[;]~~[;]0.2);,Regenerate,COUNTDOWN,8,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-3); sfx(~_heal~[;]~~[;]0.2);
Starstaff,Deal [sword]6 damage|Inflict a random status,2,attack(6); sfxdamage(target[;]6); var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,COUNTDOWN,8,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Starstaff_upgraded,Deal [sword]6 damage|Inflict 2x random status,2,attack(6); sfxdamage(target[;]6); var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus[;]2); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2);,Stardust,COUNTDOWN,8,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Starstaff_downgraded,Deal [sword]6 damage,2,attack(6); sfxdamage(target[;]6);,Stardust,COUNTDOWN,8,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Plug & Play,Use all items which have|only Needs X slots,1,var goodslots = []; var freeslots = []; for(i in 0...6){ goodslots.push(~REQUIRE~+(i+1)); freeslots.push(~FREE~+(i+1)); }; for(eq in self.equipment){ trace(eq.name); if(eq.skillcard != ~~){ break; }; var good = eq.ready && eq.availablethisturn; var targets = []; trace(eq.slots); for(s in eq.slots){ if(goodslots.indexOf(s) == -1 && freeslots.indexOf(s) == -1){ good = false; break; }; targets.push(goodslots.indexOf(s) + 1); }; if(good){ for(s in 0...eq.slots.length){ if(freeslots.indexOf(eq.slots[s]) == -1){ givedice(targets[s]); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); }; }; eq.doequipmentaction(self[;]target[;]eq.castdirection[;]eq.assigneddice[;]0); }; }; sfx(~_magic~);,Reversal,NORMAL,,PINK,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Plug & Play_upgraded,Use all Needs X only items|Return the dice,1,var goodslots = []; var freeslots = []; for(i in 0...6){ goodslots.push(~REQUIRE~+(i+1)); freeslots.push(~FREE~+(i+1)); }; for(eq in self.equipment){ trace(eq.name); if(eq.skillcard != ~~){ break; }; var good = eq.ready && eq.availablethisturn; var targets = []; trace(eq.slots); for(s in eq.slots){ if(goodslots.indexOf(s) == -1 && freeslots.indexOf(s) == -1){ good = false; break; }; targets.push(goodslots.indexOf(s) + 1); }; if(good){ for(s in 0...eq.slots.length){ if(freeslots.indexOf(eq.slots[s]) == -1){ givedice(targets[s]); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); }; }; eq.doequipmentaction(self[;]target[;]eq.castdirection[;]eq.assigneddice[;]0); }; }; givedice(d); sfx(~_magic~);,Reversal,NORMAL,,PINK,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Plug & Play_downgraded,No effect,1,sfx(~_magic~);,Reversal,NORMAL,,PINK,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Star Smashy,Use all items which have|only Needs X slots,1,var goodslots = []; var freeslots = []; for(i in 0...6){ goodslots.push(~REQUIRE~+(i+1)); freeslots.push(~FREE~+(i+1)); }; var eqlist = []; if(self.name == ~jester~){ eqlist = [for(x in 0...4) if(Deck.getcard(x) != null) x.equipment]; }else{ eqlist=self.equipment.copy(); }; for(eq in eqlist){ if(eq.skillcard != ~~){ break; }; var good = eq.ready && eq.availablethisturn; var targets = []; for(s in eq.slots){ if(goodslots.indexOf(s) == -1 && freeslots.indexOf(s) == -1){ good = false; break; }; targets.push(goodslots.indexOf(s) + 1); }; if(good){ for(s in 0...eq.slots.length){ if(freeslots.indexOf(eq.slots[s]) == -1){ givedice(targets[s]); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); }; }; eq.doequipmentaction(self[;]target[;]eq.castdirection[;]eq.assigneddice[;]-0.3[;]true); }; }; sfx(~_magic~);,Reversal,EVEN,,PINK,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Star Smashy_upgraded,Use all items which have|only Needs X slots,1,var goodslots = []; var freeslots = []; for(i in 0...6){ goodslots.push(~REQUIRE~+(i+1)); freeslots.push(~FREE~+(i+1)); }; var eqlist = []; if(self.name == ~jester~){ eqlist = [for(x in 0...4) if(Deck.getcard(x) != null) x.equipment]; }else{ eqlist=self.equipment.copy(); }; for(eq in eqlist){ if(eq.skillcard != ~~){ break; }; var good = eq.ready && eq.availablethisturn; var targets = []; for(s in eq.slots){ if(goodslots.indexOf(s) == -1 && freeslots.indexOf(s) == -1){ good = false; break; }; targets.push(goodslots.indexOf(s) + 1); }; if(good){ for(s in 0...eq.slots.length){ if(freeslots.indexOf(eq.slots[s]) == -1){ givedice(targets[s]); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); }; }; eq.doequipmentaction(self[;]target[;]eq.castdirection[;]eq.assigneddice[;]-0.3[;]true); }; }; sfx(~_magic~);,Reversal,NORMAL,,PINK,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Star Smashy_downgraded,Use all items which have|only Needs X slots,1,var goodslots = []; var freeslots = []; for(i in 0...6){ goodslots.push(~REQUIRE~+(i+1)); freeslots.push(~FREE~+(i+1)); }; var eqlist = []; if(self.name == ~jester~){ eqlist = [for(x in 0...4) if(Deck.getcard(x) != null) x.equipment]; }else{ eqlist=self.equipment.copy(); }; for(eq in eqlist){ if(eq.skillcard != ~~){ break; }; var good = eq.ready && eq.availablethisturn; var targets = []; for(s in eq.slots){ if(goodslots.indexOf(s) == -1 && freeslots.indexOf(s) == -1){ good = false; break; }; targets.push(goodslots.indexOf(s) + 1); }; if(good){ for(s in 0...eq.slots.length){ if(freeslots.indexOf(eq.slots[s]) == -1){ givedice(targets[s]); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); }; }; eq.doequipmentaction(self[;]target[;]eq.castdirection[;]eq.assigneddice[;]-0.3[;]true); }; }; sfx(~_magic~);,Reversal,EVEN|EVEN,,PINK,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Threeblade,Deal [sword]3 damage|Return the dice,1,attack(3); sfxdamage(target[;]3); var dice = []; for(ac in actualdice){ dice.push(ac.basevalue); }; givedice(dice);,Magic Six,REQUIRE3,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,for(ac in actualdice){ dice.push(ac.basevalue); }; givedice(dice);
Threeblade_upgraded,Deal [sword]6 damage|Return the dice,1,attack(6); sfxdamage(target[;]6); var dice = []; for(ac in actualdice){ dice.push(ac.basevalue); }; givedice(dice);,Magic Six,REQUIRE3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,for(ac in actualdice){ dice.push(ac.basevalue); }; givedice(dice);
Threeblade_downgraded,Deal [sword]3 damage,1,attack(3); sfxdamage(target[;]3);,Magic Six,REQUIRE3,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Gem of Dice,Roll an extra dice at|the start of each turn,1,sfx(~_thinghappens~);,Magic Dice,,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,2,,,,givedice(); e.animate(~flashandshake~);,,,,,,,
Gem of Dice_upgraded,Roll 2 extra dice at|the start of each turn,1,sfx(~_thinghappens~);,Magic Dice,,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,var t = []; for(x in [0[;]0]){ t.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(t); e.animate(~flashandshake~);,,,,,,,
Gem of Dice_downgraded,Roll an extra dice at|the start of each turn,1,sfx(~_thinghappens~);,Magic Dice,,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,givedice(); e.animate(~flashandshake~);,,,,,,,
Arcane Missiles,Deal [sword]4 damage|On doubles[;] deal [sword]4 more,1,var dmg = 4; if(actualdice[0].basevalue == actualdice[1].basevalue){ dmg = 8; }; attack(dmg); sfxdamage(target[;]dmg); sfx(~_magic~);,Plasma Gun,MIN2|MIN2,,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Arcane Missiles_upgraded,Deal [sword]6 damage|On doubles[;] deal [sword]6 more,1,var dmg = 6; if(actualdice[0].basevalue == actualdice[1].basevalue){ dmg = 12; }; attack(dmg); sfxdamage(target[;]dmg); sfx(~_magic~);,Plasma Gun,MIN2|MIN2,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Arcane Missiles_downgraded,Deal [sword]4 damage|On doubles[;] deal [sword]4 more,1,var dmg = 4; if(actualdice[0].basevalue == actualdice[1].basevalue){ dmg = 8; }; attack(dmg); sfxdamage(target[;]dmg); sfx(~_magic~);,Plasma Gun,MIN4|MIN4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Glistening Bauble,Deal [sword]3 damage for each|extra dice you get this fight,1,var amount = 3; var dmg = self.extradice*amount; if(dmg > 0){ attack(dmg); sfxdamage(target[;]dmg); sfx(~_magic~); };,Infinity Mirror,EVEN,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Glistening Bauble_upgraded,Deal [sword]3 damage for each|extra dice you get this fight,1,var amount = 3; var dmg = self.extradice*amount; if(dmg > 0){ attack(dmg); sfxdamage(target[;]dmg); sfx(~_magic~); };,Infinity Mirror,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Glistening Bauble_downgraded,Deal [sword]2 damage for each|extra dice you get this fight,1,var amount = 2; var dmg = self.extradice*amount; if(dmg > 0){ attack(dmg); sfxdamage(target[;]dmg); sfx(~_magic~); };,Infinity Mirror,EVEN,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Blood Pact,Lose [heart]2 health[;] then|drain [heart]<d6> health,1,pierceattackself(2); drain(d); sfx(~_drain~); sfx(~_magic~);,Blood Sip,MAX4,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,pierceattackself(2); sfx(~_drain~);
Blood Pact_upgraded,Lose [heart]3 health[;] then|drain [heart]<d6> health,1,pierceattackself(3); drain(d); sfx(~_drain~); sfx(~_magic~);,Blood Sip,MAX4|FREE1,,RED,,,,,0,NO,NO,,,,,,,,,,,,,pierceattackself(3); sfx(~_drain~);
Blood Pact_downgraded,Lose [heart]2 health[;] then|drain [heart]<d6> health,1,pierceattackself(2); drain(d); sfx(~_drain~); sfx(~_magic~);,Blood Sip,MAX2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,pierceattackself(2); sfx(~_drain~);
Blunderbuss,Deal [sword]2 damage|Split both dice in 2,2,attack(2); sfxdamage(target[;]2); var ta = []; for(x in [0[;]1]){ ta = ta.concat(split(actualdice[x].basevalue)); }; givedice(ta);,Magic Lockpick,EVEN|EVEN,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,var ta = []; for(x in [0[;]1]){ ta = ta.concat(split(actualdice[x].basevalue)); }; givedice(ta);
Blunderbuss_upgraded,Deal [sword]2 damage|Split both dice in 2,2,attack(2); sfxdamage(target[;]2); var ta = []; for(x in [0[;]1]){ ta = ta.concat(split(actualdice[x].basevalue)); }; givedice(ta);,Magic Lockpick,MIN2|MIN2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,var ta = []; for(x in [0[;]1]){ ta = ta.concat(split(actualdice[x].basevalue)); }; givedice(ta);
Blunderbuss_downgraded,Split both dice in 2,2,var ta = []; for(x in [0[;]1]){ ta = ta.concat(split(actualdice[x].basevalue)); }; givedice(ta);,Magic Lockpick,EVEN|EVEN,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Vortex,Consume your other <d6>s|Deal [sword]3 per dice consumed,1,var damage = 3; var c = 0; var total = 0; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue == d){ mydice.animate(~disappear~[;]c); c+=0.05; total+=1; }; }; }; attack(total*damage); sfxdamage(target[;]total*damage); sfx(~_magic~);,Plasma Gun,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Vortex_upgraded,Consume your other <d6>s|Deal [sword]5 per dice consumed,1,var damage = 5; var c = 0; var total = 0; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue == d){ mydice.animate(~disappear~[;]c); c+=0.05; total+=1; }; }; }; attack(total*damage); sfxdamage(target[;]total*damage); sfx(~_magic~);,Plasma Gun,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Vortex_downgraded,Consume your other <d6>s|Deal [sword]2 per dice consumed,1,var damage = 2; var c = 0; var total = 0; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue == d){ mydice.animate(~disappear~[;]c); c+=0.05; total+=1; }; }; }; attack(total*damage); sfxdamage(target[;]total*damage); sfx(~_magic~);,Plasma Gun,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Power Creeper,Deal [sword]1 more damage than|your last attack ([sword]<var:lastdamage>+1),2,attack(self.getvar(~lastdamage~)+1); sfx(~_plasma~); sfxdamage(target[;]self.getvar(~lastdamage~)+1); self.setvar(~lastdamage~[;]self.getvar(~lastdamage~)+1);,Plasma Gun,COUNTDOWN,10,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,self.setvar(~lastdamage~[;]0);,,self.setvar(~enemyhealth~[;]target.hp);,var diff = self.getvar(~enemyhealth~) - target.hp; if(diff > 0){ self.setvar(~lastdamage~[;]diff); }; self.setvar(~enemyhealth~[;]target.hp);,,,,,,
Power Creeper_upgraded,Deal [sword]4 more damage than|your last attack ([sword]<var:lastdamage>+4),2,attack(self.getvar(~lastdamage~)+4); sfx(~_plasma~); sfxdamage(target[;]self.getvar(~lastdamage~)+4); self.setvar(~lastdamage~[;]self.getvar(~lastdamage~)+4);,Plasma Gun,COUNTDOWN,10,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,self.setvar(~lastdamage~[;]0);,,self.setvar(~enemyhealth~[;]target.hp);,var diff = self.getvar(~enemyhealth~) - target.hp; if(diff > 0){ self.setvar(~lastdamage~[;]diff); }; self.setvar(~enemyhealth~[;]target.hp);,,,,,,
Power Creeper_downgraded,Deal [sword]1 less damage than|your last attack ([sword]<var:lastdamage>-1),2,attack(self.getvar(~lastdamage~)-1); sfx(~_plasma~); sfxdamage(target[;]self.getvar(~lastdamage~)-1); self.setvar(~lastdamage~[;]self.getvar(~lastdamage~)-1);,Plasma Gun,COUNTDOWN,10,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,self.setvar(~lastdamage~[;]0);,,self.setvar(~enemyhealth~[;]target.hp);,var diff = self.getvar(~enemyhealth~) - target.hp; if(diff > 0){ self.setvar(~lastdamage~[;]diff); }; self.setvar(~enemyhealth~[;]target.hp);,,,,,,
Normality Charm,Roll 3 dice each turn[;] but|you can no longer Calculate,1,,Magic Dice,,,YELLOW,change_power,change_power,,none,0,NO,NO,excludefromrandomlists|robotonly,,,,,var amount = 3; var n = []; for(x in 0...amount){ n.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(n); var poss = []; for(eq in self.equipment){ if(eq.name == ~Robot Calculate~){ poss.push(eq); eq.animate(~curse~); trace(~found one!~); trace(~eq.name~); }; }; roboterror(self[;]poss); e.animate(~flashandshake~); sfx(~_curse~); self.roll_totaldice+=3;,,,,,,,
Normality Charm_upgraded,Roll 4 dice each turn[;] but|you can no longer Calculate,1,,Magic Dice,,,YELLOW,,,,none,0,NO,NO,excludefromrandomlists|robotonly,,,,,var amount = 4; var n = []; for(x in 0...amount){ n.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(n); var poss = []; for(eq in self.equipment){ if(eq.name == ~Robot Calculate~){ poss.push(eq); eq.animate(~curse~); trace(~found one!~); trace(~eq.name~); }; }; roboterror(self[;]poss); e.animate(~flashandshake~); sfx(~_curse~); self.roll_totaldice+=3;,,,,,,,
Normality Charm_downgraded,Roll 2 dice each turn[;] but|you can no longer Calculate,1,,Magic Dice,,,YELLOW,,,,none,0,NO,NO,excludefromrandomlists|robotonly,,,,,var amount = 2; var n = []; for(x in 0...amount){ n.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(n); var poss = []; for(eq in self.equipment){ if(eq.name == ~Robot Calculate~){ poss.push(eq); eq.animate(~curse~); trace(~found one!~); trace(~eq.name~); }; }; roboterror(self[;]poss); e.animate(~flashandshake~); sfx(~_curse~); self.roll_totaldice+=3;,,,,,,,
Aqua Fortis,Inflict [poison]<d6> poison|Receive [poison]<d6> poison,1,inflict(POISON[;]d); inflictself(POISON[;]d); sfx(~_poison~); sfx(~_poison~[;]~~[;]0.2);,Goop Gun,MAX4,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(POISON[;]d); sfx(~_poison~); 
Aqua Fortis_upgraded,Inflict [poison]<d6> poison|Receive [poison]<d6> poison,1,inflict(POISON[;]d); inflictself(POISON[;]d); sfx(~_poison~); sfx(~_poison~[;]~~[;]0.2);,Goop Gun,MAX4|FREE1,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(POISON[;]d); sfx(~_poison~); 
Aqua Fortis_downgraded,Inflict [poison]<d6> poison|Receive [poison]<d6> poison,1,inflict(POISON[;]d); inflictself(POISON[;]d); sfx(~_poison~); sfx(~_poison~[;]~~[;]0.2);,Goop Gun,MAX2,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(POISON[;]d); sfx(~_poison~); 
Refund,Discard your hand[;] receive|dice those items would take,1,function getvals(eq){ if(eq.remainingcountdown > 6){ return [[1[;]2[;]3[;]4[;]5[;]6]]; }else if(eq.remainingcountdown > 0){ var x = 1; var ct = []; while(x < eq.remainingcountdown){ ct.push(x); x+=1; } return [ct]; }; var sl = eq.getslots(); if(sl.length == 0){ return []; }; var retval = []; for(s in sl){ if(s == ~NORMAL~){ retval.push([1[;]2[;]3[;]4[;]5[;]6]); }; if(s == ~EVEN~){ retval.push([2[;]4[;]6]); }; if(s == ~ODD~){ retval.push([1[;]3[;]5]); }; for(x in 1...7){ if(s == ~REQUIRE~+x){ retval.push([x]); }; }; for(x in 1...7){ if(s == ~MIN~+x){ var temp = []; for(y in x+1...7){ temp.push(y); }; retval.push(temp); }; }; for(x in 1...7){ if(s == ~MAX~+x){ var temp = []; for(y in 1...x+1){ temp.push(y); }; retval.push(temp); }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1]){ var temp = []; for(y in r[0]...r[1]+1){ temp.push(y); }; retval.push(temp); } }; }; return retval; }; var eqlist = []; if(self.name == ~jester~){ eqlist = [for(x in 0...4) if(Deck.getcard(x) != null) x.equipment]; }else{ eqlist=self.equipment.copy(); }; var newdice = []; for(eq in eqlist){ if(eq.skillcard != ~~){ break; }; var good = eq.ready && eq.availablethisturn; if(good){ var slotchoices = getvals(eq); if(slotchoices.length > 0){ for(x in slotchoices){ newdice.push(rand(x)); }; }; }; }; givedice(newdice); if(self.layout == ~DECK~){Deck.discardhand();}else{for(eq in eqlist){if(eq.skillcard == ~~){eq.animate(~error~);};};}; sfx(~jester_discard~);,Magic Dice,EVEN,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Refund_upgraded,Discard your hand[;] receive|dice those items would take,1,function getvals(eq){ if(eq.remainingcountdown > 6){ return [[1[;]2[;]3[;]4[;]5[;]6]]; }else if(eq.remainingcountdown > 0){ var x = 1; var ct = []; while(x < eq.remainingcountdown){ ct.push(x); x+=1; } return [ct]; }; var sl = eq.getslots(); if(sl.length == 0){ return []; }; var retval = []; for(s in sl){ if(s == ~NORMAL~){ retval.push([1[;]2[;]3[;]4[;]5[;]6]); }; if(s == ~EVEN~){ retval.push([2[;]4[;]6]); }; if(s == ~ODD~){ retval.push([1[;]3[;]5]); }; for(x in 1...7){ if(s == ~REQUIRE~+x){ retval.push([x]); }; }; for(x in 1...7){ if(s == ~MIN~+x){ var temp = []; for(y in x+1...7){ temp.push(y); }; retval.push(temp); }; }; for(x in 1...7){ if(s == ~MAX~+x){ var temp = []; for(y in 1...x+1){ temp.push(y); }; retval.push(temp); }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1]){ var temp = []; for(y in r[0]...r[1]+1){ temp.push(y); }; retval.push(temp); } }; }; return retval; }; var eqlist = []; if(self.name == ~jester~){ eqlist = [for(x in 0...4) if(Deck.getcard(x) != null) x.equipment]; }else{ eqlist=self.equipment.copy(); }; var newdice = []; for(eq in eqlist){ if(eq.skillcard != ~~){ break; }; var good = eq.ready && eq.availablethisturn; if(good){ var slotchoices = getvals(eq); if(slotchoices.length > 0){ for(x in slotchoices){ newdice.push(rand(x)); }; }; }; }; givedice(newdice); if(self.layout == ~DECK~){Deck.discardhand();}else{for(eq in eqlist){if(eq.skillcard == ~~){eq.animate(~error~);};};}; sfx(~jester_discard~);,Magic Dice,NORMAL,,BRIGHTCYAN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Refund_downgraded,Discard your hand[;] receive|dice those items would take,1,function getvals(eq){ if(eq.remainingcountdown > 6){ return [[1[;]2[;]3[;]4[;]5[;]6]]; }else if(eq.remainingcountdown > 0){ var x = 1; var ct = []; while(x < eq.remainingcountdown){ ct.push(x); x+=1; } return [ct]; }; var sl = eq.getslots(); if(sl.length == 0){ return []; }; var retval = []; for(s in sl){ if(s == ~NORMAL~){ retval.push([1[;]2[;]3[;]4[;]5[;]6]); }; if(s == ~EVEN~){ retval.push([2[;]4[;]6]); }; if(s == ~ODD~){ retval.push([1[;]3[;]5]); }; for(x in 1...7){ if(s == ~REQUIRE~+x){ retval.push([x]); }; }; for(x in 1...7){ if(s == ~MIN~+x){ var temp = []; for(y in x+1...7){ temp.push(y); }; retval.push(temp); }; }; for(x in 1...7){ if(s == ~MAX~+x){ var temp = []; for(y in 1...x+1){ temp.push(y); }; retval.push(temp); }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1]){ var temp = []; for(y in r[0]...r[1]+1){ temp.push(y); }; retval.push(temp); } }; }; return retval; }; var eqlist = []; if(self.name == ~jester~){ eqlist = [for(x in 0...4) if(Deck.getcard(x) != null) x.equipment]; }else{ eqlist=self.equipment.copy(); }; var newdice = []; for(eq in eqlist){ if(eq.skillcard != ~~){ break; }; var good = eq.ready && eq.availablethisturn; if(good){ var slotchoices = getvals(eq); if(slotchoices.length > 0){ for(x in slotchoices){ newdice.push(rand(x)); }; }; }; }; givedice(newdice); if(self.layout == ~DECK~){Deck.discardhand();}else{for(eq in eqlist){if(eq.skillcard == ~~){eq.animate(~error~);};};}; sfx(~jester_discard~);,Magic Dice,EVEN|EVEN,,BRIGHTCYAN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Reject,Do [sword] equal to lower dice|Return the higher dice,1,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x > y){ var temp = x; x = y; y = temp; }; attack(x); sfxdamage(target[;]x); sfx(~_magic~); givedice(y);,Clone Device,NORMAL|NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x > y){ var temp = x; x = y; y = temp; };  givedice(y);
Reject_upgraded,Do [sword] equal to higher dice|Return the lower dice,1,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x < y){ var temp = x; y = x; x = temp; }; attack(x); sfxdamage(target[;]x); sfx(~_magic~); givedice(y);,Clone Device,NORMAL|NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x > y){ var temp = x; x = y; y = temp; };  givedice(x);
Reject_downgraded,Do [sword] equal to lower dice,1,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x > y){ var temp = x; y = x; x = temp; }; attack(x); sfxdamage(target[;]x); sfx(~_magic~);,Clone Device,NORMAL|NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Refresh,Reroll both dice[;] resulting|values will be different,1,var vals = [1[;]2[;]3[;]4[;]5[;]6]; vals.remove(actualdice[0].basevalue); vals.remove(actualdice[1].basevalue); var x = rand(vals); var y = rand(vals); while(y == x){ y = rand(vals); }; givedice([x[;]y]);,Replicate,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Refresh_upgraded,Reroll both dice[;] resulting|values will be different|,1,var vals = [1[;]2[;]3[;]4[;]5[;]6]; vals.remove(actualdice[0].basevalue); vals.remove(actualdice[1].basevalue); var x = rand(vals); var y = rand(vals); while(y == x){ y = rand(vals); }; givedice([x[;]y]);,Replicate,NORMAL|NORMAL,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Refresh_downgraded,Reroll one of the dice,1,givedice();,Replicate,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Maul,Deal [sword]<d6> damage[;]|double on 3 or less,2,if(d <= 3){ attack(d*2); sfxdamage(target[;]d*2); }else{ attack(d); sfxdamage(target[;]d); };,Shuriken,NORMAL,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Maul_upgraded,Deal [sword]<d6> damage[;]|double on 4 or less,2,if(d <= 4){ attack(d*2); sfxdamage(target[;]d*2); }else{ attack(d); sfxdamage(target[;]d); };,Shuriken,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Maul_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Shuriken,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Shield Toss,Deal [sword]<double> damage[;] but|give enemy [shield]<d6> shield,2,attack(d*2); sfxdamage(target[;]d*2); inflict(SHIELD[;]d); sfx(~_shield~);,Lava Drop,NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflict(SHIELD[;]d); sfx(~_shield~);
Shield Toss_upgraded,Deal [sword]<double> damage[;] but|give enemy [shield]<d6> shield,2,attack(d*2); sfxdamage(target[;]d*2); inflict(SHIELD[;]d); sfx(~_shield~);,Lava Drop,NORMAL|FREE2,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflict(SHIELD[;]d); sfx(~_shield~);
Shield Toss_downgraded,Deal [sword]<d6> damage[;] but|give enemy [shield]<d6> shield,2,attack(d); sfxdamage(target[;]d); inflict(SHIELD[;]d); sfx(~_shield~);,Lava Drop,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflict(SHIELD[;]d); sfx(~_shield~);
Chronoblade,Deal [sword]<d6> damage[;] inflict|status depending on the turn:|[blind] [poison] [fire] [shock] [ice] [weaken] [lock] [curse],2,attack(d); sfxdamage(target[;]d); var effects = [BLIND[;]POISON[;]FIRE[;]SHOCK[;]ICE[;]WEAKEN[;]LOCK[;]CURSE]; var sounds=[~_blind~[;]~_poison~[;]~_fire~[;]~_shock~[;]~_ice~[;]~_weaken~[;]~_lock~[;]~_curse~]; inflict(effects[(turn-1)%7]); sfx(sounds[(turn-1)%7]);,Stardust,MAX5,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Chronoblade_upgraded,Deal [sword]<d6> damage[;] inflict|status depending on the turn:|[curse] [lock] [weaken] [ice] [shock] [fire] [poison] [blind],2,attack(d); sfxdamage(target[;]d); var effects = [CURSE[;]LOCK[;]WEAKEN[;]ICE[;]SHOCK[;]FIRE[;]POISON[;]BLIND]; var sounds=[~_curse~[;]~_lock~[;]~_weaken~[;]~_ice~[;]~_shock~[;]~_fire~[;]~_poison~[;]~_blind~]; inflict(effects[(turn-1)%7]); sfx(sounds[(turn-1)%7]);,Stardust,MAX5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Chronoblade_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Stardust,MAX5,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Draining Crystal,Drain [heart]1 health[;]|return the dice,1,drain(1); sfx(~_drain~); givedice(d);,Life Leech,MAX3,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,givedice(d);
Draining Crystal_upgraded,Drain [heart]<d6> health[;]|return the dice,1,drain(d); sfx(~_drain~); givedice(d);,Life Leech,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Draining Crystal_downgraded,Drain [heart]1 health,1,drain(1); sfx(~_drain~);,Life Leech,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Furious Spell,Gain [fury] fury[;] but so|does the enemy,1,inflictself(FURY); inflict(FURY); sfx(~_fury~);,Fury,EVEN,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,inflict(FURY); sfx(~_fury~);
Furious Spell_upgraded,Gain [fury] fury[;] but so|does the enemy,1,inflictself(FURY); inflict(FURY); sfx(~_fury~);,Fury,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,inflict(FURY); sfx(~_fury~);
Furious Spell_downgraded,Gain [fury] fury[;] but so|does the enemy,1,inflictself(FURY); inflict(FURY); sfx(~_fury~);,Fury,EVEN|EVEN,,RED,,,,,0,NO,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,inflict(FURY); sfx(~_fury~);
Toffee,Gain [shield]2 shield[;] then if shield|below [shield]<d6>[;] reroll the dice,1,inflictself(SHIELD[;]2); sfx(~_shield~); if(getstatusself(SHIELD) < d){ givedice(); };,Coin Clippers,MAX4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Toffee_upgraded,Gain [shield]2 shield[;] then if shield|below [shield]4[;] reroll the dice,1,inflictself(SHIELD[;]2); sfx(~_shield~); if(getstatusself(SHIELD) < 4){ givedice(); };,Coin Clippers,MAX4,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Toffee_downgraded,Gain [shield]2 shield,1,inflictself(SHIELD[;]2); sfx(~_shield~);,Coin Clippers,MAX4,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Chili Pepper,Even: Burn [fire]1 dice|Odd: [sword]1 dmg[;] reroll dice,1,if(d%2 == 0){ inflict(FIRE); sfx(~_fire~); }else{ attack(1); sfxdamage(target[;]1); givedice(); };,Ember,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d%2 == 1){givedice();};
Chili Pepper_upgraded,Even: Burn [fire]2 dice|Odd: [sword]2 dmg[;] reroll dice,1,if(d%2 == 0){ inflict(FIRE[;]2); sfx(~_fire~); }else{ attack(2); sfxdamage(target[;]2); givedice(); };,Ember,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,if(d%2 == 1){givedice();};
Chili Pepper_downgraded,Even: Burn [fire]1 dice|Odd: [sword]1 dmg[;] reroll dice,1,if(d%2 == 0){ inflict(FIRE); sfx(~_fire~); }else{ attack(1); sfxdamage(target[;]1); givedice(); };,Ember,MIN4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,if(d%2 == 1){givedice();};
Chilly Pepper,Even: [sword]1 dmg[;] reroll dice|Odd: Inflict [ice]1 freeze,1,if(d%2 == 1){ inflict(ICE); sfx(~_ice~); }else{ attack(1); sfxdamage(target[;]1); givedice(); };,Refrigerator,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d%2 == 0){givedice();};
Chilly Pepper_upgraded,Even: [sword]2 dmg[;] reroll dice|Odd: Inflict [ice]2 freeze,1,if(d%2 == 1){ inflict(ICE[;]2); sfx(~_ice~); }else{ attack(2); sfxdamage(target[;]2); givedice(); };,Refrigerator,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,if(d%2 == 0){givedice();};
Chilly Pepper_downgraded,Even: [sword]1 dmg[;] reroll dice|Odd: Inflict [ice]1 freeze,1,if(d%2 == 1){ inflict(ICE); sfx(~_ice~); }else{ attack(1); sfxdamage(target[;]1); givedice(); };,Refrigerator,MIN4,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,if(d%2 == 0){givedice();};
Caramel,Heal [heal]1[;] gain [shield]1 shield[;]|reroll with lower value,1,attackself(-1); inflictself(SHIELD); sfx(~_heal~); sfx(~_shield~[;]~~[;]0.1); var x = 1; var poss = []; while(x < d){ poss.push(x); x+=1; }; if(poss.length > 0){ givedice(rand(poss)); };,Revitalize,MIN4,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Caramel_upgraded,Heal [heal]1[;] gain [shield]1 shield[;]|reroll with lower value,1,attackself(-1); inflictself(SHIELD); sfx(~_heal~); sfx(~_shield~[;]~~[;]0.1); var x = 1; var poss = []; while(x < d){ poss.push(x); x+=1; }; if(poss.length > 0){ givedice(rand(poss)); };,Revitalize,MIN2,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Caramel_downgraded,Heal [heal]1 health|Gain [shield]1 shield,1,attackself(-1); inflictself(SHIELD); sfx(~_heal~); sfx(~_shield~[;]~~[;]0.1);,Revitalize,MIN4,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Rock Crusher,Dice value -1[;] then split it|,1,if(d <= 1){ self.textparticle(~Nice try~); }else if(d == 2){ givedice([1]); }else if(d > 6){ givedice(d-1); }else{ givedice(split(d-1)); };,Magic Lockpick,MIN3,,GREEN,change_power,change_power,,,2,YES,NO,,,,,,,,,,,,,
Rock Crusher_upgraded,Dice value -1[;] then split it|,1,if(d <= 1){ self.textparticle(~Nice try~); }else if(d == 2){ givedice([1]); }else if(d > 6){ givedice(d-1); }else{ givedice(split(d-1)); };,Magic Lockpick,MIN3,,GREEN,,,,,4,YES,NO,,,,,,,,,,,,,
Rock Crusher_downgraded,Dice value -1[;]|then split it in two,1,if(d <= 1){ self.textparticle(~Nice try~); }else if(d == 2){ givedice([1]); }else if(d > 6){ givedice(d-1); }else{ givedice(split(d-1)); };,Magic Lockpick,MIN3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Stony Armour,Gain [reduce]1 reduce|,1,inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,MAX3|MAX3,,ORANGE,change_power,change_power,,,-1,YES,NO,,,,,,,,,,,,,
Stony Armour_upgraded,Gain [reduce]1 reduce|,1,inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,NORMAL|NORMAL,,ORANGE,,,,,-1,YES,NO,,,,,,,,,,,,,
Stony Armour_downgraded,Gain [reduce]1 reduce|,1,inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,MAX3|MAX3,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Triangle Beam,Deal [sword]<d6> damage|Slot reduces on each use|[gray](Reuseable),2,attack(d); sfxdamage(target[;]d); sfx(~_magic~); function updateslots(eq){var slotlist = [~REQUIRE1~|~REQUIRE2~|~REQUIRE3~|~REQUIRE4~|~REQUIRE5~|~REQUIRE6~|~MAX1~|~MAX2~|~MAX3~|~MAX4~|~MAX5~|~RANGE23~|~RANGE24~|~RANGE25~|~RANGE34~|~RANGE35~|~RANGE45~|~MIN5~|~MIN4~|~MIN3~|~MIN2~|~ODD~|~EVEN~]; var replist = [~REQUIRE1~|~REQUIRE1~|~REQUIRE2~|~REQUIRE3~|~REQUIRE4~|~REQUIRE5~|~MAX1~|~REQUIRE1~|~MAX2~|~MAX3~|~MAX4~|~MAX2~|~MAX3~|~MAX3~|~RANGE23~|~RANGE24~|~RANGE34~|~RANGE45~|~RANGE35~|~RANGE25~|~MAX5~|~REQUIRE1~|~REQUIRE2~]; var out = []; for(sl in eq.getslots()){var idx = slotlist.indexOf(sl); var newSlot = sl; if(idx != -1){newSlot = replist[idx];}; out.push(newSlot);}; eq.changeslots(out);}; if(e.getvar(~e~).unavailabletext == ~~){e.getvar(~e~).availablethisturn=true; updateslots(e.getvar(~e~)); }; /*please. if you read this code. know one thing. NEVER code like this. this caused me actual physical pain. stop. */,Plasma Gun,MAX5,,RED,change_power,change_power,,,-1,NO,NO,excludefromrandomlists,,,e.changeslots([~MAX5~]);,e.changeslots([~MAX5~]);,,,,e.changeslots([~MAX5~]);,e.availablethisturn=false; e.unavailabletext=~~; e.setvar(~e~|e);,,,
Triangle Beam_upgraded,Deal [sword]<d6> damage|Slot reduces on each use|[gray](Reuseable),2,attack(d); sfxdamage(target[;]d); sfx(~_magic~); function updateslots(eq){var slotlist = [~REQUIRE1~|~REQUIRE2~|~REQUIRE3~|~REQUIRE4~|~REQUIRE5~|~REQUIRE6~|~MAX1~|~MAX2~|~MAX3~|~MAX4~|~MAX5~|~RANGE23~|~RANGE24~|~RANGE25~|~RANGE34~|~RANGE35~|~RANGE45~|~MIN5~|~MIN4~|~MIN3~|~MIN2~|~ODD~|~EVEN~]; var replist = [~REQUIRE1~|~REQUIRE1~|~REQUIRE2~|~REQUIRE3~|~REQUIRE4~|~REQUIRE5~|~MAX1~|~REQUIRE1~|~MAX2~|~MAX3~|~MAX4~|~MAX2~|~MAX3~|~MAX3~|~RANGE23~|~RANGE24~|~RANGE34~|~RANGE45~|~RANGE35~|~RANGE25~|~MAX5~|~REQUIRE1~|~REQUIRE2~]; var out = []; for(sl in eq.getslots()){var idx = slotlist.indexOf(sl); var newSlot = sl; if(idx != -1){newSlot = replist[idx];}; out.push(newSlot);}; eq.changeslots(out);}; if(e.getvar(~e~).unavailabletext == ~~){e.getvar(~e~).availablethisturn=true; updateslots(e.getvar(~e~)); }; /*please. if you read this code. know one thing. NEVER code like this. this caused me actual physical pain. stop. */,Plasma Gun,NORMAL,,RED,,,,,-1,NO,NO,excludefromrandomlists,,,e.changeslots([~NORMAL~]);,e.changeslots([~NORMAL~]);,,,,e.changeslots([~NORMAL~]);,e.availablethisturn=false; e.unavailabletext=~~; e.setvar(~e~|e);,,,
Triangle Beam_downgraded,Deal [sword]<d6> damage|Slot reduces on each use|[gray](Reuseable),2,attack(d); sfxdamage(target[;]d); sfx(~_magic~); function updateslots(eq){var slotlist = [~REQUIRE1~|~REQUIRE2~|~REQUIRE3~|~REQUIRE4~|~REQUIRE5~|~REQUIRE6~|~MAX1~|~MAX2~|~MAX3~|~MAX4~|~MAX5~|~RANGE23~|~RANGE24~|~RANGE25~|~RANGE34~|~RANGE35~|~RANGE45~|~MIN5~|~MIN4~|~MIN3~|~MIN2~|~ODD~|~EVEN~]; var replist = [~REQUIRE1~|~REQUIRE1~|~REQUIRE2~|~REQUIRE3~|~REQUIRE4~|~REQUIRE5~|~MAX1~|~REQUIRE1~|~MAX2~|~MAX3~|~MAX4~|~MAX2~|~MAX3~|~MAX3~|~RANGE23~|~RANGE24~|~RANGE34~|~RANGE45~|~RANGE35~|~RANGE25~|~MAX5~|~REQUIRE1~|~REQUIRE2~]; var out = []; for(sl in eq.getslots()){var idx = slotlist.indexOf(sl); var newSlot = sl; if(idx != -1){newSlot = replist[idx];}; out.push(newSlot);}; eq.changeslots(out);}; if(e.getvar(~e~).unavailabletext == ~~){e.getvar(~e~).availablethisturn=true; updateslots(e.getvar(~e~)); }; /*please. if you read this code. know one thing. NEVER code like this. this caused me actual physical pain. stop. */,Plasma Gun,MAX3,,RED,,,,,-1,NO,NO,excludefromrandomlists,,,e.changeslots([~MAX3~]);,e.changeslots([~MAX3~]);,,,,e.changeslots([~MAX3~]);,e.availablethisturn=false; e.unavailabletext=~~; e.setvar(~e~|e);,,,
Channel Rage,Burn your other dice[;] deal|[fire]2 damage per dice burned,1,var damage = 2; var total = 0; for(mydice in self.dicepool){ if(mydice.available()){mydice.animate(~fire~[;]total/10); total+=1; }}; if(total > 0){ attack(total*damage[;]FIRE); sfxdamage(target|total * damage); sfx(~_fire~); };,Heat Ray,COUNTDOWN,4,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,var total = 0; for(mydice in self.dicepool){ if(mydice.available()){mydice.animate(~fire~[;]total/10); total+=1; }}; if(total > 0){sfx(~_fire~); };
Channel Rage_upgraded,Burn your other dice[;] deal|[fire]3 damage per dice burned,1,var damage = 3; var total = 0; for(mydice in self.dicepool){ if(mydice.available()){mydice.animate(~fire~[;]total/10); total+=1; }}; if(total > 0){ attack(total*damage[;]FIRE); sfxdamage(target|total * damage); sfx(~_fire~); };,Heat Ray,COUNTDOWN,4,RED,,,,,0,NO,NO,,,,,,,,,,,,,var total = 0; for(mydice in self.dicepool){ if(mydice.available()){mydice.animate(~fire~[;]total/10); total+=1; }}; if(total > 0){sfx(~_fire~); };
Channel Rage_downgraded,Burn your other dice[;] deal|[fire]1 damage per dice burned,1,var damage = 1; var total = 0; for(mydice in self.dicepool){ if(mydice.available()){mydice.animate(~fire~[;]total/10); total+=1; }}; if(total > 0){ attack(total*damage[;]FIRE); sfxdamage(target|total * damage); sfx(~_fire~); };,Heat Ray,COUNTDOWN,4,RED,,,,,0,NO,NO,,,,,,,,,,,,,var total = 0; for(mydice in self.dicepool){ if(mydice.available()){mydice.animate(~fire~[;]total/10); total+=1; }}; if(total > 0){sfx(~_fire~); };
Channel Calm,Freeze your other dice[;] deal|[ice]2 damage per dice frozen,1,var damage = 2; var total = 0; for(mydice in self.dicepool){ var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim = ~alternate_ice~; sfx(~_dicefreeze~|~~|total/10);} if(mydice.available()){mydice.animate(anim[;]total/10); total+=1; }}; if(total > 0){ attack(total*damage[;]ICE); sfxdamage(target|total*damage); sfx(~_ice~); };,Refrigerator,COUNTDOWN,4,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,var total = 0; for(mydice in self.dicepool){ var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim = ~alternate_ice~; sfx(~_dicefreeze~|~~|total/10);} if(mydice.available()){mydice.animate(anim[;]total/10); total+=1; }};
Channel Calm_upgraded,Freeze your other dice[;] deal|[ice]3 damage per dice frozen,1,var damage = 3; var total = 0; for(mydice in self.dicepool){ var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim = ~alternate_ice~; sfx(~_dicefreeze~|~~|total/10);} if(mydice.available()){mydice.animate(anim[;]total/10); total+=1; }}; if(total > 0){ attack(total*damage[;]ICE); sfxdamage(target|total*damage); sfx(~_ice~); };,Refrigerator,COUNTDOWN,4,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,var total = 0; for(mydice in self.dicepool){ var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim = ~alternate_ice~; sfx(~_dicefreeze~|~~|total/10);} if(mydice.available()){mydice.animate(anim[;]total/10); total+=1; }};
Channel Calm_downgraded,Freeze your other dice[;] deal|[ice]1 damage per dice frozen,1,var damage = 1; var total = 0; for(mydice in self.dicepool){ var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim = ~alternate_ice~; sfx(~_dicefreeze~|~~|total/10);} if(mydice.available()){mydice.animate(anim[;]total/10); total+=1; }}; if(total > 0){ attack(total*damage[;]ICE); sfxdamage(target|total*damage); sfx(~_ice~); };,Refrigerator,COUNTDOWN,4,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,var total = 0; for(mydice in self.dicepool){ var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim = ~alternate_ice~; sfx(~_dicefreeze~|~~|total/10);} if(mydice.available()){mydice.animate(anim[;]total/10); total+=1; }};
Blood Blessing,Convert [heart]<d6> health into|[shield]<d6> shield[;] return the dice,1,pierceattackself(d); inflictself(SHIELD[;]d); sfx(~_drain~); sfx(~_shield~); givedice(d);,Steel Skin,MAX5,,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Blood Blessing_upgraded,Convert [heart]<d6> health into|[shield]<d6> shield[;] return the dice,1,pierceattackself(d); inflictself(SHIELD[;]d); sfx(~_drain~); sfx(~_shield~); givedice(d);,Steel Skin,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Blood Blessing_downgraded,Convert [heart]<d6> health|into [shield]<d6> shield,1,pierceattackself(d); inflictself(SHIELD[;]d); sfx(~_drain~); sfx(~_shield~);,Steel Skin,MAX5,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Indicetructable,Gain [heart]<double> max health|Permanently lose 1 dice,1,if(simulation){bonus(2000);}else{self.maxhp+=d*2; self.hp+=d*2; self.dice-=1; if(self.dice < 0){self.dice = 0;}; if(self.dice == 0){ self.textparticle(~Nice job~); }; sfx(~_drain~); sfx(~magic_gaindice~);};,Mutagen,MAX5,,RED,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Indicetructable_upgraded,Gain [heart]<double> max health|Permanently lose 1 dice,1,if(simulation){bonus(2000);}else{self.maxhp+=d*2; self.hp+=d*2; self.dice-=1; if(self.dice < 0){self.dice = 0;}; if(self.dice == 0){ self.textparticle(~Nice job~); }; sfx(~_drain~); sfx(~magic_gaindice~);};,Mutagen,NORMAL,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Indicetructable_downgraded,Gain [heart]<d6> max health|Permanently lose 1 dice,1,if(simulation){bonus(2000);}else{self.maxhp+=d; self.hp+=d; self.dice-=1; if(self.dice < 0){self.dice = 0;}; if(self.dice == 0){ self.textparticle(~Nice job~); }; sfx(~_drain~); sfx(~magic_gaindice~);};,Mutagen,MAX5,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Come On And Slam,Deal [sword]<d6> damage[;] on 6[;]|reroll your remaining dice,2,attack(d); sfxdamage(target[;]d); if(d == 6){ sfx(~_magic~); var c = 0; for (mydice in self.dicepool){ if (mydice.available() && !mydice.intween()){ mydice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()[;] c * 0.05); c++; }; }; };,Clone Device,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ sfx(~_magic~); var c = 0; for (mydice in self.dicepool){ if (mydice.available() && !mydice.intween()){ mydice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()[;] c * 0.05); c++; }; }; };
Come On And Slam_upgraded,Deal [sword]<d6> damage[;] on even[;]|reroll your remaining dice,2,attack(d); sfxdamage(target[;]d); if(d % 2 == 0){ sfx(~_magic~); var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()[;] c * 0.05); c++; }; }; };,Clone Device,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,if(d %2 == 0){ sfx(~_magic~); var c = 0; for (mydice in self.dicepool){ if (mydice.available() && !mydice.intween()){ mydice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;] self.screenposition()[;] c * 0.05); c++; }; }; };
Come On And Slam_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Clone Device,NORMAL,,BRIGHTCYAN,,,,none,0,NO,NO,,,,,,,,,,,,,
Saxophone,Inflict [weaken]1 weaken|Roll a 5,1,inflict(WEAKEN); sfx(~_weaken~); givedice(5);,Theremin,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice(5);
Saxophone_upgraded,[weaken]1 weaken[;] roll a 5|,1,inflict(WEAKEN); sfx(~_weaken~); givedice(5);,Theremin,COUNTDOWN,6,ORANGE,,,,,2,NO,NO,,,,,,,,,,,,,givedice(5);
Saxophone_downgraded,Roll a 5,1,givedice(5);,Theremin,COUNTDOWN,6,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Nitro Bump,Roll a [fire]burning 6,1,givedice(6); if(!simulation){ var anim = ~fire~; if(runscript(~morefluff/isalt~|[~fire~])){anim = ~alternate_fire~;}; self.dicepool[self.dicepool.length-1].animate(anim[;]0.2);};,Magic Six,NORMAL,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Nitro Bump_upgraded,Roll a [fire]burning 6|,1,givedice(6); if(!simulation){ var anim = ~fire~; if(runscript(~morefluff/isalt~|[~fire~])){anim = ~alternate_fire~;}; self.dicepool[self.dicepool.length-1].animate(anim[;]0.2);};,Magic Six,NORMAL,,RED,,,,,2,YES,NO,,,,,,,,,,,,,
Nitro Bump_downgraded,Roll a [fire]burning dice,1,givedice(); if(!simulation){ var anim = ~fire~; if(runscript(~morefluff/isalt~|[~fire~])){anim = ~alternate_fire~;}; self.dicepool[self.dicepool.length-1].animate(anim[;]0.2);};,Magic Six,NORMAL,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Electrophoresis,Duplicate both dice|(Receive [shock]1 each turn),1,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; givedice([x[;]x[;]y[;]y]);,Clone Device,MIN4|MIN4,,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,inflictself(SHOCK);,sfx(~_shock~); e.animate(~flashandshake~);,,,,,,,
Electrophoresis_upgraded,Duplicate both dice|(Receive [shock]1 each turn),1,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; givedice([x[;]x[;]y[;]y]);,Clone Device,NORMAL|NORMAL,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,inflictself(SHOCK);,sfx(~_shock~); e.animate(~flashandshake~);,,,,,,,
Electrophoresis_downgraded,Duplicate both dice|(Receive [shock]1 each turn),1,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; givedice([x[;]x[;]y[;]y]);,Clone Device,MIN5|MIN5,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,inflictself(SHOCK);,sfx(~_shock~); e.animate(~flashandshake~);,,,,,,,
Glueplicate,[lock] Lock your highest dice[;]|get 3 copies of it next turn,1,var maxval = 0; for(mydice in self.dicepool){ if(mydice.available()){ if(mydice.basevalue > maxval){ maxval = mydice.basevalue; }; }; }; if(maxval == 0){ self.textparticle(~No effect!~); }else{ inflictself(LOCK); var flag = true; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == maxval && flag){ flag = false; mydice.animate(~lock~); }; }; inflictself(~stash~+maxval[;]3); inflictself(~lightstatus~[;]3); sfx(~magic_gaindice~); };,Padlock,COUNTDOWN,6,PURPLE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Glueplicate_upgraded,[lock] Lock your highest dice[;]|get 4 copies of it next turn,1,var maxval = 0; for(mydice in self.dicepool){ if(mydice.available()){ if(mydice.basevalue > maxval){ maxval = mydice.basevalue; }; }; }; if(maxval == 0){ self.textparticle(~No effect!~); }else{ inflictself(LOCK); var flag = true; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == maxval && flag){ flag = false; mydice.animate(~lock~); }; }; inflictself(~stash~+maxval[;]4); inflictself(~lightstatus~[;]4); sfx(~magic_gaindice~); };,Padlock,COUNTDOWN,6,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Glueplicate_downgraded,[lock] Lock your highest dice[;]|get 2 copies of it next turn,1,var maxval = 0; for(mydice in self.dicepool){ if(mydice.available()){ if(mydice.basevalue > maxval){ maxval = mydice.basevalue; }; }; }; if(maxval == 0){ self.textparticle(~No effect!~); }else{ inflictself(LOCK); var flag = true; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == maxval && flag){ flag = false; mydice.animate(~lock~); }; }; inflictself(~stash~+maxval[;]2); inflictself(~lightstatus~[;]2); sfx(~magic_gaindice~); };,Padlock,COUNTDOWN,6,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Dash Slash,Deal [sword]<d6> damage[;]|then end your turn,1,attack(d); sfxdamage(target[;]d);,Time Stop,MAX5|FREE2,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,if(getstatusself(FURY) == 0){self.endturnnow();};,,donothing();,
Dash Slash_upgraded,Deal [sword]<d6> damage[;]|then end your turn,1,attack(d); sfxdamage(target[;]d);,Time Stop,MAX5|FREE4,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,if(getstatusself(FURY) == 0){self.endturnnow();};,,donothing();,
Dash Slash_downgraded,Deal [sword]<d6> damage[;]|then end your turn,1,attack(d); sfxdamage(target[;]d);,Time Stop,MAX5,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,if(getstatusself(FURY) == 0){self.endturnnow();};,,donothing();,
Diamond Wall,Gain [shield]<double> shield|Enemy gets +1 dice this fight,1,inflictself(SHIELD[;]d*2); sfx(~_shield~); target.extradice+=1; sfx(~magic_gaindice~);,Infinity Mirror,MAX4,,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Diamond Wall_upgraded,Gain [shield]<double> shield|Enemy gets +1 dice this fight,1,inflictself(SHIELD[;]d*2); sfx(~_shield~); target.extradice+=1; sfx(~magic_gaindice~);,Infinity Mirror,MAX5,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Diamond Wall_downgraded,Gain [shield]<double> shield|Enemy gets +1 dice this fight,1,inflictself(SHIELD[;]d*2); sfx(~_shield~); target.extradice+=1; sfx(~magic_gaindice~);,Infinity Mirror,MAX2,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Sacridice,Lose [heart]<d6> health|Gain +1 dice this fight,1,pierceattackself(d); self.extradice+=1; sfx(~_drain~); sfx(~magic_gaindice~);,Infinity Mirror,MIN3,,RED,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Sacridice_upgraded,Lose [heart]<d6> health|Gain +1 dice this fight,1,pierceattackself(d); self.extradice+=1; sfx(~_drain~); sfx(~magic_gaindice~);,Infinity Mirror,MIN2,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Sacridice_downgraded,Lose [heart]<d6> health|Gain +1 dice this fight,1,pierceattackself(d); self.extradice+=1; sfx(~_drain~); sfx(~magic_gaindice~);,Infinity Mirror,MIN5,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Recoil Recover,Deal [sword]<d6> damage[;] heal [heal]|hp equal to the difference,2,attack(d); sfxdamage(target[;]d); var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a > b){ var t = a; a = b; b = t; }; attackself(a-b); sfx(~_heal~);,Plasma Gun,MAX4|MAX4,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a > b){ var t = a; a = b; b = t; }; attackself(a-b); sfx(~_heal~);
Recoil Recover_upgraded,Deal [sword]<d6> damage[;] heal [heal]|hp equal to the difference,2,attack(d); sfxdamage(target[;]d); var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a > b){ var t = a; a = b; b = t; }; attackself(a-b); sfx(~_heal~);,Plasma Gun,MAX5|MAX5,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a > b){ var t = a; a = b; b = t; }; attackself(a-b); sfx(~_heal~);
Recoil Recover_downgraded,Deal [sword]<d6> damage[;] heal [heal]|hp equal to the difference,2,attack(d); sfxdamage(target[;]d); var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a > b){ var t = a; a = b; b = t; }; attackself(a-b); sfx(~_heal~);,Plasma Gun,MAX3|MAX3,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a > b){ var t = a; a = b; b = t; }; attackself(a-b); sfx(~_heal~);
Diffraction Spike,Deal [sword]<d6> damage[;] lose [heart]|hp equal to the difference,1,attack(d); sfxdamage(target[;]d); var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a > b){ var t = a; a = b; b = t; }; pierceattackself(b-a); sfx(~_drain~);,Bubble Gun,MAX5|MAX5,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Diffraction Spike_upgraded,Deal [sword]<d6> damage[;] lose [heart]|hp equal to the difference,1,attack(d); sfxdamage(target[;]d); var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a > b){ var t = a; a = b; b = t; }; pierceattackself(b-a); sfx(~_drain~);,Bubble Gun,NORMAL|NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Diffraction Spike_downgraded,Deal [sword]<d6> damage[;] lose [heart]|hp equal to the difference,1,attack(d); sfxdamage(target[;]d); var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(a > b){ var t = a; a = b; b = t; }; pierceattackself(b-a); sfx(~_drain~);,Bubble Gun,MAX3|MAX3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Arbitrage,Restore [heal]2 health|Return the dice,1,attackself(-2); sfx(~_heal~); givedice(d);,Revitalize,MIN4,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Arbitrage_upgraded,Restore [heal]2 health|Return the dice,1,attackself(-2); sfx(~_heal~); givedice(d);,Revitalize,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Arbitrage_downgraded,Restore [heal]2 health,1,attackself(-2); sfx(~_heal~);,Revitalize,MIN4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Rift Stabilizer,Get 2 copies of|a different dice,1,var possible = [1[;]2[;]3[;]4[;]5[;]6]; for(ad in actualdice){ possible.remove(ad.basevalue); }; var r = rand(possible); givedice([r[;]r]);,Replicate,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Rift Stabilizer_upgraded,Get 3 copies of|a different dice,1,var possible = [1[;]2[;]3[;]4[;]5[;]6]; for(ad in actualdice){ possible.remove(ad.basevalue); }; var r = rand(possible); givedice([r[;]r[;]r]);,Replicate,NORMAL|NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Rift Stabilizer_downgraded,Roll a new dice,1,var possible = [1[;]2[;]3[;]4[;]5[;]6]; for(ad in actualdice){ possible.remove(ad.basevalue); }; var r = rand(possible); givedice([r]);,Replicate,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Fortnight,Inflict [weaken]2 weaken,1,inflict(WEAKEN[;]2); sfx(~_weaken~);,Mumble,COUNTDOWN,8,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Fortnight_upgraded,Inflict [weaken]2 weaken|,1,inflict(WEAKEN[;]2); sfx(~_weaken~);,Mumble,COUNTDOWN,8,ORANGE,,,,,2,NO,NO,,,,,,,,,,,,,
Fortnight_downgraded,Inflict [weaken]1 weaken,1,inflict(WEAKEN); sfx(~_weaken~);,Mumble,COUNTDOWN,8,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Push Knife,[sword]2[;] give a random dice +1|,1,if(simulation){bonus(-100000);}; attack(2); sfxdamage(target[;]2); var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };,Megabump,MIN3,,RED,change_power,change_power,,,-1,NO,NO,,1,,,,,,,,,,,var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };
Push Knife_upgraded,[sword]3[;] give a random dice +1|,1,if(simulation){bonus(-100000);}; attack(3); sfxdamage(target[;]3); var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };,Megabump,MIN3,,RED,,,,,-1,NO,NO,,,,,,,,,,,,,var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };
Push Knife_downgraded,Deal [sword]2 damage|,1,attack(2); sfxdamage(target[;]2);,Megabump,MIN3,,RED,,,,none,-1,NO,NO,,,,,,,,,,,,,
Glamour,Roll 2 extra dice each turn[;]|but your 6s disappear,1,for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == 6){ mydice.animate(~disappear~); }; };,Magic Six,,,YELLOW,change_power,change_power,,none,-1,NO,NO,excludefromrandomlists|hidereuseable,,self.extradice+=2;,,,for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == 6){ mydice.animate(~disappear~); }; }; e.doequipmentaction(self[;]target[;]0[;][][;]-0.2[;]true);,for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == 6){ mydice.animate(~disappear~[;]0.5); }; };,,,,,,
Glamour_upgraded,Roll 3 extra dice each turn[;]|but your 6s disappear,1,for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == 6){ mydice.animate(~disappear~); }; };,Magic Six,,,YELLOW,,,,none,-1,NO,NO,excludefromrandomlists|hidereuseable,,self.extradice+=3;,,,for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == 6){ mydice.animate(~disappear~); }; }; e.doequipmentaction(self[;]target[;]0[;][][;]-0.2[;]true);,for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == 6){ mydice.animate(~disappear~[;]0.5); }; };,,,,,,
Glamour_downgraded,Roll 2 extra dice each turn[;]|but your 5s and 6s disappear,1,for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue >= 5){ mydice.animate(~disappear~); }; };,Magic Six,,,YELLOW,,,,none,-1,NO,NO,excludefromrandomlists|hidereuseable,,self.extradice+=2;,,,for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue>=5){ mydice.animate(~disappear~); }; }; e.doequipmentaction(self[;]target[;]0[;][][;]-0.2[;]true);,for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue >= 5){ mydice.animate(~disappear~[;]0.5); }; };,,,,,,
Glitter,Curse the enemy[;] twice|if they're already cursed,2,if(getstatus(CURSE) > 0){ inflict(CURSE); sfx(~_curse~[;]~~[;]0.2); }; inflict(CURSE); sfx(~_curse~);,Megacurse,COUNTDOWN,8,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Glitter_upgraded,Curse the enemy[;] 10 times|if they're already cursed,2,if(getstatus(CURSE) > 0){ inflict(CURSE[;]9); sfx(~_curse~[;]~~[;]0.2); }; inflict(CURSE); sfx(~_curse~);,Megacurse,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Glitter_downgraded,Curse the enemy,2,inflict(CURSE); sfx(~_curse~);,Megacurse,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Popcount,Deal [sword]3 damage for|each other <d6> you have,1,var damage = 3; var amount = 0; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == d){ amount+=1; }; }; attack(amount*damage); sfxdamage(target[;]amount*damage);,Mechanical Kneecap,NORMAL,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Popcount_upgraded,Deal [sword]4 damage for|each other <d6> you have,1,var damage = 4; var amount = 0; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == d){ amount+=1; }; }; attack(amount*damage); sfxdamage(target[;]amount*damage);,Mechanical Kneecap,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Popcount_downgraded,Deal [sword]2 damage for|each other <d6> you have,1,var damage = 2; var amount = 0; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == d){ amount+=1; }; }; attack(amount*damage); sfxdamage(target[;]amount*damage);,Mechanical Kneecap,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Evocation,Get a copy of a dice you rolled|at the start of your turn,1,var poss = []; for(x in 1...7){ if(self.getvar(~rolled~+x) == 1){ poss.push(x); }; }; givedice(rand(poss));,Magic Dice,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,for(x in 1...7){ self.setvar(~rolled~+x[;]0); }; for(mydice in self.dicepool){ self.setvar(~rolled~+mydice.basevalue[;]1); };,,,,,,,
Evocation_upgraded,Get a copy of a dice you rolled|at the start of your turn|,1,var poss = []; for(x in 1...7){ if(self.getvar(~rolled~+x) == 1){ poss.push(x); }; }; givedice(rand(poss));,Magic Dice,NORMAL,,GREEN,,,,,2,YES,NO,excludefromrandomlists,,,,,for(x in 1...7){ self.setvar(~rolled~+x[;]0); }; for(mydice in self.dicepool){ self.setvar(~rolled~+mydice.basevalue[;]1); };,,,,,,,
Evocation_downgraded,Get a copy of a dice you rolled|at the start of your turn,1,var poss = []; for(x in 1...7){ if(self.getvar(~rolled~+x) == 1){ poss.push(x); }; }; givedice(rand(poss));,Magic Dice,MIN4,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,for(x in 1...7){ self.setvar(~rolled~+x[;]0); }; for(mydice in self.dicepool){ self.setvar(~rolled~+mydice.basevalue[;]1); };,,,,,,,
Revoke,If you didn't roll a <d6> at the|start of your turn[;] do [sword]<double>,1,if(self.getvar(~rolled~+d) == 0){ attack(d*2); sfxdamage(target[;]d*2); };,Magic Dice,MAX5,,RED,change_power,change_power,,none,0,NO,NO,excludefromrandomlists,,,,,for(x in 1...7){ self.setvar(~rolled~+x[;]0); }; for(mydice in self.dicepool){ self.setvar(~rolled~+mydice.basevalue[;]1); };,,,,,,,
Revoke_upgraded,If you didn't roll a <d6> at the|start of your turn[;] do [sword]<double>,1,if(self.getvar(~rolled~+d) == 0){ attack(d*2); sfxdamage(target[;]d*2); };,Magic Dice,NORMAL,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,for(x in 1...7){ self.setvar(~rolled~+x[;]0); }; for(mydice in self.dicepool){ self.setvar(~rolled~+mydice.basevalue[;]1); };,,,,,,,
Revoke_downgraded,If you didn't roll a <d6> at the|start of your turn[;] do [sword]<double>,1,if(self.getvar(~rolled~+d) == 0){ attack(d*2); sfxdamage(target[;]d*2); };,Magic Dice,MAX3,,RED,,,,none,0,NO,NO,excludefromrandomlists,,,,,for(x in 1...7){ self.setvar(~rolled~+x[;]0); }; for(mydice in self.dicepool){ self.setvar(~rolled~+mydice.basevalue[;]1); };,,,,,,,
Pandemonium,Do [sword]<d6> damage + [curse]1 curse,2,attack(d); sfxdamage(target[;]d); inflict(CURSE); sfx(~_curse~);,Ballerina,REQUIRE2|REQUIRE2|REQUIRE2|REQUIRE2,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Pandemonium_upgraded,Do [sword]<d6> damage + [curse]1 curse,2,attack(d); sfxdamage(target[;]d); inflict(CURSE); sfx(~_curse~);,Ballerina,MAX2|MAX2|MAX2|MAX2|,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Pandemonium_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Ballerina,REQUIRE2|REQUIRE2|REQUIRE2|REQUIRE2,,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Explosive Shield,Gain [shield]<double> shield[;] but take|[sword]<double> damage in 2 turns,1,inflictself(SHIELD[;]d*2); sfx(~_shield~); jinx(~Backfire~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]self[;]self[;]2[;]d*2);,Boom!,MAX5,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Explosive Shield_upgraded,Gain [shield]<double> shield[;] but take|[sword]<double> damage in 3 turns,1,inflictself(SHIELD[;]d*2); sfx(~_shield~); jinx(~Backfire~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]self[;]self[;]3[;]d*2);,Boom!,MAX5,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Explosive Shield_downgraded,Gain [shield]<double> shield[;] but take|[sword]<double> damage in 2 turns,1,inflictself(SHIELD[;]d*2); sfx(~_shield~); jinx(~Backfire~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]self[;]self[;]2[;]d*2);,Boom!,MAX3,,RED,,,,none,0,YES,NO,,,,,,,,,,,,,
Diabolo,Burn [fire]1 dice[;] deal [sword]<d6>|damage on 3 or less,1,if(d <= 3){ attack(d); sfxdamage(target[;]d); }; inflict(FIRE); sfx(~_fire~);,Ember,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Diabolo_upgraded,Burn [fire]1 dice[;] deal [sword]<d6>|damage on 4 or less,1,if(d <= 4){ attack(d); sfxdamage(target[;]d); }; inflict(FIRE); sfx(~_fire~);,Ember,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Diabolo_downgraded,Burn [fire]1 dice,1,inflict(FIRE); sfx(~_fire~);,Ember,NORMAL,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Fan Dance,Inflict [ice]1 freeze[;] deal [sword]<d6>|damage on 3 or less,1,if(d <= 3){ attack(d); sfxdamage(target[;]d); }; inflict(ICE); sfx(~_ice~);,Refrigerator,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Fan Dance_upgraded,Inflict [ice]1 freeze[;] deal [sword]<d6>|damage on 4 or less,1,if(d <= 4){ attack(d); sfxdamage(target[;]d); }; inflict(ICE); sfx(~_ice~);,Refrigerator,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Fan Dance_downgraded,Inflict [ice]1 freeze,1,inflict(FIRE); sfx(~_fire~);,Refrigerator,NORMAL,,BRIGHTCYAN,,,,none,0,NO,NO,,,,,,,,,,,,,
Jianzi,Inflict a random status|On 6[;] inflict 2 statuses,1,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()); if(d == 6){ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2); };,Stardust,MIN2,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Jianzi_upgraded,Inflict a random status|On 6[;] inflict 3 statuses,1,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()); if(d == 6){ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2); randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.4); };,Stardust,MIN2,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Jianzi_downgraded,Inflict a random status|On 6[;] inflict 2 statuses,1,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()); if(d == 6){ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]~~[;]0.2); };,Stardust,MIN4,,PINK,,,,none,0,NO,NO,,,,,,,,,,,,,
Karambit,[sword]2 dmg[;] add [poison]1 poison|,2,attack(2); sfxdamage(target[;]2); inflict(POISON[;]1); sfx(~_poison~);,Pee Gun,COUNTDOWN,3,PURPLE,change_power,change_power,,,3,NO,NO,,,,,,,,,,,,,
Karambit_upgraded,[sword]2 dmg[;] add [poison]1 poison|,2,attack(2); sfxdamage(target[;]2); inflict(POISON[;]1); sfx(~_poison~);,Pee Gun,COUNTDOWN,3,PURPLE,,,,,4,NO,NO,,,,,,,,,,,,,
Karambit_downgraded,[sword]2 dmg[;] add [poison]1 poison|,2,attack(2); sfxdamage(target[;]2); inflict(POISON[;]1); sfx(~_poison~);,Pee Gun,COUNTDOWN,3,PURPLE,,,,,2,NO,NO,,,,,,,,,,,,,
Risley,Deal [sword]2 damage[;]|reroll the dice,1,attack(2); sfxdamage(target[;]2); givedice();,Reroll,MIN3,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice();
Risley_upgraded,Deal [sword]4 damage[;]|reroll the dice,1,attack(4); sfxdamage(target[;]4); givedice();,Reroll,MIN3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice();
Risley_downgraded,Deal [sword]1 damage[;]|reroll the dice,1,attack(1); sfxdamage(target[;]1); givedice();,Reroll,MIN3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice();
Spiky Spell,Deal [sword]5 damage|Gain [thorns]2 thorns,1,attack(5); sfxdamage(target[;]5); inflictself(THORNS[;]2); sfx(~_thorns~);,Pinprick,REQUIRE3,,GREEN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,inflictself(THORNS|2); sfx(~_thorns~);
Spiky Spell_upgraded,Deal [sword]6 damage|Gain [thorns]3 thorns,1,attack(6); sfxdamage(target[;]6); inflictself(THORNS[;]3); sfx(~_thorns~);,Pinprick,REQUIRE3,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(THORNS|3); sfx(~_thorns~);
Spiky Spell_downgraded,Deal [sword]5 damage|Gain [thorns]1 thorns,1,attack(5); sfxdamage(target[;]5); inflictself(THORNS[;]1); sfx(~_thorns~);,Pinprick,REQUIRE3,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(THORNS|1); sfx(~_thorns~);
Armour Spell,Deal [sword]5 damage|Gain [reduce]1 reduce,1,attack(5); sfxdamage(target[;]5); inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,REQUIRE1,,ORANGE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,inflictself(REDUCE); sfx(~_shield~);
Armour Spell_upgraded,Deal [sword]5 damage|Gain [reduce]2 reduce,1,attack(5); sfxdamage(target[;]5); inflictself(REDUCE[;]2); sfx(~_shield~);,Pillow Fort,REQUIRE1,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(REDUCE|2); sfx(~_shield~);
Armour Spell_downgraded,Deal [sword]5 damage,1,attack(5); sfxdamage(target[;]5);,Pillow Fort,REQUIRE1,,ORANGE,,,,none,0,NO,NO,,,,,,,,,,,,,if(self.maxhp - self.hp == d){ attackself(self.hp - self.maxhp); sfx(~_heal~); };
Joke Answer,Deal [sword]<d6> damage[;] heal to|full if you're missing [heart]<d6> hp,1,attack(d); sfxdamage(target[;]d); if(self.maxhp - self.hp == d){ attackself(self.hp - self.maxhp); sfx(~_heal~); };,Regenerate,MAX5,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(self.maxhp - self.hp == d){ attackself(self.hp - self.maxhp); sfx(~_heal~); };
Joke Answer_upgraded,Deal [sword]<d6> damage[;] heal to|full if you're missing [heart]<d6> hp,1,attack(d); sfxdamage(target[;]d); if(self.maxhp - self.hp == d){ attackself(self.hp - self.maxhp); sfx(~_heal~); };,Regenerate,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,if(self.maxhp - self.hp == d){ attackself(self.hp - self.maxhp); sfx(~_heal~); };
Joke Answer_downgraded,Deal [sword]<d6> damage[;] heal to|full if you're missing [heart]<d6> hp,1,attack(d); sfxdamage(target[;]d); if(self.maxhp - self.hp == d){ attackself(self.hp - self.maxhp); sfx(~_heal~); };,Regenerate,MAX3,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Spear Of Justfire,[fire]4 damage + [fire]1 burn|,2,attack(4[;]FIRE); sfxdamage(target[;]4); inflict(FIRE); sfx(~_fire~);,Hellfire,REQUIRE6,,RED,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,
Spear Of Justfire_upgraded,[fire]4 damage + [fire]1 burn|,2,attack(4[;]FIRE); sfxdamage(target[;]4); inflict(FIRE); sfx(~_fire~);,Hellfire,MIN5,,RED,,,,,-1,NO,NO,,,,,,,,,,,,,
Spear Of Justfire_downgraded,[fire]2 damage + [fire]1 burn|,2,attack(2[;]FIRE); sfxdamage(target[;]2); inflict(FIRE); sfx(~_fire~);,Hellfire,REQUIRE6,,RED,,,,,-1,NO,NO,,,,,,,,,,,,,
Spear Of Justfreeze,[ice]4 damage + [ice]1 freeze|,2,attack(4[;]ICE); sfxdamage(target[;]4); inflict(ICE); sfx(~_ice~);,Arctic Storm,REQUIRE6,,BRIGHTCYAN,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,
Spear Of Justfreeze_upgraded,[ice]4 damage + [ice]1 freeze|,2,attack(4[;]ICE); sfxdamage(target[;]4); inflict(ICE); sfx(~_ice~);,Arctic Storm,MIN5,,BRIGHTCYAN,,,,,-1,NO,NO,,,,,,,,,,,,,
Spear Of Justfreeze_downgraded,[ice]2 damage + [ice]1 freeze|,2,attack(2[;]ICE); sfxdamage(target[;]2); inflict(ICE); sfx(~_ice~);,Arctic Storm,REQUIRE6,,BRIGHTCYAN,,,,,-1,NO,NO,,,,,,,,,,,,,
Acid Spell,Deal [sword]5 damage|Inflict [poison]1 poison,1,attack(5); sfxdamage(target[;]5); inflict(POISON); sfx(~_poison~);,Goop Gun,REQUIRE4,,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Acid Spell_upgraded,Deal [sword]5 damage|Inflict [poison]2 poison,1,attack(5); sfxdamage(target[;]5); inflict(POISON[;]2); sfx(~_poison~);,Goop Gun,REQUIRE4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Acid Spell_downgraded,Deal [sword]5 damage,1,attack(5); sfxdamage(target[;]5);,Goop Gun,REQUIRE4,,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
War Axe,Deal [sword]<double> damage,2,attack(d*2); sfxdamage(target[;]d*2);,Plasma Gun,ODD,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
War Axe_upgraded,Deal [sword]<double> damage,2,attack(d*2); sfxdamage(target[;]d*2);,Plasma Gun,MAX5,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
War Axe_downgraded,Deal [sword]<double> damage,2,attack(d*2); sfxdamage(target[;]d*2);,Plasma Gun,REQUIRE3,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Swordbroad,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Shuriken,FREE6|REQUIRE2,,RED,change_power,change_power,,none,0,NO,NO,,,,,,,,,,,,,
Swordbroad_upgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Shuriken,FREE6|REQUIRE3,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Swordbroad_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Shuriken,FREE3|REQUIRE2,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Saving Grace,Gain [grace]<d6> Grace,1,inflictself(~grace~[;]d); sfx(~_survive~);,Revitalize,MAX4,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Saving Grace_upgraded,Gain [grace]<d6> Grace,1,inflictself(~grace~[;]d); sfx(~_survive~);,Revitalize,MAX5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Saving Grace_downgraded,Gain [grace]<d6> Grace,1,inflictself(~grace~[;]d); sfx(~_survive~);,Revitalize,MAX2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Graceful Gash,Deal [sword]<d6> damage|On 6[;] gain [grace]3 Grace,2,attack(d); sfxdamage(target[;]d); if(d == 6){ inflictself(~grace~[;]3); sfx(~_survive~); };,Revitalize,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){ inflictself(~grace~[;]3); sfx(~_survive~); };
Graceful Gash_upgraded,Deal [sword]<d6> damage|On even[;] gain [grace]3 Grace,2,attack(d); sfxdamage(target[;]d); if(d % 2 == 0){ inflictself(~grace~[;]3); sfx(~_survive~); };,Revitalize,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,if(d%2 == 0){ inflictself(~grace~[;]3); sfx(~_survive~); };
Graceful Gash_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d); if(d == 6){ inflictself(~grace~[;]3); sfx(~_survive~); };,Revitalize,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Fourth Hour,Add [shield]<d6> shield. If your hp is|below 25[;] add [grace]<d6> Grace too,2,inflictself(SHIELD[;]d); sfx(~_shield~); if(self.hp / self.maxhp < 0.25){ inflictself(~grace~[;]d); sfx(~_survive~[;]~~[;]0.2); };,Revitalize,MAX4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Fourth Hour_upgraded,Add [shield]<d6> shield. If your hp is|below 25[;] add [grace]<d6> Grace too,2,inflictself(SHIELD[;]d); sfx(~_shield~); if(self.hp / self.maxhp < 0.25){ inflictself(~grace~[;]d); sfx(~_survive~[;]~~[;]0.2); };,Revitalize,MAX5,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Fourth Hour_downgraded,Add [shield]<d6> shield. If your hp is|below 25[;] add [grace]<d6> Grace too,2,inflictself(SHIELD[;]d); sfx(~_shield~); if(self.hp / self.maxhp < 0.25){ inflictself(~grace~[;]d); sfx(~_survive~[;]~~[;]0.2); };,Revitalize,MAX2,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Third Eye,Lock [lock]1 dice|Roll a 3,1,inflict(LOCK); sfx(~_lock~); givedice(3);,Padlock,REQUIRE1|REQUIRE1|REQUIRE1,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice(3);
Third Eye_upgraded,Lock [lock]1 dice|Roll a 3,1,inflict(LOCK); sfx(~_lock~); givedice(3);,Padlock,MAX2|MAX2|MAX2,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,givedice(3);
Third Eye_downgraded,Lock [lock]1 dice,1,inflict(LOCK); sfx(~_lock~);,Padlock,REQUIRE1|REQUIRE1|REQUIRE1,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Molten Staff,Deal [sword]6 damage|Gain [shield]2 shield,2,attack(6); sfxdamage(target[;]6); inflictself(SHIELD[;]2); sfx(~_shield~[;]~~[;]0.2);,Lava Drop,COUNTDOWN,8,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD|2); sfx(~_shield~);
Molten Staff_upgraded,Deal [sword]8 damage|Gain [shield]2 shield,2,attack(8); sfxdamage(target[;]8); inflictself(SHIELD[;]2); sfx(~_shield~[;]~~[;]0.2);,Lava Drop,COUNTDOWN,8,RED,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD|2); sfx(~_shield~);
Molten Staff_downgraded,Deal [sword]3 damage|Gain [shield]2 shield,2,attack(3); sfxdamage(target[;]3); inflictself(SHIELD[;]2); sfx(~_shield~[;]~~[;]0.2);,Lava Drop,COUNTDOWN,8,RED,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD|2); sfx(~_shield~);
Grace Spell,Deal [sword]5 damage|Gain [grace]3 Grace,1,attack(5); sfxdamage(target[;]5); inflictself(~grace~[;]3); sfx(~_survive~);,Revitalize,REQUIRE2,,GREEN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,inflictself(~grace~[;]3); sfx(~_survive~);
Grace Spell_upgraded,Deal [sword]5 damage|Gain [grace]5 Grace,1,attack(5); sfxdamage(target[;]5); inflictself(~grace~[;]5); sfx(~_survive~);,Revitalize,REQUIRE2,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~grace~[;]5); sfx(~_survive~);
Grace Spell_downgraded,Deal [sword]5 damage,1,attack(5); sfxdamage(target[;]5); sfx(~_survive~);,Revitalize,REQUIRE2,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Starfall,Deal [sword]<d6> damage[;]|triple if it's turn <d6>,1,if(turn == d){ attack(d*3); sfxdamage(target[;]d*3); sfx(~_magic~); }else{attack(d); sfxdamage(target|d);};,Throwing Knife,MAX5,,PINK,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Starfall_upgraded,Deal [sword]<d6> damage[;]|triple if it's turn <d6>,1,if(turn == d){ attack(d*3); sfxdamage(target[;]d*3); sfx(~_magic~); }else{attack(d); sfxdamage(target|d);};,Throwing Knife,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Starfall_downgraded,Deal [sword]<d6> damage[;]|double if it's turn <d6>,1,if(turn == d){ attack(d*2); sfxdamage(target[;]d*2); sfx(~_magic~); }else{attack(d); sfxdamage(target|d);};,Throwing Knife,MAX5,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Lava Burst,Deal [fire]<double> dmg + [fire]1 burn|Roll 2 fewer dice next turn,1,attack(d*2[;]FIRE); inflict(FIRE); sfxdamage(target[;]d*2); sfx(~_fire~); if(!simulation){self.bonusdicenextturn-=2;};,Ember,MAX5,,RED,change_power,change_power,,,0,NO,NO,,1,,self.bonusdicenextturn = 0;,,,,,,,,,self.bonusdicenextturn-=2;
Lava Burst_upgraded,Deal [fire]<double> dmg + [fire]1 burn|Roll 2 fewer dice next turn,1,attack(d*2[;]FIRE); inflict(FIRE); sfxdamage(target[;]d*2); sfx(~_fire~); if(!simulation){self.bonusdicenextturn-=2;};,Ember,NORMAL,,RED,,,,,0,NO,NO,,,,self.bonusdicenextturn = 0;,,,,,,,,,self.bonusdicenextturn-=2;
Lava Burst_downgraded,Deal [fire]<double> dmg + [fire]1 burn|Roll 2 fewer dice next turn,1,attack(d*2[;]FIRE); inflict(FIRE); sfxdamage(target[;]d*2); sfx(~_fire~); if(!simulation){self.bonusdicenextturn-=2;};,Ember,MAX3,,RED,,,,,0,NO,NO,,,,self.bonusdicenextturn = 0;,,,,,,,,,self.bonusdicenextturn-=2;
Frost Burst,Do [ice]<double> dmg + [ice]1 freeze|Roll 2 fewer dice next turn,1,attack(d*2[;]ICE); inflict(ICE); sfxdamage(target[;]d*2); sfx(~_ice~); if(!simulation){self.bonusdicenextturn-=2;};,Refrigerator,MAX5,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,1,,self.bonusdicenextturn = 0;,,,,,,,,,self.bonusdicenextturn-=2;
Frost Burst_upgraded,Do [ice]<double> dmg + [ice]1 freeze|Roll 2 fewer dice next turn,1,attack(d*2[;]ICE); inflict(ICE); sfxdamage(target[;]d*2); sfx(~_ice~); if(!simulation){self.bonusdicenextturn-=2;};,Refrigerator,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,self.bonusdicenextturn = 0;,,,,,,,,,self.bonusdicenextturn-=2;
Frost Burst_downgraded,Do [ice]<double> dmg + [ice]1 freeze|Roll 2 fewer dice next turn,1,attack(d*2[;]ICE); inflict(ICE); sfxdamage(target[;]d*2); sfx(~_ice~); if(!simulation){self.bonusdicenextturn-=2;};,Refrigerator,MAX3,,BRIGHTCYAN,,,,,0,NO,NO,,,,self.bonusdicenextturn = 0;,,,,,,,,,self.bonusdicenextturn-=2;
Slow Cooker,Deal [sword]1 damage|Roll a 6,1,attack(1); sfxdamage(target[;]1); givedice(6);,Magic Six,COUNTDOWN,6,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,givedice(6);
Slow Cooker_upgraded,Deal [sword]1 damage[;] roll a 6|,1,attack(1); sfxdamage(target[;]1); givedice(6);,Magic Six,COUNTDOWN,6,PURPLE,,,,,2,NO,NO,,,,,,,,,,,,,givedice(6;
Slow Cooker_downgraded,Deal [sword]1 damage|Roll a new dice,1,attack(1); sfxdamage(target[;]1); givedice();,Magic Six,COUNTDOWN,6,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,givedice();
Parasol,Recover [heal]<d6> health|Gain [reduce]1 reduce,2,attackself(-d); inflictself(REDUCE); sfx(~_heal~); sfx(~_shield~);,Revitalize,MAX4,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Parasol_upgraded,Recover [heal]<d6> health|Gain [reduce]1 reduce,2,attackself(-d); inflictself(REDUCE); sfx(~_heal~); sfx(~_shield~);,Revitalize,MAX5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Parasol_downgraded,Recover [heal]<d6> health|Gain [reduce]1 reduce,2,attackself(-d); inflictself(REDUCE); sfx(~_heal~); sfx(~_shield~);,Revitalize,MAX2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Molten Blast,Deal [fire]5 damage[;] gain [shield]|shield equal to damage done,1,var hp = target.hp; attack(5|FIRE); sfxdamage(target[;]5); sfx(~_fire~); inflictself(SHIELD[;]hp - target.hp); sfx(~_shield~[;]~~[;]0.2);,Lava Drop,COUNTDOWN,14,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Molten Blast_upgraded,Deal [fire]7 damage[;] gain [shield]|shield equal to damage done,1,var hp = target.hp; attack(7|FIRE); sfxdamage(target[;]7); sfx(~_fire~); inflictself(SHIELD[;]hp - target.hp); sfx(~_shield~[;]~~[;]0.2);,Lava Drop,COUNTDOWN,14,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Molten Blast_downgraded,Deal [fire]3 damage[;] gain [shield]|shield equal to damage done,1,var hp = target.hp; attack(3|FIRE); sfxdamage(target[;]3); sfx(~_fire~); inflictself(SHIELD[;]hp - target.hp); sfx(~_shield~[;]~~[;]0.2);,Lava Drop,COUNTDOWN,14,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Round of Applause,Curse the enemy[;] but|curse yourself next turn,1,inflict(CURSE); sfx(~_curse~); inflictself(~mf_cursenextturn~);,Megacurse,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,jinx(~Cursed~[;]~curse yourself~[;]~Curse yourself~[;]~inflict(CURSE); sfx(\~_curse\~);~[;]self[;]self[;]1[;]1);
Round of Applause_upgraded,Inflict 2 curse[;] but|curse yourself next turn,1,inflict(CURSE|2); sfx(~_curse~); inflictself(~mf_cursenextturn~);,Megacurse,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,jinx(~Cursed~[;]~curse yourself~[;]~Curse yourself~[;]~inflict(CURSE); sfx(\~_curse\~);~[;]self[;]self[;]1[;]1);
Round of Applause_downgraded,Curse the enemy[;] but|curse yourself next turn,1,inflict(CURSE); sfx(~_curse~); inflictself(~mf_cursenextturn~);,Megacurse,MIN4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,jinx(~Cursed~[;]~curse yourself~[;]~Curse yourself~[;]~inflict(CURSE); sfx(\~_curse\~);~[;]self[;]self[;]1[;]1);
Fruit Salad,Heal [heal]hp equal to your|highest dice[;] then reroll it,2,var mval = 0; var mdice; for(mydice in self.dicepool){ if(mydice.basevalue > mval){ mdice = mydice; mval = mydice.basevalue; }; }; if(mval != 0){ mdice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;]self.screenposition()); attackself(-mval); sfx(~_heal~); };,Coin Clippers,COUNTDOWN,6,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Fruit Salad_upgraded,Heal [heal]hp equal to your|highest dice[;] then reroll it|,2,var mval = 0; var mdice; for(mydice in self.dicepool){ if(mydice.basevalue > mval){ mdice = mydice; mval = mydice.basevalue; }; }; if(mval != 0){ mdice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;]self.screenposition()); attackself(-mval); sfx(~_heal~); };,Coin Clippers,COUNTDOWN,6,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Fruit Salad_downgraded,Heal [heal]hp equal to your|highest dice[;] then remove it,2,var mval = 0; var mdice; for(mydice in self.dicepool){ if(mydice.basevalue > mval){ mdice = mydice; mval = mydice.basevalue; }; }; if(mval != 0){ mdice.removedice(self.screenposition()); attackself(-mval); sfx(~_heal~); };,Coin Clippers,COUNTDOWN,6,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Wildcard,At the start of your turn[;]|reroll your lowest dice,1,sfx(~_thinghappens~);,Random Roll,,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,var mval = 9; var mdice; for(mydice in self.dicepool){ if(mydice.basevalue < mval){ mdice = mydice; mval = mydice.basevalue; }; }; if(mval != 9){ mdice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;]self.screenposition()); sfx(~givedice~); };,,,,,,,
Wildcard_upgraded,At the start of your turn[;]|reroll all your lowest dice,1,sfx(~_thinghappens~);,Random Roll,,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,var mval = 9; var poss = []; for(mydice in self.dicepool){ if(mydice.basevalue < mval){ mval = mydice.basevalue; }; }; for(mydice in self.dicepool){ if(mydice.basevalue == mval){ poss.push(mydice); }; }; if(mval != 9){ var x = 0; for(p in poss){ p.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;]self.screenposition()[;]x); x+=0.05; }; sfx(~givedice~); };,,,,,,,
Wildcard_downgraded,At the start of your turn[;]|reroll a random dice,1,sfx(~_thinghappens~);,Random Roll,,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0 ){ var mdice = rand(poss); mdice.animatereroll(rand([1[;]2[;]3[;]4[;]5[;]6])[;]self.screenposition()); sfx(~_givedice~); };,,,,,,,
Sawmill,Roll two ones|,1,givedice([1[;]1]);,Snake Eyes,REQUIRE3,,GREEN,change_power,change_power,,,-1,YES,NO,,,,,,,,,,,,,
Sawmill_upgraded,Roll two ones|,1,givedice([1[;]1]);,Snake Eyes,MIN3,,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Sawmill_downgraded,Roll a one,1,givedice([1]);,Snake Eyes,REQUIRE3,,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Inflation,Dice value +3[;] but take|excess as damage too,1,givedice(d+3); if(d+3 > 6){ attackself(d+3-6); sfxdamage(target[;]d+3-6); };,Megabump,MIN2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Inflation_upgraded,Dice value +3[;] but take|excess as damage too,1,givedice(d+3); if(d+3 > 6){ attackself(d+3-6); sfxdamage(target[;]d+3-6); };,Megabump,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Inflation_downgraded,Dice value +3[;] but take|excess as damage instead,1,if(d+3 > 6){ givedice(6); attackself(d+3-6); sfxdamage(target[;]d+3-6); }else{ givedice(d+3); };,Megabump,MIN2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Hosepipe,Roll 3 extra dice,1,var v = []; for(x in 0...3){ v.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(v);,Magic Dice,COUNTDOWN,10,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Hosepipe_upgraded,Roll 4 extra dice,1,var v = []; for(x in 0...4){ v.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(v);,Magic Dice,COUNTDOWN,10,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Hosepipe_downgraded,Roll 2 extra dice,1,var v = []; for(x in 0...2){ v.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(v);,Magic Dice,COUNTDOWN,10,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Precious Pendant,Heal [heal]3 health each turn[;]|until the enemy deals damage,1,attackself(-3); sfx(~_heal~);,Regenerate,,,GREEN,change_power,change_power,,,0,NO,NO,excludefromrandomlists|cannotreuse,,self.setvar(~enemyhurt~[;]0);,self.setvar(~enemyhurt~[;]0);,if(self.hp < self.getvar(~lastturnhp~)){ self.setvar(~enemyhurt~[;]1); }; if(self.getvar(~enemyhurt~) == 1){ e.changecolour(~GRAY~); }else{ e.changecolour(~GREEN~); };,if(self.getvar(~enemyhurt~) == 0){ e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); };,,,self.setvar(~lastturnhp~[;]self.hp);,,,,
Precious Pendant_upgraded,Heal [heal]5 health each turn[;]|until the enemy deals damage,1,attackself(-5); sfx(~_heal~);,Regenerate,,,GREEN,,,,,0,NO,NO,excludefromrandomlists|cannotreuse,,self.setvar(~enemyhurt~[;]0);,self.setvar(~enemyhurt~[;]0);,if(self.hp < self.getvar(~lastturnhp~)){ self.setvar(~enemyhurt~[;]1); }; if(self.getvar(~enemyhurt~) == 1){ e.changecolour(~GRAY~); }else{ e.changecolour(~GREEN~); };,if(self.getvar(~enemyhurt~) == 0){ e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); };,,,self.setvar(~lastturnhp~[;]self.hp);,,,,
Precious Pendant_downgraded,Heal [heal]2 health each turn[;]|until the enemy deals damage,1,attackself(-2); sfx(~_heal~);,Regenerate,,,GREEN,,,,,0,NO,NO,excludefromrandomlists|cannotreuse,,self.setvar(~enemyhurt~[;]0);,self.setvar(~enemyhurt~[;]0);,if(self.hp < self.getvar(~lastturnhp~)){ self.setvar(~enemyhurt~[;]1); }; if(self.getvar(~enemyhurt~) == 1){ e.changecolour(~GRAY~); }else{ e.changecolour(~GREEN~); };,if(self.getvar(~enemyhurt~) == 0){ e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); };,,,self.setvar(~lastturnhp~[;]self.hp);,,,,
Lockdown,Lock enemy dice that are|<timesused> or less[;] +1 each use,2,for(x in 1...e.timesused+2){ if(x > 0 && x < 7){ inflict(~counter_~+x); }; }; sfx(~_lock~); if(e.timesused >= 7){ e.timesused = 7; };,Magic Counterspell,COUNTDOWN,15,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Lockdown_upgraded,Lock enemy dice that are|<timesused> or less[;] +1 each use|,2,for(x in 1...e.timesused+2){ if(x > 0 && x < 7){ inflict(~counter_~+x); }; }; sfx(~_lock~); if(e.timesused >= 7){ e.timesused = 7; };,Magic Counterspell,COUNTDOWN,15,PURPLE,,,,,-1,NO,NO,,,,,,,,,,,,,
Lockdown_downgraded,If enemy rolls a <timesused>[;] that|dice is locked[;] +1 each use,2,if(e.timesused < 7){ inflict(~counter_~+(e.timesused+1)); sfx(~_lock~); }; if(e.timesused >= 7){ e.timesused = 7; };,Magic Counterspell,COUNTDOWN,15,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Offering,Deal [sword]<double> damage|(Lose highest dice each turn),2,attack(d*2); sfxdamage(target[;]d*2); sfx(~_magic~);,Plasma Gun,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,var mval = 0; var mdice; for(mydice in self.dicepool){ if(mydice.basevalue > mval){ mdice = mydice; mval = mydice.basevalue; }; }; if(mval != 9){ mdice.animate(~disappear~); e.animate(~flashandshake~); };,,,,,,,
Offering_upgraded,Deal [sword]<double> damage|(Lose highest dice each turn),2,attack(d*2); sfxdamage(target[;]d*2); sfx(~_magic~);,Plasma Gun,NORMAL|FREE1,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,var mval = 0; var mdice; for(mydice in self.dicepool){ if(mydice.basevalue > mval){ mdice = mydice; mval = mydice.basevalue; }; }; if(mval != 9){ mdice.animate(~disappear~); e.animate(~flashandshake~); };,,,,,,,
Offering_downgraded,Deal [sword]<double> damage|(Lose highest dice each turn),2,attack(d*2); sfxdamage(target[;]d*2); sfx(~_magic~);,Plasma Gun,MAX4,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,var mval = 0; var mdice; for(mydice in self.dicepool){ if(mydice.basevalue > mval){ mdice = mydice; mval = mydice.basevalue; }; }; if(mval != 9){ mdice.animate(~disappear~); e.animate(~flashandshake~); };,,,,,,,
Iron Swan,Deal [sword]<d6> damage[;] twice,2,if(simulation){attack(d); attack(d);}else{attack(d); sfxdamage(target|d);};,Plasma Gun,MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(~+d+~); sfxdamage(target|~+d+~);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~ORANGE~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 400 : -400)|0.1);};,,,
Iron Swan_upgraded,Deal [sword]<d6> damage[;] twice,2,if(simulation){attack(d); attack(d);}else{attack(d); sfxdamage(target|d);};,Plasma Gun,MAX5,,ORANGE,,,,,0,NO,NO,,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(~+d+~); sfxdamage(target|~+d+~);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~ORANGE~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 400 : -400)|0.1);};,,,
Iron Swan_downgraded,Deal [sword]<d6> damage[;] twice,2,if(simulation){attack(d); attack(d);}else{attack(d); sfxdamage(target|d);};,Plasma Gun,MAX3,,ORANGE,,,,none,0,NO,NO,,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(~+d+~); sfxdamage(target|~+d+~);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~ORANGE~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 400 : -400)|0.1);};,,,
Flying Venus Trap,Restore [heal]<d6> health|On 1[;] deal [sword]2 damage,2,attackself(-d); sfx(~_heal~); if(d == 1){ attack(2); sfxdamage(target[;]2); };,Revitalize,MAX4,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Flying Venus Trap_upgraded,Restore [heal]<d6> health|On 1[;] deal [sword]2 damage,2,attackself(-d); sfx(~_heal~); if(d == 1){ attack(2); sfxdamage(target[;]2); };,Revitalize,MAX5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Flying Venus Trap_downgraded,Restore [heal]<d6> health|On 1[;] deal [sword]2 damage,2,attackself(-d); sfx(~_heal~); if(d == 1){ attack(2); sfxdamage(target[;]2); };,Revitalize,MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Snakelops,Roll <timesused> one(s)[;] +1 each use,1,var arr = []; for(x in 0...e.timesused+1){ arr.push(1); }; givedice(arr);,Snake Eyes,EVEN,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Snakelops_upgraded,Roll <timesused> one(s)[;] +1 each use,1,var arr = []; for(x in 0...e.timesused+1){ arr.push(1); }; givedice(arr);,Snake Eyes,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Snakelops_downgraded,Roll <timesused> one(s)[;] +1 each use,1,var arr = []; for(x in 0...e.timesused+1){ arr.push(1); }; givedice(arr);,Snake Eyes,REQUIRE2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Bloodclaw,Deal [sword]<d6> damage|(Start of battle: lose [heart]5 hp),2,attack(d); sfxdamage(target[;]d);,Two Handed Knife,NORMAL|FREE3,,RED,change_power,change_power,,none,0,NO,NO,,,,,,if(turn == 1){ pierceattackself(5); sfx(~_drain~); e.animate(~flashandshake~); };,,,,,,,
Bloodclaw_upgraded,Deal [sword]<d6> damage|(Start of battle: lose [heart]5 hp),2,attack(d); sfxdamage(target[;]d);,Two Handed Knife,NORMAL|FREE5,,RED,,,,none,0,NO,NO,,,,,,if(turn == 1){ pierceattackself(5); sfx(~_drain~); e.animate(~flashandshake~); };,,,,,,,
Bloodclaw_downgraded,Deal [sword]<d6> damage|(Start of battle: lose [heart]5 hp),2,attack(d); sfxdamage(target[;]d);,Two Handed Knife,MAX4|FREE3,,RED,,,,none,0,NO,NO,,,,,,if(turn == 1){ pierceattackself(5); sfx(~_drain~); e.animate(~flashandshake~); };,,,,,,,
Paw Claw,Deal [sword]<d6> damage|Roll a 5,2,attack(d); sfxdamage(target[;]d); sfx(~_magic~); givedice(5);,Plasma Gun,REQUIRE5|FREE5,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice(5);
Paw Claw_upgraded,Deal [sword]<d6> damage|Roll a 5,2,attack(d); sfxdamage(target[;]d); sfx(~_magic~); givedice(5);,Plasma Gun,MIN5|FREE5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice(5);
Paw Claw_downgraded,Deal [sword]<d6> damage|Roll a 5,2,attack(d); sfxdamage(target[;]d); sfx(~_magic~); givedice(5);,Plasma Gun,REQUIRE5|FREE1,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice(5);
Bottled Dragonbreath,[fire]4 damage + [fire]1 burn|[gray](once per battle),1,attack(4[;]FIRE); sfxdamage(target[;]4); inflict(FIRE); sfx(~_fire~);,Hellfire,NORMAL,,RED,change_power,change_power,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Bottled Dragonbreath_upgraded,[fire]6 damage + [fire]1 burn|[gray](once per battle),1,attack(6[;]FIRE); sfxdamage(target[;]6); inflict(FIRE); sfx(~_fire~);,Hellfire,NORMAL,,RED,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Bottled Dragonbreath_downgraded,[fire]2 damage + [fire]1 burn|[gray](once per battle),1,attack(2[;]FIRE); sfxdamage(target[;]2); inflict(FIRE); sfx(~_fire~);,Hellfire,NORMAL,,RED,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Bottled Frostbreath,[ice]4 damage + [ice]1 freeze|[gray](once per battle),1,attack(4[;]ICE); sfxdamage(target[;]4); inflict(ICE); sfx(~_ice~);,Arctic Storm,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Bottled Frostbreath_upgraded,[ice]6 damage + [ice]1 freeze|[gray](once per battle),1,attack(6[;]ICE); sfxdamage(target[;]6); inflict(ICE); sfx(~_ice~);,Arctic Storm,NORMAL,,BRIGHTCYAN,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Bottled Frostbreath_downgraded,[ice]2 damage + [ice]1 freeze|[gray](once per battle),1,attack(2[;]ICE); sfxdamage(target[;]2); inflict(ICE); sfx(~_ice~);,Arctic Storm,NORMAL,,BRIGHTCYAN,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Fruit Loot,Restore half of your|missing health ([heal]<var:halfmissinghealth>[]),1,attackself(-self.getvar(~halfmissinghealth~)); sfx(~_heal~);,Regenerate,COUNTDOWN,20,GREEN,change_power,change_power,,,0,YES,NO,,,,,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,,,,,,
Fruit Loot_upgraded,Restore 3/4 of your|missing health ([heal]<var:tqmissinghealth>[]),1,attackself(-self.getvar(~tqmissinghealth~)); sfx(~_heal~);,Regenerate,COUNTDOWN,20,GREEN,,,,,0,YES,NO,,,,,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,,,,,,
Fruit Loot_downgraded,Restore 1/4 of your|missing health ([heal]<var:qmissinghealth>[]),1,attackself(-self.getvar(~qmissinghealth~)); sfx(~_heal~);,Regenerate,COUNTDOWN,20,GREEN,,,,,0,YES,NO,,,,,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,self.setvar(~halfmissinghealth~[;](self.maxhp - self.hp)/2); self.setvar(~tqmissinghealth~[;](self.maxhp - self.hp)*3/4); self.setvar(~qmissinghealth~[;](self.maxhp - self.hp)/4);,,,,,,
Fruit Shooter,Restore [heal]<d6> health|,2,attackself(-d); sfx(~_heal~);,Regenerate,REQUIRE3,,GREEN,change_power,change_power,,,3,YES,NO,,,,,,,,,,,,,
Fruit Shooter_upgraded,Restore [heal]<d6> health|,2,attackself(-d); sfx(~_heal~);,Regenerate,REQUIRE3,,GREEN,,,,,6,YES,NO,,,,,,,,,,,,,
Fruit Shooter_downgraded,Restore [heal]<d6> health|,2,attackself(-d); sfx(~_heal~);,Regenerate,REQUIRE3,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Warcry,Inflict [weaken]1 weaken|Deal [weaken]4 damage,1,inflict(WEAKEN); attack(4[;]WEAKEN); sfx(~_weaken~);  sfxdamage(target|4);,Theremin,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Warcry_upgraded,Inflict [weaken]1 weaken|Deal [weaken]6 damage,1,inflict(WEAKEN); attack(6[;]WEAKEN); sfx(~_weaken~); sfxdamage(target|6);,Theremin,COUNTDOWN,6,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Warcry_downgraded,Inflict [weaken]1 weaken|Deal [weaken]2 damage,1,inflict(WEAKEN); attack(2[;]WEAKEN); sfx(~_weaken~); sfxdamage(target|2);,Theremin,COUNTDOWN,6,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Corrosion,After inflicting [poison]3 in 1|turn[;] roll an extra dice,1,givedice();,Magic Dice,,,PURPLE,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,e.setvar(~poisoncount~[;]getstatus(POISON)); e.setvar(~diff~[;]0);,var diff = getstatus(POISON)- e.getvar(~poisoncount~); if(diff > 0){ e.setvar(~diff~[;]e.getvar(~diff~)+diff); }; var c = 0; if(e.getvar(~diff~) >= 3){ e.doequipmentaction(self[;]target[;]1[;][][;]c[;]true); c+=0.2; e.setvar(~diff~[;]e.getvar(~diff~)-3); }; e.setvar(~poisoncount~[;]getstatus(POISON));,,,,,,
Corrosion_upgraded,After inflicting [poison]3 in 1|turn[;] roll an extra dice|,1,givedice();,Magic Dice,,,PURPLE,,,,,2,YES,NO,excludefromrandomlists,,,,,e.setvar(~poisoncount~[;]getstatus(POISON));,var diff = getstatus(POISON)- e.getvar(~poisoncount~); if(diff > 0){ e.setvar(~diff~[;]e.getvar(~diff~)+diff); }; var c = 0; if(e.getvar(~diff~) >= 3){ e.doequipmentaction(self[;]target[;]1[;][][;]c[;]true); c+=0.2; e.setvar(~diff~[;]e.getvar(~diff~)-3); }; e.setvar(~poisoncount~[;]getstatus(POISON));,,,,,,
Corrosion_downgraded,After inflicting [poison]5 in 1|turn[;] roll an extra dice,1,givedice();,Magic Dice,,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,e.setvar(~poisoncount~[;]getstatus(POISON));,var diff = getstatus(POISON)- e.getvar(~poisoncount~); if(diff > 0){ e.setvar(~diff~[;]e.getvar(~diff~)+diff); }; var c = 0; if(e.getvar(~diff~) >= 3){ e.doequipmentaction(self[;]target[;]1[;][][;]c[;]true); c+=0.2; e.setvar(~diff~[;]e.getvar(~diff~)-3); }; e.setvar(~poisoncount~[;]getstatus(POISON));,,,,,,
Juggernaut,Whenever you gain [shield]|shield[;] deal [sword]2 damage|,1,attack(2); sfxdamage(target[;]2); sfx(~_shield~);,Barricade,,,ORANGE,change_power,change_power,,,3,NO,NO,excludefromrandomlists,,,,,e.setvar(~shieldcount~[;]getstatusself(SHIELD));,if(getstatusself(SHIELD) > e.getvar(~shieldcount~) ){ e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); }; e.setvar(~shieldcount~[;]getstatusself(SHIELD));,,,,,,
Juggernaut_upgraded,Whenever you gain [shield]|shield[;] deal [sword]2 damage|,1,attack(2); sfxdamage(target[;]2); sfx(~_shield~);,Barricade,,,ORANGE,,,,,-1,NO,NO,excludefromrandomlists,,,,,e.setvar(~shieldcount~[;]getstatusself(SHIELD));,if(getstatusself(SHIELD) > e.getvar(~shieldcount~) ){ e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); }; e.setvar(~shieldcount~[;]getstatusself(SHIELD));,,,,,,
Juggernaut_downgraded,Whenever you gain [shield]|shield[;] deal [sword]2 damage|,1,attack(2); sfxdamage(target[;]2); sfx(~_shield~);,Barricade,,,ORANGE,,,,,2,NO,NO,excludefromrandomlists,,,,,e.setvar(~shieldcount~[;]getstatusself(SHIELD));,if(getstatusself(SHIELD) > e.getvar(~shieldcount~) ){ e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); }; e.setvar(~shieldcount~[;]getstatusself(SHIELD));,,,,,,
Burst Laser,Deal [sword]5 damage[;] and|[sword]2 damage in [jinx]2 turns,1,attack(5); sfx(~_plasma~); sfxdamage(target[;]5); jinx(~Burst Laser~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); sfx(\~_plasma\~);~|target|self|2|2); ,Plasma Gun,COUNTDOWN,10,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,jinx(~Burst Laser~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); sfx(\~_plasma\~);~|target|self|2|2); 
Burst Laser_upgraded,Deal [sword]6 damage[;] and|[sword]3 damage in [jinx]2 turns,1,attack(6); sfx(~_plasma~); sfxdamage(target[;]6); jinx(~Burst Laser~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); sfx(\~_plasma\~);~|target|self|2|3); ,Plasma Gun,COUNTDOWN,10,RED,,,,,0,NO,NO,,,,,,,,,,,,,jinx(~Burst Laser~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); sfx(\~_plasma\~);~|target|self|2|3); 
Burst Laser_downgraded,Deal [sword]4 damage[;] and|[sword]1 damage in [jinx]2 turns,1,attack(4); sfx(~_plasma~); sfxdamage(target[;]4); jinx(~Burst Laser~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); sfx(\~_plasma\~);~|target|self|2|1); ,Plasma Gun,COUNTDOWN,10,RED,,,,,0,NO,NO,,,,,,,,,,,,,jinx(~Burst Laser~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); sfx(\~_plasma\~);~|target|self|2|1); 
Taunting Sword,Deal [sword]<triple> damage|(Enemy gets Fury each turn),2,attack(d*3); sfxdamage(target[;]d*3);,Fury,MAX4,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,inflict(FURY); sfx(~_fury~); e.animate(~flashandshake~);,,,,,,,
Taunting Sword_upgraded,Deal [sword]<triple> damage|(Enemy gets Fury each turn),2,attack(d*3); sfxdamage(target[;]d*3);,Fury,MAX5,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,inflict(FURY); sfx(~_fury~); e.animate(~flashandshake~);,,,,,,,
Taunting Sword_downgraded,Deal [sword]<double> damage|(Enemy gets Fury each turn),2,attack(d*2); sfxdamage(target[;]d*2);,Fury,MAX4,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,inflict(FURY); sfx(~_fury~); e.animate(~flashandshake~);,,,,,,,
Nice Sword,Deal [sword]9 damage,1,attack(9); sfxdamage(target[;]9);,Bubble Gun,NORMAL|NORMAL,6,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Nice Sword_upgraded,Deal [sword]9 damage|,1,attack(9); sfxdamage(target[;]9);,Bubble Gun,NORMAL|NORMAL,6,PURPLE,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Nice Sword_downgraded,Deal [sword]9 damage,1,attack(9); sfxdamage(target[;]9);,Bubble Gun,MIN2|MIN2,6,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Vine Whip,Deal [sword]<d6> damage|Restore [heal]2 health,2,attack(d); sfxdamage(target[;]d); attackself(-2); sfx(~_heal~);,Regenerate,EVEN,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,attackself(-2); sfx(~_heal~);
Vine Whip_upgraded,Deal [sword]<d6> damage|Restore [heal]2 health,2,attack(d); sfxdamage(target[;]d); attackself(-2); sfx(~_heal~);,Regenerate,EVEN|FREE1,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-2); sfx(~_heal~);
Vine Whip_downgraded,Deal [sword]<d6> damage|Restore [heal]2 health,2,attack(d); sfxdamage(target[;]d); attackself(-2); sfx(~_heal~);,Regenerate,REQUIRE4,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-2); sfx(~_heal~);
Wing Bash,Deal [sword]<d6> damage[;]|return dice if dodged,1,attack(d); sfxdamage(target[;]d);,Quick Thinking,MAX5,,YELLOW,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,givedice(d);
Wing Bash_upgraded,Deal [sword]<d6> damage[;]|return dice if dodged,1,attack(d); sfxdamage(target[;]d);,Quick Thinking,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Wing Bash_downgraded,Deal [sword]<d6> damage[;]|return dice if dodged,1,attack(d); sfxdamage(target[;]d);,Quick Thinking,MAX3,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Quarantine,[sword]1 damage[;] also activates|when you inflict [poison] poison|,1,attack(1); sfxdamage(target[;]1);,Goop Gun,NORMAL,,GRAY,change_power,change_power,,,-1,NO,NO,excludefromrandomlists,,,,,e.setvar(~poisoncount~[;]getstatus(POISON));,if(getstatus(POISON) > e.getvar(~poisoncount~) && e.availablethisturn && e.ready && e.shockedsetting == 0){ e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); }; e.setvar(~poisoncount~[;]getstatus(POISON));,,,,,,
Quarantine_upgraded,[sword]2 damage[;] also activates|when you inflict [poison] poison|,1,attack(2); sfxdamage(target[;]2);,Goop Gun,NORMAL,,GRAY,,,,,-1,NO,NO,excludefromrandomlists,,,,,e.setvar(~poisoncount~[;]getstatus(POISON));,if(getstatus(POISON) > e.getvar(~poisoncount~) && e.availablethisturn && e.ready && e.shockedsetting == 0){ e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); }; e.setvar(~poisoncount~[;]getstatus(POISON));,,,,,,
Quarantine_downgraded,[sword]1 damage[;] also activates|when you inflict [poison] poison|,1,attack(1); sfxdamage(target[;]1);,Goop Gun,MIN4,,GRAY,,,,,-1,NO,NO,excludefromrandomlists,,,,,e.setvar(~poisoncount~[;]getstatus(POISON));,if(getstatus(POISON) > e.getvar(~poisoncount~) && e.availablethisturn && e.ready && e.shockedsetting == 0){ e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); }; e.setvar(~poisoncount~[;]getstatus(POISON));,,,,,,
Intended Gameplay,Increase Jackpot range|by <d6> this turn,2,if(simulation # !self.usecpuinsteadofdice){bonus(-100000);}else{self.roll_range += d; adjustrobotcounter(0);};,Unlimited Limit,MAX3,,YELLOW,change_power,change_power,,,0,YES,NO,robotonly,,,,,,,,,,,,
Intended Gameplay_upgraded,Increase Jackpot range|by <d6> this turn,2,if(simulation # !self.usecpuinsteadofdice){bonus(-100000);}else{self.roll_range += d; adjustrobotcounter(0);};,Unlimited Limit,MAX4,,YELLOW,,,,,0,YES,NO,robotonly,,,,,,,,,,,,
Intended Gameplay_downgraded,Increase Jackpot range|by 1 this turn,2,if(simulation # !self.usecpuinsteadofdice){bonus(-100000);}else{self.roll_range += 1; adjustrobotcounter(0);};,Unlimited Limit,MAX3,,YELLOW,,,,,0,YES,NO,robotonly,,,,,,,,,,,,
Boost Panel,Jackpot range starts at 4|Reduces by 1 with each roll,1,,Accelerate,,,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists|robotonly,,,,e.setvar(~rollcheck~[;] 0); self.roll_range = 4;,,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); if(self.roll_range > 0){ self.roll_range-=1; }; };,,,,,,
Boost Panel_upgraded,Jackpot range starts at 5|Reduces by 1 with each roll,1,,Accelerate,,,YELLOW,,,,,0,YES,NO,excludefromrandomlists|robotonly,,,,e.setvar(~rollcheck~[;] 0); self.roll_range = 5;,,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); if(self.roll_range > 0){ self.roll_range-=1; }; };,,,,,,
Boost Panel_downgraded,Jackpot range starts at 4|Reduces by 2 with each roll,1,,Accelerate,,,YELLOW,,,,,0,YES,NO,excludefromrandomlists|robotonly,,,,e.setvar(~rollcheck~[;] 0); self.roll_range = 4;,,while(e.getvar(~rollcheck~) < self.roll_totaldice){ e.setvar(~rollcheck~[;] e.getvar(~rollcheck~) + 1); e.animate(~flashandshake~); if(self.roll_range > 0){ self.roll_range-=2; }; };,,,,,,
Socket Wrench,Reduce countdowns by <d6>|[gray](Reuseable),1,boostcountdowns(d);,Accelerate,MAX3,,GREEN,change_power,change_power,,,-1,YES,NO,,,,,,,,,,,,,
Socket Wrench_upgraded,Reduce countdowns by <d6>|[gray](Reuseable),1,boostcountdowns(d);,Accelerate,MAX3|FREE1,,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Socket Wrench_downgraded,Reduce countdowns by <d6>|[gray](Reuseable),1,boostcountdowns(d);,Accelerate,MAX2,,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Differing Thorns,Gain [thorns] thorns equal to|the difference between dice,1,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x < y){ var temp = x; x = y; y = temp; }; var diff = x - y; if(diff > 0){ inflictself(THORNS[;]diff); sfx(~_thorns~); };,Pinprick,MAX4|MAX4,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Differing Thorns_upgraded,Gain [thorns] thorns equal to|the difference between dice|,1,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x < y){ var temp = x; x = y; y = temp; }; var diff = x - y; if(diff > 0){ inflictself(THORNS[;]diff); sfx(~_thorns~); };,Pinprick,MAX4|MAX4,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Differing Thorns_downgraded,Gain [thorns] thorns equal to|the difference between dice,1,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x < y){ var temp = x; x = y; y = temp; }; var diff = x - y; if(diff > 0){ inflictself(THORNS[;]diff); sfx(~_thorns~); };,Pinprick,MAX3|MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Cactus Dagger,Do [sword]<d6> damage[;] reuseable|if you have [thorns] thorns,1,attack(d); sfxdamage(target[;]d); if(getstatusself(THORNS) > 0){ sfx(~_thorns~); };,Pinprick,MAX4,,GREEN,change_power,change_power,,,1,NO,NO,hidereuseable,,,,,,,,,if(getstatusself(THORNS) != 0) { e.usesleft += 1; };,,,
Cactus Dagger_upgraded,Do [sword]<d6> damage[;] reuseable|if you have [thorns] thorns,1,attack(d); sfxdamage(target[;]d); if(getstatusself(THORNS) > 0){ sfx(~_thorns~); };,Pinprick,MAX5,,GREEN,,,,,1,NO,NO,hidereuseable,,,,,,,,,if(getstatusself(THORNS) != 0) { e.usesleft += 1; };,,,
Cactus Dagger_downgraded,Do [sword]<d6> damage[;] reuseable|if you have [thorns] thorns,1,attack(d); sfxdamage(target[;]d); if(getstatusself(THORNS) > 0){ sfx(~_thorns~); };,Pinprick,MAX3,,GREEN,,,,,1,NO,NO,hidereuseable,,,,,,,,,if(getstatusself(THORNS) != 0) { e.usesleft += 1; };,,,
Extremely Unwieldy Sword,Deal [sword]<quadruple> damage[;] but|enemy gets [dodge] dodge first,2,attack(d*4); sfxdamage(target[;]d*4);,Unlimited Limit,MAX5,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,inflict(DODGE); sfx(~_dodge~); screenshake();,,,
Extremely Unwieldy Sword_upgraded,Deal [sword]<quadruple> damage[;] but|enemy gets [dodge] dodge first,2,attack(d*4); sfxdamage(target[;]d*4);,Unlimited Limit,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,inflict(DODGE); sfx(~_dodge~); screenshake();,,,
Extremely Unwieldy Sword_downgraded,Deal [sword]<quadruple> damage[;] but|enemy gets [dodge] dodge first,2,attack(d*4); sfxdamage(target[;]d*4);,Unlimited Limit,MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,inflict(DODGE); sfx(~_dodge~); screenshake();,,,
Bottled Thunder,[shock]4 damage + [shock]4 shock|[gray](once per battle),1,attack(4|SHOCK); inflict(SHOCK[;]4); sfx(~_magic~); sfx(~_shock~);,Jackhammer,EVEN,,YELLOW,change_power,change_power,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Bottled Thunder_upgraded,[shock]6 damage + [shock]6 shock|[gray](once per battle),1,attack(6|SHOCK); inflict(SHOCK[;]6); sfx(~_magic~); sfx(~_shock~);,Jackhammer,EVEN,,YELLOW,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Bottled Thunder_downgraded,Inflict [shock]4 shock|[gray](once per battle),1,inflict(SHOCK[;]4); sfx(~_magic~); sfx(~_shock~);,Jackhammer,EVEN,,YELLOW,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Earthquake in a Jar,[weaken]3 weaken + [weaken]3 damage|[gray](once per battle),1,inflict(WEAKEN[;]3); sfx(~_weaken~); attack(3[;]WEAKEN); sfx(~_magic~);,Dial Up Sounds,COUNTDOWN,3,ORANGE,change_power,change_power,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Earthquake in a Jar_upgraded,[weaken]6 weaken + [weaken]3 damage|[gray](once per battle),1,inflict(WEAKEN[;]6); sfx(~_weaken~); attack(3[;]WEAKEN); sfx(~_magic~);,Dial Up Sounds,COUNTDOWN,3,ORANGE,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Earthquake in a Jar_downgraded,Inflict [weaken]3 weaken|[gray](once per battle),1,inflict(WEAKEN[;]3); sfx(~_weaken~); sfx(~_magic~);,Dial Up Sounds,COUNTDOWN,3,ORANGE,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Flash Drive,Get a copy of all your|current dice next turn,1,for(mydice in self.dicepool){ if(mydice.available()){ inflictself(~stash~+mydice.basevalue); inflictself(~lightstatus~); }; }; sfx(~magic_gaindice~); var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total); self.setvar(~doublestashcount~[;]total*2); self.setvar(~triplestashcount~[;]total*3); self.setvar(~quadruplestashcount~[;]total*4);,Magic Lantern,REQUIRE6|REQUIRE6,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Flash Drive_upgraded,Get a copy of all your|current dice next turn,1,for(mydice in self.dicepool){ if(mydice.available()){ inflictself(~stash~+mydice.basevalue); inflictself(~lightstatus~); }; }; sfx(~magic_gaindice~); var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total); self.setvar(~doublestashcount~[;]total*2); self.setvar(~triplestashcount~[;]total*3); self.setvar(~quadruplestashcount~[;]total*4);,Magic Lantern,DOUBLES|DOUBLES,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Flash Drive_downgraded,Get a copy of all your|current dice next turn,1,for(mydice in self.dicepool){ if(mydice.available()){ inflictself(~stash~+mydice.basevalue); inflictself(~lightstatus~); }; }; sfx(~magic_gaindice~); var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total); self.setvar(~doublestashcount~[;]total*2); self.setvar(~triplestashcount~[;]total*3); self.setvar(~quadruplestashcount~[;]total*4);,Magic Lantern,REQUIRE6|REQUIRE6|REQUIRE6,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Sewage Pipe,Add [poison]<timesused> poison[;] +1 each use|,1,inflict(POISON[;]e.timesused+1); sfx(~_poison~);,Goop Gun,COUNTDOWN,8,PURPLE,change_power,change_power,,,2,NO,NO,,,,,,,,,,,,,
Sewage Pipe_upgraded,Add [poison]<timesused> poison[;] +1 each use|,1,inflict(POISON[;]e.timesused+1); sfx(~_poison~);,Goop Gun,COUNTDOWN,8,PURPLE,,,,,3,NO,NO,,,,,,,,,,,,,
Sewage Pipe_downgraded,Add [poison]<timesused> poison[;] +1 each use|,1,inflict(POISON[;]e.timesused+1); sfx(~_poison~);,Goop Gun,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Box of Nails,Whenever you inflict shock[;]|deal [sword]3 dmg per [shock] shock|,1,attack(3); sfxdamage(target[;]3);,Jackhammer,,,YELLOW,change_power,change_power,,,-1,NO,NO,excludefromrandomlists,,,,e.setvar(~shockcount~[;]0);,e.setvar(~shockcount~[;]0);,if(getstatus(SHOCK) > e.getvar(~shockcount~) ){ e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); e.setvar(~shockcount~|e.getvar(~shockcount~)+1);};,,,,,,
Box of Nails_upgraded,Whenever you inflict shock[;]|deal [sword]4 dmg per [shock] shock|,1,attack(4); sfxdamage(target[;]4);,Jackhammer,,,YELLOW,,,,,-1,NO,NO,excludefromrandomlists,,,,e.setvar(~shockcount~[;]0);,e.setvar(~shockcount~[;]0);,if(getstatus(SHOCK) > e.getvar(~shockcount~) ){ e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); e.setvar(~shockcount~|e.getvar(~shockcount~)+1);};,,,,,,
Box of Nails_downgraded,Whenever you inflict shock[;]|deal [sword]2 dmg per [shock] shock|,1,attack(2); sfxdamage(target[;]2);,Jackhammer,,,YELLOW,,,,,-1,NO,NO,excludefromrandomlists,,,,e.setvar(~shockcount~[;]0);,e.setvar(~shockcount~[;]0);,if(getstatus(SHOCK) > e.getvar(~shockcount~) ){ e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); e.setvar(~shockcount~|e.getvar(~shockcount~)+1);};,,,,,,
Aftershock,Whenever you [weaken] weaken the|enemy[;] roll an extra dice|,2,givedice();,Burrower,,,ORANGE,change_power,change_power,,,2,NO,NO,excludefromrandomlists,,,,e.setvar(~weakencount~[;]0);,e.setvar(~weakencount~[;]0);,if(getstatus(WEAKEN) > e.getvar(~weakencount~) ){ e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); }; e.setvar(~weakencount~[;]getstatus(WEAKEN));,,,,,,
Aftershock_upgraded,Whenever you [weaken] weaken the|enemy[;] roll an extra dice|,2,givedice();,Burrower,,,ORANGE,,,,,-1,NO,NO,excludefromrandomlists,,,,e.setvar(~weakencount~[;]0);,e.setvar(~weakencount~[;]0);,if(getstatus(WEAKEN) > e.getvar(~weakencount~) ){ e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); }; e.setvar(~weakencount~[;]getstatus(WEAKEN));,,,,,,
Aftershock_downgraded,Whenever you [weaken] weaken the|enemy[;] roll an extra dice|,2,givedice();,Burrower,,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,e.setvar(~weakencount~[;]0);,e.setvar(~weakencount~[;]0);,if(getstatus(WEAKEN) > e.getvar(~weakencount~) ){ e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); }; e.setvar(~weakencount~[;]getstatus(WEAKEN));,,,,,,
Oil Barrel,When the enemy gets [fire]3+|burn[;] deal [fire]10 damage,1,attack(10[;]FIRE); sfx(~_fire~); sfxdamage(target[;]10);,Blowtorch,,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,if(getstatus(FIRE) >= 3 ){ e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); };,,,,,,
Oil Barrel_upgraded,When the enemy gets [fire]3+|burn[;] deal [fire]14 damage,1,attack(14[;]FIRE); sfx(~_fire~); sfxdamage(target[;]14);,Blowtorch,,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,if(getstatus(FIRE) >= 3 ){ e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); };,,,,,,
Oil Barrel_downgraded,When the enemy gets [fire]3+|burn[;] deal [fire]5 damage,1,attack(5[;]FIRE); sfx(~_fire~); sfxdamage(target[;]5);,Blowtorch,,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,if(getstatus(FIRE) >= 3 ){ e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); };,,,,,,
Nuclear Fridge,When the enemy gets [ice]3+|freeze[;] deal [ice]10 damage,1,attack(10[;]ICE); sfx(~_ice~); sfxdamage(target[;]10);,Refrigerator,,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,if(getstatus(ICE) >= 3 ){ e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); };,,,,,,
Nuclear Fridge_upgraded,When the enemy gets [ice]3+|freeze[;] deal [ice]14 damage,1,attack(14[;]ICE); sfx(~_ice~); sfxdamage(target[;]14);,Refrigerator,,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,if(getstatus(ICE) >= 3 ){ e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); };,,,,,,
Nuclear Fridge_downgraded,When the enemy gets [ice]3+|freeze[;] deal [ice]5 damage,1,attack(5[;]ICE); sfx(~_ice~); sfxdamage(target[;]5);,Refrigerator,,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,if(getstatus(ICE) >= 3 ){ e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); };,,,,,,
Frost Shield,Whenever you [ice] freeze the|enemy[;] gain [shield]2 shield|,1,inflictself(SHIELD[;]2); sfx(~_shield~);,Barricade,,,BRIGHTCYAN,change_power,change_power,,,-1,NO,NO,excludefromrandomlists,,,,e.setvar(~icecount~[;]0);,e.setvar(~icecount~[;]0);,if(getstatus(ICE) > e.getvar(~icecount~) ){ e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); }; e.setvar(~icecount~[;]getstatus(ICE));,,,,,,
Frost Shield_upgraded,Whenever you [ice] freeze the|enemy[;] gain [shield]3 shield|,1,inflictself(SHIELD[;]3); sfx(~_shield~);,Barricade,,,BRIGHTCYAN,,,,,-1,NO,NO,excludefromrandomlists,,,,e.setvar(~icecount~[;]0);,e.setvar(~icecount~[;]0);,if(getstatus(ICE) > e.getvar(~icecount~) ){ e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); }; e.setvar(~icecount~[;]getstatus(ICE));,,,,,,
Frost Shield_downgraded,Whenever you [ice] freeze the|enemy[;] gain [shield]1 shield|,1,inflictself(SHIELD); sfx(~_shield~);,Barricade,,,BRIGHTCYAN,,,,,-1,NO,NO,excludefromrandomlists,,,,e.setvar(~icecount~[;]0);,e.setvar(~icecount~[;]0);,if(getstatus(ICE) > e.getvar(~icecount~) ){ e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); }; e.setvar(~icecount~[;]getstatus(ICE));,,,,,,
Flame Shield,Whenever you [fire] burn the|enemy[;] gain [shield]2 shield|,1,inflictself(SHIELD[;]2); sfx(~_shield~);,Barricade,,,RED,change_power,change_power,,,-1,NO,NO,excludefromrandomlists,,,,e.setvar(~firecount~[;]0);,e.setvar(~firecount~[;]0);,if(getstatus(FIRE) > e.getvar(~firecount~) ){ e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); }; e.setvar(~firecount~[;]getstatus(FIRE));,,,,,,
Flame Shield_upgraded,Whenever you [fire] burn the|enemy[;] gain [shield]3 shield|,1,inflictself(SHIELD[;]3); sfx(~_shield~);,Barricade,,,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,e.setvar(~firecount~[;]0);,e.setvar(~firecount~[;]0);,if(getstatus(FIRE) > e.getvar(~firecount~) ){ e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); }; e.setvar(~firecount~[;]getstatus(FIRE));,,,,,,
Flame Shield_downgraded,Whenever you [fire] burn the|enemy[;] gain [shield]1 shield|,1,inflictself(SHIELD); sfx(~_shield~);,Barricade,,,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,e.setvar(~firecount~[;]0);,e.setvar(~firecount~[;]0);,if(getstatus(FIRE) > e.getvar(~firecount~) ){ e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); }; e.setvar(~firecount~[;]getstatus(FIRE));,,,,,,
Short Staff,Deal [sword]3 damage|Burn [fire]1 dice,1,attack(3); inflict(FIRE); sfxdamage(target[;]3); sfx(~_fire~);,Ember,COUNTDOWN,6,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Short Staff_upgraded,Deal [sword]5 damage|Burn [fire]1 dice,1,attack(5); inflict(FIRE); sfxdamage(target[;]5); sfx(~_fire~);,Ember,COUNTDOWN,6,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Short Staff_downgraded,Deal [sword]2 damage|Burn [fire]1 dice,1,attack(2); inflict(FIRE); sfxdamage(target[;]2); sfx(~_fire~);,Ember,COUNTDOWN,6,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Short Gemstaff,Deal [sword]3 damage|Inflict [ice]1 freeze,1,attack(3); inflict(ICE); sfxdamage(target[;]3); sfx(~_ice~);,Ember,COUNTDOWN,6,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Short Gemstaff_upgraded,Deal [sword]5 damage|Inflict [ice]1 freeze,1,attack(5); inflict(ICE); sfxdamage(target[;]5); sfx(~_ice~);,Ember,COUNTDOWN,6,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Short Gemstaff_downgraded,Deal [sword]2 damage|Inflict [ice]1 freeze,1,attack(2); inflict(ICE); sfxdamage(target[;]2); sfx(~_ice~);,Ember,COUNTDOWN,6,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Blade of September,Deal [sword]<d6> damage. On 21[;]|inflict [weaken]1[;] [shock]1 and [fire]1,2,attack(d); sfxdamage(target[;]d); sfx(~_magic~); if(d == 21){ inflict(WEAKEN); sfx(~_weaken~); inflict(SHOCK); sfx(~_shock~[;]~~[;]0.6); inflict(FIRE); sfx(~_fire~[;]~~[;]0.7); };,JOAT Smash,MIN4|MIN4|MIN4|MIN4,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Blade of September_upgraded,Deal [sword]<d6> damage. On 21[;]|inflict [weaken]1[;] [shock]1 and [fire]1,2,attack(d); sfxdamage(target[;]d); sfx(~_magic~); if(d == 21){ inflict(WEAKEN); sfx(~_weaken~); inflict(SHOCK); sfx(~_shock~[;]~~[;]0.6); inflict(FIRE); sfx(~_fire~[;]~~[;]0.7); };,JOAT Smash,MIN3|MIN3|MIN3|MIN3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Blade of September_downgraded,Deal [sword]<d6> damage. On 21[;]|inflict [weaken]1[;] [shock]1 and [fire]1,2,attack(d); sfxdamage(target[;]d); sfx(~_magic~); if(d == 21){ inflict(WEAKEN); sfx(~_weaken~); inflict(SHOCK); sfx(~_shock~[;]~~[;]0.6); inflict(FIRE); sfx(~_fire~[;]~~[;]0.7); };,JOAT Smash,REQUIRE6|REQUIRE5|REQUIRE4|REQUIRE6,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Solstice Sword,Deal [sword]<d6> damage. On 21[;]|inflict [weaken]1[;] [shock]1 and [ice]1,2,attack(d); sfxdamage(target[;]d); sfx(~_magic~); if(d == 21){ inflict(WEAKEN); sfx(~_weaken~); inflict(SHOCK); sfx(~_shock~[;]~~[;]0.6); inflict(ICE); sfx(~_ice~[;]~~[;]0.7); };,JOAT Smash,MIN4|MIN4|MIN4|MIN4,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Solstice Sword_upgraded,Deal [sword]<d6> damage. On 21[;]|inflict [weaken]1[;] [shock]1 and [ice]1,2,attack(d); sfxdamage(target[;]d); sfx(~_magic~); if(d == 21){ inflict(WEAKEN); sfx(~_weaken~); inflict(SHOCK); sfx(~_shock~[;]~~[;]0.6); inflict(ICE); sfx(~_ice~[;]~~[;]0.7); };,JOAT Smash,MIN3|MIN3|MIN3|MIN3,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Solstice Sword_downgraded,Deal [sword]<d6> damage. On 21[;]|inflict [weaken]1[;] [shock]1 and [ice]1,2,attack(d); sfxdamage(target[;]d); sfx(~_magic~); if(d == 21){ inflict(WEAKEN); sfx(~_weaken~); inflict(SHOCK); sfx(~_shock~[;]~~[;]0.6); inflict(ICE); sfx(~_ice~[;]~~[;]0.7); };,JOAT Smash,REQUIRE6|REQUIRE5|REQUIRE4|REQUIRE6,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Eyepatch,Deal [sword]<d6> damage[;] twice if|this has more than [recycle]1 use,1,attack(d); if(e.getvar(~a~) == 0){ attack(d); sfxdamage(target[;]d*2); sfx(~_magic~[;]~~[;]0.05); }else{ sfxdamage(target[;]d); };,Efficiency,MAX4,,GREEN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,e.setvar(~a~[;]1);,,,,,e.setvar(~a~[;]1);,,,
Eyepatch_upgraded,Deal [sword]<d6> damage[;] twice if|this has more than [recycle]1 use,1,attack(d); if(e.getvar(~a~) == 0){ attack(d); sfxdamage(target[;]d*2); sfx(~_magic~[;]~~[;]0.05); }else{ sfxdamage(target[;]d); };,Efficiency,MAX5,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,e.setvar(~a~[;]1);,,,,,e.setvar(~a~[;]1);,,,
Eyepatch_downgraded,Deal [sword]<d6> damage[;] twice if|this has more than [recycle]1 use,1,attack(d); if(e.getvar(~a~) == 0){ attack(d); sfxdamage(target[;]d*2); sfx(~_magic~[;]~~[;]0.05); }else{ sfxdamage(target[;]d); };,Efficiency,MAX3,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,e.setvar(~a~[;]1);,,,,,e.setvar(~a~[;]1);,,,
Dexterityish Charm,All your equipment|has +1 use this turn,1,for(eq in self.equipment){ if(eq.usesleft == 0){ eq.usesleft = 2; eq.reuseable = 2; eq.animate(~flashandshake~); eq.updatereuseabledescription(); }else if(eq.usesleft != -1){ eq.usesleft+=1; eq.reuseable+=1; eq.animate(~flashandshake~); eq.updatereuseabledescription(); }; eq.reuseable = eq.usesleft; }; sfx(~_thinghappens~);,Efficiency,COUNTDOWN,16,ORANGE,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Dexterityish Charm_upgraded,All your equipment|has +1 use this turn,1,for(eq in self.equipment){ if(eq.usesleft == 0){ eq.usesleft = 3; eq.reuseable =3; eq.animate(~flashandshake~); eq.updatereuseabledescription(); }else if(eq.usesleft != -1){ eq.usesleft+=2; eq.reuseable+=2; eq.animate(~flashandshake~); eq.updatereuseabledescription(); }; eq.reuseable = eq.usesleft; }; sfx(~_thinghappens~);,Efficiency,COUNTDOWN,16,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Dexterityish Charm_downgraded,Next equipment has|+1 use this turn,1,inflictself(REEQUIPNEXT); sfx(~_recycle~);,Efficiency,COUNTDOWN,16,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Portavortex,Lock [lock]2 dice|Enemy gets +1 dice this fight,1,inflict(LOCK[;]2); sfx(~_lock~); target.extradice+=1; sfx(~magic_gaindice~);,Padlock,EVEN,,PINK,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,target.extradice+=1; sfx(~magic_gaindice~);
Portavortex_upgraded,Lock [lock]2 dice|Enemy gets +1 dice this fight,1,inflict(LOCK[;]2); sfx(~_lock~); target.extradice+=1; sfx(~magic_gaindice~);,Padlock,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,target.extradice+=1; sfx(~magic_gaindice~);
Portavortex_downgraded,Lock [lock]2 dice|Enemy gets +2 dice this fight,1,inflict(LOCK[;]2); sfx(~_lock~); target.extradice+=2; sfx(~magic_gaindice~);,Padlock,EVEN,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,target.extradice+=1; sfx(~magic_gaindice~);
Watermelon Trebuchet,Deal [sword]3 damage|,2,attack(3); sfxdamage(target[;]3);,Pea Gun,COUNTDOWN,4,RED,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,
Watermelon Trebuchet_upgraded,Deal [sword]5 damage|,2,attack(5); sfxdamage(target[;]5);,Pea Gun,COUNTDOWN,4,RED,,,,,-1,NO,NO,,,,,,,,,,,,,
Watermelon Trebuchet_downgraded,Deal [sword]2 damage|,2,attack(2); sfxdamage(target[;]2);,Pea Gun,COUNTDOWN,4,RED,,,,,-1,NO,NO,,,,,,,,,,,,,
Dark Matter,Deal [sword]<triple> dmg[;] but enemy|gets <d6> more dice next turn,2,attack(d*3); sfxdamage(target[;]d*3); sfx(~_magic~); for(x in 0...d){ inflict(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflict(~lightstatus~); }; sfx(~magic_gaindice~);,Plasma Gun,MAX5,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,for(x in 0...d){ inflict(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflict(~lightstatus~); }; sfx(~magic_gaindice~);
Dark Matter_upgraded,Deal [sword]<quadruple> dmg[;] but enemy|gets <d6> more dice next turn,2,attack(d*4); sfxdamage(target[;]d*4); sfx(~_magic~); for(x in 0...d){ inflict(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflict(~lightstatus~); }; sfx(~magic_gaindice~);,Plasma Gun,MAX5,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,for(x in 0...d){ inflict(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflict(~lightstatus~); }; sfx(~magic_gaindice~);
Dark Matter_downgraded,Deal [sword]<double> dmg[;] but enemy|gets <d6> more dice next turn,2,attack(d*2); sfxdamage(target[;]d*2); sfx(~_magic~); for(x in 0...d){ inflict(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflict(~lightstatus~); }; sfx(~magic_gaindice~);,Plasma Gun,MAX5,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,for(x in 0...d){ inflict(~stash~+rand([1[;]2[;]3[;]4[;]5[;]6])); inflict(~lightstatus~); }; sfx(~magic_gaindice~);
Dicepenser,At the start of your turn[;]|heal [heal]1 per 6 you roll,1,var total = 0; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == 6){ total+=1; }; }; attackself(-total); sfx(~_heal~);,Revitalize,,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true);,,,,,,,
Dicepenser_upgraded,At the start of your turn[;]|heal [heal]1 per even you roll,1,var total = 0; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue % 2 == 0){ total+=1; }; }; attackself(-total); sfx(~_heal~);,Revitalize,,,GREEN,,,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true);,,,,,,,
Dicepenser_downgraded,At the start of your turn[;]|heal [heal]1 per 6 you roll,1,var total = 0; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == 6){ total+=1; }; }; attackself(-total); sfx(~_heal~);,Revitalize,,,GREEN,,,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true);,,,,,,,
Shrug,Gain [shield]4 shield|Roll a new dice,2,givedice(); inflictself(SHIELD[;]4); sfx(~_shield~);,Barricade,COUNTDOWN,8,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Shrug_upgraded,Gain [shield]6 shield|Roll a new dice,2,givedice(); inflictself(SHIELD[;]6); sfx(~_shield~);,Barricade,COUNTDOWN,8,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Shrug_downgraded,Gain [shield]3 shield|Roll a new dice,2,givedice(); inflictself(SHIELD[;]3); sfx(~_shield~);,Barricade,COUNTDOWN,8,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Captured Flag,Set your lowest dice|equal to your highest dice,1,var min; var max; for(mydice in self.dicepool){ if(mydice.available()){ if(min == null){ min = mydice; max = mydice; }else if(mydice.basevalue > max.basevalue){ max = mydice; }else if(mydice.basevalue < min.basevalue){ min = mydice; }; }; }; if(min != null){ min.animatereroll(max.basevalue[;]self.screenposition()); }; sfx(~useitem~);,Megabump,MIN3,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Captured Flag_upgraded,Set your lowest dice|equal to your highest dice,1,var min; var max; for(mydice in self.dicepool){ if(mydice.available()){ if(min == null){ min = mydice; max = mydice; }else if(mydice.basevalue > max.basevalue){ max = mydice; }else if(mydice.basevalue < min.basevalue){ min = mydice; }; }; }; if(min != null){ min.animatereroll(max.basevalue[;]self.screenposition()); }; sfx(~useitem~);,Megabump,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Captured Flag_downgraded,Set your lowest dice|equal to your highest dice,1,var min; var max; for(mydice in self.dicepool){ if(mydice.available()){ if(min == null){ min = mydice; max = mydice; }else if(mydice.basevalue > max.basevalue){ max = mydice; }else if(mydice.basevalue < min.basevalue){ min = mydice; }; }; }; if(min != null){ min.animatereroll(max.basevalue[;]self.screenposition()); }; sfx(~useitem~);,Megabump,MIN5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Floppy Disk,Reduce CPU counter by 1[;]|return the dice,1,if(!simulation){if(self.usecpuinsteadofdice){adjustrobotcounter(-1); givedice(d);};}else{bonus(-10000);};,Unlimited Limit,MIN5,,YELLOW,change_power,change_power,,,0,YES,NO,robotonly,,,,,,,,,,,,
Floppy Disk_upgraded,Reduce CPU counter by 1[;]|return the dice,1,if(!simulation){if(self.usecpuinsteadofdice){adjustrobotcounter(-1); givedice(d);};}else{bonus(-10000);};,Unlimited Limit,MIN3,,YELLOW,,,,,0,YES,NO,robotonly,,,,,,,,,,,,
Floppy Disk_downgraded,Reduce CPU counter by 1,1,if(!simulation){if(self.usecpuinsteadofdice){adjustrobotcounter(-1);};}else{bonus(-10000);};,Unlimited Limit,MIN5,,YELLOW,,,,,0,YES,NO,robotonly,,,,,,,,,,,,
Regedit,Save the CPU counter[;] then|set it to last saved value (<var:floppycounter>),1,if(!simulation){if(self.usecpuinsteadofdice){var x = self.roll_total; adjustrobotcounter(self.getvar(~floppycounter~)-self.roll_total); self.setvar(~floppycounter~[;]x); sfx(~_magic~);};}else{bonus(-10000);};,Unlimited Limit,EVEN|EVEN,,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Regedit_upgraded,Save the CPU counter[;] then|set it to last saved value (<var:floppycounter>),1,if(!simulation){if(self.usecpuinsteadofdice){var x = self.roll_total; adjustrobotcounter(self.getvar(~floppycounter~)-self.roll_total); self.setvar(~floppycounter~[;]x); sfx(~_magic~);};}else{bonus(-10000);};,Unlimited Limit,EVEN,,YELLOW,,,,,0,YES,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Regedit_downgraded,Save the CPU counter[;] then|set it to last saved value (<var:floppycounter>),1,if(!simulation){if(self.usecpuinsteadofdice){var x = self.roll_total; adjustrobotcounter(self.getvar(~floppycounter~)-self.roll_total); self.setvar(~floppycounter~[;]x); sfx(~_magic~);};}else{bonus(-10000);};,Unlimited Limit,EVEN|EVEN,8,YELLOW,,,,,0,YES,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Spare RAM,Deal [sword]<d6> damage[;] double if|CPU is less than 6,1,if(!simulation && self.usecpuinsteadofdice && self.roll_total < 6){ attack(d*2); sfxdamage(target[;]d*2); sfx(~_plasma~); }else{ attack(d); sfxdamage(target[;]d); };,Pea Gun,MAX5,,PINK,change_power,change_power,,,0,NO,NO,robotonly,,,,,,,,,,,,
Spare RAM_upgraded,Deal [sword]<d6> damage[;] double if|CPU is less than 8,1,if(!simulation && self.usecpuinsteadofdice && self.roll_total < 8){ attack(d*2); sfxdamage(target[;]d*2); sfx(~_plasma~); }else{ attack(d); sfxdamage(target[;]d); };,Pea Gun,MAX5,,PINK,,,,,0,NO,NO,robotonly,,,,,,,,,,,,
Spare RAM_downgraded,Deal [sword]<d6> damage[;] double if|CPU is less than 4,1,if(!simulation && self.usecpuinsteadofdice && self.roll_total < 4){ attack(d*2); sfxdamage(target[;]d*2); sfx(~_plasma~); }else{ attack(d); sfxdamage(target[;]d); };,Pea Gun,MAX5,,PINK,,,,,0,NO,NO,robotonly,,,,,,,,,,,,
Fan the Flames,Burn [fire]1 dice|Reduce countdowns by 2,1,inflict(FIRE); sfx(~_fire~); boostcountdowns(2);,Accelerate,COUNTDOWN,5,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,boostcountdowns(2);
Fan the Flames_upgraded,Burn [fire]2 dice|Reduce countdowns by 2,1,inflict(FIRE|2); sfx(~_fire~); boostcountdowns(2);,Accelerate,COUNTDOWN,5,RED,,,,,0,NO,NO,,,,,,,,,,,,,boostcountdowns(2);
Fan the Flames_downgraded,Reduce countdowns by 2,1,sfx(~_fire~); boostcountdowns(2);,Accelerate,COUNTDOWN,5,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Fan the Frost,Inflict [ice]1 freeze|Reduce countdowns by 2,1,inflict(ICE); sfx(~_ice~); boostcountdowns(2);,Accelerate,COUNTDOWN,5,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,boostcountdowns(2);
Fan the Frost_upgraded,Inflict [ice]2 freeze|Reduce countdowns by 2,1,inflict(ICE|2); sfx(~_ice~); boostcountdowns(2);,Accelerate,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,boostcountdowns(2);
Fan the Frost_downgraded,Reduce countdowns by 2,1,sfx(~_fire~); boostcountdowns(2);,Accelerate,COUNTDOWN,5,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Huge Fan,[shock]3 dmg + [shock]1 shock|Reduce countdowns by 2|,2,attack(3|SHOCK); inflict(SHOCK); sfxdamage(target|2); sfx(~_shock~); boostcountdowns(2);,Accelerate,COUNTDOWN,10,YELLOW,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,boostcountdowns(2);
Huge Fan_upgraded,[shock]5 dmg + [shock]1 shock|Reduce countdowns by 2|,2,attack(5|SHOCK); inflict(SHOCK); sfxdamage(target|2); sfx(~_shock~); boostcountdowns(2);,Accelerate,COUNTDOWN,10,YELLOW,,,,,-1,NO,NO,,,,,,,,,,,,,boostcountdowns(2);
Huge Fan_downgraded,Deal [sword]3 damage|Reduce countdowns by 2|,2,attack(3); sfxdamage(target|3); boostcountdowns(2);,Accelerate,COUNTDOWN,10,YELLOW,,,,,-1,NO,NO,,,,,,,,,,,,,boostcountdowns(2);
Decision Paralysis,Deal [sword]7 damage|(Can't be snapped!),2,attack(7); sfxdamage(target|7); sfx(~_magic~);,Plasma Gun,,,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Decision Paralysis_upgraded,Deal [sword]10 damage|(Can't be snapped!),2,attack(10); sfxdamage(target|10); sfx(~_magic~);,Plasma Gun,,,GRAY,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Decision Paralysis_downgraded,Deal [sword]5 damage|(Can't be snapped!),2,attack(5); sfxdamage(target|5); sfx(~_magic~);,Plasma Gun,,,GRAY,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Begone Thought,Activate any unplayable|cards in your hand,2,sfx(~_thinghappens~);,Plasma Gun,EVEN,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,for(x in [0|1|2|3]){if(Deck.getcard(x) != null){var eq = x.equipment; if((eq.getslots().length == 0 && eq.countdown == 0 ) # eq.availablethisturn == false){if(!eq.availablethisturn){eq.availablethisturn = true; eq.animate(~flashandshake~);}; eq.doequipmentaction(self|target|1-eq.castdirection|0.1|true|[]);};};}; sfx(~_magic~);,,,
Begone Thought_upgraded,Activate any unplayable|cards in your hand,2,sfx(~_thinghappens~);,Plasma Gun,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,for(x in [0|1|2|3]){if(Deck.getcard(x) != null){var eq = x.equipment; if((eq.getslots().length == 0 && eq.countdown == 0 ) # eq.availablethisturn == false){if(!eq.availablethisturn){eq.availablethisturn = true; eq.animate(~flashandshake~);}; eq.doequipmentaction(self|target|1-eq.castdirection|0.1|true|[]);};};}; sfx(~_magic~);,,,
Begone Thought_downgraded,Activate any unplayable|cards in your hand,2,sfx(~_thinghappens~);,Plasma Gun,EVEN|EVEN,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,for(x in [0|1|2|3]){if(Deck.getcard(x) != null){var eq = x.equipment; if((eq.getslots().length == 0 && eq.countdown == 0 ) # eq.availablethisturn == false){if(!eq.availablethisturn){eq.availablethisturn = true; eq.animate(~flashandshake~);}; eq.doequipmentaction(self|target|1-eq.castdirection|0.1|true|[]);};};}; sfx(~_magic~);,,,
Super Duper Sword,Deal [sword]<d6> damage|On 6[;] deal [sword]6 instead,2,if(d == 6){attack(6); sfxdamage(target|6); sfx(~_magic~);}else{attack(d); sfxdamage(target|d);};,Unlimited Limit,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Super Duper Sword_upgraded,Deal [sword]<d6> damage|On even[;] deal [sword]6 instead,2,if(d % 2 == 0){attack(6); sfxdamage(target|6); sfx(~_magic~);}else{attack(d); sfxdamage(target|d);};,Unlimited Limit,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Super Duper Sword_downgraded,Deal [sword]<d6> damage|On 6[;] deal [sword]6 instead,2,if(d == 6){attack(6); sfxdamage(target|6); sfx(~_magic~);}else{attack(d); sfxdamage(target|d);};,Unlimited Limit,MIN4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Broken Beam,Deal [sword]<var:dynamo> damage|(Boosted by [cog] Beam Power),1,var s = getstatusself(~dynamo~); attack(s); sfxdamage(target[;]s); sfx(~_plasma~);,Beam Dream,MAX4,,GRAY,change_power,change_power,,,0,NO,NO,,,self.setvar(~dynamo~[;]0);,self.setvar(~dynamo~[;]0);,,,,,,,,,
Broken Beam_upgraded,Deal [sword]<var:dynamo> damage|(Boosted by [cog] Beam Power),1,var s = getstatusself(~dynamo~); attack(s); sfxdamage(target[;]s); sfx(~_plasma~);,Beam Dream,NORMAL,,GRAY,,,,,0,NO,NO,,,self.setvar(~dynamo~[;]0);,self.setvar(~dynamo~[;]0);,,,,,,,,,
Broken Beam_downgraded,Deal [sword]<var:dynamo> damage|(Boosted by [cog] Beam Power),1,var s = getstatusself(~dynamo~); attack(s); sfxdamage(target[;]s); sfx(~_plasma~);,Beam Dream,MAX3,,GRAY,,,,,0,NO,NO,,,self.setvar(~dynamo~[;]0);,self.setvar(~dynamo~[;]0);,,,,,,,,,
Blade of Null,Deal [sword]<d6> damage|On 5[;] inflict Nothing,1,attack(d); sfxdamage(target|d); if(d == 5){sfx(~_curse~); inflict(~nothing~);};,Unlimited Limit,MAX5,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 5){sfx(~_curse~); inflict(~nothing~);};
Blade of Null_upgraded,Deal [sword]<d6> damage|On 6[;] inflict Nothing,1,attack(d); sfxdamage(target|d); if(d == 6){sfx(~_curse~); inflict(~nothing~);};,Unlimited Limit,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){sfx(~_curse~); inflict(~nothing~);};
Blade of Null_downgraded,Deal [sword]<d6> damage|On 3[;] inflict Nothing,1,attack(d); sfxdamage(target|d); if(d == 3){sfx(~_curse~); inflict(~nothing~);};,Unlimited Limit,MAX3,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 3){sfx(~_curse~); inflict(~nothing~);};
Monocle,Gain [cog]2 Beam Power,1,inflictself(~dynamo~[;]2); self.setvar(~dynamo~[;]getstatusself(~dynamo~)); sfx(~_magic~);,Beam Dream,COUNTDOWN,3,PURPLE,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,self.setvar(~dynamo~[;]0);,,,,,,,,,
Monocle_upgraded,Gain [cog]3 Beam Power,1,inflictself(~dynamo~[;]3); self.setvar(~dynamo~[;]getstatusself(~dynamo~)); sfx(~_magic~);,Beam Dream,COUNTDOWN,3,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,self.setvar(~dynamo~[;]0);,,,,,,,,,
Monocle_downgraded,Gain [cog]1 Beam Power,1,inflictself(~dynamo~[;]1); self.setvar(~dynamo~[;]getstatusself(~dynamo~)); sfx(~_magic~);,Beam Dream,COUNTDOWN,3,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,self.setvar(~dynamo~[;]0);,,,,,,,,,
Bottle in a Bottle,[sword]3 dmg[;] return the dice|[gray](once per battle),1,attack(3); sfxdamage(target|3); givedice(d);,Throwing Knife,NORMAL,,RED,change_power,change_power,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,givedice(d);
Bottle in a Bottle_upgraded,[sword]5 dmg[;] return the dice|[gray](once per battle),1,attack(5); sfxdamage(target|5); givedice(d);,Throwing Knife,NORMAL,,RED,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,givedice(d);
Bottle in a Bottle_downgraded,[sword]2 dmg[;] return the dice|[gray](once per battle),1,attack(2); sfxdamage(target|2); givedice(d);,Throwing Knife,NORMAL,,RED,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,givedice(d);
Regenerating Beam,Recover [heal]<var:dynamo> health|Gain [cog]1 Beam Power,1,var s = getstatusself(~dynamo~); attackself(-s); sfx(~_heal~|~~|0.2); sfx(~_magic~); inflictself(~dynamo~); self.setvar(~dynamo~[;]getstatusself(~dynamo~));,Whelm,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,self.setvar(~dynamo~[;]0);,,,,,,,,,
Regenerating Beam_upgraded,Recover [heal]<var:dynamo> health|Gain [cog]1 Beam Power,1,var s = getstatusself(~dynamo~); attackself(-s); sfx(~_heal~|~~|0.2); sfx(~_magic~); inflictself(~dynamo~); self.setvar(~dynamo~[;]getstatusself(~dynamo~));,Whelm,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,self.setvar(~dynamo~[;]0);,,,,,,,,,
Regenerating Beam_downgraded,Recover [heal]<var:dynamo> health,1,var s = getstatusself(~dynamo~); attackself(-s); sfx(~_heal~|~~|0.2); sfx(~_magic~);,Whelm,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,self.setvar(~dynamo~[;]0);,,,,,,,,,
Beam Bash,[sword]<d6> dmg[;] twice if Beam|Power ([cog]<var:dynamo>[]) is <d6> or more,1,attack(d); if(getstatusself(~dynamo~) >= d){attack(d); sfxdamage(target|d*2); sfx(~_magic~|~~|0.1);}else{sfxdamage(target|d);};,Whelm,MAX4,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Beam Bash_upgraded,[sword]<d6> dmg[;] twice if Beam|Power ([cog]<var:dynamo>[]) is <d6> or more,1,attack(d); if(getstatusself(~dynamo~) >= d){attack(d); sfxdamage(target|d*2); sfx(~_magic~|~~|0.1);}else{sfxdamage(target|d);};,Whelm,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Beam Bash_downgraded,[sword]<d6> dmg[;] twice if Beam|Power ([cog]<var:dynamo>[]) is <d6> or more,1,attack(d); if(getstatusself(~dynamo~) >= d){attack(d); sfxdamage(target|d*2); sfx(~_magic~|~~|0.1);}else{sfxdamage(target|d);};,Whelm,MAX3,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Gemstone,Inflict [ice]1 freeze,1,inflict(ICE); sfx(~_ice~);,Refrigerator,COUNTDOWN,4,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Gemstone_upgraded,Inflict [ice]1 freeze|,1,inflict(ICE); sfx(~_ice~);,Refrigerator,COUNTDOWN,4,BRIGHTCYAN,,,,,2,NO,NO,,,,,,,,,,,,,
Gemstone_downgraded,Inflict [ice]1 freeze|next turn,1,jinx(~Gemstone~[;]~receive [ice]1 freeze~[;]~Receive [ice]1 freeze~[;]~inflict(ICE[;]1); sfx(\~_ice\~);~[;]self[;]target[;]1[;]1); sfx(~_ice~);,Refrigerator,COUNTDOWN,4,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Burning Stick,Burn [fire]1 dice,1,inflict(FIRE); sfx(~_fire~);,Blowtorch,COUNTDOWN,2,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Burning Stick_upgraded,Burn [fire]1 dice|,1,inflict(FIRE); sfx(~_fire~);,Blowtorch,COUNTDOWN,2,RED,,,,,2,NO,NO,,,,,,,,,,,,,
Burning Stick_downgraded,Deal [fire]1 damage,1,attack(1|FIRE); sfx(~_fire~); sfxdamage(target|1);,Blowtorch,COUNTDOWN,2,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Flame Lance,Burn [fire]all dice,1,inflict(FIRE|ALL); sfx(~_fire~);,Heat Ray,COUNTDOWN,9,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Flame Lance_upgraded,Burn [fire]all dice[;] deal [fire]1|damage per dice burned,1,inflict(FIRE|ALL); sfx(~_fire~); var s = target.dice+target.extradice+target.bonusdice; attack(s|FIRE); sfxdamage(target|s);,Heat Ray,COUNTDOWN,9,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Flame Lance_downgraded,Burn [fire]2 dice,1,inflict(FIRE|2); sfx(~_fire~);,Heat Ray,COUNTDOWN,9,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Frost Lance,Freeze [ice]all dice,1,inflict(ICE|ALL); sfx(~_ice~);,Arctic Storm,COUNTDOWN,9,BRIGHTCYAN,change_power,change_power,,ice,0,NO,NO,,,,,,,,,,,,,
Frost Lance_upgraded,Freeze [ice]all dice[;] deal [ice]1|damage per dice frozen,1,inflict(ICE|ALL); sfx(~_ice~); var s = target.dice+target.extradice+target.bonusdice; attack(s|ICE); sfxdamage(target|s);,Arctic Storm,COUNTDOWN,9,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Frost Lance_downgraded,Freeze [ice]2 dice,1,inflict(ICE|2); sfx(~_ice~);,Arctic Storm,COUNTDOWN,9,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Dice Synthesis,Lose [heart]12 hp and max hp|Permanently gain 1 dice,1,if(simulation){bonus(2000);}else{self.hp-=12; self.maxhp-=12; sfx(~_drain~); self.dice+=1; sfx(~magic_gaindice~);};,Mutagen,COUNTDOWN,15,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Dice Synthesis_upgraded,Lose [heart]10 hp and max hp|Permanently gain 1 dice,1,if(simulation){bonus(2000);}else{self.hp-=10; self.maxhp-=10; sfx(~_drain~); self.dice+=1; sfx(~magic_gaindice~);};,Mutagen,COUNTDOWN,15,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Dice Synthesis_downgraded,Lose [heart]15 hp and max hp|Permanently gain 1 dice,1,if(simulation){bonus(2000);}else{self.hp-=15; self.maxhp-=15; sfx(~_drain~); self.dice+=1; sfx(~magic_gaindice~);};,Mutagen,COUNTDOWN,15,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Gluestick,Deal [sword]12 damage|Lock [lock]1 dice,2,attack(12); sfxdamage(target|12); inflict(LOCK); sfx(~_lock~|~~|0.1);,Padlock,COUNTDOWN,24,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Gluestick_upgraded,Deal [sword]15 damage|Lock [lock]1 dice,2,attack(15); sfxdamage(target|15); inflict(LOCK); sfx(~_lock~|~~|0.1);,Padlock,COUNTDOWN,24,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Gluestick_downgraded,Deal [sword]6 damage|Lock [lock]1 dice,2,attack(6); sfxdamage(target|6); inflict(LOCK); sfx(~_lock~|~~|0.1);,Padlock,COUNTDOWN,24,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Little Prick,Gain [thorns]3 thorns[;] but|give the enemy [fury] Fury,1,inflictself(THORNS|3); sfx(~_thorns~); inflict(FURY); sfx(~_fury~|~~|0.2);,Pinprick,COUNTDOWN,8,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,donothing();,
Little Prick_upgraded,Gain [thorns]4 thorns[;] but|give the enemy [fury] Fury,1,inflictself(THORNS|4); sfx(~_thorns~); inflict(FURY); sfx(~_fury~|~~|0.2);,Pinprick,COUNTDOWN,8,GREEN,,,,,0,YES,NO,,,,,,,,,,,,donothing();,
Little Prick_downgraded,Gain [thorns]2 thorns[;] but|give the enemy [fury] Fury,1,inflictself(THORNS|2); sfx(~_thorns~); inflict(FURY); sfx(~_fury~|~~|0.2);,Pinprick,COUNTDOWN,8,GREEN,,,,,0,YES,NO,,,,,,,,,,,,donothing();,
Caduceus,Deal [sword]6 damage|Drain [heart]2 health,2,attack(6); sfxdamage(target|6); drain(2); sfx(~_drain~);,Life Leech,COUNTDOWN,12,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Caduceus_upgraded,Deal [sword]8 damage|Drain [heart]3 health,2,attack(8); sfxdamage(target|8); drain(3); sfx(~_drain~);,Life Leech,COUNTDOWN,12,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Caduceus_downgraded,Deal [sword]3 damage|Drain [heart]2 health,2,attack(3); sfxdamage(target|3); drain(2); sfx(~_drain~);,Life Leech,COUNTDOWN,12,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Catula,Roll 2 sixes,2,givedice([6|6]);,Magic Six,REQUIRE1|REQUIRE1,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Catula_upgraded,Roll 2 sixes|,2,givedice([6|6]);,Magic Six,REQUIRE1|REQUIRE1,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Catula_downgraded,Roll 1 six,2,givedice([6]);,Magic Six,REQUIRE1|REQUIRE1,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
CPU Cup,Recover [heal]<d6> health[;] double|if CPU is <triple> or more,2,if(!simulation && self.usecpuinsteadofdice self.roll_total >= d*3){attackself(-d*2);}else{attackself(-d);}; sfx(~_heal~);,Regenerate,MAX4,,GREEN,change_power,change_power,,,0,YES,NO,robotonly,,,,,,,,,,,,
CPU Cup_upgraded,Recover [heal]<d6> health[;] double|if CPU is <triple> or more,2,if(!simulation && self.usecpuinsteadofdice self.roll_total >= d*3){attackself(-d*2);}else{attackself(-d);}; sfx(~_heal~);,Regenerate,MAX5,,GREEN,,,,,0,YES,NO,robotonly,,,,,,,,,,,,
CPU Cup_downgraded,Recover [heal]<d6> health,2,attackself(-d); sfx(~_heal~);,Regenerate,MAX4,,GREEN,,,,,0,YES,NO,robotonly,,,,,,,,,,,,
Terminal Velocity,Deal [sword]8 damage[;] triple|if it's the first turn,1,if(turn == 1){attack(24); sfxdamage(target|24);}else{attack(8); sfxdamage(target|8);};,Time Stop,COUNTDOWN,18,RED,change_power,change_power,,,0,NO,NO,,,,,if(turn == 1){e.changecolour(~YELLOW~);}else{e.changecolour(~RED~);};,,,,,,,,
Terminal Velocity_upgraded,Deal [sword]8 damage[;] quadruple|if it's the first turn,1,if(turn == 1){attack(32); sfxdamage(target|32);}else{attack(8); sfxdamage(target|8);};,Time Stop,COUNTDOWN,18,RED,,,,,0,NO,NO,,,,,if(turn == 1){e.changecolour(~YELLOW~);}else{e.changecolour(~RED~);};,,,,,,,,
Terminal Velocity_downgraded,Deal [sword]8 damage[;] double|if it's the first turn,1,if(turn == 1){attack(16); sfxdamage(target|16);}else{attack(8); sfxdamage(target|8);};,Time Stop,COUNTDOWN,18,RED,,,,,0,NO,NO,,,,,if(turn == 1){e.changecolour(~YELLOW~);}else{e.changecolour(~RED~);};,,,,,,,,
Drumkit,[sword]5 damage + [weaken]1 weaken|,1,attack(5); sfxdamage(target|5); inflict(WEAKEN); sfx(~_weaken~);,Theremin,COUNTDOWN,10,ORANGE,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,
Drumkit_upgraded,[sword]7 damage + [weaken]1 weaken|,1,attack(7); sfxdamage(target|7); inflict(WEAKEN); sfx(~_weaken~);,Theremin,COUNTDOWN,10,ORANGE,,,,,-1,NO,NO,,,,,,,,,,,,,
Drumkit_downgraded,[sword]3 damage + [weaken]1 weaken|,1,attack(3); sfxdamage(target|3); inflict(WEAKEN); sfx(~_weaken~);,Theremin,COUNTDOWN,10,ORANGE,,,,,-1,NO,NO,,,,,,,,,,,,,
Overcharge,Set all your dice to 6|Roll 1 fewer dice next turn,1,var c = 0; for(mydice in self.dicepool){if(mydice.available()){mydice.animatereroll(6|self.screenposition()|c); c+=0.05;};}; self.bonusdicenextturn-=1; sfx(~magic_gaindice~);,Focus,EVEN,,GREEN,change_power,change_power,,,0,YES,NO,,1,,self.bonusdicenextturn = 0;,,,,,,,,,
Overcharge_upgraded,Set all your dice to 6|Roll 1 fewer dice next turn,1,var c = 0; for(mydice in self.dicepool){if(mydice.available()){mydice.animatereroll(6|self.screenposition()|c); c+=0.05;};}; self.bonusdicenextturn-=1; sfx(~magic_gaindice~);,Focus,NORMAL,,GREEN,,,,,0,YES,NO,,,,self.bonusdicenextturn = 0;,,,,,,,,,
Overcharge_downgraded,Set all your dice to 6|Roll 1 fewer dice next turn,1,var c = 0; for(mydice in self.dicepool){if(mydice.available()){mydice.animatereroll(6|self.screenposition()|c); c+=0.05;};}; self.bonusdicenextturn-=1; sfx(~magic_gaindice~);,Focus,EVEN|EVEN,,GREEN,,,,,0,YES,NO,,,,self.bonusdicenextturn = 0;,,,,,,,,,
Energy Drink,Roll 3 new dice[;] but|roll 1 fewer dice next turn,1,var da = []; for(x in 0...3){da.push(rand([1|2|3|4|5|6]));}; givedice(da); self.bonusdicenextturn-=1; sfx(~magic_gaindice~);,Magic Lantern,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Energy Drink_upgraded,Roll 4 new dice[;] but|roll 1 fewer dice next turn,1,var da = []; for(x in 0...4){da.push(rand([1|2|3|4|5|6]));}; givedice(da); self.bonusdicenextturn-=1; sfx(~magic_gaindice~);,Magic Lantern,COUNTDOWN,6,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Energy Drink_downgraded,Roll 2 new dice[;] but|roll 1 fewer dice next turn,1,var da = []; for(x in 0...2){da.push(rand([1|2|3|4|5|6]));}; givedice(da); self.bonusdicenextturn-=1; sfx(~magic_gaindice~);,Magic Lantern,COUNTDOWN,6,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Snow Cauldron,Inflict [ice]1 freeze[;] get a new|dice with lower value,1,inflict(ICE); sfx(~_ice~); if(actualdice[0].basevalue > 1){ var t = []; var x = 1; while(x < actualdice[0].basevalue){ t.push(x); x+=1; }; givedice(rand(t)); }else{ givedice(1); };,Refrigerator,MIN2,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,if(actualdice[0].basevalue > 1){ var t = []; var x = 1; while(x < actualdice[0].basevalue){ t.push(x); x+=1; }; givedice(rand(t)); }else{ givedice(1); };
Snow Cauldron_upgraded,Inflict [ice]1[;] get a lower dice|,1,inflict(ICE); sfx(~_ice~); if(actualdice[0].basevalue > 1){ var t = []; var x = 1; while(x < actualdice[0].basevalue){ t.push(x); x+=1; }; givedice(rand(t)); }else{ givedice(1); };,Refrigerator,MIN2,,BRIGHTCYAN,,,,,2,NO,NO,,,,,,,,,,,,,if(actualdice[0].basevalue > 1){ var t = []; var x = 1; while(x < actualdice[0].basevalue){ t.push(x); x+=1; }; givedice(rand(t)); }else{ givedice(1); };
Snow Cauldron_downgraded,Inflict [ice]1 freeze,1,inflict(ICE); sfx(~_ice~);,Refrigerator,MIN2,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Mega Diceatron,[]+2 dice this fight|Return these dice,2,self.extradice+=2; sfx(~magic_gaindice~); givedice([for(ad in actualdice) ad.basevalue]);,Infinity Mirror,REQUIRE6|REQUIRE6|REQUIRE6|REQUIRE6,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Mega Diceatron_upgraded,[]+2 dice this fight|Return these dice,2,self.extradice+=2; sfx(~magic_gaindice~); givedice([for(ad in actualdice) ad.basevalue]);,Infinity Mirror,MIN5|MIN5|MIN5|MIN5,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Mega Diceatron_downgraded,[]+2 dice this fight,2,self.extradice+=2; sfx(~magic_gaindice~);,Infinity Mirror,REQUIRE6|REQUIRE6|REQUIRE6|REQUIRE6,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Adaptaxe,Do [sword]<double> damage[;] increase|range by 2 while you have a 5,2,attack(d*2); sfxdamage(target|d*2);,Plasma Gun,MAX3,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,if(e.ready){var flag = false; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue == 5){flag = true; break;};}; if(flag){e.changeslots([~MAX5~]);}else{e.changeslots([~MAX3~]);};};,if(e.ready){var flag = false; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue == 5){flag = true; break;};}; if(flag){e.changeslots([~MAX5~]);}else{e.changeslots([~MAX3~]);};};,if(e.ready){var flag = false; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue == 5){flag = true; break;};}; if(flag){e.changeslots([~MAX5~]);}else{e.changeslots([~MAX3~]);};};,if(e.ready){var flag = false; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue == 5){flag = true; break;};}; if(flag){e.changeslots([~MAX5~]);}else{e.changeslots([~MAX3~]);};};,,,,,
Adaptaxe_upgraded,Do [sword]<double> damage[;] increase|range by 3 while you have a 6,2,attack(d*2); sfxdamage(target|d*2);,Plasma Gun,MAX3,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,if(e.ready){var flag = false; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue == 6){flag = true; break;};}; if(flag){e.changeslots([~NORMAL~]);}else{e.changeslots([~MAX3~]);};};,if(e.ready){var flag = false; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue == 6){flag = true; break;};}; if(flag){e.changeslots([~NORMAL~]);}else{e.changeslots([~MAX3~]);};};,if(e.ready){var flag = false; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue == 6){flag = true; break;};}; if(flag){e.changeslots([~NORMAL~]);}else{e.changeslots([~MAX3~]);};};,if(e.ready){var flag = false; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue == 6){flag = true; break;};}; if(flag){e.changeslots([~NORMAL~]);}else{e.changeslots([~MAX3~]);};};,,,,,
Adaptaxe_downgraded,Do [sword]<double> damage,2,attack(d*2); sfxdamage(target|d*2);,Plasma Gun,MAX3,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Janky Spanner,Roll a 6,1,givedice(6);,Magic Six,MIN2|MIN2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Janky Spanner_upgraded,Roll a 6,1,givedice(6);,Magic Six,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Janky Spanner_downgraded,Combine dice[;] discard excess,1,if(d >= 6){givedice(6);}else{givedice(d);};,Magic Six,MIN2|MIN2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Stealth,Blind [blind]1 dice[;]|return the dice,1,inflict(BLIND); sfx(~_blind~); givedice(d);,Padlock,NORMAL,,GRAY,change_power,change_power,blind,,0,NO,NO,,1,,,,,,,,,,,givedice(d);
Stealth_upgraded,Blind [blind]2 dice[;]|return the dice,1,inflict(BLIND[;]2); sfx(~_blind~);  givedice(d);,Padlock,NORMAL,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Stealth_downgraded,Blind [blind]1 dice,1,inflict(BLIND); sfx(~_blind~);,Padlock,NORMAL,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Stealth?,Inflict Blind for [blind]1 turn[;]|return the dice,1,inflict(BLIND); sfx(~_blind~);  givedice(d);,Padlock,NORMAL,,GRAY,change_power,change_power,,,0,NO,YES,alternateversion,1,,,,,,,,,,,givedice(d);
Stealth?_upgraded,Inflict Blind for [blind]2 turns[;]|return the dice,1,inflict(BLIND[;]2); sfx(~_blind~);  givedice(d);,Padlock,NORMAL,,GRAY,,,,,0,NO,YES,alternateversion,,,,,,,,,,,,givedice(d);
Stealth?_downgraded,Inflict Blind for [blind]1 turn,1,inflict(BLIND); sfx(~_blind~);,Padlock,NORMAL,,GRAY,,,,,0,NO,YES,alternateversion,,,,,,,,,,,,
Suffocating Smog,Next turn[;] all [blind] blinded|enemy dice are [lock] locked,1,inflict(~mf_suffocate~); sfx(~_blind~); sfx(~_thinghappens~);,Smoke Cloud,EVEN|EVEN,,GRAY,change_power,change_power,blind,,0,NO,NO,,1,,,,,,,,,,,
Suffocating Smog_upgraded,Next turn[;] all [blind] blinded|enemy dice are [lock] locked,1,inflict(~mf_suffocate~); sfx(~_blind~); sfx(~_thinghappens~);,Smoke Cloud,NORMAL|NORMAL,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Suffocating Smog_downgraded,Next turn[;] all [blind] blinded|enemy dice are [lock] locked,1,inflict(~mf_suffocate~); sfx(~_blind~); sfx(~_thinghappens~);,Smoke Cloud,REQUIRE4|REQUIRE4,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Suffocating Smog?,Next turn[;] inflict [lock]1 lock|per [blind] blind on enemy,1,inflict(~mf_suffocate~); sfx(~_blind~); sfx(~_thinghappens~);,Smoke Cloud,EVEN|EVEN,,GRAY,change_power,change_power,,,0,NO,NO,alternateversion,1,,,,,,,,,,,
Suffocating Smog?_upgraded,Next turn[;] inflict [lock]1 lock|per [blind] blind on enemy,1,inflict(~mf_suffocate~); sfx(~_blind~); sfx(~_thinghappens~);,Smoke Cloud,NORMAL|NORMAL,,GRAY,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Suffocating Smog?_downgraded,Next turn[;] inflict [lock]1 lock|per [blind] blind on enemy,1,inflict(~mf_suffocate~); sfx(~_blind~); sfx(~_thinghappens~);,Smoke Cloud,REQUIRE4|REQUIRE4,,GRAY,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Shadow Stick,Deal [sword]<d6> damage[;]|on even[;] blind [blind]1 dice,2,attack(d); sfxdamage(target[;]d); if(d%2 == 0){ inflict(BLIND); sfx(~_blind~[;]~~[;]0.2); };,Padlock,NORMAL,,GRAY,change_power,change_power,blind,,0,NO,NO,,,,,,,,,,,,,
Shadow Stick_upgraded,Deal [sword]<d6> damage[;]|on even[;] blind [blind]2 dice,2,attack(d); sfxdamage(target[;]d); if(d%2 == 0){ inflict(BLIND[;]2); sfx(~_blind~[;]~~[;]0.2); };,Padlock,NORMAL,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Shadow Stick_downgraded,Deal [sword]<d6> damage[;]|on 6[;] blind [blind]1 dice,2,attack(d); sfxdamage(target[;]d); if(d == 6){ inflict(BLIND); sfx(~_blind~[;]~~[;]0.2); };,Padlock,NORMAL,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Shadow Stick?,Deal [sword]<d6> damage[;] on even[;]|inflict [blind]1 turn of blind,2,attack(d); sfxdamage(target[;]d); if(d%2 == 0){ inflict(BLIND); sfx(~_blind~[;]~~[;]0.2); };,Padlock,NORMAL,,GRAY,change_power,change_power,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Shadow Stick?_upgraded,Deal [sword]<d6> damage[;] on even[;]|inflict [blind]2 turns of blind,2,attack(d); sfxdamage(target[;]d); if(d%2 == 0){ inflict(BLIND[;]2); sfx(~_blind~[;]~~[;]0.2); };,Padlock,NORMAL,,GRAY,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Shadow Stick?_downgraded,Deal [sword]<d6> damage[;] on 6[;]|inflict [blind]1 turn of blind,2,attack(d); sfxdamage(target[;]d); if(d == 6){ inflict(BLIND); sfx(~_blind~[;]~~[;]0.2); };,Padlock,NORMAL,,GRAY,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Secretive Swipe,Next turn[;] enemy takes [sword]2|damage per [blind] blind on them,1,inflict(~mf_secretiveswipe~|2); sfx(~_blind~); sfx(~_thinghappens~);,Padlock,MAX4,,GRAY,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Secretive Swipe_upgraded,Next turn[;] enemy takes [sword]<d6>|damage per [blind] blind on them,1,inflict(~mf_secretiveswipe~|d); sfx(~_blind~); sfx(~_thinghappens~);,Padlock,MAX4,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Secretive Swipe_downgraded,Next turn[;] enemy takes [sword]1|damage per [blind] blind on them,1,inflict(~mf_secretiveswipe~); sfx(~_blind~); sfx(~_thinghappens~);,Padlock,MAX4,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Smokestaff,Deal [sword]6 damage|Blind [blind]2 dice,2,attack(6); sfxdamage(target|6); sfx(~_magic~); inflict(BLIND|2); sfx(~_blind~|~~|0.2);,Padlock,COUNTDOWN,8,GRAY,change_power,change_power,blind,,0,NO,NO,,,,,,,,,,,,,
Smokestaff_upgraded,Deal [sword]8 damage|Blind [blind]2 dice,2,attack(8); sfxdamage(target|8); sfx(~_magic~); inflict(BLIND|2); sfx(~_blind~|~~|0.2);,Padlock,COUNTDOWN,8,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Smokestaff_downgraded,Deal [sword]3 damage|Blind [blind]2 dice,2,attack(6); sfxdamage(target|6); sfx(~_magic~); inflict(BLIND|2); sfx(~_blind~|~~|0.2);,Padlock,COUNTDOWN,8,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Smokestaff?,Deal [sword]6 damage|Inflict Blind for [blind]2 turns,2,attack(6); sfxdamage(target|6); sfx(~_magic~); inflict(BLIND|2); sfx(~_blind~|~~|0.2);,Padlock,COUNTDOWN,8,GRAY,change_power,change_power,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Smokestaff?_upgraded,Deal [sword]8 damage|Inflict Blind for [blind]2 turns,2,attack(8); sfxdamage(target|8); sfx(~_magic~); inflict(BLIND|2); sfx(~_blind~|~~|0.2);,Padlock,COUNTDOWN,8,GRAY,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Smokestaff?_downgraded,Deal [sword]3 damage|Inflict Blind for [blind]2 turns,2,attack(6); sfxdamage(target|6); sfx(~_magic~); inflict(BLIND|2); sfx(~_blind~|~~|0.2);,Padlock,COUNTDOWN,8,GRAY,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Smokey Star,Inflict a random status|for each [blind] blind on enemy,1,var stats = [FIRE[;]ICE[;]SHOCK[;]WEAKEN[;]POISON[;]CURSE[;]LOCK]; var del = 0; for(x in 0...getstatus(BLIND)){var r = rand(stats); inflict(r); sfx(~_~ + r.toLowerCase()|del); del+=0.1;};,Stardust,COUNTDOWN,5,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Smokey Star_upgraded,Inflict 2 random statuses|for each [blind] blind on enemy,1,var stats = [FIRE[;]ICE[;]SHOCK[;]WEAKEN[;]POISON[;]CURSE[;]LOCK]; var del = 0; for(x in 0...getstatus(BLIND)*2){var r = rand(stats); inflict(r); sfx(~_~ + r.toLowerCase()|del); del+=0.1;};,Stardust,COUNTDOWN,5,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Smokey Star_downgraded,Inflict a random status,1,var stats = [FIRE[;]ICE[;]SHOCK[;]WEAKEN[;]POISON[;]CURSE[;]LOCK]; var r = rand(stats); inflict(r); sfx(~_~ + r.toLowerCase()); ,Stardust,COUNTDOWN,5,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Harmonica,Recover [heal]<d6> health|Inflict [weaken]<d6> weaken,2,attackself(-d); sfx(~_heal~); inflict(WEAKEN|d); sfx(~_weaken~);,Revitalize,MAX2,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,attackself(-d); sfx(~_heal~);
Harmonica_upgraded,Recover [heal]<d6> health|Inflict [weaken]<d6> weaken,2,attackself(-d); sfx(~_heal~); inflict(WEAKEN|d); sfx(~_weaken~);,Revitalize,MAX3,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-d); sfx(~_heal~);
Harmonica_downgraded,Recover [heal]<d6> health|Inflict [weaken]<d6> weaken,2,attackself(-d); sfx(~_heal~); inflict(WEAKEN|d); sfx(~_weaken~);,Revitalize,REQUIRE1,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-d); sfx(~_heal~);
Tail Bap,Deal [sword]<d6> damage|Throw a random dice,2,attack(d); sfxdamage(target|d+1); throwdice(self|target|0);,Plasma Gun,MAX5|FREE2,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Tail Bap_upgraded,Deal [sword]<d6> damage|Throw a random dice,2,attack(d); sfxdamage(target|d+1); throwdice(self|target|0);,Plasma Gun,MAX5|FREE4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Tail Bap_downgraded,Deal [sword]<d6> damage|Throw a random dice,2,attack(d); sfxdamage(target|d+1); throwdice(self|target|0);,Plasma Gun,MAX3|FREE2,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Metal Slam,Deal [sword]4 damage[;] gain|[shield]2 shield and [reduce]1 reduce,1,attack(4); sfxdamage(target|4); inflictself(SHIELD|2); sfx(~_shield~|~~|0.2); inflictself(REDUCE);,Barricade,COUNTDOWN,9,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD|2); sfx(~_shield~|~~|0.2); inflictself(REDUCE);
Metal Slam_upgraded,Deal [sword]5 damage[;] gain|[shield]3 shield and [reduce]1 reduce,1,attack(5); sfxdamage(target|5); inflictself(SHIELD|3); sfx(~_shield~|~~|0.2); inflictself(REDUCE);,Barricade,COUNTDOWN,9,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD|3); sfx(~_shield~|~~|0.2); inflictself(REDUCE);
Metal Slam_downgraded,Deal [sword]3 damage[;]|gain [shield]1 shield,1,attack(3); sfxdamage(target|3); inflictself(SHIELD|1); sfx(~_shield~|~~|0.2);,Barricade,COUNTDOWN,9,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD|); sfx(~_shield~|~~|0.2);
Sweep The Legs,Deal [sword]6 damage|Gain [dodge]1 dodge,2,attack(6); sfxdamage(target|6); inflictself(DODGE); sfx(~_dodge~);,Quick Thinking,COUNTDOWN,18,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Sweep The Legs_upgraded,Deal [sword]8 damage|Gain [dodge]1 dodge,2,attack(8); sfxdamage(target|8); inflictself(DODGE); sfx(~_dodge~);,Quick Thinking,COUNTDOWN,18,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Sweep The Legs_downgraded,Gain [dodge]1 dodge,2,inflictself(DODGE); sfx(~_dodge~);,Quick Thinking,COUNTDOWN,18,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Flip Me Right Round,Deal [sword]<d6> damage[;] on 8[;]|flip your dice upside down,1,attack(d); sfxdamage(target|d); if(d == 8){sfx(~_magic~); var c = 0; for(mydice in self.dicepool){if(mydice.available()){mydice.animatereroll(7-mydice.basevalue|self.screenposition()|c); c+=0.05;};};};,Megaflip,MAX4|MAX4,,YELLOW,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,if(d == 8){sfx(~_magic~); var c = 0; for(mydice in self.dicepool){if(mydice.available()){mydice.animatereroll(7-mydice.basevalue|self.screenposition()|c); c+=0.05;};};};
Flip Me Right Round_upgraded,Deal [sword]<d6> damage[;] on 10[;]|flip your dice upside down,1,attack(d); sfxdamage(target|d); if(d == 10){sfx(~_magic~); var c = 0; for(mydice in self.dicepool){if(mydice.available()){mydice.animatereroll(7-mydice.basevalue|self.screenposition()|c); c+=0.05;};};};,Megaflip,MAX5|MAX5,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 10){sfx(~_magic~); var c = 0; for(mydice in self.dicepool){if(mydice.available()){mydice.animatereroll(7-mydice.basevalue|self.screenposition()|c); c+=0.05;};};};
Flip Me Right Round_downgraded,Deal [sword]<d6> damage[;] on 6[;]|flip your dice upside down,1,attack(d); sfxdamage(target|d); if(d == 6){sfx(~_magic~); var c = 0; for(mydice in self.dicepool){if(mydice.available()){mydice.animatereroll(7-mydice.basevalue|self.screenposition()|c); c+=0.05;};};};,Megaflip,MAX3|MAX3,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){sfx(~_magic~); var c = 0; for(mydice in self.dicepool){if(mydice.available()){mydice.animatereroll(7-mydice.basevalue|self.screenposition()|c); c+=0.05;};};};
Broken Blender,Split dice in two[;] then split|the lower dice into 1s,2,var da = []; var sp = split(d); if(sp[0] < sp[1]){var temp = sp[0]; sp[0] = sp[1]; sp[1] = temp;}; da.push(sp[0]); for(x in 0...sp[1]){da.push(1);}; givedice(da);,Magic Lockpick,MIN2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Broken Blender_upgraded,Split dice in two[;] then split|the higher dice into 1s,2,var da = []; var sp = split(d); if(sp[0] > sp[1]){var temp = sp[0]; sp[0] = sp[1]; sp[1] = temp;}; da.push(sp[0]); for(x in 0...sp[1]){da.push(1);}; givedice(da);,Magic Lockpick,MIN2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Broken Blender_downgraded,Split dice in two,2,givedice(split(d));,Magic Lockpick,MIN2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Blenderblade,Deal [sword]<d6> damage|Roll <d6> ones,2,attack(d); sfxdamage(target|d); var da = []; for(x in 0...d){da.push(1);}; givedice(da);,Magic Lockpick,MAX3,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,var da = []; for(x in 0...d){da.push(1);}; givedice(da);
Blenderblade_upgraded,Deal [sword]<d6> damage|Roll <d6> ones,2,attack(d); sfxdamage(target|d); var da = []; for(x in 0...d){da.push(1);}; givedice(da);,Magic Lockpick,MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,var da = []; for(x in 0...d){da.push(1);}; givedice(da);
Blenderblade_downgraded,Deal [sword]<d6> damage|Roll <d6> ones,2,attack(d); sfxdamage(target|d); var da = []; for(x in 0...d){da.push(1);}; givedice(da);,Magic Lockpick,MAX2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,var da = []; for(x in 0...d){da.push(1);}; givedice(da);
Focusing Lens,Take an extra turn|Lose 1 dice this fight,2,inflictself(EXTRATURN); sfx(~_thinghappens~); self.extradice-=1;,Time Stop,REQUIRE6|REQUIRE6|REQUIRE6,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Focusing Lens_upgraded,Take an extra turn|Lose 1 dice this fight,2,inflictself(EXTRATURN); sfx(~_thinghappens~); self.extradice-=1;,Time Stop,MIN5|MIN5|MIN5,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Focusing Lens_downgraded,Take an extra turn|Lose 1 dice this fight,2,inflictself(EXTRATURN); sfx(~_thinghappens~); self.extradice-=1;,Time Stop,REQUIRE6|REQUIRE6|REQUIRE6|REQUIRE6,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Steamstaff,Even turn: [sword]6 dmg + [fire]1|Odd turn: [sword]6 dmg + [ice]1,2,if(turn % 2 == 0){attack(6); inflict(FIRE); sfx(~_fire~);}else{attack(6); sfx(~_ice~); inflict(ICE);}; sfxdamage(target|6);,Ember,COUNTDOWN,8,PURPLE,change_power,change_power,,,0,NO,NO,,,,,if(turn % 2 == 0){e.changecolour(~RED~);}else{e.changecolour(~BLUE~);};,,,,,,,,
Steamstaff_upgraded,Even turn: [sword]8 dmg + [fire]1|Odd turn: [sword]8 dmg + [ice]1,2,if(turn % 2 == 0){attack(8); inflict(FIRE); sfx(~_fire~);}else{attack(8); sfx(~_ice~); inflict(ICE);}; sfxdamage(target|8);,Ember,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,if(turn % 2 == 0){e.changecolour(~RED~);}else{e.changecolour(~BLUE~);};,,,,,,,,
Steamstaff_downgraded,Even turn: [sword]3 dmg + [fire]1|Odd turn: [sword]3 dmg + [ice]1,2,if(turn % 2 == 0){attack(3); inflict(FIRE); sfx(~_fire~);}else{attack(3); sfx(~_ice~); inflict(ICE);}; sfxdamage(target|3);,Ember,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,if(turn % 2 == 0){e.changecolour(~RED~);}else{e.changecolour(~BLUE~);};,,,,,,,,
Entangle,Inflict [weaken]1 weaken|and [lock]1 lock,1,inflict(WEAKEN); sfx(~_weaken~); inflict(LOCK); sfx(~_lock~|~~|0.4);,Padlock,COUNTDOWN,9,ORANGE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Entangle_upgraded,Inflict [weaken]2 weaken|and [lock]1 lock,1,inflict(WEAKEN|2); sfx(~_weaken~); inflict(LOCK); sfx(~_lock~|~~|0.4);,Padlock,COUNTDOWN,9,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Entangle_downgraded,Inflict [weaken]1 weaken|or [lock]1 lock,1,if(rand([0|1]) == 1){inflict(WEAKEN); sfx(~_weaken~);}else{inflict(LOCK); sfx(~_lock~);};,Padlock,COUNTDOWN,9,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Blastdice Potion,Deal [fire]10 dmg + [fire]1 burn|Lose a dice this fight,1,attack(10|FIRE); sfxdamage(target|10); inflict(FIRE); sfx(~_fire~); self.extradice-=1;,Infinity Mirror,COUNTDOWN,6,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,self.extradice-=1;
Blastdice Potion_upgraded,Deal [fire]13 dmg + [fire]1 burn|Lose a dice this fight,1,attack(13|FIRE); sfxdamage(target|13); inflict(FIRE); sfx(~_fire~); self.extradice-=1;,Infinity Mirror,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,self.extradice-=1;
Blastdice Potion_downgraded,Deal [fire]7 dmg + [fire]1 burn|Lose a dice this fight,1,attack(7|FIRE); sfxdamage(target|7); inflict(FIRE); sfx(~_fire~); self.extradice-=1;,Infinity Mirror,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,self.extradice-=1;
Shatterdice Potion,Deal [ice]10 dmg + [ice]1 freeze|Lose a dice this fight,1,attack(10|ICE); sfxdamage(target|10); inflict(ICE); sfx(~_ice~); self.extradice-=1;,Infinity Mirror,COUNTDOWN,6,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,self.extradice-=1;
Shatterdice Potion_upgraded,Deal [ice]13 dmg + [ice]1 freeze|Lose a dice this fight,1,attack(13|ICE); sfxdamage(target|13); inflict(ICE); sfx(~_ice~); self.extradice-=1;,Infinity Mirror,COUNTDOWN,6,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,self.extradice-=1;
Shatterdice Potion_downgraded,Deal [ice]7 dmg + [ice]1 freeze|Lose a dice this fight,1,attack(7|ICE); sfxdamage(target|7); inflict(ICE); sfx(~_ice~); self.extradice-=1;,Infinity Mirror,COUNTDOWN,6,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,self.extradice-=1;
Doppeldagger,Deal [sword]<d6> damage[;] get|a new dice (value x2),1,attack(d); sfxdamage(target|d); givedice(d*2);,Clone Device,MAX3,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice(d*2);
Doppeldagger_upgraded,Deal [sword]<d6> damage[;] get|a new dice (value x2),1,attack(d); sfxdamage(target|d); givedice(d*2);,Clone Device,MAX5,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d*2);
Doppeldagger_downgraded,Deal [sword]<d6> damage[;] get|a new dice (value x2),1,attack(d); sfxdamage(target|d); givedice(d*2);,Clone Device,MAX2,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d*2);
Solar Panel,Deal [sword]<d6> damage|([fire]Burn enemy each turn),2,attack(d); sfxdamage(target|d);,Ember,MAX5,,RED,change_power,change_power,,,0,NO,NO,,,,,,e.animate(~flashandshake~); inflict(FIRE); sfx(~_fire~);,,,,,,,
Solar Panel_upgraded,Deal [sword]<d6> damage|([fire]Burn enemy each turn),2,attack(d); sfxdamage(target|d);,Ember,MAX5|FREE2,,RED,,,,,0,NO,NO,,,,,,e.animate(~flashandshake~); inflict(FIRE); sfx(~_fire~);,,,,,,,
Solar Panel_downgraded,Deal [sword]<d6> damage|([fire]Burn enemy each turn),2,attack(d); sfxdamage(target|d);,Ember,MAX3,,RED,,,,,0,NO,NO,,,,,,e.animate(~flashandshake~); inflict(FIRE); sfx(~_fire~);,,,,,,,
Snowlar Panel,Deal [sword]<d6> damage|([ice]Freeze enemy each turn),2,attack(d); sfxdamage(target|d);,Refrigerator,MAX5,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,e.animate(~flashandshake~); inflict(ICE); sfx(~_ice~);,,,,,,,
Snowlar Panel_upgraded,Deal [sword]<d6> damage|([ice]Freeze enemy each turn),2,attack(d); sfxdamage(target|d);,Refrigerator,MAX5|FREE2,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,e.animate(~flashandshake~); inflict(ICE); sfx(~_ice~);,,,,,,,
Snowlar Panel_downgraded,Deal [sword]<d6> damage|([ice]Freeze enemy each turn),2,attack(d); sfxdamage(target|d);,Refrigerator,MAX3,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,e.animate(~flashandshake~); inflict(ICE); sfx(~_ice~);,,,,,,,
Repast Rapier,Deal [sword]<d6> damage. On 6[;]|heal [heal]2 hp after battle,2,attack(d); sfxdamage(target|d); if(d == 6){inflictself(~healaftercombat~|2); sfx(~_cure~);}; self.setvar(~healaftercombat~|getstatusself(~healaftercombat~));,Anticipation,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){inflictself(~healaftercombat~|2); sfx(~_cure~);}; self.setvar(~healaftercombat~|getstatusself(~healaftercombat~));
Repast Rapier_upgraded,Deal [sword]<d6> damage. On even[;]|heal [heal]2 hp after battle,2,attack(d); sfxdamage(target|d); if(d % 2 == 0){inflictself(~healaftercombat~|2); sfx(~_cure~);};,Anticipation,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,if(d%2 == 0){inflictself(~healaftercombat~|2); sfx(~_cure~);}; self.setvar(~healaftercombat~|getstatusself(~healaftercombat~));
Repast Rapier_downgraded,Deal [sword]<d6> damage. On 6[;]|heal [heal]2 hp after battle,2,attack(d); sfxdamage(target|d); if(d == 6){inflictself(~healaftercombat~|2); sfx(~_cure~);};,Anticipation,MIN4,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){inflictself(~healaftercombat~|2); sfx(~_cure~);}; self.setvar(~healaftercombat~|getstatusself(~healaftercombat~));
Toxins,Inflict [poison]1 poison[;] and|[poison]<d6> more in [jinx]<d6> turns,1,inflict(POISON); jinx(~Toxins~|~receive [poison]%VAR% poison~|~Receive [poison]%VAR% poison~|~inflict(POISON|%VAR%); sfx(\~_poison\~);~|target|self|d|d);  sfx(~_poison~); sfx(~_thinghappens~);,Goop Gun,MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Toxins_upgraded,Inflict [poison]1 poison[;] and|[poison]<d6> more in [jinx]<d6> turns,1,inflict(POISON); jinx(~Toxins~|~receive [poison]%VAR% poison~|~Receive [poison]%VAR% poison~|~inflict(POISON|%VAR%); sfx(\~_poison\~);~|target|self|d|d);  sfx(~_poison~); sfx(~_thinghappens~);,Goop Gun,MAX4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Toxins_downgraded,Inflict [poison]1 poison[;] and|[poison]<d6> more in [jinx]<d6> turns,1,inflict(POISON); jinx(~Toxins~|~receive [poison]%VAR% poison~|~Receive [poison]%VAR% poison~|~inflict(POISON|%VAR%); sfx(\~_poison\~);~|target|self|d|d);  sfx(~_poison~); sfx(~_thinghappens~);,Goop Gun,MAX2,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Paper Mask,Gain [shield]3 shield,2,inflictself(SHIELD|3); sfx(~_shield~);,Barricade,COUNTDOWN,3,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Paper Mask_upgraded,Gain [shield]5 shield,2,inflictself(SHIELD|5); sfx(~_shield~);,Barricade,COUNTDOWN,3,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Paper Mask_downgraded,Gain [shield]2 shield,2,inflictself(SHIELD|2); sfx(~_shield~);,Barricade,COUNTDOWN,3,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Sunshine Ray,Deal [sword]<d6> damage. If it's|turn <d6>[;] heal [heal]<d6> hp too,1,attack(d); sfxdamage(target|d); if(turn == d){attackself(-d); sfx(~_heal~);};,Revitalize,MAX4,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(turn == d){attackself(-d); sfx(~_heal~);};
Sunshine Ray_upgraded,Deal [sword]<d6> damage. If it's|turn <d6>[;] heal [heal]<d6> hp too,1,attack(d); sfxdamage(target|d); if(turn == d){attackself(-d); sfx(~_heal~);};,Revitalize,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,if(turn == d){attackself(-d); sfx(~_heal~);};
Sunshine Ray_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target|d);,Revitalize,MAX4,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Burner Phone,Roll 3 new dice|[gray](once per battle),1,var da = []; for(x in 0...3){da.push(rand([1|2|3|4|5|6]));}; givedice(da);,Magic Dice,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,YES,YES,,,,,,,,,,,,,
Burner Phone_upgraded,Roll 4 new dice|[gray](once per battle),1,var da = []; for(x in 0...4){da.push(rand([1|2|3|4|5|6]));}; givedice(da);,Magic Dice,NORMAL,,BRIGHTCYAN,,,,,0,YES,YES,,,,,,,,,,,,,
Burner Phone_downgraded,Roll 2 new dice|[gray](once per battle),1,var da = []; for(x in 0...2){da.push(rand([1|2|3|4|5|6]));}; givedice(da);,Magic Dice,NORMAL,,BRIGHTCYAN,,,,,0,YES,YES,,,,,,,,,,,,,
Blood Breath,Deal [sword]4 damage[;] then [sword]1|dmg per turn for 4 turns,2,if(simulation){ bonus(-1000); }else{ attack(4); sfxdamage(target[;]4); inflict(~bleed4~); };,Slick Slash,COUNTDOWN,5,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Blood Breath_upgraded,Deal [sword]4 damage[;] then [sword]1|dmg per turn for 6 turns,2,if(simulation){ bonus(-1000); }else{ attack(6); sfxdamage(target[;]6); inflict(~bleed6~); };,Slick Slash,COUNTDOWN,5,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Blood Breath_downgraded,Deal [sword]4 damage,2,attack(4); sfxdamage(target[;]4);,Slick Slash,COUNTDOWN,5,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Swipe,Deal [sword]<d6> damage|On turn 1[;] deal [sword]5 more,2,if(turn == 1){attack(d+5); sfxdamage(target|d+5);}else{attack(d); sfxdamage(target|d);};,Shuriken,MAX5,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,if(turn == 1){e.changecolour(~YELLOW~);}else{e.changecolour(~ORANGE~);};,,,,,,,,
Swipe_upgraded,Deal [sword]<d6> damage|On turn 1[;] deal [sword]5 more,2,if(turn == 1){attack(d+5); sfxdamage(target|d+5);}else{attack(d); sfxdamage(target|d);};,Shuriken,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,if(turn == 1){e.changecolour(~YELLOW~);}else{e.changecolour(~ORANGE~);};,,,,,,,,
Swipe_downgraded,Deal [sword]<d6> damage|On turn 1[;] deal [sword]5 more,2,if(turn == 1){attack(d+5); sfxdamage(target|d+5);}else{attack(d); sfxdamage(target|d);};,Shuriken,MAX3,,ORANGE,,,,,0,NO,NO,,,,,if(turn == 1){e.changecolour(~YELLOW~);}else{e.changecolour(~ORANGE~);};,if(turn == 1){e.changecolour(~YELLOW~);}else{e.changecolour(~ORANGE~);};,,,,,,,
Convergence,Deal [sword]10 damage[;] double|if all dice are the same,2,var v = actualdice[0].basevalue; var flag = true; for(ad in actualdice){if(ad.basevalue != v){flag = false;};}; if(flag){attack(20); sfxdamage(target|20);}else{attack(10); sfxdamage(target|10);};,Clone Device,MIN2|MIN2|MIN2|MIN2,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Convergence_upgraded,Deal [sword]10 damage[;] double|if all dice are the same,2,var v = actualdice[0].basevalue; var flag = true; for(ad in actualdice){if(ad.basevalue != v){flag = false;};}; if(flag){attack(20); sfxdamage(target|20);}else{attack(10); sfxdamage(target|10);};,Clone Device,NORMAL|NORMAL|NORMAL|NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Convergence_downgraded,Deal [sword]10 damage[;] double|if all dice are the same,2,var v = actualdice[0].basevalue; var flag = true; for(ad in actualdice){if(ad.basevalue != v){flag = false;};}; if(flag){attack(20); sfxdamage(target|20);}else{attack(10); sfxdamage(target|10);};,Clone Device,MIN4|MIN4|MIN4|MIN4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
High Stakes,[sword]<d6> damage[;] but the|enemy can only be killed by this,2,if(getstatus(VAMPIRE) > 0){removestatus(VAMPIRE);}; attack(d); sfxdamage(target|d); inflict(VAMPIRE);,Ragnarok,NORMAL|FREE4,,RED,change_power,change_power,vampire,,0,NO,NO,excludefromrandomlists,,inflict(VAMPIRE);,,,,inflict(VAMPIRE);,,,,,,
High Stakes_upgraded,[sword]<d6> damage[;] but the|enemy can only be killed by this,2,if(getstatus(VAMPIRE) > 0){removestatus(VAMPIRE);}; attack(d); sfxdamage(target|d); inflict(VAMPIRE);,Ragnarok,NORMAL|FREE6,,RED,,,,,0,NO,NO,excludefromrandomlists,,inflict(VAMPIRE);,,,,inflict(VAMPIRE);,,,,,,
High Stakes_downgraded,[sword]<d6> damage[;] but the|enemy can only be killed by this,2,if(getstatus(VAMPIRE) > 0){removestatus(VAMPIRE);}; attack(d); sfxdamage(target|d); inflict(VAMPIRE);,Ragnarok,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,inflict(VAMPIRE);,,,,inflict(VAMPIRE);,,,,,,
High Stakes?,[sword]<d6> damage. If another|weapon is the final blow[;]|enemy revives to full health,2,if(getstatus(VAMPIRE) > 0){removestatus(VAMPIRE);}; attack(d); sfxdamage(target|d); inflict(VAMPIRE);,Ragnarok,NORMAL|FREE4,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists|alternateversion,,inflict(VAMPIRE);,,,,inflict(VAMPIRE);,,,,,,
High Stakes?_upgraded,[sword]<d6> damage. If another|weapon is the final blow[;]|enemy revives to full health,2,if(getstatus(VAMPIRE) > 0){removestatus(VAMPIRE);}; attack(d); sfxdamage(target|d); inflict(VAMPIRE);,Ragnarok,NORMAL|FREE6,,RED,,,,,0,NO,NO,excludefromrandomlists|alternateversion,,inflict(VAMPIRE);,,,,inflict(VAMPIRE);,,,,,,
High Stakes?_downgraded,[sword]<d6> damage. If another|weapon is the final blow[;]|enemy revives to full health,2,if(getstatus(VAMPIRE) > 0){removestatus(VAMPIRE);}; attack(d); sfxdamage(target|d); inflict(VAMPIRE);,Ragnarok,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists|alternateversion,,inflict(VAMPIRE);,,,,inflict(VAMPIRE);,,,,,,
Bludgeon,Deal [sword]<double> damage,2,attack(d*2); sfxdamage(target|d*2);,Throwing Knife,REQUIRE3|REQUIRE3,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Bludgeon_upgraded,Deal [sword]<double> damage,2,attack(d*2); sfxdamage(target|d*2);,Throwing Knife,MAX3|MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Bludgeon_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,Throwing Knife,REQUIRE3|REQUIRE3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Revolver,After playing 6 Revolvers in|one combat[;] deal [sword]18 dmg|,2,inflictself(~revolver~|1); sfx(~jackpot_increasecounter~);,Bubble Gun,COUNTDOWN,4,RED,change_power,change_power,,,2,NO,NO,,,,,,,,,,,,,
Revolver_upgraded,After playing 6 Revolvers in|one combat[;] deal [sword]18 dmg|,2,inflictself(~revolver~|1); sfx(~jackpot_increasecounter~);,Bubble Gun,COUNTDOWN,4,RED,,,,,4,NO,NO,,,,,,,,,,,,,
Revolver_downgraded,After playing 6 Revolvers in|one combat[;] deal [sword]18 dmg,2,inflictself(~revolver~|1); sfx(~jackpot_increasecounter~);,Bubble Gun,COUNTDOWN,4,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Pinball Machine,Roll a high dice (4-6)[;]|and deal that much damage,1,var r = rand([4|5|6]); givedice(r); attack(r); sfxdamage(target|r);,Magic Dice,COUNTDOWN,9,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,var r = rand([4|5|6]); givedice(r);
Pinball Machine_upgraded,Roll a high dice (4-6)[;]|and deal [sword]6 damage,1,var r = rand([4|5|6]); givedice(r); attack(6); sfxdamage(target|6);,Magic Dice,COUNTDOWN,9,RED,,,,,0,NO,NO,,,,,,,,,,,,,var r = rand([4|5|6]); givedice(r);
Pinball Machine_downgraded,Roll a high dice (4-6)[;]|and deal [sword]3 damage,1,var r = rand([4|5|6]); givedice(r); attack(3); sfxdamage(target|r);,Magic Dice,COUNTDOWN,9,RED,,,,,0,NO,NO,,,,,,,,,,,,,var r = rand([4|5|6]); givedice(r);
Wooden Mallet,Deal [sword]<d6> damage[;] on 6[;]|get a new dice,1,attack(d); sfxdamage(target|d); if(d == 6){var poss = [1[;]2[;]3[;]4[;]5[;]6]; for(ad in actualdice){ poss.remove(ad.basevalue); }; givedice(rand(poss));};,Plasma Gun,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){var poss = [1[;]2[;]3[;]4[;]5[;]6]; for(ad in actualdice){ poss.remove(ad.basevalue); }; givedice(rand(poss));};
Wooden Mallet_upgraded,Deal [sword]<d6> damage[;] on|even[;] get a new dice,1,attack(d); sfxdamage(target|d); if(d%2 == 0){var poss = [1[;]2[;]3[;]4[;]5[;]6]; for(ad in actualdice){ poss.remove(ad.basevalue); }; givedice(rand(poss));};,Plasma Gun,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,if(d%2 == 0){var poss = [1[;]2[;]3[;]4[;]5[;]6]; for(ad in actualdice){ poss.remove(ad.basevalue); }; givedice(rand(poss));};
Wooden Mallet_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target|d);,Plasma Gun,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Popcorn,Get two higher|dice next turn,1,var poss = []; for(ad in actualdice){poss = []; var x = ad.basevalue+1; while(x <= 6){poss.push(x); x+=1;}; inflictself(~stash~+rand(poss)); inflictself(~lightstatus~);}; sfx(~magic_gaindice~);,Magic Dice,MAX5|MAX5,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Popcorn_upgraded,Get two higher|dice next turn|,1,var poss = []; for(ad in actualdice){poss = []; var x = ad.basevalue+1; while(x <= 6){poss.push(x); x+=1;}; inflictself(~stash~+rand(poss)); inflictself(~lightstatus~);}; sfx(~magic_gaindice~);,Magic Dice,MAX5|MAX5,,YELLOW,,,,,2,YES,NO,,,,,,,,,,,,,
Popcorn_downgraded,Get two higher|dice next turn,1,var poss = []; for(ad in actualdice){poss = []; var x = ad.basevalue+1; while(x <= 6){poss.push(x); x+=1;}; inflictself(~stash~+rand(poss)); inflictself(~lightstatus~);}; sfx(~magic_gaindice~);,Magic Dice,MAX3|MAX3,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Holy Fire,Deal [sword]<d6> damage[;] add|[fire]1 burn if this is used first,2,attack(d); sfxdamage(target|d); if(self.equipmentused <= 1){inflict(FIRE); sfx(~_fire~);};,Ember,MAX4|FREE2,,RED,change_power,change_power,,,0,NO,NO,,,,,e.changecolour(~RED~);,,if(self.equipmentused >= 1){e.changecolour(~GRAY~);};,,,,,,
Holy Fire_upgraded,Deal [sword]<d6> damage[;] add|[fire]1 burn if this is used first,2,attack(d); sfxdamage(target|d); if(self.equipmentused <= 1){inflict(FIRE); sfx(~_fire~);};,Ember,NORMAL|FREE2,,RED,,,,,0,NO,NO,,,,,e.changecolour(~RED~);,,if(self.equipmentused >= 1){e.changecolour(~GRAY~);};,,,,,,
Holy Fire_downgraded,Deal [sword]<d6> damage[;] add|[fire]1 burn if this is used first,2,attack(d); sfxdamage(target|d); if(self.equipmentused <= 1){inflict(FIRE); sfx(~_fire~);};,Ember,MAX4,,RED,,,,,0,NO,NO,,,,,e.changecolour(~RED~);,,if(self.equipmentused >= 1){e.changecolour(~GRAY~);};,,,,,,
Holy Frost,Deal [sword]<d6> damage[;] add|[ice]1 freeze if this is used first,2,attack(d); sfxdamage(target|d); if(self.equipmentused <= 1){inflict(ICE); sfx(~_ice~);};,Refrigerator,MAX4|FREE2,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,e.changecolour(~BRIGHTCYAN~);,,if(self.equipmentused >= 1){e.changecolour(~GRAY~);};,,,,,,
Holy Frost_upgraded,Deal [sword]<d6> damage[;] add|[ice]1 freeze if this is used first,2,attack(d); sfxdamage(target|d); if(self.equipmentused <= 1){inflict(ICE); sfx(~_ice~);};,Refrigerator,NORMAL|FREE2,,BRIGHTCYAN,,,,,0,NO,NO,,,,,e.changecolour(~BRIGHTCYAN~);,,if(self.equipmentused >= 1){e.changecolour(~GRAY~);};,,,,,,
Holy Frost_downgraded,Deal [sword]<d6> damage[;] add|[ice]1 freeze if this is used first,2,attack(d); sfxdamage(target|d); if(self.equipmentused <= 1){inflict(ICE); sfx(~_ice~);};,Refrigerator,MAX4,,BRIGHTCYAN,,,,,0,NO,NO,,,,,e.changecolour(~BRIGHTCYAN~);,,if(self.equipmentused >= 1){e.changecolour(~GRAY~);};,,,,,,
Shieldsplosion,Everyone gains [shield]<d6> shield|Deal [fire]<double> dmg in 2 turns,1,inflict(SHIELD|d); inflictself(SHIELD|d); sfx(~_shield~); jinx(~Shieldsplosion~[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%|FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~);~[;]target[;]self[;]2[;]d*2); sfx(~_thinghappens~);,Barricade,MAX4,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflict(SHIELD|d); inflictself(SHIELD|d); sfx(~_shield~);
Shieldsplosion_upgraded,Everyone gains [shield]<d6> shield|Deal [fire]<double> dmg in 2 turns,1,inflict(SHIELD|d); inflictself(SHIELD|d); sfx(~_shield~); jinx(~Shieldsplosion~[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%|FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~);~[;]target[;]self[;]2[;]d*2); sfx(~_thinghappens~);,Barricade,MAX5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,inflict(SHIELD|d); inflictself(SHIELD|d); sfx(~_shield~);
Shieldsplosion_downgraded,Everyone gains [shield]<d6> shield|Deal [fire]<double> dmg in 2 turns,1,inflict(SHIELD|d); inflictself(SHIELD|d); sfx(~_shield~); jinx(~Shieldsplosion~[;]~take [fire]%VAR% damage~[;]~Take [fire]%VAR% damage~[;]~attack(%VAR%|FIRE); sfxdamage(null[;]%VAR%); sfx(\~_fire\~);~[;]target[;]self[;]2[;]d*2); sfx(~_thinghappens~);,Barricade,MAX2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,inflict(SHIELD|d); inflictself(SHIELD|d); sfx(~_shield~);
Turnip,Recover [heal]4 health|Receive [poison]2 poison,1,attackself(-4); sfx(~_heal~); inflictself(POISON|2); sfx(~_poison~);,Steel Skin,COUNTDOWN,5,PURPLE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Turnip_upgraded,Recover [heal]6 health|Receive [poison]2 poison,1,attackself(-6); sfx(~_heal~); inflictself(POISON|2); sfx(~_poison~);,Steel Skin,COUNTDOWN,5,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Turnip_downgraded,Recover [heal]2 health|Receive [poison]2 poison,1,attackself(-2); sfx(~_heal~); inflictself(POISON|2); sfx(~_poison~);,Steel Skin,COUNTDOWN,5,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Follow Up,Deal [sword]<d6> + <evar:turnsused> damage[;] +1|for each turn used in a row ,2,var tu = e.getvar(~turnsused~); attack(d+tu); sfxdamage(target|d+tu); e.setvar(~turnsused~|tu+1); e.setvar(~used~|1);,Whelm,MAX5,,RED,change_power,change_power,,,0,NO,NO,,,,,if(e.getvar(~used~) == 0){e.setvar(~turnsused~|0);}; e.setvar(~used~|0);,,,,,,,,
Follow Up_upgraded,Deal [sword]<d6> + <evar:turnsused> damage[;] +1|for each turn used in a row ,2,var tu = e.getvar(~turnsused~); attack(d+tu); sfxdamage(target|d+tu); e.setvar(~turnsused~|tu+1); e.setvar(~used~|1);,Whelm,NORMAL,,RED,,,,,0,NO,NO,,,,,if(e.getvar(~used~) == 0){e.setvar(~turnsused~|0);}; e.setvar(~used~|0);,,,,,,,,
Follow Up_downgraded,Deal [sword]<d6> damage|(Streak reset!),2,attack(d); sfxdamage(target|d); e.setvar(~turnsused~|tu+1); e.setvar(~used~|1);,Whelm,MAX5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Orb of Discord,Enemy heals [heal]<d6> health|Inflict <d6> random statuses,1,pierceattack(-d); sfx(~_cure~); for(x in 0...d){ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]0.2+x/5); };,Stardust,MAX4,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,pierceattack(-d); sfx(~_cure~);
Orb of Discord_upgraded,Enemy heals [heal]<d6> health|Inflict <d6> random statuses,1,pierceattack(-d); sfx(~_cure~); for(x in 0...d){ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]0.2+x/5); };,Stardust,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,pierceattack(-d); sfx(~_cure~);
Orb of Discord_downgraded,Enemy heals [heal]<d6> health|Inflict <d6> random statuses,1,pierceattack(-d); sfx(~_cure~); for(x in 0...d){ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus); sfx(~_~ + randstatus.toLowerCase()[;]0.2+x/5); };,Stardust,MAX2,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,pierceattack(-d); sfx(~_cure~);
Stop Sign,Deal [sword]6 damage|Lock [lock]1 dice,2,attack(6); sfxdamage(target|6); inflict(LOCK); sfx(~_lock~|~~|0.2);,Padlock,NORMAL|NORMAL,8,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Stop Sign_upgraded,Deal [sword]<d6> damage|Lock [lock]1 dice,2,attack(d); sfxdamage(target|d); inflict(LOCK); sfx(~_lock~|~~|0.2);,Padlock,NORMAL|NORMAL,8,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Stop Sign_downgraded,Deal [sword]6 damage,2,attack(6); sfxdamage(target|6);,Padlock,NORMAL|NORMAL,8,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Message in a Bottle,Recover [heal]2 health[;]|and again in [jinx]2 turns,1,attackself(-2); sfx(~_heal~); jinx(~Message~[;]~recover [heal]%VAR% health~[;]~Recover [heal]%VAR% health~[;]~attack(-%VAR%); sfx(\~_heal\~);~[;]self[;]self[;]2[;]2); sfx(~_thinghappens~);,Revitalize,COUNTDOWN,4,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Message in a Bottle_upgraded,Recover [heal]3 health[;]|and again in [jinx]2 turns,1,attackself(-3); sfx(~_heal~); jinx(~Message~[;]~recover [heal]%VAR% health~[;]~Recover [heal]%VAR% health~[;]~attack(-%VAR%); sfx(\~_heal\~);~[;]self[;]self[;]2[;]3); sfx(~_thinghappens~);,Revitalize,COUNTDOWN,4,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Message in a Bottle_downgraded,Recover [heal]2 health[;]|in [jinx]2 turns,1,jinx(~Message~[;]~recover [heal]%VAR% health~[;]~Recover [heal]%VAR% health~[;]~attack(-%VAR%); sfx(\~heal\~);~[;]self[;]self[;]2[;]2); sfx(~_thinghappens~);,Revitalize,COUNTDOWN,4,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Sunday Sundae,Next turn[;] recover [heal]<d6>|hp but [ice]freeze yourself,1,inflictself(~mf_healnextturn~|d); inflictself(~mf_freezenextturn~); sfx(~_cure~);,Revitalize,MAX5,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Sunday Sundae_upgraded,Next turn[;] recover [heal]<d6>|hp but [ice]freeze yourself,1,inflictself(~mf_healnextturn~|d); inflictself(~mf_freezenextturn~); sfx(~_cure~);,Revitalize,NORMAL,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Sunday Sundae_downgraded,Next turn[;] recover [heal]<d6>|hp but [ice]freeze yourself,1,inflictself(~mf_healnextturn~|d); inflictself(~mf_freezenextturn~); sfx(~_cure~);,Revitalize,MAX3,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Spice Cream Sundae,Next turn[;] recover [heal]<d6>|health but [fire] burn yourself,1,inflictself(~mf_healnextturn~|d); inflictself(~mf_burnnextturn~); sfx(~_cure~);,Revitalize,MAX5,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Spice Cream Sundae_upgraded,Next turn[;] recover [heal]<d6>|health but [fire] burn yourself,1,inflictself(~mf_healnextturn~|d); inflictself(~mf_burnnextturn~); sfx(~_cure~);,Revitalize,NORMAL,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Spice Cream Sundae_downgraded,Next turn[;] recover [heal]<d6>|health but [fire] burn yourself,1,inflictself(~mf_healnextturn~|d); inflictself(~mf_burnnextturn~); sfx(~_cure~);,Revitalize,MAX3,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Hydraulic Press,Split a dice in four,1,givedice(split(d|4));,Unlucky Roll,REQUIRE6,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Hydraulic Press_upgraded,Split a dice in four|,1,givedice(split(d|4));,Unlucky Roll,REQUIRE6,,YELLOW,,,,,2,YES,NO,,,,,,,,,,,,,
Hydraulic Press_downgraded,Split a dice in two,1,givedice(split(d));,Unlucky Roll,REQUIRE6,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Fruit Juice,Increase max hp by [heart]2[;] then|remove this from spellbook,1,if(simulation){bonus(-10000);}else{for(x in 1...7){if(Spellbook.spellname(x) == ~Fruit Juice~){Spellbook.erase(x); break;};}; self.maxhp+=2; attackself(-2); sfx(~_cure~); removeequipment(~Fruit Juice~[;] self);};,Mutagen,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Fruit Juice_upgraded,Increase max hp by [heart]3[;] then|remove this from spellbook,1,if(simulation){bonus(-10000);}else{for(x in 1...7){if(Spellbook.spellname(x) == ~Fruit Juice~){Spellbook.erase(x); break;};}; self.maxhp+=3; attackself(-3); sfx(~_cure~); removeequipment(~Fruit Juice~[;] self);};,Mutagen,NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Fruit Juice_downgraded,Increase max hp by [heart]2[;] then|remove this from spellbook,1,if(simulation){bonus(-10000);}else{for(x in 1...7){if(Spellbook.spellname(x) == ~Fruit Juice~){Spellbook.erase(x); break;};}; self.maxhp+=2; attackself(-2); sfx(~_cure~); removeequipment(~Fruit Juice~[;] self);};,Mutagen,EVEN,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Spearslinger,Deal [sword]5 damage|Return the dice,1,attack(5); sfxdamage(target|5); givedice(d);,Magic Six,REQUIRE6,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Spearslinger_upgraded,Deal [sword]5 damage|Return the dice,1,attack(5); sfxdamage(target|5); givedice(d);,Magic Six,MIN5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Spearslinger_downgraded,Deal [sword]5 damage,1,attack(5); sfxdamage(target|5);,Magic Six,REQUIRE6,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Sour Note,Combine dice[;] inflict [weaken]1|weaken if total under 6,1,if(d < 6){inflict(WEAKEN); sfx(~_weaken~);}; givedice(d);,Magic Spanner,MAX4|MAX4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Sour Note_upgraded,Combine dice[;] inflict [weaken]1|weaken if total under 6,1,if(d < 6){inflict(WEAKEN); sfx(~_weaken~);}; givedice(d);,Magic Spanner,NORMAL|NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Sour Note_downgraded,Combine dice[;] inflict [weaken]1|weaken if total under 6,1,if(d < 6){inflict(WEAKEN); sfx(~_weaken~);}; givedice(d);,Magic Spanner,MAX3|MAX3,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Metal Crusher,Combine dice[;] split|excess into 1s,2,if(d > 6){var da = [6]; while(d > 6){da.push(1); d-=1;}; givedice(da);}else{givedice(d);},Magic Spanner,MAX5|MAX5,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Metal Crusher_upgraded,Combine dice[;] split|excess into 1s,2,if(d > 6){var da = [6]; while(d > 6){da.push(1); d-=1;}; givedice(da);}else{givedice(d);},Magic Spanner,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Metal Crusher_downgraded,Combine dice[;] split|excess into 1s,2,if(d > 6){var da = [6]; while(d > 6){da.push(1); d-=1;}; givedice(da);}else{givedice(d);},Magic Spanner,MAX4|MAX4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Fifteen Squirrels,Take an extra turn[;] now|[gray](once per battle),2,inflictself(EXTRATURN); if(self.getvar(~furytest~) == 0){ self.endturnnow(); }; sfx(~_fury~);,Time Stop,NORMAL|NORMAL|NORMAL,15,GREEN,change_power,change_power,,,0,YES,YES,,,,,,,,,,self.setvar(~furytest~[;]getstatusself(FURY));,,donothing();,
Fifteen Squirrels_upgraded,Take an extra turn[;] now|[gray](once per battle),2,inflictself(EXTRATURN); if(self.getvar(~furytest~) == 0){ self.endturnnow(); }; sfx(~_fury~);,Time Stop,NORMAL|NORMAL|NORMAL|NORMAL,15,GREEN,,,,,0,YES,YES,,,,,,,,,,self.setvar(~furytest~[;]getstatusself(FURY));,,donothing();,
Fifteen Squirrels_downgraded,Take an extra turn[;] now|[gray](once per battle),2,inflictself(EXTRATURN); if(self.getvar(~furytest~) == 0){ self.endturnnow(); }; sfx(~_fury~);,Time Stop,REQUIRE6|REQUIRE6|REQUIRE6|REQUIRE6,,GREEN,,,,,0,YES,YES,,,,,,,,,,self.setvar(~furytest~[;]getstatusself(FURY));,,donothing();,
Hand Sanitiser,Heal [heal]1[;] and [heal]1 next turn|,1,attackself(-1); sfx(~_heal~); inflictself(~regen1~);,Revitalize,COUNTDOWN,3,GREEN,change_power,change_power,,,2,YES,NO,,1,,,,,,,,,,,
Hand Sanitiser_upgraded,Heal [heal]1[;] and [heal]1 next turn|,1,attackself(-1); sfx(~_heal~); inflictself(~regen1~);,Revitalize,COUNTDOWN,3,GREEN,,,,,5,YES,NO,,,,,,,,,,,,,
Hand Sanitiser_downgraded,Heal [heal]1[;] and [heal]1 next turn,1,attackself(-1); sfx(~_heal~); inflictself(~regen1~);,Revitalize,COUNTDOWN,3,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Prescience,Gain [reduce]2 reduce next turn,2,inflictself(~mf_reducenextturn~|2); sfx(~_thinghappens~);,Pillow Fort,COUNTDOWN,7,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Prescience_upgraded,Gain [reduce]3 reduce next turn,2,inflictself(~mf_reducenextturn~|3); sfx(~_thinghappens~);,Pillow Fort,COUNTDOWN,7,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Prescience_downgraded,Gain [reduce]1 reduce next turn,2,inflictself(~mf_reducenextturn~|1); sfx(~_thinghappens~);,Pillow Fort,COUNTDOWN,7,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Solar Flair,Deal [sword]<d6> damage[;] heal|[heal]<d6> hp in [jinx]<d6> turns,1,attack(d); sfxdamage(target|d); sfx(~_magic~); jinx(~Solar Flair~[;]~recover [heal]%VAR% health~[;]~Recover [heal]%VAR% health~[;]~attack(-%VAR%); sfx(\~_heal\~);~[;]self[;]self[;]d[;]d);,Revitalize,MAX4|FREE1,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,jinx(~Solar Flair~[;]~recover [heal]%VAR% health~[;]~Recover [heal]%VAR% health~[;]~attack(-%VAR%); sfx(\~_heal\~);~[;]self[;]self[;]d[;]d);
Solar Flair_upgraded,Deal [sword]<d6> damage[;] heal|[heal]<d6> hp in [jinx]<d6> turns,1,attack(d); sfxdamage(target|d); sfx(~_magic~); jinx(~Solar Flair~[;]~recover [heal]%VAR% health~[;]~Recover [heal]%VAR% health~[;]~attack(-%VAR%); sfx(\~_heal\~);~[;]self[;]self[;]d[;]d);,Revitalize,MAX5|FREE1,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,jinx(~Solar Flair~[;]~recover [heal]%VAR% health~[;]~Recover [heal]%VAR% health~[;]~attack(-%VAR%); sfx(\~_heal\~);~[;]self[;]self[;]d[;]d);
Solar Flair_downgraded,Deal [sword]<d6> damage[;] heal|[heal]<d6> hp in [jinx]<d6> turns,1,attack(d); sfxdamage(target|d); sfx(~_magic~); jinx(~Solar Flair~[;]~recover [heal]%VAR% health~[;]~Recover [heal]%VAR% health~[;]~attack(-%VAR%); sfx(\~_heal\~);~[;]self[;]self[;]d[;]d);,Revitalize,MAX2|FREE1,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,jinx(~Solar Flair~[;]~recover [heal]%VAR% health~[;]~Recover [heal]%VAR% health~[;]~attack(-%VAR%); sfx(\~_heal\~);~[;]self[;]self[;]d[;]d);
Red Skies,Drain [heart]<d6> health[;] take|[sword]<d6> damage next turn,2,drain(d); sfx(~_drain~); inflictself(~mf_damagenextturn~|d);,Life Leech,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Red Skies_upgraded,Drain [heart]<d6> health[;] take|[sword]<d6> damage next turn,2,drain(d); sfx(~_drain~); inflictself(~mf_damagenextturn~|d);,Life Leech,NORMAL|FREE2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Red Skies_downgraded,Drain [heart]<d6> health[;] take|[sword]<d6> damage next turn,2,drain(d); sfx(~_drain~); inflictself(~mf_damagenextturn~|d);,Life Leech,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Twin Slam,Deal [sword]12 dmg in [jinx]2 turns.|Deal it now if enemy has a|Twin Slam jinx on them,2,var flag = false; if(target.status.length > 0){ var t = target.status.copy(); for(st in t){ if(st.name == ~Twin_Slam~){ flag = true;};};}; if(flag){attack(12); sfxdamage(target|12);}else{jinx(~Twin Slam~[;]~take [sword]12 damage~[;]~Take [sword]12 damage~[;]~attack(12); sfxdamage(null[;]12);~[;]target[;]self[;]2[;]2); sfx(~_thinghappens~);};,Whacksies,REQUIRE6,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Twin Slam_upgraded,Deal [sword]12 dmg in [jinx]2 turns.|Deal it now if enemy has a|Twin Slam jinx on them,2,var flag = false; if(target.status.length > 0){ var t = target.status.copy(); for(st in t){ if(st.name == ~Twin_Slam~){ flag = true;};};}; if(flag){attack(12); sfxdamage(target|12);}else{jinx(~Twin Slam~[;]~take [sword]12 damage~[;]~Take [sword]12 damage~[;]~attack(12); sfxdamage(null[;]12);~[;]target[;]self[;]2[;]2); sfx(~_thinghappens~);};,Whacksies,MIN5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Twin Slam_downgraded,Deal [sword]12 dmg in [jinx]2 turns.|Deal it now if enemy has a|Twin Slam jinx on them,2,var flag = false; if(target.status.length > 0){ var t = target.status.copy(); for(st in t){ if(st.name == ~Twin_Slam~){ flag = true;};};}; if(flag){attack(12); sfxdamage(target|12);}else{jinx(~Twin Slam~[;]~take [sword]12 damage~[;]~Take [sword]12 damage~[;]~attack(12); sfxdamage(null[;]12);~[;]target[;]self[;]2[;]2); sfx(~_thinghappens~);};,Whacksies,REQUIRE6|REQUIRE6,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Sludge,Deal [sword]<double> damage|Receive [poison]2 poison,2,attack(d*2); sfxdamage(target|d*2); inflictself(POISON|2); sfx(~_poison~);,Goop Gun,MAX3|FREE2,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(POISON|2); sfx(~_poison~);
Sludge_upgraded,Deal [sword]<double> damage|Receive [poison]2 poison,2,attack(d*2); sfxdamage(target|d*2); inflictself(POISON|2); sfx(~_poison~);,Goop Gun,MAX4|FREE2,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(POISON|2); sfx(~_poison~);
Sludge_downgraded,Deal [sword]<double> damage|Receive [poison]2 poison,2,attack(d*2); sfxdamage(target|d*2); inflictself(POISON|2); sfx(~_poison~);,Goop Gun,MAX3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(POISON|2); sfx(~_poison~);
Reverberate,[sword]<timesused>[;] +1 each use this turn|,1,attack(e.timesused+1); sfxdamage(target|e.timesused+1);,Whelm,MAX3,,RED,change_power,change_power,,,4,NO,NO,,,,,e.timesused=0;,,,,,,,,
Reverberate_upgraded,[sword]<timesused>[;] +1 each use this turn|,1,attack(e.timesused+1); sfxdamage(target|e.timesused+1);,Whelm,NORMAL,,RED,,,,,4,NO,NO,,,,,e.timesused=0;,,,,,,,,
Reverberate_downgraded,[sword]<timesused>[;] +1 each use this turn|,1,attack(e.timesused+1); sfxdamage(target|e.timesused+1);,Whelm,REQUIRE3,,RED,,,,,4,NO,NO,,,,,e.timesused=0;,,,,,,,,
Penance of Frost,Gain [heart]2 max hp if you win|(Receive [ice]1 each turn),1,,Mutagen,,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,if(!flee){self.maxhp+=2; self.hp+=2; sfx(~_cure~); };,inflictself(ICE);,e.animate(~flashandshake~); sfx(~_ice~);,,,,,,,
Penance of Frost_upgraded,Gain [heart]3 max hp if you win|(Receive [ice]1 each turn),1,,Mutagen,,,BRIGHTCYAN,,,,,0,NO,NO,,,,if(!flee){self.maxhp+=3; self.hp+=3; sfx(~_cure~); };,inflictself(ICE);,e.animate(~flashandshake~); sfx(~_ice~);,,,,,,,
Penance of Frost_downgraded,No effect if you win|(Receive [ice]1 each turn),1,,Mutagen,,,BRIGHTCYAN,,,,,0,NO,NO,,,,,inflictself(ICE);,e.animate(~flashandshake~); sfx(~_ice~);,,,,,,,
Penance of Flame,Gain [heart]2 max hp if you win|(Receive [fire]1 each turn),1,,Mutagen,,,RED,change_power,change_power,,,0,NO,NO,,,,if(!flee){self.maxhp+=2; self.hp+=2; sfx(~_cure~); };,inflictself(FIRE);,e.animate(~flashandshake~); sfx(~_fire~);,,,,,,,
Penance of Flame_upgraded,Gain [heart]3 max hp if you win|(Receive [fire]1 each turn),1,,Mutagen,,,RED,,,,,0,NO,NO,,,,if(!flee){self.maxhp+=3; self.hp+=3; sfx(~_cure~); };,inflictself(FIRE);,e.animate(~flashandshake~); sfx(~_fire~);,,,,,,,
Penance of Flame_downgraded,No effect if you win|(Receive [fire]1 each turn),1,,Mutagen,,,RED,,,,,0,NO,NO,,,,,inflictself(FIRE);,e.animate(~flashandshake~); sfx(~_fire~);,,,,,,,
Doot,Inflict [weaken]1 weaken|Return the dice,1,inflict(WEAKEN); givedice(d); sfx(~_weaken~);,Theremin,REQUIRE3,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Doot_upgraded,Inflict [weaken]1 weaken|Return the dice,1,inflict(WEAKEN); givedice(d); sfx(~_weaken~);,Theremin,ODD,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Doot_downgraded,Inflict [weaken]1 weaken,1,inflict(WEAKEN); sfx(~_weaken~);,Theremin,REQUIRE3,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Induction Blade,Deal [sword]<d6> damage[;] triple if|you have all the dice values|between 1 and <d6> inclusive,2,var x = 1; var flag = false; while(x < d){flag = false; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue == x){flag = true;};}; if(!flag){break;}; x+=1;}; if(flag){attack(d*3); sfxdamage(target|d*3); sfx(~_magic~);}else{attack(d); sfxdamage(target|d);};,Shuriken,MAX4,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Induction Blade_upgraded,Deal [sword]<d6> damage[;] triple if|you have all the dice values|between 1 and <d6> inclusive,2,var x = 1; var flag = false; while(x < d){for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue == x){flag = true;};}; if(!flag){break;}; x+=1;}; if(flag){attack(d*3); sfxdamage(target|d*3); sfx(~_magic~);}else{attack(d); sfxdamage(target|d);};,Shuriken,MAX5,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Induction Blade_downgraded,Deal [sword]<d6> damage[;] triple if|you have all the dice values|between 1 and <d6> inclusive,2,var x = 1; var flag = false; while(x < d){for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue == x){flag = true;};}; if(!flag){break;}; x+=1;}; if(flag){attack(d*3); sfxdamage(target|d*3); sfx(~_magic~);}else{attack(d); sfxdamage(target|d);};,Shuriken,MAX2,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Sky Lantern,Get a <slotdoubles> next turn|Return the dice,1,inflictself(~stash~+d); inflictself(~lightstatus~); sfx(~magic_gaindice~); var g = []; for(ad in actualdice){g.push(ad.basevalue);}; givedice(g);,Magic Lantern,DOUBLES|DOUBLES,,YELLOW,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Sky Lantern_upgraded,Get 2 <slotdoubles>s next turn|Return the dice,1,inflictself(~stash~+d|2); inflictself(~lightstatus~|2); sfx(~magic_gaindice~); var g = []; for(ad in actualdice){g.push(ad.basevalue);}; givedice(g);,Magic Lantern,DOUBLES|DOUBLES,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Sky Lantern_downgraded,Get a <slotdoubles> next turn,1,inflictself(~stash~+d); inflictself(~lightstatus~); sfx(~magic_gaindice~);,Magic Lantern,DOUBLES|DOUBLES,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Toilet Paper,Heal [heal]1 hp[;] add [shield]1 shield[;]|cure [poison]1 poison if you|have 4 copies of this,1,attackself(-1); inflictself(SHIELD); sfx(~_shield~); sfx(~_heal~); var count = 0; for(eq in self.equipment){trace(eq.name); if(eq.name == ~Toilet Paper~){count+=1;};}; trace(count); if(count >= 4){removestatusself(POISON|1); sfx(~_cure~|~~|0.2);};,Revitalize,EVEN,,PURPLE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Toilet Paper_upgraded,Heal [heal]1 hp[;] add [shield]1 shield[;]|cure [poison]1 poison if you|have 4 copies of this,1,attackself(-1); inflictself(SHIELD); sfx(~_shield~); sfx(~_heal~); var count = 0; for(eq in self.equipment){if(eq.name == ~Toilet Paper~){count+=1;};}; if(count >= 4){removestatusself(POISON|1); sfx(~_cure~|~~|0.4);};,Revitalize,NORMAL,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Toilet Paper_downgraded,Heal [heal]1 hp[;] add [shield]1 shield[;]|cure [poison]1 poison if you|have 4 copies of this,1,attackself(-1); inflictself(SHIELD); sfx(~_shield~); sfx(~_heal~); var count = 0; for(eq in self.equipment){if(eq.name == ~Toilet Paper~){count+=1;};}; if(count >= 4){removestatusself(POISON|1); sfx(~_cure~|~~|0.4);};,Revitalize,EVEN|EVEN,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Metronome,Deal [sword]<d6> damage[;] inflict|[weaken]1 weaken on even turns,2,if(turn % 2 == 0){inflict(WEAKEN); sfx(~_weaken~|~~|0.1);}; attack(d); sfxdamage(target|d);,Theremin,MAX5,,RED,change_power,change_power,,,0,NO,NO,,,,,if(turn % 2 == 0){e.changecolour(~ORANGE~);}else{e.changecolour(~RED~);};,,,,,,,,
Metronome_upgraded,Deal [sword]<d6> damage[;] inflict|[weaken]1 weaken on even turns,2,if(turn % 2 == 0){inflict(WEAKEN); sfx(~_weaken~|~~|0.1);}; attack(d); sfxdamage(target|d);,Theremin,MAX5|FREE2,,RED,,,,,0,NO,NO,,,,,if(turn % 2 == 0){e.changecolour(~ORANGE~);}else{e.changecolour(~RED~);};,,,,,,,,
Metronome_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,Theremin,MAX5,,RED,,,,,0,NO,NO,,,,,if(turn % 2 == 0){e.changecolour(~ORANGE~);}else{e.changecolour(~RED~);};,,,,,,,,
Positivity,Deal [sword]<d6> damage[;] heal [heal]<d6>|if your HP is a multiple of 10,1,attack(d); sfxdamage(target|d); if(self.hp % 10 == 0){attackself(-d); sfx(~_heal~);};,Life Leech,MAX4,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(self.hp % 10 == 0){attackself(-d); sfx(~_heal~);};
Positivity_upgraded,Deal [sword]<d6> damage[;] heal [heal]<d6>|hp if your health ends in 0,1,attack(d); sfxdamage(target|d); if(self.hp % 10 == 0){attackself(-d); sfx(~_heal~);};,Life Leech,MAX5,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,if(self.hp % 10 == 0){attackself(-d); sfx(~_heal~);};
Positivity_downgraded,Deal [sword]<d6> damage[;] heal [heal]<d6>|hp if your health ends in 0,1,attack(d); sfxdamage(target|d); if(self.hp % 10 == 0){attackself(-d); sfx(~_heal~);};,Life Leech,MAX2,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,if(self.hp % 10 == 0){attackself(-d); sfx(~_heal~);};
Jail Cell,If enemy rolls a [lock]<slotdoubles>[;] lock it|Return the dice,1,inflict(~counter_~+d); sfx(~_lock~); sfx(~_magic~); var g = []; for(ad in actualdice){g.push(ad.basevalue);}; givedice(g);,Magic Counterspell,DOUBLES|DOUBLES,,GRAY,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,var g = []; for(ad in actualdice){g.push(ad.basevalue);}; givedice(g);
Jail Cell_upgraded,If enemy rolls a [lock]<d6>[;] lock it|Return the dice,1,inflict(~counter_~+d); sfx(~_lock~); sfx(~_magic~); var g = []; for(ad in actualdice){g.push(ad.basevalue);}; givedice(g);,Magic Counterspell,NORMAL,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,var g = []; for(ad in actualdice){g.push(ad.basevalue);}; givedice(g);
Jail Cell_downgraded,If enemy rolls a [lock]<slotdoubles>[;] lock it,1,inflict(~counter_~+d); sfx(~_lock~); sfx(~_magic~);,Magic Counterspell,DOUBLES|DOUBLES,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Enlightenment,Deal [sword]20 damage|Get 4 extra dice next turn,1,attack(20); sfxdamage(target|20); sfx(~_magic~); for(x in 0...4){inflictself(~stash~+rand([1|2|3|4|5|6]));}; inflictself(~lightstatus~|4); sfx(~magic_gaindice~);,Magic Lantern,COUNTDOWN,25,YELLOW,change_power,change_power,,,0,NO,NO,,2,,,,,,,,,,,for(x in 0...4){inflictself(~stash~+rand([1|2|3|4|5|6]));}; inflictself(~lightstatus~|4); sfx(~magic_gaindice~);
Enlightenment_upgraded,Deal [sword]25 damage|Get 4 extra dice next turn,1,attack(25); sfxdamage(target|25); sfx(~_magic~); for(x in 0...4){inflictself(~stash~+rand([1|2|3|4|5|6]));}; inflictself(~lightstatus~|4); sfx(~magic_gaindice~);,Magic Lantern,COUNTDOWN,25,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,for(x in 0...4){inflictself(~stash~+rand([1|2|3|4|5|6]));}; inflictself(~lightstatus~|4); sfx(~magic_gaindice~);
Enlightenment_downgraded,Deal [sword]10 damage|Get 2 extra dice next turn,1,attack(10); sfxdamage(target|10); sfx(~_magic~); for(x in 0...2){inflictself(~stash~+rand([1|2|3|4|5|6]));}; inflictself(~lightstatus~|2); sfx(~magic_gaindice~);,Magic Lantern,COUNTDOWN,25,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,for(x in 0...2){inflictself(~stash~+rand([1|2|3|4|5|6]));}; inflictself(~lightstatus~|4); sfx(~magic_gaindice~);
Copyrat,Dice value = amount of|[poison] on the enemy,1,if(getstatus(POISON) > 0){if(getstatus(POISON) > 200){inflictself(~infinite~);}else{givedice(getstatus(POISON));}; sfx(~_poison~);};,Goop Gun,REQUIRE6,,PURPLE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Copyrat_upgraded,Dice value = amount of|[poison] on the enemy,1,if(getstatus(POISON) > 0){if(getstatus(POISON) > 200){inflictself(~infinite~);}else{givedice(getstatus(POISON));}; sfx(~_poison~);};,Goop Gun,MIN4,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Copyrat_downgraded,Dice value = amount of|[poison] on the enemy (max 6),1,if(getstatus(POISON) > 0){if(getstatus(POISON) > 6){givedice(6);}else{givedice(getstatus(POISON));}; sfx(~_poison~);};,Goop Gun,REQUIRE6,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Icicle Fall,[ice]<triple> dmg + [ice]1 freeze|(Enemy gets [dodge]1 each turn),2,attack(d*3|ICE); sfx(~_ice~); inflict(ICE); sfxdamage(target|d*3);,Refrigerator,MAX4,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,inflict(DODGE);,e.animate(~flashandshake~); sfx(~_dodge~);,,,,,,,
Icicle Fall_upgraded,[ice]<triple> dmg + [ice]1 freeze|(Enemy gets [dodge]1 each turn),2,attack(d*3|ICE); sfx(~_ice~); inflict(ICE); sfxdamage(target|d*3);,Refrigerator,MAX5,,BRIGHTCYAN,,,,,0,NO,NO,,,,,inflict(DODGE);,e.animate(~flashandshake~); sfx(~_dodge~);,,,,,,,
Icicle Fall_downgraded,[ice]<triple> dmg + [ice]1 freeze|(Enemy gets [dodge]1 each turn),2,attack(d*3|ICE); sfx(~_ice~); inflict(ICE); sfxdamage(target|d*3);,Refrigerator,MAX2,,BRIGHTCYAN,,,,,0,NO,NO,,,,,inflict(DODGE);,e.animate(~flashandshake~); sfx(~_dodge~);,,,,,,,
Impending Flames,[fire]<triple> damage + [fire]1 burn|(Enemy gets [dodge]1 each turn),2,attack(d*3|FIRE); sfx(~_fire~); inflict(FIRE); sfxdamage(target|d*3);,Ember,MAX4,,RED,change_power,change_power,,,0,NO,NO,,,,,inflict(DODGE);,e.animate(~flashandshake~); sfx(~_dodge~);,,,,,,,
Impending Flames_upgraded,[fire]<triple> damage + [fire]1 burn|(Enemy gets [dodge]1 each turn),2,attack(d*3|FIRE); sfx(~_fire~); inflict(FIRE); sfxdamage(target|d*3);,Ember,MAX5,,RED,,,,,0,NO,NO,,,,,inflict(DODGE);,e.animate(~flashandshake~); sfx(~_dodge~);,,,,,,,
Impending Flames_downgraded,[fire]<triple> damage + [fire]1 burn|(Enemy gets [dodge]1 each turn),2,attack(d*3|FIRE); sfx(~_fire~); inflict(FIRE); sfxdamage(target|d*3);,Ember,MAX2,,RED,,,,,0,NO,NO,,,,,inflict(DODGE);,e.animate(~flashandshake~); sfx(~_dodge~);,,,,,,,
Spear Strike,Deal [sword]6 damage|Get a 6 next turn,2,attack(6); sfxdamage(target[;]6); inflictself(~stash6~); sfx(~magic_gaindice~); inflictself(~lightstatus~);,Magic Lantern,MIN5,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(~stash6~); sfx(~magic_gaindice~); inflictself(~lightstatus~);
Spear Strike_upgraded,Deal [sword]6 damage|Get a 6 next turn|,2,attack(6); sfxdamage(target[;]6); inflictself(~stash6~); sfx(~magic_gaindice~);  inflictself(~lightstatus~);,Magic Lantern,MIN5,,RED,,,,,2,NO,NO,,,,,,,,,,,,,inflictself(~stash6~); sfx(~magic_gaindice~); inflictself(~lightstatus~);
Spear Strike_downgraded,Deal [sword]6 damage|Get a 6 next turn,2,attack(6); sfxdamage(target[;]6); inflictself(~stash6~); sfx(~magic_gaindice~);  inflictself(~lightstatus~);,Magic Lantern,REQUIRE6,,RED,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~stash6~); sfx(~magic_gaindice~); inflictself(~lightstatus~);
Plaster Blaster,Deal [sword] equal to the amount|of [heal] received this turn ([sword]<var:healamount>),1,var s = self.getvar(~healamount~); attack(s); sfxdamage(target|s); sfx(~_magic~);,Revitalize,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,NO,NO,,,,,self.setvar(~selfhealth~|self.hp); self.setvar(~healamount~|0);,,if(self.hp > self.getvar(~selfhealth~)){self.setvar(~healamount~|self.getvar(~healamount~)+self.hp-self.getvar(~selfhealth~));}; self.setvar(~selfhealth~|self.hp);,,,,,,
Plaster Blaster_upgraded,Deal [sword] equal to the amount|of [heal] received this turn ([sword]<var:healamount>),1,var s = self.getvar(~healamount~); attack(s); sfxdamage(target|s); sfx(~_magic~);,Revitalize,NORMAL|NORMAL,,GREEN,,,,,0,NO,NO,,,,,self.setvar(~selfhealth~|self.hp); self.setvar(~healamount~|0);,,if(self.hp > self.getvar(~selfhealth~)){self.setvar(~healamount~|self.getvar(~healamount~)+self.hp-self.getvar(~selfhealth~));}; self.setvar(~selfhealth~|self.hp);,,,,,,
Plaster Blaster_downgraded,Deal [sword] equal to the amount|of [heal] received this turn ([sword]<var:healamount>),1,var s = self.getvar(~healamount~); attack(s); sfxdamage(target|s); sfx(~_magic~);,Revitalize,REQUIRE4|REQUIRE4,,GREEN,,,,,0,NO,NO,,,,,self.setvar(~selfhealth~|self.hp); self.setvar(~healamount~|0);,,if(self.hp > self.getvar(~selfhealth~)){self.setvar(~healamount~|self.getvar(~healamount~)+self.hp-self.getvar(~selfhealth~));}; self.setvar(~selfhealth~|self.hp);,,,,,,
Key Change,Reduce your dice values by 1|1s become 6s instead,1,var c = 0; for(mydice in self.dicepool){if(mydice.available()){if(mydice.basevalue == 1){mydice.animatereroll(6| self.screenposition()| c * 0.05); }else{mydice.animatereroll(mydice.basevalue-1|self.screenposition()|c*0.05);}; c+=1;};}; sfx(~_thinghappens~);,Meganudge,DOUBLES|DOUBLES,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Key Change_upgraded,Reduce your dice values by 1|1s become 6s instead,1,var c = 0; for(mydice in self.dicepool){if(mydice.available()){if(mydice.basevalue == 1){mydice.animatereroll(6| self.screenposition()| c * 0.05); }else{mydice.animatereroll(mydice.basevalue-1|self.screenposition()|c*0.05);}; c+=1;};}; sfx(~_thinghappens~);,Meganudge,NORMAL,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Key Change_downgraded,Reduce your dice values by 1|1s become 6s instead,1,var c = 0; for(mydice in self.dicepool){if(mydice.available()){if(mydice.basevalue == 1){mydice.animatereroll(6| self.screenposition()| c * 0.05); }else{mydice.animatereroll(mydice.basevalue-1|self.screenposition()|c*0.05);}; c+=1;};}; sfx(~_thinghappens~);,Meganudge,REQUIRE6|REQUIRE6,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Coalescence,Deal [sword]2 dmg[;] heal [heal]2 hp|,2,attack(2); sfxdamage(target|2); attackself(-2); sfx(~_heal~);,Lava Drop,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,attackself(-2); sfx(~_heal~);
Coalescence_upgraded,Deal [sword]3 dmg[;] heal [heal]3 hp|,2,attack(3); sfxdamage(target|3); attackself(-3); sfx(~_heal~);,Lava Drop,DOUBLES|DOUBLES,,PURPLE,,,,,-1,NO,NO,,,,,,,,,,,,,attackself(-3); sfx(~_heal~);
Coalescence_downgraded,Deal [sword]1 dmg[;] heal [heal]1 hp|,2,attack(1); sfxdamage(target|1); attackself(-1); sfx(~_heal~);,Lava Drop,DOUBLES|DOUBLES,,PURPLE,,,,,-1,NO,NO,,,,,,,,,,,,,attackself(-1); sfx(~_heal~);
Exoskeleton,Gain [shield]2 shield for|the enemy's turn only,1,,Barricade,,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,var ac = new motion.actuators.SimpleActuator(null|0.1); var s = new elements.Skill(~mf_blankskill~); s.script=~removestatusself(SHIELD|getstatusself(\~shielddown\~)); removestatusself(\~shielddown\~|ALL);~; ac.onComplete(s.execute|[self|target]); ac.move();,,,,if(target.hp > 0){inflictself(SHIELD|2); sfx(~_shield~); inflictself(~shielddown~|2);};,,,,
Exoskeleton_upgraded,Gain [shield]3 shield for|the enemy's turn only,1,,Barricade,,,ORANGE,,,,,0,NO,NO,,,,,var ac = new motion.actuators.SimpleActuator(null|0.1); var s = new elements.Skill(~mf_blankskill~); s.script=~removestatusself(SHIELD|getstatusself(\~shielddown\~)); removestatusself(\~shielddown\~|ALL);~; ac.onComplete(s.execute|[self|target]); ac.move();,,,,if(target.hp > 0){inflictself(SHIELD|3); sfx(~_shield~); inflictself(~shielddown~|3);};,,,,
Exoskeleton_downgraded,Gain [shield]1 shield for|the enemy's turn only,1,,Barricade,,,ORANGE,,,,,0,NO,NO,,,,,var ac = new motion.actuators.SimpleActuator(null|0.1); var s = new elements.Skill(~mf_blankskill~); s.script=~removestatusself(SHIELD|getstatusself(\~shielddown\~)); removestatusself(\~shielddown\~|ALL);~; ac.onComplete(s.execute|[self|target]); ac.move();,,,,if(target.hp > 0){inflictself(SHIELD|1); sfx(~_shield~); inflictself(~shielddown~|1);};,,,,
Transmogrify,Permanently swap cards in|your hand for random ones,1,if(simulation){bonus(1000000000);}else{var eqlist = [ for (eq in self.equipment) if (eq.ready && eq.skillcard == ~~) eq ]; for (eq in eqlist) { var x = eq.x; var y = eq.y; var flag = true; while (flag # !(eq.usesleft == 0 && eq.getslots().length > 0 && eq.script.length > 0 && eq.script.indexOf(~giveequipment~) == -1 && eq.script.indexOf(~create~) == -1 && eq.script.indexOf(~MANA~) == -1)) { flag = false; var r = ~~; if (self.name == ~Jester~) { r = rand(getequipmentlist(null | [] | [~excludefromrandomlists~ |~warrioronly~ |~thiefonly~| ~robotonly~ | ~inventoronly~ | ~witchonly~ | ~jesteronly~ | ~cannotsteal~ | ~finale~ | ~powercard~ | ~onceperbattle~ | ~alternateversion~])); } else { var size = ~large~; if (eq.size == 1) { size = ~small~; } r = rand(getequipmentlist(null | [size] | [~excludefromrandomlists~ |~warrioronly~ |~thiefonly~| ~robotonly~ | ~inventoronly~ | ~witchonly~ | ~jesteronly~  | ~cannotsteal~ | ~finale~ | ~powercard~ | ~alternateversion~])); }; if(eq.hastag(~powercard~)){eq.equipmentpanel.remove(); eq.equipmentpanel = null; }; if(eq.upgraded){eq.create(r+~+~|true|false|true);}else if(eq.weakened){if(eq.originallyupgraded){eq.create(r+~+~|true|true);}else{eq.create(r);}; eq.downgrade();}else{eq.create(r);}; }; if (self.name == ~Jester~) { eq.resize(2); }; var h = new elements.Animation(); h.applytoequipment(eq); eq.animation.push(h); h.addcommand(~flash~ | null | 0.1); h.addcommand(~textparticle~ | ~[confuse] Transmogrify!~ | 11835116); eq.x = x; eq.y = y; }; sfx(~jester_delete~);};,Mass Polymorph,NORMAL,,PURPLE,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Transmogrify_upgraded,Permanently swap cards in|your hand for the same|random piece of equipment,1,if(simulation){bonus(1000000000);}else{var eqlist = [ for (eq in self.equipment) if (eq.ready && eq.skillcard == ~~) eq ]; var size = ~large~; for(eq in eqlist){if(eq.size == 1){size = ~small~;};}; var repname = ~~; var n = new elements.Equipment(~Sword~); n.create(~Sword~); var flag = true; while (flag # !(n.usesleft == 0 && n.getslots().length > 0 && n.script.length > 0 && n.script.indexOf(~giveequipment~) == -1 && n.script.indexOf(~create~) == -1 && n.script.indexOf(~MANA~) == -1)) { flag = false; var r = ~~; if (self.name == ~Jester~) { r = rand(getequipmentlist(null | [] | [~excludefromrandomlists~ |~warrioronly~ |~thiefonly~| ~robotonly~ | ~inventoronly~ | ~witchonly~ | ~jesteronly~ | ~cannotsteal~ | ~finale~ | ~powercard~ | ~onceperbattle~ | ~alternateversion~])); } else { r = rand(getequipmentlist(null | [size] | [~excludefromrandomlists~ |~warrioronly~ |~thiefonly~| ~robotonly~ | ~inventoronly~ | ~witchonly~ | ~jesteronly~  | ~cannotsteal~ | ~finale~ | ~powercard~ | ~alternateversion~])); }; if(n.hastag(~powercard~)){n.equipmentpanel.remove(); n.equipmentpanel = null; }; n.create(r); trace(n.name); }; repname = n.name; for (eq in eqlist) { var x = eq.x; var y = eq.y;  if(eq.upgraded){eq.create(repname+~+~|true|false|true);}else if(eq.weakened){if(eq.originallyupgraded){eq.create(repname+~+~|true|true);}else{eq.create(repname);}; eq.downgrade();}else{eq.create(repname);}; if (self.name == ~Jester~) { eq.resize(2); }; /*eq.resetslots(); */var h = new elements.Animation(); h.applytoequipment(eq); eq.animation.push(h); h.addcommand(~flash~ | null | 0.1); h.addcommand(~textparticle~ | ~[confuse] Transmogrify!~ | 11835116); eq.x = x; eq.y = y; }; sfx(~jester_delete~);};,Mass Polymorph,NORMAL,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Transmogrify_downgraded,Permanently swap cards in|your hand for random ones,1,if(simulation){bonus(1000000000);}else{var eqlist = [ for (eq in self.equipment) if (eq.ready && eq.skillcard == ~~) eq ]; for (eq in eqlist) { var x = eq.x; var y = eq.y; var flag = true; while (flag # !(eq.usesleft == 0 && eq.getslots().length > 0 && eq.script.length > 0 && eq.script.indexOf(~giveequipment~) == -1 && eq.script.indexOf(~create~) == -1 && eq.script.indexOf(~MANA~) == -1)) { flag = false; var r = ~~; if (self.name == ~Jester~) { r = rand(getequipmentlist(null | [] | [~excludefromrandomlists~ |~warrioronly~ |~thiefonly~| ~robotonly~ | ~inventoronly~ | ~witchonly~ | ~jesteronly~ | ~cannotsteal~ | ~finale~ | ~powercard~ | ~onceperbattle~ | ~alternateversion~])); } else { var size = ~large~; if (eq.size == 1) { size = ~small~; } r = rand(getequipmentlist(null | [size] | [~excludefromrandomlists~ |~warrioronly~ |~thiefonly~| ~robotonly~ | ~inventoronly~ | ~witchonly~ | ~jesteronly~  | ~cannotsteal~ | ~finale~ | ~powercard~ | ~alternateversion~])); }; if(eq.hastag(~powercard~)){eq.equipmentpanel.remove(); eq.equipmentpanel = null; }; if(eq.upgraded){eq.create(r+~+~|true|false|true);}else if(eq.weakened){if(eq.originallyupgraded){eq.create(r+~+~|true|true);}else{eq.create(r);}; eq.downgrade();}else{eq.create(r);}; }; if (self.name == ~Jester~) { eq.resize(2); }; var h = new elements.Animation(); h.applytoequipment(eq); eq.animation.push(h); h.addcommand(~flash~ | null | 0.1); h.addcommand(~textparticle~ | ~[confuse] Transmogrify!~ | 11835116); eq.x = x; eq.y = y; }; sfx(~jester_delete~);};,Mass Polymorph,EVEN,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Dud,Deal [sword]0 damage|Return the dice,1,attack(0); sfxdamage(target|0); givedice(d);,Finger Guns,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Dud_upgraded,Deal [sword]0 damage[;] twice|Return the dice,1,attack(0); attack(0);  sfxdamage(target|0); givedice(d);,Finger Guns,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Dud_downgraded,Take [sword]0 damage|Return the dice,1,attackself(0); givedice(d);,Finger Guns,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Reinforce,Gain [shield]6 shield|and [reduce]2 reduce,2,inflictself(SHIELD|6); inflictself(REDUCE|2); sfx(~_shield~);,Barricade,COUNTDOWN,16,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Reinforce_upgraded,Gain [shield]6 shield|and [reduce]3 reduce,2,inflictself(SHIELD|6); inflictself(REDUCE|3); sfx(~_shield~);,Barricade,COUNTDOWN,16,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Reinforce_downgraded,Gain [shield]4 shield|and [reduce]1 reduce,2,inflictself(SHIELD|4); inflictself(REDUCE|1); sfx(~_shield~);,Barricade,COUNTDOWN,16,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Petal to the Metal,Gain [thorns]3 thorns|Gain [shield]5 shield,1,inflictself(THORNS|3); inflictself(SHIELD|5); sfx(~_thorns~); sfx(~_shield~|~~|0.1);,Pinprick,REQUIRE3|REQUIRE5,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Petal to the Metal_upgraded,Gain [thorns]3 thorns|Gain [shield]5 shield,1,inflictself(THORNS|3); inflictself(SHIELD|5); sfx(~_thorns~); sfx(~_shield~|~~|0.1);,Pinprick,NORMAL|NORMAL,8,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Petal to the Metal_downgraded,Gain [thorns]2 thorns|Gain [shield]4 shield,1,inflictself(THORNS|2); inflictself(SHIELD|4); sfx(~_thorns~); sfx(~_shield~|~~|0.1);,Pinprick,REQUIRE3|REQUIRE5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Spatulargh,Flip dice[;] lose [heart]1 health|,1,givedice(7-d); pierceattackself(1); sfx(~_drain~);,Megaflip,MIN3,,RED,change_power,change_power,,,-1,YES,NO,,1,,,,,,,,,,,
Spatulargh_upgraded,Flip dice[;] lose [heart]1 health|,1,givedice(7-d); pierceattackself(1); sfx(~_drain~);,Megaflip,NORMAL,,RED,,,,,-1,YES,NO,,,,,,,,,,,,,
Spatulargh_downgraded,Flip dice[;] lose [heart]1 health,1,givedice(7-d); pierceattackself(1); sfx(~_drain~);,Megaflip,MIN3,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Mirror Madness,[]+1 dice this fight,2,self.extradice+=1; sfx(~magic_gaindice~);,Infinity Mirror,NORMAL|NORMAL|NORMAL,,PURPLE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Mirror Madness_upgraded,[]+1 dice this fight,2,self.extradice+=1; sfx(~magic_gaindice~);,Infinity Mirror,NORMAL|NORMAL,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Mirror Madness_downgraded,[]+1 dice this fight,2,self.extradice+=1; sfx(~magic_gaindice~);,Infinity Mirror,NORMAL|NORMAL|NORMAL|NORMAL,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Life Siphon,Drain [heart]1 hp per health that|Regen will restore this turn,2,var t = 0; for(x in 1...13){t+=getstatusself(~regen~+x);}; if(t > 0){drain(t); sfx(~_drain~);}else{self.textparticle(~No effect!~);};,Life Leech,MIN4,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Life Siphon_upgraded,Drain [heart]1 hp per health that|Regen will restore this turn,2,var t = 0; for(x in 1...13){t+=getstatusself(~regen~+x);}; if(t > 0){drain(t); sfx(~_drain~);}else{self.textparticle(~No effect!~);};,Life Leech,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Life Siphon_downgraded,Drain [heart]1 hp per health that|Regen will restore this turn,2,var t = 0; for(x in 1...13){t+=getstatusself(~regen~+x);}; if(t > 0){drain(t); sfx(~_drain~);}else{self.textparticle(~No effect!~);};,Life Leech,REQUIRE4,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Harmony Orb,Heal [heal]1 health at the end|of your turn[;] for [regen]3 turns,1,inflictself(~regen3~); sfx(~_cure~);,Revitalize,COUNTDOWN,4,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Harmony Orb_upgraded,Heal [heal]1 health at the end|of your turn[;] for [regen]5 turns,1,inflictself(~regen5~); sfx(~_cure~);,Revitalize,COUNTDOWN,4,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Harmony Orb_downgraded,Heal [heal]1 health at the end|of your turn[;] for [regen]2 turns,1,inflictself(~regen2~); sfx(~_cure~);,Revitalize,COUNTDOWN,4,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Eviscerate,Extend the duration of all|active Bleed effects by 1,1,var t = [0]; var s = [0]; for(i in 1...13){t.push(getstatus(~bleed~+i)); removestatus(~bleed~+i|ALL); s.push(getstatusself(~bleed~+i)); removestatusself(~bleed~+i|ALL);}; for(i in 1...13){inflict(~bleed~+(i+1)|t[i]); inflictself(~bleed~+(i+1)|s[i]);}; sfx(~_poison~);,Slick Slash,ODD,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Eviscerate_upgraded,Extend the duration of all|active Bleed effects by 1,1,var t = [0]; var s = [0]; for(i in 1...13){t.push(getstatus(~bleed~+i)); removestatus(~bleed~+i|ALL); s.push(getstatusself(~bleed~+i)); removestatusself(~bleed~+i|ALL);}; for(i in 1...13){inflict(~bleed~+(i+1)|t[i]); inflictself(~bleed~+(i+1)|s[i]);}; sfx(~_poison~);,Slick Slash,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Eviscerate_downgraded,Extend the duration of all|active Bleed effects by 1,1,var t = [0]; var s = [0]; for(i in 1...13){t.push(getstatus(~bleed~+i)); removestatus(~bleed~+i|ALL); s.push(getstatusself(~bleed~+i)); removestatusself(~bleed~+i|ALL);}; for(i in 1...13){inflict(~bleed~+(i+1)|t[i]); inflictself(~bleed~+(i+1)|s[i]);}; sfx(~_poison~);,Slick Slash,REQUIRE5,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Paper Cut,Inflict 1 turn of Bleed[;]|dealing [sword]<d6> damage,1,inflict(~bleed1~|d); sfxdamage(target|d);,Slick Slash,MAX4,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Paper Cut_upgraded,Inflict 1 turn of Bleed[;]|dealing [sword]<d6> damage,1,inflict(~bleed1~|d); sfxdamage(target|d);,Slick Slash,MAX5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Paper Cut_downgraded,Inflict 1 turn of Bleed[;]|dealing [sword]<d6> damage,1,inflict(~bleed1~|d); sfxdamage(target|d);,Slick Slash,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Nosebleed,Inflict 2 turns of Bleed[;]|dealing [sword]2 dmg each turn,1,inflict(~bleed2~|2); sfxdamage(target|2);,Slick Slash,COUNTDOWN,3,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Nosebleed_upgraded,Inflict 2 turns of Bleed[;]|dealing [sword]3 dmg each turn,1,inflict(~bleed3~|2); sfxdamage(target|2);,Slick Slash,COUNTDOWN,3,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Nosebleed_downgraded,Inflict 2 turns of Bleed[;]|dealing [sword]1 dmg each turn,1,inflict(~bleed1~|2); sfxdamage(target|2);,Slick Slash,COUNTDOWN,3,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Spelksword,Deal [sword]<d6> dmg[;] but take|[sword]1 dmg per turn for 3 turns,1,attack(d); sfxdamage(target|d); inflictself(~bleed3~);,Slick Slash,MAX5|FREE2,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(~bleed3~);
Spelksword_upgraded,Deal [sword]<d6> dmg[;] but take|[sword]1 dmg per turn for 3 turns,1,attack(d); sfxdamage(target|d); inflictself(~bleed3~);,Slick Slash,NORMAL|FREE2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~bleed3~);
Spelksword_downgraded,Deal [sword]<d6> dmg[;] but take|[sword]1 dmg per turn for 3 turns,1,attack(d); sfxdamage(target|d); inflictself(~bleed3~);,Slick Slash,MAX5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~bleed3~);
Dropkick,Deal [sword]<d6> damage. On|double 1[;] get 3 new dice,2,attack(d); sfxdamage(target|d); if(actualdice[0].basevalue == 1 && actualdice[1].basevalue == 1){var da = []; for(x in 0...3){da.push(rand([1|2|3|4|5|6]));}; givedice(da);};,Magic Dice,MAX5|MAX5,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(actualdice[0].basevalue == 1 && actualdice[1].basevalue == 1){var da = []; for(x in 0...3){da.push(rand([1|2|3|4|5|6]));}; givedice(da);};
Dropkick_upgraded,Deal [sword]<d6> damage. On|double 1[;] get 3 new dice,2,attack(d); sfxdamage(target|d); if(actualdice[0].basevalue == 1 && actualdice[1].basevalue == 1){var da = []; for(x in 0...3){da.push(rand([1|2|3|4|5|6]));}; givedice(da);};,Magic Dice,NORMAL|NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,if(actualdice[0].basevalue == 1 && actualdice[1].basevalue == 1){var da = []; for(x in 0...3){da.push(rand([1|2|3|4|5|6]));}; givedice(da);};
Dropkick_downgraded,Deal [sword]<d6> damage. On|double 1[;] get 3 new dice,2,attack(d); sfxdamage(target|d); if(actualdice[0].basevalue == 1 && actualdice[1].basevalue == 1){var da = []; for(x in 0...3){da.push(rand([1|2|3|4|5|6]));}; givedice(da);};,Magic Dice,MAX3|MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,if(actualdice[0].basevalue == 1 && actualdice[1].basevalue == 1){var da = []; for(x in 0...3){da.push(rand([1|2|3|4|5|6]));}; givedice(da);};
Lavateinn,Deal [fire]10 damage|(Start of turn: inflict [fire]1[]),2,attack(10|FIRE); sfxdamage(target|10); sfx(~_fire~);,Heat Ray,COUNTDOWN,16,RED,change_power,change_power,,,0,NO,NO,,,,,,inflict(FIRE); sfx(~_fire~);,,,,,,,
Lavateinn_upgraded,Deal [fire]14 damage|(Start of turn: inflict [fire]1[]),2,attack(14|FIRE); sfxdamage(target|14); sfx(~_fire~);,Heat Ray,COUNTDOWN,16,RED,,,,,0,NO,NO,,,,,,inflict(FIRE); sfx(~_fire~);,,,,,,,
Lavateinn_downgraded,Deal [fire]5 damage|(Start of turn: inflict [fire]1[]),2,attack(5|FIRE); sfxdamage(target|5); sfx(~_fire~);,Heat Ray,COUNTDOWN,16,RED,,,,,0,NO,NO,,,,,,inflict(FIRE); sfx(~_fire~);,,,,,,,
Jokulteinn,Deal [ice]10 damage|(Start of turn: inflict [ice]1[]),2,attack(10|ICE); sfxdamage(target|10); sfx(~_ice~);,Arctic Storm,COUNTDOWN,16,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,inflict(ICE); sfx(~_ice~);,,,,,,,
Jokulteinn_upgraded,Deal [ice]14 damage|(Start of turn: inflict [ice]1[]),2,attack(14|ICE); sfxdamage(target|14); sfx(~_ice~);,Arctic Storm,COUNTDOWN,16,BRIGHTCYAN,,,,,0,NO,NO,,,,,,inflict(ICE); sfx(~_ice~);,,,,,,,
Jokulteinn_downgraded,Deal [ice]5 damage|(Start of turn: inflict [ice]1[]),2,attack(5|ICE); sfxdamage(target|5); sfx(~_ice~);,Arctic Storm,COUNTDOWN,16,BRIGHTCYAN,,,,,0,NO,NO,,,,,,inflict(ICE); sfx(~_ice~);,,,,,,,
Blood Eagle,Lose [heart]<d6> health|Heal [heal]<double> next turn,1,pierceattackself(d); sfx(~_drain~); inflictself(~healnextturn~|d*2);,Revitalize,MAX3,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Blood Eagle_upgraded,Lose [heart]<d6> health|Heal [heal]<double> next turn,1,pierceattackself(d); sfx(~_drain~); inflictself(~healnextturn~|d*2);,Revitalize,MAX3|FREE1,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Blood Eagle_downgraded,Lose [heart]<d6> health|Heal [heal]<d6> next turn,1,pierceattackself(d); sfx(~_drain~); inflictself(~healnextturn~|d);,Revitalize,MAX3,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Chitin Helmet,Gain [shield]6 shield|Inflict [lock]1 lock,2,inflictself(SHIELD|6); inflict(LOCK); sfx(~_shield~); sfx(~_lock~);,Barricade,COUNTDOWN,14,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD|6); sfx(~_shield~);
Chitin Helmet_upgraded,Gain [shield]9 shield|Inflict [lock]1 lock,2,inflictself(SHIELD|9); inflict(LOCK); sfx(~_shield~); sfx(~_lock~);,Barricade,COUNTDOWN,14,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD|9); sfx(~_shield~);
Chitin Helmet_downgraded,Gain [shield]3 shield|Inflict [lock]1 lock,2,inflictself(SHIELD|3); inflict(LOCK); sfx(~_shield~); sfx(~_lock~);,Barricade,COUNTDOWN,14,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD|3); sfx(~_shield~);
Lucky Sword,Do [sword]7[;] return the dice|(You feel... lucky),2,attack(7); sfxdamage(target|7); sfx(~_magic~); givedice([for(ad in actualdice) ad.basevalue]); //epic hack,Lucky Shot,NORMAL|NORMAL,7,GREEN,change_power,change_power,,,0,NO,NO,,,,,inflictself(~luck~);,,,,,,,,givedice([for(ad in actualdice) ad.basevalue]);
Lucky Sword_upgraded,Do [sword]7[;] return the dice|(You feel... lucky),2,attack(7); sfxdamage(target|7); sfx(~_magic~); givedice([for(ad in actualdice) ad.basevalue]); //epic hack,Lucky Shot,MAX4|MIN3,,GREEN,,,,,0,NO,NO,,,,,inflictself(~luck~);,,,,,,,,givedice([for(ad in actualdice) ad.basevalue]);
Lucky Sword_downgraded,Deal [sword]7 damage|(You feel... lucky),2,attack(7); sfxdamage(target|7); sfx(~_magic~);,Lucky Shot,NORMAL|NORMAL,7,GREEN,,,,,0,NO,NO,,,,,inflictself(~luck~);,,,,,,,,
Woozy Whack,Deal [sword]3 dmg in [jinx]2 turns|,1,jinx(~Whack~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]2[;]3); sfx(~_thinghappens~);,Whacksies,COUNTDOWN,3,PINK,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,
Woozy Whack_upgraded,Deal [sword]5 dmg in [jinx]2 turns|,1,jinx(~Whack~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]2[;]5); sfx(~_thinghappens~);,Whacksies,COUNTDOWN,3,PINK,,,,,-1,NO,NO,,,,,,,,,,,,,
Woozy Whack_downgraded,Deal [sword]2 dmg in [jinx]2 turns|,1,jinx(~Whack~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;]%VAR%);~[;]target[;]self[;]2[;]2); sfx(~_thinghappens~);,Whacksies,COUNTDOWN,3,PINK,,,,,-1,NO,NO,,,,,,,,,,,,,
Heartbeat,Whenever you use an item[;]|deal [sword]1 damage|,2,attack(1); sfxdamage(target|1);,Bubble Gun,,,RED,change_power,change_power,,,6,NO,NO,cannotreuse|excludefromrandomlists,,,,e.setvar(~equipmentused~|0);,,if(self.equipmentused > e.getvar(~equipmentused~)){e.doequipmentaction(self|target|1|[]|0|true); e.setvar(~equipmentused~|self.equipmentused); self.equipmentused-=1;}else{e.setvar(~equipmentused~|self.equipmentused);};,,,,,e.preventdefault = true; e.maintainfury = true;,
Heartbeat_upgraded,Whenever you use an item[;]|deal [sword]1 damage|,2,attack(1); sfxdamage(target|1);,Bubble Gun,,,RED,,,,,10,NO,NO,cannotreuse|excludefromrandomlists,,,,e.setvar(~equipmentused~|0);,,if(self.equipmentused > e.getvar(~equipmentused~)){e.doequipmentaction(self|target|1|[]|0|true); e.setvar(~equipmentused~|self.equipmentused); self.equipmentused-=1;}else{e.setvar(~equipmentused~|self.equipmentused);};,,,,,e.preventdefault = true; e.maintainfury = true;,
Heartbeat_downgraded,Whenever you use an item[;]|deal [sword]1 damage|,2,attack(1); sfxdamage(target|1);,Bubble Gun,,,RED,,,,,4,NO,NO,cannotreuse|excludefromrandomlists,,,,e.setvar(~equipmentused~|0);,,if(self.equipmentused > e.getvar(~equipmentused~)){e.doequipmentaction(self|target|1|[]|0|true); e.setvar(~equipmentused~|self.equipmentused); self.equipmentused-=1;}else{e.setvar(~equipmentused~|self.equipmentused);};,,,,,e.preventdefault = true; e.maintainfury = true;,
Soul Pierce,Roll 2 extra dice[;] and lose|[heart]6 health[;] each turn,1,var da = []; for(x in 0...2){da.push(rand([1|2|3|4|5|6]));}; givedice(da); pierceattackself(6); sfx(~_drain~);,Magic Dice,,,PURPLE,change_power,change_power,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,e.doequipmentaction(self|target|1|[]|0|true);,,,,,,,
Soul Pierce_upgraded,Roll 3 extra dice[;] and lose|[heart]6 health[;] each turn,1,var da = []; for(x in 0...3){da.push(rand([1|2|3|4|5|6]));}; givedice(da); pierceattackself(6); sfx(~_drain~);,Magic Dice,,,PURPLE,,,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,e.doequipmentaction(self|target|1|[]|0|true);,,,,,,,
Soul Pierce_downgraded,Roll an extra dice[;] and lose|[heart]6 health[;] each turn,1,var da = []; for(x in 0...1){da.push(rand([1|2|3|4|5|6]));}; givedice(da); pierceattackself(6); sfx(~_drain~);,Magic Dice,,,PURPLE,,,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,e.doequipmentaction(self|target|1|[]|0|true);,,,,,,,
Spire Shield,Gain [shield]<d6> shield|(Start turn: lose all shield),2,inflictself(SHIELD|d); sfx(~_shield~);,Barricade,MAX4|FREE2,,ORANGE,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,removestatusself(SHIELD|ALL); e.animate(~flashandshake~);,,,,,,,
Spire Shield_upgraded,Gain [shield]<d6> shield|(Start turn: lose all shield),2,inflictself(SHIELD|d); sfx(~_shield~);,Barricade,NORMAL|FREE2,,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,removestatusself(SHIELD|ALL); e.animate(~flashandshake~);,,,,,,,
Spire Shield_downgraded,Gain [shield]<d6> shield|(Start turn: lose all shield),2,inflictself(SHIELD|d); sfx(~_shield~);,Barricade,MAX4|FREE2,,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,removestatusself(SHIELD|ALL); e.animate(~flashandshake~);,,,,,,,
Eye Beam,Deal [sword]5 damage|(If used first: roll a 5),2,attack(5); sfxdamage(target|5); if(self.equipmentused <= 1){givedice(5); sfx(~_magic~);};,Plasma Gun,COUNTDOWN,5,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,e.changecolour(~RED~);,,if(self.equipmentused >= 1){e.changecolour(~GRAY~);};,,,,,,if(self.equipmentused <= 1){givedice(5); sfx(~_magic~);};
Eye Beam_upgraded,Deal [sword]6 damage|(If used first: roll a 6),2,attack(6); sfxdamage(target|6); if(self.equipmentused <= 1){givedice(6); sfx(~_magic~);};,Plasma Gun,COUNTDOWN,5,RED,,,,,0,NO,NO,excludefromrandomlists,,,,e.changecolour(~RED~);,,if(self.equipmentused >= 1){e.changecolour(~GRAY~);};,,,,,,if(self.equipmentused <= 1){givedice(6); sfx(~_magic~);};
Eye Beam_downgraded,Deal [sword]5 damage,2,attack(5); sfxdamage(target|5);,Plasma Gun,COUNTDOWN,5,GRAY,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Differblade,Do [sword] equal to the difference|between total and difference[;]|and return the difference,2,var diff = actualdice[0].basevalue - actualdice[1].basevalue; if(diff < 0){diff = diff * -1;}; attack(d-diff); if(diff > 0){givedice(diff);}; sfxdamage(target|d-diff);,Plasma Gun,MAX5|MAX5,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,var diff = actualdice[0].basevalue - actualdice[1].basevalue; if(diff < 0){diff = diff * -1;}; givedice(diff);
Differblade_upgraded,Do [sword] equal to the difference|between total and difference[;]|and return the difference,2,var diff = actualdice[0].basevalue - actualdice[1].basevalue; if(diff < 0){diff = diff * -1;}; attack(d-diff); if(diff > 0){givedice(diff);}; sfxdamage(target|d-diff);,Plasma Gun,NORMAL|NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,var diff = actualdice[0].basevalue - actualdice[1].basevalue; if(diff < 0){diff = diff * -1;}; givedice(diff);
Differblade_downgraded,Do [sword] equal to the difference|between total and difference[;]|and return the difference,2,var diff = actualdice[0].basevalue - actualdice[1].basevalue; if(diff < 0){diff = diff * -1;}; attack(d-diff); if(diff > 0){givedice(diff);}; sfxdamage(target|d-diff);,Plasma Gun,MAX3|MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,var diff = actualdice[0].basevalue - actualdice[1].basevalue; if(diff < 0){diff = diff * -1;}; givedice(diff);
Sp4tula,Roll a 4,1,givedice(4);,Slightly Lucky Roll,MIN3,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Sp4tula_upgraded,Roll a 4,1,givedice(4);,Slightly Lucky Roll,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Sp4tula_downgraded,Roll a 4,1,givedice(4);,Slightly Lucky Roll,REQUIRE5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Stethoscope,Deal [sword]<d6> damage[;] heal|[heal]2 if enemy is [poison]poisoned,2,attack(d); sfxdamage(target|d); if(getstatus(POISON) > 0){attackself(-2); sfx(~_heal~);};,Regenerate,MAX5,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(getstatus(POISON) > 0){attackself(-2); sfx(~_heal~);};
Stethoscope_upgraded,Deal [sword]<d6> damage[;] heal|[heal]2 if enemy is [poison]poisoned,2,attack(d); sfxdamage(target|d); if(getstatus(POISON) > 0){attackself(-2); sfx(~_heal~);};,Regenerate,MAX5|FREE2,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,if(getstatus(POISON) > 0){attackself(-2); sfx(~_heal~);};
Stethoscope_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,Regenerate,MAX5,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Tacks Fraud,Lose [heart]<d6> health|Gain [thorns]<d6> thorns,1,pierceattackself(d); inflictself(THORNS|d); sfx(~_drain~|~~|0.1); sfx(~_thorns~);,Pinprick,MAX4,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Tacks Fraud_upgraded,Lose [heart]<d6> health|Gain [thorns]<d6> thorns,1,pierceattackself(d); inflictself(THORNS|d); sfx(~_drain~|~~|0.1); sfx(~_thorns~);,Pinprick,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Tacks Fraud_downgraded,Lose [heart]<double> health|Gain [thorns]<d6> thorns,1,pierceattackself(d*2); inflictself(THORNS|d); sfx(~_drain~|~~|0.1); sfx(~_thorns~);,Pinprick,MAX4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Recycling Charm,All equipment is|reuseable this turn,2,inflictself(~recycle~); sfx(~_recycle~);,Efficiency,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,YES,NO,finale,,,,,,,,,,,,
Recycling Charm_upgraded,All equipment is|reuseable this turn,2,inflictself(~recycle~); sfx(~_recycle~);,Efficiency,NORMAL|NORMAL,,ORANGE,,,,,0,YES,NO,finale,,,,,,,,,,,,
Recycling Charm_downgraded,All equipment is|reuseable this turn,2,inflictself(~recycle~); sfx(~_recycle~);,Efficiency,REQUIRE6|REQUIRE6,,ORANGE,,,,,0,YES,NO,finale,,,,,,,,,,,,
Overtime,Lose [heart]<d6> hp|Heal [heal]<double> hp after battle,1,pierceattackself(d); sfx(~_drain~); inflictself(~healaftercombat~|d*2); sfx(~_cure~); self.setvar(~healaftercombat~|getstatusself(~healaftercombat~));,Life Leech,MAX3,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Overtime_upgraded,Lose [heart]<d6> hp|Heal [heal]<double> hp after battle,1,pierceattackself(d); sfx(~_drain~); inflictself(~healaftercombat~|d*2); sfx(~_cure~); self.setvar(~healaftercombat~|getstatusself(~healaftercombat~));,Life Leech,MAX4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Overtime_downgraded,Lose [heart]<d6> hp|Heal [heal]<double> hp after battle,1,pierceattackself(d); sfx(~_drain~); inflictself(~healaftercombat~|d*2); sfx(~_cure~); self.setvar(~healaftercombat~|getstatusself(~healaftercombat~));,Life Leech,MAX2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Snippity Snap,Split all your dice in two[;]|get other half next turn,1,var da = []; var c = 0; for(mydice in self.dicepool){if(mydice.available()){if(mydice.basevalue > 1){var x = split(mydice.basevalue); inflictself(~stash~+x[1]); inflictself(~lightstatus~); mydice.animatereroll(x[0] | self.screenposition() | c); c+=0.05;};};}; sfx(~magic_gaindice~);,Magic Lockpick,DOUBLES|DOUBLES,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Snippity Snap_upgraded,Split all your dice in two[;]|get other half next turn,1,var da = []; var c = 0; for(mydice in self.dicepool){if(mydice.available()){if(mydice.basevalue > 1){var x = split(mydice.basevalue); inflictself(~stash~+x[1]); inflictself(~lightstatus~); mydice.animatereroll(x[0] | self.screenposition() | c); c+=0.05;};};}; sfx(~magic_gaindice~);,Magic Lockpick,NORMAL|NORMAL,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Snippity Snap_downgraded,Split all your dice in two[;]|get other half next turn,1,var da = []; var c = 0; for(mydice in self.dicepool){if(mydice.available()){if(mydice.basevalue > 1){var x = split(mydice.basevalue); inflictself(~stash~+x[1]); inflictself(~lightstatus~); mydice.animatereroll(x[0] | self.screenposition() | c); c+=0.05;};};}; sfx(~magic_gaindice~);,Magic Lockpick,REQUIRE6|REQUIRE6,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Rudimentary Lathe,Deal [sword]<d6> damage[;]|roll 3 ones,1,attack(d); givedice([1|1|1]); sfxdamage(target|d);,Magic Lockpick,REQUIRE4,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice([1|1|1]);
Rudimentary Lathe_upgraded,Deal [sword]<d6> damage[;]|roll 3 ones,1,attack(d); givedice([1|1|1]); sfxdamage(target|d);,Magic Lockpick,MIN4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice([1|1|1]);
Rudimentary Lathe_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target|d);,Magic Lockpick,REQUIRE4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Coconut Gun,Deal [sword]3 damage[;] reduce|countdown to 3 this turn|,1,if(simulation){bonus(300);}else{attack(3); e.countdown = 3; e.remainingcountdown = 3; sfxdamage(target|3);};,Accelerate,COUNTDOWN,10,ORANGE,change_power,change_power,,,-1,NO,NO,,,e.countdown = 8; e.remainingcountdown = 8;,e.countdown = 8; e.remainingcountdown = 8;,if(e.getvar(~reset~) == 1){e.setvar(~reset~|0); e.countdown = 8; e.remainingcountdown = 8;};,,,,,e.countdown = 3; e.setvar(~reset~|1);,,,
Coconut Gun_upgraded,Deal [sword]3 damage[;] reduce|countdown to 1 this turn|,1,if(simulation){bonus(300);}else{attack(3); e.countdown = 1; e.remainingcountdown = 1; sfxdamage(target|3);};,Accelerate,COUNTDOWN,10,ORANGE,,,,,-1,NO,NO,,,e.countdown = 8; e.remainingcountdown = 8;,e.countdown = 8; e.remainingcountdown = 8;,if(e.getvar(~reset~) == 1){e.setvar(~reset~|0); e.countdown = 8; e.remainingcountdown = 8;};,,,,,e.countdown = 1;  e.setvar(~reset~|1);,,,
Coconut Gun_downgraded,Deal [sword]3 damage|,1,attack(3); sfxdamage(target|3);,Accelerate,COUNTDOWN,10,ORANGE,,,,,-1,NO,NO,,,e.countdown = 8; e.remainingcountdown = 8;,e.countdown = 8; e.remainingcountdown = 8;,if(e.getvar(~reset~) == 1){e.setvar(~reset~|0); e.countdown = 8; e.remainingcountdown = 8;};,,,,,,,,
Sneksword,Deal [sword]<d6> damage|On 6[;] roll two ones,2,attack(d); sfxdamage(target|d); if(d == 6){givedice([1|1]);};,Magic Lockpick,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){givedice([1|1]);};
Sneksword_upgraded,Deal [sword]<d6> damage|On even[;] roll two ones,2,attack(d); sfxdamage(target|d); if(d % 2 == 0){givedice([1|1]);};,Magic Lockpick,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,if(d%2 == 0){givedice([1|1]);};
Sneksword_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,Magic Lockpick,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Transcendence,Heal [heal]20 health[;] end your|turn[;] skip your next turn,1,attackself(-20); sfx(~_cure~); inflictself(~mf_skipturn~|1); if(getstatusself(FURY) == 0){if(self.isplayer){self.endturnnow();};};,Regenerate,COUNTDOWN,12,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Transcendence_upgraded,Heal [heal]20[;] excess adds shield|End turn[;] skip next turn,1,var diff = self.maxhp - self.hp; if(diff > 20){attackself(-20);}else{attackself(-diff); inflictself(SHIELD|20-diff); sfx(~_shield~);}; sfx(~_cure~); inflictself(~mf_skipturn~|1);,Regenerate,COUNTDOWN,12,GREEN,,,,,0,YES,NO,,,,,,,,,,if(getstatusself(FURY) == 0){trace(~yowza!~); self.endturnnow();};,,,
Transcendence_downgraded,Heal [heal]10 health[;] end your|turn[;] skip your next turn,1,attackself(-10); sfx(~_cure~); inflictself(~mf_skipturn~|1);,Regenerate,COUNTDOWN,12,GREEN,,,,,0,YES,NO,,,,,,,,,,if(getstatusself(FURY) == 0){trace(~yowza!~); self.endturnnow();};,,,
Top Serum,Skip your next turn[;]|then take an extra turn,1,inflictself(~mf_skipturn~|1); if(self.isplayer){inflictself(~mf_bonusturn_nextturn~);}else{inflictself(~mf_bonusturn~);}; sfx(~_fury~); sfx(~_dodge~);,Time Stop,NORMAL|NORMAL,7,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Top Serum_upgraded,Skip your next turn[;]|then take an extra turn,1,inflictself(~mf_skipturn~|1); inflictself(~mf_bonusturn~); sfx(~_fury~); sfx(~_dodge~);,Time Stop,NORMAL|NORMAL,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Top Serum_downgraded,Skip your next turn[;]|then take an extra turn,1,inflictself(~mf_skipturn~|1); inflictself(~mf_bonusturn~); sfx(~_fury~); sfx(~_dodge~);,Time Stop,REQUIRE3|REQUIRE4,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Really Big Helmet,Gain [reduce]4 reduce|[gray](once per battle),1,inflictself(REDUCE|4); sfx(~_shield~);,Pillow Fort,COUNTDOWN,4,ORANGE,change_power,change_power,,,0,YES,YES,,,,,,,,,,,,,
Really Big Helmet_upgraded,Gain [reduce]10 reduce|[gray](once per battle),1,inflictself(REDUCE|10); sfx(~_shield~);,Pillow Fort,COUNTDOWN,4,ORANGE,,,,,0,YES,YES,,,,,,,,,,,,,
Really Big Helmet_downgraded,Gain [reduce]1 reduce|[gray](once per battle),1,inflictself(REDUCE|1); sfx(~_shield~);,Pillow Fort,COUNTDOWN,4,ORANGE,,,,,0,YES,YES,,,,,,,,,,,,,
Marshsword,Deal [sword]<d6> damage|On 6[;] swap [blue]ice[] and [red]fire[],2,attack(d); sfxdamage(target|d); if(d == 6){sfx(~openchest~|~~|0.1); for(eq in self.equipment){ if(eq.ready && eq.availablethisturn){ var l = eq.fulldescription.split(~ice~); if(l.length > 1){ eq.fulldescription = l.join(~this_is_kludgey_i_know_please_dont_judge_me~); eq.animate(~flashandshake~); }; l = eq.fulldescription.split(~fire~); if(l.length > 1){ eq.fulldescription = l.join(~ice~); eq.animate(~flashandshake~); }; l = eq.fulldescription.split(~this_is_kludgey_i_know_please_dont_judge_me~); if(l.length > 1){ eq.fulldescription = l.join(~fire~); eq.animate(~flashandshake~); }; eq.displayname = eq.displayname.toLowerCase(); var l = eq.displayname.split(~ice~); if(l.length > 1){ eq.displayname = l.join(~this_is_kludgey_i_know_please_dont_judge_me~); eq.animate(~flashandshake~); }; l = eq.displayname.split(~fire~); if(l.length > 1){ eq.displayname = l.join(~ice~); eq.animate(~flashandshake~); }; l = eq.displayname.split(~this_is_kludgey_i_know_please_dont_judge_me~); if(l.length > 1){ eq.displayname = l.join(~fire~); eq.animate(~flashandshake~); };  }; }; };,Ice Burn,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Marshsword_upgraded,Deal [sword]<d6> damage|On 7[;] swap [blue]ice[] and [red]fire[],2,attack(d); sfxdamage(target|d); if(d == 7){for(eq in self.equipment){ if(eq.ready && eq.availablethisturn){ eq.fulldescription; var l = eq.fulldescription.split(~ice~); if(l.length > 1){ eq.fulldescription = l.join(~this_is_kludgey_i_know_please_dont_judge_me~); eq.animate(~flashandshake~); }; l = eq.fulldescription.split(~fire~); if(l.length > 1){ eq.fulldescription = l.join(~ice~); eq.animate(~flashandshake~); }; l = eq.fulldescription.split(~this_is_kludgey_i_know_please_dont_judge_me~); if(l.length > 1){ eq.fulldescription = l.join(~fire~); eq.animate(~flashandshake~); };  }; }; };,Ice Burn,NORMAL|FREE1,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Marshsword_downgraded,Deal [sword]<d6> damage|On 6[;] swap [blue]ice[] and [red]fire[],2,attack(d); sfxdamage(target|d); if(d == 6){for(eq in self.equipment){ if(eq.ready && eq.availablethisturn){ eq.fulldescription; var l = eq.fulldescription.split(~ice~); if(l.length > 1){ eq.fulldescription = l.join(~this_is_kludgey_i_know_please_dont_judge_me~); eq.animate(~flashandshake~); }; l = eq.fulldescription.split(~fire~); if(l.length > 1){ eq.fulldescription = l.join(~ice~); eq.animate(~flashandshake~); }; l = eq.fulldescription.split(~this_is_kludgey_i_know_please_dont_judge_me~); if(l.length > 1){ eq.fulldescription = l.join(~fire~); eq.animate(~flashandshake~); };  }; }; };,Ice Burn,MIN4,,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Pit,Inflict [poison]<d6> poison|Skip your next turn,1,inflict(POISON|d); sfx(~_poison~); inflictself(~mf_skipturn~); sfx(~magic_gaindice~);,Goop Gun,MAX5,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(~mf_skipturn~); sfx(~magic_gaindice~);
Poison Pit_upgraded,Inflict [poison]<d6> poison|Skip your next turn,1,inflict(POISON|d); sfx(~_poison~); inflictself(~mf_skipturn~); sfx(~magic_gaindice~);,Goop Gun,MAX5|FREE1,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~mf_skipturn~); sfx(~magic_gaindice~);
Poison Pit_downgraded,Inflict [poison]<d6> poison|Skip your next turn,1,inflict(POISON|d); sfx(~_poison~); inflictself(~mf_skipturn~); sfx(~magic_gaindice~);,Goop Gun,MAX3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~mf_skipturn~); sfx(~magic_gaindice~);
First Sit,Dodge next attack|[gray](once per battle),1,inflictself(DODGE); sfx(~_dodge~);,Quick Thinking,MIN4,,YELLOW,change_power,change_power,,,0,YES,YES,excludefromrandomlists,2,,,,,,,,,,,
First Sit_upgraded,Dodge next attack|[gray](once per battle),1,inflictself(DODGE); sfx(~_dodge~);,Quick Thinking,MIN2,,YELLOW,,,,,0,YES,YES,excludefromrandomlists,,,,,,,,,,,,
First Sit_downgraded,Dodge next attack|[gray](once per battle),1,inflictself(DODGE); sfx(~_dodge~);,Quick Thinking,REQUIRE6,,YELLOW,,,,,0,YES,YES,excludefromrandomlists,,,,,,,,,,,,
Molten Core,Deal [sword]20 damage|Gain [shield]10 shield,1,attack(20); sfxdamage(target|20); sfx(~_magic~);  inflictself(SHIELD|10); sfx(~_shield~|~~|0.2);,Magic Lantern,COUNTDOWN,25,ORANGE,change_power,change_power,,,0,NO,NO,,2,,,,,,,,,,,inflictself(SHIELD|10); sfx(~_shield~|~~|0.2);
Molten Core_upgraded,Deal [sword]25 damage|Gain [shield]15 shield,1,attack(25); sfxdamage(target|25); sfx(~_magic~);  inflictself(SHIELD|15); sfx(~_shield~|~~|0.2);,Magic Lantern,COUNTDOWN,25,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD|15); sfx(~_shield~|~~|0.2);
Molten Core_downgraded,Deal [sword]10 damage|Gain [shield]5 shield,1,attack(10); sfxdamage(target|10); sfx(~_magic~); inflictself(SHIELD|5); sfx(~_shield~|~~|0.2);,Magic Lantern,COUNTDOWN,25,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(SHIELD|5); sfx(~_shield~|~~|0.2);
Solar Eclipse,Deal [sword]20 damage|Recover [heal]10 health,1,attack(20); sfxdamage(target|20); sfx(~_magic~); attackself(-10); sfx(~_heal~|~~|0.2);,Magic Lantern,COUNTDOWN,25,GREEN,change_power,change_power,,,0,NO,NO,,2,,,,,,,,,,,attackself(-10); sfx(~_heal~|~~|0.2);
Solar Eclipse_upgraded,Deal [sword]25 damage|Recover [heal]15 health,1,attack(25); sfxdamage(target|25); sfx(~_magic~); attackself(-15); sfx(~_heal~|~~|0.2);,Magic Lantern,COUNTDOWN,25,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-15); sfx(~_heal~|~~|0.2);
Solar Eclipse_downgraded,Deal [sword]10 damage|Reciver [heal]5 health,1,attack(10); sfxdamage(target|10); sfx(~_magic~); attackself(-5); sfx(~_heal~|~~|0.2);,Magic Lantern,COUNTDOWN,25,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-5); sfx(~_heal~|~~|0.2);
Scraptula,Flip both dice upside down|(Always offered as scrap),1,var x = [for(ad in actualdice) 7-ad.basevalue]; trace(x); givedice(x);,Megaflip,NORMAL|NORMAL,7,GRAY,change_power,change_power,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scraptula_upgraded,Flip both dice upside down|(Always offered as scrap),1,var x = [for(ad in actualdice) 7-ad.basevalue]; trace(x); givedice(x);,Megaflip,NORMAL|NORMAL,6,GRAY,,,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scraptula_downgraded,Flip both dice upside down|(Always offered as scrap),1,var x = [for(ad in actualdice) 7-ad.basevalue]; trace(x); givedice(x);,Megaflip,REQUIRE3|REQUIRE4,,GRAY,,,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Elemental Blast,Do [fire]2 dmg[;] then [ice]2 dmg[;]|then [shock]2 dmg[;] then [weaken]2 dmg,2,if(simulation){attack(2|FIRE); attack(2|ICE); attack(2|SHOCK); attack(2|WEAKEN);};,JOAT Smash,COUNTDOWN,12,PINK,change_power,change_power,,,0,YES,NO,,,,,,,,,,if(simulation){}else{function makespike(x|y|delay|col|sc){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = sc; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(col); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; var scripts = [~attack(2|FIRE); sfx(\~_fire\~);~|~attack(2|ICE); sfx(\~_ice\~);~ | ~attack(2|SHOCK); sfx(\~_shock\~);~ | ~attack(2|WEAKEN); sfx(\~_weaken\~);~]; var delay = 0; var cols = [~RED~|~BRIGHTCYAN~|~YELLOW~|~ORANGE~]; for(count in [0|1|2|3]){makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 1 : -1)*count*200|count/10|cols[count]|scripts[count]); delay+=0.1;};};,,,
Elemental Blast_upgraded,Do [fire]3 dmg[;] then [ice]3 dmg[;]|then [shock]3 dmg[;] then [weaken]3 dmg,2,if(simulation){attack(3|FIRE); attack(3|ICE); attack(3|SHOCK); attack(3|WEAKEN);};,JOAT Smash,COUNTDOWN,12,PINK,,,,,0,YES,NO,,,,,,,,,,if(simulation){}else{function makespike(x|y|delay|col|sc){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = sc; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(col); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; var scripts = [~attack(3|FIRE); sfx(\~_fire\~);~|~attack(3|ICE); sfx(\~_ice\~);~ | ~attack(3|SHOCK); sfx(\~_shock\~);~ | ~attack(3|WEAKEN); sfx(\~_weaken\~);~]; var delay = 0; var cols = [~RED~|~BRIGHTCYAN~|~YELLOW~|~ORANGE~]; for(count in [0|1|2|3]){makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 1 : -1)*count*200|count/10|cols[count]|scripts[count]); delay+=0.1;};};,,,
Elemental Blast_downgraded,Do [fire]1 dmg[;] then [ice]1 dmg[;]|then [shock]1 dmg[;] then [weaken]1 dmg,2,if(simulation){attack(1|FIRE); attack(1|ICE); attack(1|SHOCK); attack(1|WEAKEN);};,JOAT Smash,COUNTDOWN,12,PINK,,,,,0,YES,NO,,,,,,,,,,if(simulation){}else{function makespike(x|y|delay|col|sc){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = sc; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(col); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; var scripts = [~attack(1|FIRE); sfx(\~_fire\~);~|~attack(1|ICE); sfx(\~_ice\~);~ | ~attack(1|SHOCK); sfx(\~_shock\~);~ | ~attack(1|WEAKEN); sfx(\~_weaken\~);~]; var delay = 0; var cols = [~RED~|~BRIGHTCYAN~|~YELLOW~|~ORANGE~]; for(count in [0|1|2|3]){makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 1 : -1)*count*200|count/10|cols[count]|scripts[count]); delay+=0.1;};};,,,
Discombobulate,Set one dice to 1|Double value of the other,1,var x = rand([0|1]); var da = [1]; var t = actualdice[x].basevalue*2; while(t > 6){da.push(6); t-=6;}; da.push(t); givedice(da);,Megabump,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Discombobulate_upgraded,Halve one dice value|Double value of the other,1,var x = rand([0|1]); var da = [actualdice[1-x].basevalue/2]; var t = actualdice[x].basevalue*2; while(t > 6){da.push(6); t-=6;}; da.push(t); givedice(da);,Megabump,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Discombobulate_downgraded,Set one dice to 1|Double value of the other,1,var x = rand([0|1]); var da = [1]; var t = actualdice[x].basevalue*2; while(t > 6){da.push(6); t-=6;}; da.push(t); givedice(da);,Megabump,MAX3|MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Beep,Deal [sword]3 damage|,1,attack(3); sfxdamage(target|3); sfx(~_magic~);,Plasma Gun,EVEN,,ORANGE,change_power,change_power,,,3,NO,NO,,,,,,,,,,,,,
Beep_upgraded,Deal [sword]3 damage|,1,attack(3); sfxdamage(target|3); sfx(~_magic~);,Plasma Gun,EVEN,,ORANGE,,,,,-1,NO,NO,,,,,,,,,,,,,
Beep_downgraded,Deal [sword]3 damage|,1,attack(3); sfxdamage(target|3); sfx(~_magic~);,Plasma Gun,EVEN,,ORANGE,,,,,2,NO,NO,,,,,,,,,,,,,
Virial Blade,[sword]<d6>. If one dice is exactly|2x the other[;] do [sword]<double>,2,if(actualdice[0].basevalue *2 == actualdice[1].basevalue # actualdice[1].basevalue*2 == actualdice[0].basevalue){attack(d*2); sfxdamage(target|d*2); sfx(~_magic~);}else{attack(d); sfxdamage(target|d);};,Plasma Gun,MAX4|MAX4,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Virial Blade_upgraded,[sword]<d6>. If one dice is exactly|2x the other[;] do [sword]<double>,2,if(actualdice[0].basevalue *2 == actualdice[1].basevalue # actualdice[1].basevalue*2 == actualdice[0].basevalue){attack(d*2); sfxdamage(target|d*2); sfx(~_magic~);}else{attack(d); sfxdamage(target|d);};,Plasma Gun,NORMAL|MAX4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Virial Blade_downgraded,[sword]<d6>. If one dice is exactly|2x the other[;] do [sword]<double>,2,if(actualdice[0].basevalue *2 == actualdice[1].basevalue # actualdice[1].basevalue*2 == actualdice[0].basevalue){attack(d*2); sfxdamage(target|d*2); sfx(~_magic~);}else{attack(d); sfxdamage(target|d);};,Plasma Gun,MAX2|MAX2,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Hyena Siren,Inflict [curse]<d6> curse|[gray](once per battle),1,inflict(CURSE|d); sfx(~_curse~);,Dramatic Pause,MAX3,,PURPLE,change_power,change_power,,,0,NO,YES,,,,,,,,,,,,,
Hyena Siren_upgraded,Inflict [curse]4 curse|[gray](once per battle),1,inflict(CURSE|4); sfx(~_curse~);,Dramatic Pause,MAX3,,PURPLE,,,,,0,NO,YES,,,,,,,,,,,,,
Hyena Siren_downgraded,Inflict [curse]<d6> curse to both|[gray](once per battle),1,inflict(CURSE|d); inflictself(CURSE|d); sfx(~_curse~);,Dramatic Pause,MAX3,,PURPLE,,,,,0,NO,YES,,,,,,,,,,,,,
Fire Strike,Gain [shield]Pierce[;] then|deal [fire]5 damage,2,inflictself(~pierce~); sfx(~_magic~); attack(5|FIRE); sfxdamage(target|5); sfx(~_fire~|~~|0.3);,Blowtorch,COUNTDOWN,5,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(~pierce~); sfx(~_magic~);
Fire Strike_upgraded,Gain [shield]Pierce[;] then|deal [fire]8 damage,2,inflictself(~pierce~); sfx(~_magic~); attack(8|FIRE); sfxdamage(target|8); sfx(~_fire~|~~|0.3);,Blowtorch,COUNTDOWN,5,RED,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~pierce~); sfx(~_magic~);
Fire Strike_downgraded,Gain [shield]Pierce[;] then|deal [fire]3 damage,2,inflictself(~pierce~); sfx(~_magic~); attack(3|FIRE); sfxdamage(target|3); sfx(~_fire~|~~|0.3);,Blowtorch,COUNTDOWN,5,RED,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~pierce~); sfx(~_magic~);
Frost Strike,Gain [shield]Pierce[;] then|deal [ice]5 damage,2,inflictself(~pierce~); sfx(~_magic~); attack(5|ICE); sfxdamage(target|5); sfx(~_ice~|~~|0.3);,Blowtorch,COUNTDOWN,5,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(~pierce~); sfx(~_magic~);
Frost Strike_upgraded,Gain [shield]Pierce[;] then|deal [ice]8 damage,2,inflictself(~pierce~); sfx(~_magic~); attack(8|ICE); sfxdamage(target|8); sfx(~_ice~|~~|0.3);,Blowtorch,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~pierce~); sfx(~_magic~);
Frost Strike_downgraded,Gain [shield]Pierce[;] then|deal [ice]3 damage,2,inflictself(~pierce~); sfx(~_magic~); attack(3|ICE); sfxdamage(target|3); sfx(~_ice~|~~|0.3);,Blowtorch,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~pierce~); sfx(~_magic~);
Malevolence,Deal [sword]<triple> dmg[;] curse self|(Keep [curse] between turns),2,attack(d*3); sfxdamage(target|d*3); inflictself(CURSE); sfx(~_curse~); inflictself(~mf_maintaincurse~);,Dramatic Pause,MAX4,,PURPLE,change_power,change_power,,,0,NO,NO,,,inflictself(~mf_maintaincurse~);,,,,,,,,,,
Malevolence_upgraded,Deal [sword]<quadruple> dmg[;] curse self|(Keep [curse] between turns),2,attack(d*4); sfxdamage(target|d*4); inflictself(CURSE); sfx(~_curse~); self.setvar(~mf_cursedecay~|1);,Dramatic Pause,MAX4,,PURPLE,,,,,0,NO,NO,,,inflictself(~mf_maintaincurse~);,,,,,,,,,,
Malevolence_downgraded,Deal [sword]<double> dmg[;] curse self|(Keep [curse] between turns),2,attack(d*2); sfxdamage(target|d*2); inflictself(CURSE); sfx(~_curse~); self.setvar(~mf_cursedecay~|1);,Dramatic Pause,MAX4,,PURPLE,,,,,0,NO,NO,,,inflictself(~mf_maintaincurse~);,,,,,,,,,,
Accretion,Raise your countdowns by 1|[sword]3 per countdown raised,1,var dmg = 3; var total = 0; for(eq in self.equipment){if(eq.ready && eq.availablethisturn && eq.remainingcountdown > 0){eq.remainingcountdown+=1; total+=1; eq.animate(~flashandshake~);};}; if(total > 0){attack(dmg*total); sfxdamage(target|dmg*total); sfx(~_magic~);}else{self.textparticle(~No effect!~);};,Pea Gun,DOUBLES|DOUBLES,,GRAY,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,var total = 0; for(eq in self.equipment){if(eq.ready && eq.availablethisturn && eq.remainingcountdown > 0){eq.remainingcountdown+=1; total+=1; eq.animate(~flashandshake~);};};
Accretion_upgraded,Raise your countdowns by 1|[sword]3 per countdown raised,1,var dmg = 3; var total = 0; for(eq in self.equipment){if(eq.ready && eq.availablethisturn && eq.remainingcountdown > 0){eq.remainingcountdown+=1; total+=1; eq.animate(~flashandshake~);};}; if(total > 0){attack(dmg*total); sfxdamage(target|dmg*total); sfx(~_magic~);}else{self.textparticle(~No effect!~);};,Pea Gun,NORMAL|NORMAL,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,var total = 0; for(eq in self.equipment){if(eq.ready && eq.availablethisturn && eq.remainingcountdown > 0){eq.remainingcountdown+=1; total+=1; eq.animate(~flashandshake~);};};
Accretion_downgraded,Raise your countdowns by 1|[sword]3 per countdown raised,1,var dmg = 3; var total = 0; for(eq in self.equipment){if(eq.ready && eq.availablethisturn && eq.remainingcountdown > 0){eq.remainingcountdown+=1; total+=1; eq.animate(~flashandshake~);};}; if(total > 0){attack(dmg*total); sfxdamage(target|dmg*total); sfx(~_magic~);}else{self.textparticle(~No effect!~);};,Pea Gun,REQUIRE4|REQUIRE4,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,var total = 0; for(eq in self.equipment){if(eq.ready && eq.availablethisturn && eq.remainingcountdown > 0){eq.remainingcountdown+=1; total+=1; eq.animate(~flashandshake~);};};
Freegen,Heal [heal]1 per turn for [regen]2|turns[;] return the dice,1,inflictself(~regen2~); sfx(~_cure~); givedice([for(ad in actualdice) ad.basevalue]);,Revitalize,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Freegen_upgraded,Heal [heal]1 per turn for [regen]4|turns[;] return the dice,1,inflictself(~regen4~); sfx(~_cure~); givedice([for(ad in actualdice) ad.basevalue]);,Revitalize,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Freegen_downgraded,Heal [heal]1 per turn for [regen]2|turns[;] return the dice,1,inflictself(~regen2~); sfx(~_cure~); givedice([for(ad in actualdice) ad.basevalue]);,Revitalize,REQUIRE4|REQUIRE4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Rage Potion,Gain [fury]2 fury|[gray](once per battle),2,inflictself(FURY|2); sfx(~_fury~);,Fury,COUNTDOWN,8,RED,change_power,change_power,,,0,YES,YES,excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Rage Potion_upgraded,Gain [fury]3 fury|[gray](once per battle),2,inflictself(FURY|3); sfx(~_fury~);,Fury,COUNTDOWN,8,RED,,,,,0,YES,YES,excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Rage Potion_downgraded,Gain [fury]1 fury|[gray](once per battle),2,inflictself(FURY|1); sfx(~_fury~);,Fury,COUNTDOWN,8,RED,,,,,0,YES,YES,excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Dynamite Shotgun,Deal [fire]<triple> damage|to everyone,1,attack(d*3|FIRE); sfx(~_fire~); sfxdamage(target|d*3); attackself(d*3|FIRE); sfxdamage(self|d*3);,Boom!,MAX4,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Dynamite Shotgun_upgraded,Deal [fire]<triple> damage|to everyone,1,attack(d*3|FIRE); sfx(~_fire~); sfxdamage(target|d*3); attackself(d*3|FIRE); sfxdamage(self|d*3);,Boom!,MAX5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Dynamite Shotgun_downgraded,Deal [fire]<triple> damage|to everyone,1,attack(d*3|FIRE); sfx(~_fire~); sfxdamage(target|d*3); attackself(d*3|FIRE); sfxdamage(self|d*3);,Boom!,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Icicle Shotgun,Deal [ice]<triple> damage|to everyone,1,attack(d*3|ICE); sfx(~_ice~); sfxdamage(target|d*3); attackself(d*3|ICE); sfxdamage(self|d*3);,Boom!,MAX4,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Icicle Shotgun_upgraded,Deal [ice]<triple> damage|to everyone,1,attack(d*3|ICE); sfx(~_ice~); sfxdamage(target|d*3); attackself(d*3|ICE); sfxdamage(self|d*3);,Boom!,MAX5,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Icicle Shotgun_downgraded,Deal [ice]<triple> damage|to everyone,1,attack(d*3|ICE); sfx(~_ice~); sfxdamage(target|d*3); attackself(d*3|ICE); sfxdamage(self|d*3);,Boom!,MAX3,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Effluxion,Heal [heal]<d6> hp[;] then lose [heart]<timesused>|hp. +[heart]1 health loss per use,1,attackself(-d); sfx(~_heal~); attackself(e.timesused+1); sfx(~_drain~|~~|0.2);,Life Leech,MAX5,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Effluxion_upgraded,Heal [heal]<d6> hp[;] then lose [heart]<timesused>|hp. +[heart]1 health loss per use,1,attackself(-d); sfx(~_heal~); attackself(e.timesused+1); sfx(~_drain~|~~|0.2);,Life Leech,NORMAL,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Effluxion_downgraded,Heal [heal]<d6> hp[;] then lose [heart]<timesused>|hp. +[heart]1 health loss per use,1,attackself(-d); sfx(~_heal~); attackself(e.timesused+1); sfx(~_drain~|~~|0.2);,Life Leech,MAX3,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Crunch,Combine dice[;] convert half|the total into [sword] damage,1,attack(d/2); sfxdamage(target|d/2); givedice((d+1)/2);,Battle Wrench,MAX4|MAX4,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice((d+1)/2);
Crunch_upgraded,Combine dice[;] convert half|the total into [sword] damage,1,attack(d/2); sfxdamage(target|d/2); givedice((d+1)/2);,Battle Wrench,NORMAL|NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,givedice((d+1)/2);
Crunch_downgraded,Combine dice[;] convert half|the total into [sword] damage,1,attack(d/2); sfxdamage(target|d/2); givedice((d+1)/2);,Battle Wrench,MAX2|MAX2,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,givedice((d+1)/2);
Chronal Rhapsody,Deal [sword]4 damage for each|turn you've taken [sword](<var:turncounter>x4),2,if(simulation){if(turn > 0){for(x in 0...turn){attack(4);};};};,Whacksies,COUNTDOWN,15,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,self.setvar(~turncounter~|turn);,self.setvar(~turncounter~|turn);,self.setvar(~turncounter~|turn);,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(4); sfxdamage(target|4);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~YELLOW~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; if(turn > 0){for(x in 0...turn){makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 100 : -100) * x|0.1+x/10);};};};,,,
Chronal Rhapsody_upgraded,Deal [sword]6 damage for each|turn you've taken [sword](<var:turncounter>x6),2,if(simulation){if(turn > 0){for(x in 0...turn){attack(2);};};};,Whacksies,COUNTDOWN,15,BRIGHTCYAN,,,,,0,YES,NO,excludefromrandomlists,,,,self.setvar(~turncounter~|turn);,self.setvar(~turncounter~|turn);,self.setvar(~turncounter~|turn);,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(6); sfxdamage(target|6);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~YELLOW~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; if(turn > 0){for(x in 0...turn){makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 100 : -100) * x|0.1+x/10);};};};,,,
Chronal Rhapsody_downgraded,Deal [sword]2 damage for each|turn you've taken [sword](<var:turncounter>x2),2,if(simulation){if(turn > 0){for(x in 0...turn){attack(6);};};};,Whacksies,COUNTDOWN,15,BRIGHTCYAN,,,,,0,YES,NO,excludefromrandomlists,,,,self.setvar(~turncounter~|turn);,self.setvar(~turncounter~|turn);,self.setvar(~turncounter~|turn);,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.script = ~attack(2); sfxdamage(target|2);~; spike.fulldescription = ~~; spike.displayname = ~~; spike.changecolour(~YELLOW~); spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; if(turn > 0){for(x in 0...turn){makespike(e.x + (e.width)/2 - 200|e.y+(self.isplayer ? 100 : -100) * x|0.1+x/10);};};};,,,
Ghost Blood,Inflict [curse]<d6> curse|Enemy heals [heal]<triple>,1,inflict(CURSE|d); sfx(~_curse~); attack(-d*3); sfx(~_cure~);,Dramatic Pause,MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Ghost Blood_upgraded,Inflict [curse]<d6> curse|Enemy heals [heal]<double>,1,inflict(CURSE|d); sfx(~_curse~); attack(-d*2); sfx(~_cure~);,Dramatic Pause,MAX3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Ghost Blood_downgraded,Inflict [curse]<d6> curse|Enemy heals [heal]<quadruple>,1,inflict(CURSE|d); sfx(~_curse~); attack(-d*4); sfx(~_cure~);,Dramatic Pause,MAX3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Mending Charm,Your next <d6> attacks grant|[heal] Regen for turns equal|to damage dealt (up to 3),2,inflictself(~mendingregen~|d); sfx(~_dodge~);,Revitalize,MAX3,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Mending Charm_upgraded,Your next <d6> attacks grant|[heal] Regen for turns equal|to damage dealt (up to 3),2,inflictself(~mendingregen~|d); sfx(~_dodge~);,Revitalize,MAX4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Mending Charm_downgraded,Your next <d6> attacks grant|[heal] Regen for turns equal|to damage dealt (up to 3),2,inflictself(~mendingregen~|d); sfx(~_dodge~);,Revitalize,REQUIRE2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Chocolate Egg,Heal [heal]<d6> hp[;] but take [sword]1|dmg per turn for <d6> turns,2,attackself(-d); sfx(~_heal~); inflictself(~bleed~+d); sfxdamage(self|1);,Slick Slash,MAX5,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Chocolate Egg_upgraded,Heal [heal]<d6> hp[;] but take [sword]1|dmg per turn for <d6> turns,2,attackself(-d); sfx(~_heal~); inflictself(~bleed~+d); sfxdamage(self|1);,Slick Slash,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Chocolate Egg_downgraded,Heal [heal]<d6> hp[;] but take [sword]1|dmg per turn for <d6> turns,2,attackself(-d); sfx(~_heal~); inflictself(~bleed~+d); sfxdamage(self|1);,Slick Slash,MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Sick Shooter,Inflict [poison]3 poison|,2,inflict(POISON|3); sfx(~_poison~);,Goop Gun,REQUIRE6,,PURPLE,change_power,change_power,,,3,NO,NO,,,,,,,,,,,,,
Sick Shooter_upgraded,Inflict [poison]3 poison|,2,inflict(POISON|3); sfx(~_poison~);,Goop Gun,REQUIRE6,,PURPLE,,,,,6,NO,NO,,,,,,,,,,,,,
Sick Shooter_downgraded,Inflict [poison]3 poison|,2,inflict(POISON|3); sfx(~_poison~);,Goop Gun,REQUIRE6,,PURPLE,,,,,2,NO,NO,,,,,,,,,,,,,
Regen Potion,Heal [heal]2 per turn for 4 turns|[gray](once per battle),2,inflictself(~regen4~|2); sfx(~_cure~);,Revitalize,COUNTDOWN,8,GREEN,change_power,change_power,,,0,YES,YES,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Regen Potion_upgraded,Heal [heal]2 per turn for 8 turns|[gray](once per battle),2,inflictself(~regen8~|2); sfx(~_cure~);,Revitalize,COUNTDOWN,8,GREEN,,,,,0,YES,YES,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Regen Potion_downgraded,Heal [heal]1 per turn for 4 turns|[gray](once per battle),2,inflictself(~regen4~|1); sfx(~_cure~);,Revitalize,COUNTDOWN,8,GREEN,,,,,0,YES,YES,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Fall Damage,Gain [dodge]1 dodge[;] take|[sword]<d6> damage next turn,1,inflictself(DODGE); sfx(~_dodge~); inflictself(~mf_damagenextturn~|d);,Quick Thinking,MIN3,,YELLOW,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Fall Damage_upgraded,Gain [dodge]1 dodge[;] take|[sword]<d6> damage next turn,1,inflictself(DODGE); sfx(~_dodge~); inflictself(~mf_damagenextturn~|d);,Quick Thinking,MIN2,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Fall Damage_downgraded,Gain [dodge]1 dodge[;] take|[sword]<d6> damage next turn,1,inflictself(DODGE); sfx(~_dodge~); inflictself(~mf_damagenextturn~|d);,Quick Thinking,MIN3|FREE1,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Lipstick,Drain [heart]1 health,1,drain(1); sfx(~_drain~);,Life Leech,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Lipstick_upgraded,Drain [heart]1 health[;]|return the dice,1,drain(1); sfx(~_drain~); givedice(d);,Life Leech,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Lipstick_downgraded,Drain [heart]1 health,1,drain(1); sfx(~_drain~);,Life Leech,MIN4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Ramming Speed,Deal [sword]10 damage[;] then|deal [sword]5 to yourself,1,attack(10); boomerang(5); sfxdamage(target|10);,Plasma Gun,COUNTDOWN,4,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Ramming Speed_upgraded,Deal [sword]14 damage[;] then|deal [sword]5 to yourself,1,attack(14); boomerang(5); sfxdamage(target|10);,Plasma Gun,COUNTDOWN,4,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Ramming Speed_downgraded,Deal [sword]5 damage[;] then|deal [sword]5 to yourself,1,attack(5); boomerang(5); sfxdamage(target|5);,Plasma Gun,COUNTDOWN,4,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Eternal Goat,Heal [heal]3 hp[;] add [shield]3 shield|(Enemy gets [reduce]1 each turn),1,attackself(-3); sfx(~_heal~); inflictself(SHIELD|3); sfx(~_shield~);,Revitalize,COUNTDOWN,6,GREEN,change_power,change_power,,,-1,YES,NO,excludefromrandomlists,,,,,inflict(REDUCE); sfx(~_shield~); e.animate(~flashandshake~);,,,,,,,
Eternal Goat_upgraded,Heal [heal]5 hp[;] add [shield]3 shield|(Enemy gets [reduce]1 each turn),1,attackself(-5); sfx(~_heal~); inflictself(SHIELD|3); sfx(~_shield~);,Revitalize,COUNTDOWN,6,GREEN,,,,,-1,YES,NO,excludefromrandomlists,,,,,inflict(REDUCE); sfx(~_shield~); e.animate(~flashandshake~);,,,,,,,
Eternal Goat_downgraded,Heal [heal]1 hp[;] add [shield]3 shield|(Enemy gets [reduce]1 each turn),1,attackself(-1); sfx(~_heal~); inflictself(SHIELD|3); sfx(~_shield~);,Revitalize,COUNTDOWN,6,GREEN,,,,,-1,YES,NO,excludefromrandomlists,,,,,inflict(REDUCE); sfx(~_shield~); e.animate(~flashandshake~);,,,,,,,
Spiky Health Kit,Heal [heal]<d6> health|(Take [sword]2 damage each turn),1,attackself(-d); sfx(~_heal~);,Revitalize,MAX4,,RED,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,attackself(2); sfxdamage(self|2); e.animate(~flashandshake~);,,,,,,,
Spiky Health Kit_upgraded,Heal [heal]<d6> health|(Take [sword]2 damage each turn),1,attackself(-d); sfx(~_heal~);,Revitalize,NORMAL,,RED,,,,,0,YES,NO,excludefromrandomlists,,,,,attackself(2); sfxdamage(self|2); e.animate(~flashandshake~);,,,,,,,
Spiky Health Kit_downgraded,Heal [heal]<d6> health|(Take [sword]2 damage each turn),1,attackself(-d); sfx(~_heal~);,Revitalize,MAX3,,RED,,,,,0,YES,NO,excludefromrandomlists,,,,,attackself(2); sfxdamage(self|2); e.animate(~flashandshake~);,,,,,,,
Gear Train,Even turns: double dice value|Odd turns: halve dice value,1,if(turn % 2 == 0){givedice(d*2);}else{givedice(d/2);};,Clone Device,MAX4,,GREEN,change_power,change_power,,,0,YES,NO,,,,,if(turn % 2 == 0){e.changecolour(~GREEN~);}else{e.changecolour(~RED~);};,,,,,,,,
Gear Train_upgraded,Even turns: double dice value|Odd turns: halve dice value,1,if(turn % 2 == 0){givedice(d*2);}else{givedice(d/2);};,Clone Device,NORMAL,,GREEN,,,,,0,YES,NO,,,,,if(turn % 2 == 0){e.changecolour(~GREEN~);}else{e.changecolour(~RED~);};,,,,,,,,
Gear Train_downgraded,Halve dice value,1,givedice(d/2);,Clone Device,MAX4,,RED,,,,,0,YES,NO,,,,,if(turn % 2 == 0){e.changecolour(~GREEN~);}else{e.changecolour(~RED~);};,,,,,,,,
Thunder Buster,Deal [shock]4 damage[;] activates|automatically on errors,1,attack(4|SHOCK); sfxdamage(target|3); sfx(~_shock~); ,Zap,REQUIRE6,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists|errorimmune|robotonly,,,,e.setvar(~error~[;]0);,,if (self.roll_total >= self.roll_target && self.roll_jackpot <= 0 && e.getvar(~error~) == 0) { e.setvar(~error~[;]1); e.animate(~flashandshake~); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); };,,,,,,
Thunder Buster_upgraded,Deal [shock]6 damage[;] activates|automatically on errors,1,attack(6|SHOCK); sfxdamage(target|6); sfx(~_shock~); ,Zap,REQUIRE6,,YELLOW,,,,,0,NO,NO,excludefromrandomlists|errorimmune|robotonly,,,,e.setvar(~error~[;]0);,,if (self.roll_total >= self.roll_target && self.roll_jackpot <= 0 && e.getvar(~error~) == 0) { e.setvar(~error~[;]1); e.animate(~flashandshake~); e.doequipmentaction(self[;]target[;]1[;][][;]0[;]true); };,,,,,,
Thunder Buster_downgraded,Deal [shock]4 damage,1,attack(4|SHOCK); sfxdamage(target|3); sfx(~_shock~); ,Zap,REQUIRE6,,YELLOW,,,,,0,NO,NO,excludefromrandomlists|errorimmune|robotonly,,,,e.setvar(~error~[;]0);,,,,,,,,
Heal Spell,Deal [sword]5 damage|Restore [heal]2 health,1,attack(5); sfxdamage(target[;]5); attackself(-2); sfx(~_heal~);,Rejuvenate,REQUIRE4,,GREEN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,attackself(-2); sfx(~_heal~);
Heal Spell_upgraded,Deal [sword]5 dmg[;] heal [heal]2|,1,attack(5); sfxdamage(target[;]5); attackself(-2); sfx(~_heal~);,Rejuvenate,REQUIRE4,,GREEN,,,,,2,NO,NO,,,,,,,,,,,,,attackself(-2); sfx(~_heal~);
Heal Spell_downgraded,Deal [sword]2 damage|Restore [heal]2 health,1,attack(2); sfxdamage(target[;]2); attackself(-2); sfx(~_heal~);,Rejuvenate,REQUIRE4,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,attackself(-2); sfx(~_heal~);
Drooplicate,Duplicate a dice!|[gray](Results may vary),1,if(d == 6){ givedice([6[;]5]); }else if(d == 1){ givedice([1[;]2]); }else{ givedice([d[;]rand([d-1[;]d+1])]); };,Magic Dice,NORMAL,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Drooplicate_upgraded,Duplicate a dice!|[gray](Now variance-free!),1,givedice([d[;]d]);,Magic Dice,NORMAL,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Drooplicate_downgraded,Duplicate a dice!|[gray](Results may REALLY vary),1,var rvals = [1[;]2[;]3[;]4[;]5[;]6]; rvals.remove(d); givedice([d[;]rand(rvals)]);,Magic Dice,NORMAL,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Splitting Shatter,Duplicate a dice[;] but|freeze both copies,1,givedice([d|d]); for(x in 0...2){ var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim = ~alternate_ice~; sfx(~_dicefreeze~|~~|(x/5 + 0.5));}; self.dicepool[self.dicepool.length-(2-x)].animate(anim[;](x*1.0)/5+0.5); };,Snake Eyes,MAX4,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Splitting Shatter_upgraded,Duplicate a dice[;] but|freeze both copies,1,givedice([d|d]); for(x in 0...2){ var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim = ~alternate_ice~; sfx(~_dicefreeze~|~~|(x/5 + 0.5));}; self.dicepool[self.dicepool.length-(2-x)].animate(anim[;](x*1.0)/5+0.5); };,Snake Eyes,NORMAL,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Splitting Shatter_downgraded,Duplicate a dice[;] but|freeze both copies,1,givedice([d|d]); for(x in 0...2){ var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim = ~alternate_ice~; sfx(~_dicefreeze~|~~|(x/5 + 0.5));}; self.dicepool[self.dicepool.length-(2-x)].animate(anim[;](x*1.0)/5+0.5); };,Snake Eyes,MAX2,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Fissure,Deal [sword]<d6> damage|On 6[;] inflict [magma]1 magma,2,attack(d); sfxdamage(target|d); if(d == 6){sfx(~_fire~|~~|0.2); inflict(~mf_magma~);};,Magma Hurl,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Fissure_upgraded,Deal [sword]<d6> damage|On 6[;] inflict [magma]2 magma,2,attack(d); sfxdamage(target|d); if(d == 6){sfx(~_fire~|~~|0.2); inflict(~mf_magma~|2);};,Magma Hurl,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Fissure_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,Magma Hurl,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Surprisingly Warm Rock,Inflict [magma]1 magma,1,inflict(~mf_magma~); sfx(~_fire~); ,Magma Hurl,MIN4,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Surprisingly Warm Rock_upgraded,Inflict [magma]2 magma,1,inflict(~mf_magma~|2); sfx(~_fire~); ,Magma Hurl,MIN4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Surprisingly Warm Rock_downgraded,Inflict [magma]1 magma,1,inflict(~mf_magma~); sfx(~_fire~); ,Magma Hurl,REQUIRE4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Pyroclastic Flow,[fire]2 damage + [magma]2 magma|,1,attack(2|FIRE); inflict(~mf_magma~|2); sfx(~_fire~); sfxdamage(target|2);,Magma Hurl,COUNTDOWN,10,RED,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,
Pyroclastic Flow_upgraded,[fire]3 damage + [magma]3 magma|,1,attack(3|FIRE); inflict(~mf_magma~|3); sfx(~_fire~); sfxdamage(target|3);,Magma Hurl,COUNTDOWN,10,RED,,,,,-1,NO,NO,,,,,,,,,,,,,
Pyroclastic Flow_downgraded,[fire]1 damage + [magma]1 magma|,1,attack(1|FIRE); inflict(~mf_magma~|1); sfx(~_fire~); sfxdamage(target|1);,Magma Hurl,COUNTDOWN,10,RED,,,,,-1,NO,NO,,,,,,,,,,,,,
Magma Potion,Inflict [magma]4 magma|[gray](once per battle),2,inflict(~mf_magma~|4); sfx(~_fire~);,Magma Hurl,COUNTDOWN,8,RED,change_power,change_power,,,0,NO,YES,,,,,,,,,,,,,
Magma Potion_upgraded,Inflict [magma]6 magma|[gray](once per battle),2,inflict(~mf_magma~|6); sfx(~_fire~);,Magma Hurl,COUNTDOWN,8,RED,,,,,0,NO,YES,,,,,,,,,,,,,
Magma Potion_downgraded,Inflict [magma]1 magma,2,inflict(~mf_magma~|1); sfx(~_fire~);,Magma Hurl,COUNTDOWN,8,RED,,,,,0,NO,YES,,,,,,,,,,,,,
Frosty Fang,Deal [sword]<d6> damage|On 6[;] inflict [shiver]1 shiver,2,attack(d); sfxdamage(target|d); if(d == 6){sfx(~_ice~|~~|0.2); inflict(~mf_shiver~);};,Frostbite Fling,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Frosty Fang_upgraded,Deal [sword]<d6> damage|On 6[;] inflict [shiver]2 shiver,2,attack(d); sfxdamage(target|d); if(d == 6){sfx(~_ice~|~~|0.2); inflict(~mf_shiver~|2);};,Frostbite Fling,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Frosty Fang_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,Frostbite Fling,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Extraordinarily Cold Stone,Inflict [shiver]1 shiver,1,inflict(~mf_shiver~); sfx(~_ice~); ,Frostbite Fling,MAX3,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Extraordinarily Cold Stone_upgraded,Inflict [shiver]2 shiver,1,inflict(~mf_shiver~|2); sfx(~_ice~); ,Frostbite Fling,MAX3,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Extraordinarily Cold Stone_downgraded,Inflict [shiver]1 shiver,1,inflict(~mf_shiver~); sfx(~_ice~); ,Frostbite Fling,REQUIRE3,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Floe Flow,[ice]2 damage + [shiver]2 shiver|,1,attack(2|ICE); inflict(~mf_shiver~|2); sfx(~_ice~); sfxdamage(target|2);,Frostbite Fling,COUNTDOWN,10,BRIGHTCYAN,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,
Floe Flow_upgraded,[ice]3 damage + [shiver]3 shiver|,1,attack(3|ICE); inflict(~mf_shiver~|3); sfx(~_ice~); sfxdamage(target|3);,Frostbite Fling,COUNTDOWN,10,BRIGHTCYAN,,,,,-1,NO,NO,,,,,,,,,,,,,
Floe Flow_downgraded,[ice]1 damage + [shiver]1 shiver|,1,attack(1|ICE); inflict(~mf_shiver~|1); sfx(~_ice~); sfxdamage(target|1);,Frostbite Fling,COUNTDOWN,10,BRIGHTCYAN,,,,,-1,NO,NO,,,,,,,,,,,,,
Shivering Potion,Inflict [shiver]4 shiver|[gray](once per battle),2,inflict(~mf_shiver~|4); sfx(~_ice~);,Frostbite Fling,COUNTDOWN,8,BRIGHTCYAN,change_power,change_power,,,0,NO,YES,,,,,,,,,,,,,
Shivering Potion_upgraded,Inflict [shiver]6 shiver|[gray](once per battle),2,inflict(~mf_shiver~|6); sfx(~_ice~);,Frostbite Fling,COUNTDOWN,8,BRIGHTCYAN,,,,,0,NO,YES,,,,,,,,,,,,,
Shivering Potion_downgraded,Inflict [shiver]1 shiver,2,inflict(~mf_shiver~|1); sfx(~_ice~);,Frostbite Fling,COUNTDOWN,8,BRIGHTCYAN,,,,,0,NO,YES,,,,,,,,,,,,,
Idol of Blades,At the start of turn <d6>[;]|deal [sword]6 damage,1,if(turn >= d){self.textparticle(~No effect!~);}else{jinx(~Blade Idol~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(%VAR%|null);~[;]target[;]self[;]d-turn[;]6); sfx(~_magic~);};,Whacksies,MIN2,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Idol of Blades_upgraded,At the start of turn <d6>[;]|deal [sword]8 damage,1,if(turn >= d){self.textparticle(~No effect!~);}else{jinx(~Blade Idol~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(%VAR%|null);~[;]target[;]self[;]d-turn[;]8); sfx(~_magic~);};,Whacksies,MIN2,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Idol of Blades_downgraded,At the start of turn <d6>[;]|deal [sword]6 damage,1,if(turn >= d){self.textparticle(~No effect!~);}else{jinx(~Blade Idol~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(%VAR%|null);~[;]target[;]self[;]d-turn[;]6); sfx(~_magic~);};,Whacksies,MIN4,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flame Idol,At the start of turn <d6>[;]|burn [fire]3 dice,1,if(turn >= d){self.textparticle(~No effect!~);}else{jinx(~Flame Idol~[;]~burn [fire]%VAR% dice~[;]~Burn [fire]%VAR% dice~[;]~inflict(FIRE|%VAR%); sfx(\~_fire\~);~[;]target[;]self[;]d-turn[;]3); sfx(~_magic~);};,Whacksies,MIN2,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flame Idol_upgraded,At the start of turn <d6>[;]|burn [fire]6 dice,1,if(turn >= d){self.textparticle(~No effect!~);}else{jinx(~Flame Idol~[;]~burn [fire]%VAR% dice~[;]~Burn [fire]%VAR% dice~[;]~inflict(FIRE|%VAR%); sfx(\~_fire\~);~[;]target[;]self[;]d-turn[;]6); sfx(~_magic~);};,Whacksies,MIN2,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flame Idol_downgraded,At the start of turn <d6>[;]|burn [fire]1 dice,1,if(turn >= d){self.textparticle(~No effect!~);}else{jinx(~Flame Idol~[;]~burn [fire]%VAR% dice~[;]~Burn [fire]%VAR% dice~[;]~inflict(FIRE|%VAR%); sfx(\~_fire\~);~[;]target[;]self[;]d-turn[;]1); sfx(~_magic~);};,Whacksies,MIN2,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Frost Idol,At the start of turn <d6>[;]|inflict [ice]3 freeze,1,if(turn >= d){self.textparticle(~No effect!~);}else{jinx(~Frost Idol~[;]~inflict [ice]%VAR% freeze~[;]~Inflict [ice]%VAR% freeze~[;]~inflict(ICE|%VAR%); sfx(\~_ice\~);~[;]target[;]self[;]d-turn[;]3); sfx(~_magic~);};,Whacksies,MIN2,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Frost Idol_upgraded,At the start of turn <d6>[;]|inflict [ice]6 freeze,1,if(turn >= d){self.textparticle(~No effect!~);}else{jinx(~Frost Idol~[;]~inflict [ice]%VAR% freeze~[;]~Inflict [ice]%VAR% freeze~[;]~inflict(ICE|%VAR%); sfx(\~_ice\~);~[;]target[;]self[;]d-turn[;]6); sfx(~_magic~);};,Whacksies,MIN2,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Frost Idol_downgraded,At the start of turn <d6>[;]|inflict [ice]1 freeze,1,if(turn >= d){self.textparticle(~No effect!~);}else{jinx(~Frost Idol~[;]~inflict [ice]%VAR% freeze~[;]~Inflict [ice]%VAR% freeze~[;]~inflict(ICE|%VAR%); sfx(\~_ice\~);~[;]target[;]self[;]d-turn[;]1); sfx(~_magic~);};,Whacksies,MIN4,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Chronal Idol,At the start of turn <d6>[;] take|an extra turn (doesn't stack),1,if(turn >= d){self.textparticle(~No effect!~);}else{jinx(~Chronal Idol~[;]~take an extra turn~[;]~Take an extra turn~[;]~inflict(EXTRATURN); sfx(\~_magic\~);~[;]self[;]target[;]d-turn[;]3); sfx(~_magic~);};,Whacksies,REQUIRE5,,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Chronal Idol_upgraded,At the start of turn <d6>[;] take|an extra turn (doesn't stack),1,if(turn >= d){self.textparticle(~No effect!~);}else{jinx(~Chronal Idol~[;]~take an extra turn~[;]~Take an extra turn~[;]~inflict(EXTRATURN); sfx(\~_magic\~);~[;]self[;]target[;]d-turn[;]3); sfx(~_magic~);};,Whacksies,REQUIRE4,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Chronal Idol_downgraded,At the start of turn <d6>[;] take|an extra turn (doesn't stack),1,if(turn >= d){self.textparticle(~No effect!~);}else{jinx(~Chronal Idol~[;]~take an extra turn~[;]~Take an extra turn~[;]~inflict(EXTRATURN); sfx(\~_magic\~);~[;]self[;]target[;]d-turn[;]3); sfx(~_magic~);};,Whacksies,REQUIRE1,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Idyllic Idol,At the start of turn <d6>[;]|restore [heal]3 health,1,if(turn >= d){self.textparticle(~No effect!~);}else{jinx(~Idyllic Idol~[;]~recover [heal]%VAR% health~[;]~Recover [heal]%VAR% health~[;]~attack(-%VAR%); sfx(\~_heal\~);~[;]target[;]self[;]d-turn[;]3); sfx(~_magic~);};,Whacksies,MIN2,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Idyllic Idol_upgraded,At the start of turn <d6>[;]|restore [heal]4 health,1,if(turn >= d){self.textparticle(~No effect!~);}else{jinx(~Idyllic Idol~[;]~recover [heal]%VAR% health~[;]~Recover [heal]%VAR% health~[;]~attack(-%VAR%); sfx(\~_heal\~);~[;]target[;]self[;]d-turn[;]4); sfx(~_magic~);};,Whacksies,MIN2,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Idyllic Idol_downgraded,At the start of turn <d6>[;]|restore [heal]1 health,1,if(turn >= d){self.textparticle(~No effect!~);}else{jinx(~Idyllic Idol~[;]~recover [heal]%VAR% health~[;]~Recover [heal]%VAR% health~[;]~attack(-%VAR%); sfx(\~_heal\~);~[;]target[;]self[;]d-turn[;]2); sfx(~_magic~);};,Whacksies,MIN2,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Scrap Key,Do [sword]<var:swedge>[;] return the dice|(Always offered as scrap),1,attack(self.getvar(~swedge~)); sfxdamage(target[;]self.getvar(~swedge~)); givedice(d);,Finger Guns,NORMAL,,GRAY,change_power,change_power,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,self.setvar(~swedge~|0); e.setvar(~anim~|0);,self.setvar(~swedge~|0); e.setvar(~anim~|0);,if(getstatusself(~luck+~) > 0){self.setvar(~swedge~|2);} else if(getstatusself(~luck~) > 0){self.setvar(~swedge~|1);}else{self.setvar(~swedge~|0);}; if(self.getvar(~swedge~) > 0 && e.getvar(~anim~) == 0){sfx(~openchest~); e.setvar(~anim~|1); var h = new elements.Animation(); h.applytoequipment(e); e.animation.push(h); h.addcommand(~flash~|null|0.1); h.addcommand(~textparticle~|~[heal] Lucky!~|10021185); };,if(getstatusself(~luck+~) > 0){self.setvar(~swedge~|2);} else if(getstatusself(~luck~) > 0){self.setvar(~swedge~|1);}else{self.setvar(~swedge~|0);}; if(self.getvar(~swedge~) > 0 && e.getvar(~anim~) == 0){sfx(~openchest~); e.setvar(~anim~|1); var h = new elements.Animation(); h.applytoequipment(e); e.animation.push(h); h.addcommand(~flash~|null|0.1); h.addcommand(~textparticle~|~[heal] Lucky!~|10021185); };,if(getstatusself(~luck+~) > 0){self.setvar(~swedge~|2);} else if(getstatusself(~luck~) > 0){self.setvar(~swedge~|1);}else{self.setvar(~swedge~|0);}; if(self.getvar(~swedge~) > 0 && e.getvar(~anim~) == 0){sfx(~openchest~); e.setvar(~anim~|1); var h = new elements.Animation(); h.applytoequipment(e); e.animation.push(h); h.addcommand(~flash~|null|0.1); h.addcommand(~textparticle~|~[heal] Lucky!~|10021185); };,,self.setvar(~swedge~|0); e.setvar(~anim~|0);,,,,
Scrap Key_upgraded,Do [sword]<var:swedge>[;] duplicate the dice|(Always offered as scrap),1,attack(self.getvar(~swedge~)); sfxdamage(target[;]self.getvar(~swedge~)); givedice([d|d]);,Finger Guns,NORMAL,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,self.setvar(~swedge~|0); e.setvar(~anim~|0);,self.setvar(~swedge~|0); e.setvar(~anim~|0);,if(getstatusself(~luck+~) > 0){self.setvar(~swedge~|2);} else if(getstatusself(~luck~) > 0){self.setvar(~swedge~|1);}else{self.setvar(~swedge~|0);}; if(self.getvar(~swedge~) > 0 && e.getvar(~anim~) == 0){sfx(~openchest~); e.setvar(~anim~|1); var h = new elements.Animation(); h.applytoequipment(e); e.animation.push(h); h.addcommand(~flash~|null|0.1); h.addcommand(~textparticle~|~[heal] Lucky!~|10021185); };,if(getstatusself(~luck+~) > 0){self.setvar(~swedge~|2);} else if(getstatusself(~luck~) > 0){self.setvar(~swedge~|1);}else{self.setvar(~swedge~|0);}; if(self.getvar(~swedge~) > 0 && e.getvar(~anim~) == 0){sfx(~openchest~); e.setvar(~anim~|1); var h = new elements.Animation(); h.applytoequipment(e); e.animation.push(h); h.addcommand(~flash~|null|0.1); h.addcommand(~textparticle~|~[heal] Lucky!~|10021185); };,if(getstatusself(~luck+~) > 0){self.setvar(~swedge~|2);} else if(getstatusself(~luck~) > 0){self.setvar(~swedge~|1);}else{self.setvar(~swedge~|0);}; if(self.getvar(~swedge~) > 0 && e.getvar(~anim~) == 0){sfx(~openchest~); e.setvar(~anim~|1); var h = new elements.Animation(); h.applytoequipment(e); e.animation.push(h); h.addcommand(~flash~|null|0.1); h.addcommand(~textparticle~|~[heal] Lucky!~|10021185); };,,self.setvar(~swedge~|0); e.setvar(~anim~|0);,,,,
Scrap Key_downgraded,Deal [sword]<var:swedge> damage|(Always offered as scrap),1,attack(self.getvar(~swedge~)); sfxdamage(target[;]self.getvar(~swedge~));,Finger Guns,NORMAL,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,self.setvar(~swedge~|0); e.setvar(~anim~|0);,self.setvar(~swedge~|0); e.setvar(~anim~|0);,if(getstatusself(~luck+~) > 0){self.setvar(~swedge~|2);} else if(getstatusself(~luck~) > 0){self.setvar(~swedge~|1);}else{self.setvar(~swedge~|0);}; if(self.getvar(~swedge~) > 0 && e.getvar(~anim~) == 0){sfx(~openchest~); e.setvar(~anim~|1); var h = new elements.Animation(); h.applytoequipment(e); e.animation.push(h); h.addcommand(~flash~|null|0.1); h.addcommand(~textparticle~|~[heal] Lucky!~|10021185); };,if(getstatusself(~luck+~) > 0){self.setvar(~swedge~|2);} else if(getstatusself(~luck~) > 0){self.setvar(~swedge~|1);}else{self.setvar(~swedge~|0);}; if(self.getvar(~swedge~) > 0 && e.getvar(~anim~) == 0){sfx(~openchest~); e.setvar(~anim~|1); var h = new elements.Animation(); h.applytoequipment(e); e.animation.push(h); h.addcommand(~flash~|null|0.1); h.addcommand(~textparticle~|~[heal] Lucky!~|10021185); };,if(getstatusself(~luck+~) > 0){self.setvar(~swedge~|2);} else if(getstatusself(~luck~) > 0){self.setvar(~swedge~|1);}else{self.setvar(~swedge~|0);}; if(self.getvar(~swedge~) > 0 && e.getvar(~anim~) == 0){sfx(~openchest~); e.setvar(~anim~|1); var h = new elements.Animation(); h.applytoequipment(e); e.animation.push(h); h.addcommand(~flash~|null|0.1); h.addcommand(~textparticle~|~[heal] Lucky!~|10021185); };,,self.setvar(~swedge~|0); e.setvar(~anim~|0);,,,,
Volume Up,Inflict [weaken]2 weaken|Deal [weaken]<d6> damage,2,inflict(WEAKEN|2); attack(d|WEAKEN); sfx(~_weaken~); sfxdamage(target|d);,Dial Up Sounds,NORMAL|NORMAL|NORMAL,11,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Volume Up_upgraded,Inflict [weaken]4 weaken|Deal [weaken]<d6> damage,2,inflict(WEAKEN|4); attack(d|WEAKEN); sfx(~_weaken~); sfxdamage(target|d);,Dial Up Sounds,NORMAL|NORMAL|NORMAL,11,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Volume Up_downgraded,Inflict [weaken]1 weaken|Deal [weaken]<d6> damage,2,inflict(WEAKEN|1); attack(d|WEAKEN); sfx(~_weaken~); sfxdamage(target|d);,Dial Up Sounds,NORMAL|NORMAL|NORMAL,11,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Chained Oak,Deal [sword]13 damage|([curse]Curse self whenever this|countdown is reduced),1,attack(13); sfxdamage(target|13);,Dramatic Pause,COUNTDOWN,7,ORANGE,change_power,change_power,,,0,NO,NO,,,,,e.setvar(~dhl~|0);,,,if(e.dicehistory.length > e.getvar(~dlh~)){inflictself(CURSE); sfx(~_curse~); e.animate(~flash~); e.setvar(~dhl~|e.dicehistory.length);};,,,,,
Chained Oak_upgraded,Deal [sword]16 damage|([curse]Curse self whenever this|countdown is reduced),1,attack(16); sfxdamage(target|16);,Dramatic Pause,COUNTDOWN,7,ORANGE,,,,,0,NO,NO,,,,,e.setvar(~dhl~|0);,,,if(e.dicehistory.length > e.getvar(~dlh~)){inflictself(CURSE); sfx(~_curse~); e.animate(~flash~); e.setvar(~dhl~|e.dicehistory.length);};,,,,,
Chained Oak_downgraded,Deal [sword]7 damage|([curse]Curse self whenever this|countdown is reduced),1,attack(7); sfxdamage(target|7);,Dramatic Pause,COUNTDOWN,7,ORANGE,,,,,0,NO,NO,,,,,e.setvar(~dhl~|0);,,,if(e.dicehistory.length > e.getvar(~dlh~)){inflictself(CURSE); sfx(~_curse~); e.animate(~flash~); e.setvar(~dhl~|e.dicehistory.length);};,,,,,
Fuji,Lose [heart] health equal to your|shield[;] then gain [shield]9 shield,1,pierceattackself(getstatusself(SHIELD)); sfx(~_drain~); inflictself(SHIELD|9); sfx(~_shield~);,Lava Drop,COUNTDOWN,9,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Fuji_upgraded,Lose [heart] hp equal to half your|shield[;] then gain [shield]9 shield,1,pierceattackself(getstatusself(SHIELD)/2); sfx(~_drain~); inflictself(SHIELD|9); sfx(~_shield~);,Lava Drop,COUNTDOWN,9,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Fuji_downgraded,Gain [shield]9 shield[;] then lose|[heart] health equal to your shield,1,inflictself(SHIELD|9); sfx(~_shield~); pierceattackself(getstatusself(SHIELD)); sfx(~_drain~); ,Lava Drop,COUNTDOWN,9,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Chaffcannon,[sword]5[;] reroll non-1s but lower|,2,attack(5); sfxdamage(target|5); var retlist = []; for(ad in actualdice){if(ad.basevalue > 1){var temp = []; var x = ad.basevalue; while(x > 1){x-=1; temp.push(x);}; retlist.push(rand(temp));};}; if(retlist.length > 0){ givedice(retlist);};,Plasma Gun,MAX3|MAX3|MAX3|MAX3,,RED,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,var retlist = []; for(ad in actualdice){if(ad.basevalue > 1){var temp = []; var x = ad.basevalue; while(x > 1){x-=1; temp.push(x);}; retlist.push(rand(temp));};}; if(retlist.length > 0){ givedice(retlist);};
Chaffcannon_upgraded,[sword]5[;] reroll non-1s but lower|,2,attack(5); sfxdamage(target|5); var retlist = []; for(ad in actualdice){if(ad.basevalue > 1){var temp = []; var x = ad.basevalue; while(x > 1){x-=1; temp.push(x);}; retlist.push(rand(temp));};}; if(retlist.length > 0){ givedice(retlist);};,Plasma Gun,MAX4|MAX4|MAX4|MAX4,,RED,,,,,-1,NO,NO,,,,,,,,,,,,,var retlist = []; for(ad in actualdice){if(ad.basevalue > 1){var temp = []; var x = ad.basevalue; while(x > 1){x-=1; temp.push(x);}; retlist.push(rand(temp));};}; if(retlist.length > 0){ givedice(retlist);};
Chaffcannon_downgraded,Deal [sword]5 damage|,2,attack(5); sfxdamage(target|5); ,Plasma Gun,MAX3|MAX3|MAX3|MAX3,,RED,,,,,-1,NO,NO,,,,,,,,,,,,,
Medicine Practice,Restore [heal]<d6> health[;] slowly|End your turn,1,var s = new elements.Skill(~medicinepractice_internal~); inflictself(~slowregen~|d); var tw = new motion.actuators.SimpleActuator(null|2|null);  tw._repeat = d; tw.onRepeat(s.execute|[self|target]); tw.move(); s.remove();  sfx(~_cure~);,Regenerate,MAX5,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,if(getstatusself(FURY) == 0){self.endturnnow();};,,,
Medicine Practice_upgraded,Restore [heal]<d6> health[;] slowly|End your turn,1,var s = new elements.Skill(~medicinepractice_internal~); inflictself(~slowregen~|d); var tw = new motion.actuators.SimpleActuator(null|2|null);  tw._repeat = d; tw.onRepeat(s.execute|[self|target]); tw.move(); s.remove();  sfx(~_cure~);,Regenerate,MAX5|FREE2,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,if(getstatusself(FURY) == 0){self.endturnnow();};,,,
Medicine Practice_downgraded,Restore [heal]<d6> health[;] slowly|End your turn,1,var s = new elements.Skill(~medicinepractice_internal~); inflictself(~slowregen~|d); var tw = new motion.actuators.SimpleActuator(null|2|null);  tw._repeat = d; tw.onRepeat(s.execute|[self|target]); tw.move(); s.remove();  sfx(~_cure~);,Regenerate,MAX3,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,if(getstatusself(FURY) == 0){self.endturnnow();};,,,
Spudge,Return the difference|between the dice|(Slot changes each turn),1,var a = actualdice[0].basevalue; var slots = [~~|~FREE1~|~FREE2~|~FREE3~|~FREE4~|~FREE5~|~FREE6~]; var b =slots.indexOf(e.getslots()[1]); if(a > b){givedice(a-b);}else if(a < b){givedice(b-a);};,Megabump,NORMAL|FREE1,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,e.changeslots([~NORMAL~|~FREE~+rand([1|2|3|4|5|6])]); e.animate(~flashandshake~);,,,,,,,
Spudge_upgraded,Return 2 copies of difference|between the dice|(Slot changes each turn),1,var a = actualdice[0].basevalue; var slots = [~~|~FREE1~|~FREE2~|~FREE3~|~FREE4~|~FREE5~|~FREE6~]; var b =slots.indexOf(e.getslots()[1]); if(a > b){givedice([a-b|a-b]);}else if(a < b){givedice([b-a|b-a]);};,Megabump,NORMAL|FREE1,,GREEN,,,,,0,YES,NO,,,,,,e.changeslots([~NORMAL~|~FREE~+rand([1|2|3|4|5|6])]); e.animate(~flashandshake~);,,,,,,,
Spudge_downgraded,Return the difference|between the dice|(Slot changes each turn),1,var a = actualdice[0].basevalue; var slots = [~~|~FREE1~|~FREE2~|~FREE3~|~FREE4~|~FREE5~|~FREE6~]; var b =slots.indexOf(e.getslots()[1]); if(a > b){givedice(a-b);}else if(a < b){givedice(b-a);};,Megabump,NORMAL|FREE1,,GREEN,,,,,0,YES,NO,,,,,,e.changeslots([~NORMAL~|~FREE~+rand([1|2|3|4|5|6])]); e.animate(~flashandshake~);,,,,,,,
Swoocerang,Deal [sword]<d6> damage[;] take|dmg equal to the difference,1,attack(d); sfxdamage(target|d); var a = actualdice[0].basevalue; var slots = [~~|~FREE1~|~FREE2~|~FREE3~|~FREE4~|~FREE5~|~FREE6~]; var b =slots.indexOf(e.getslots()[1]); var t = a-b; if(t<0){t = -t;}; if(t > 0){attackself(t); sfxdamage(self|t);};,Plasma Gun,NORMAL|FREE2,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Swoocerang_upgraded,Deal [sword]<d6> damage[;] take|dmg equal to the difference,1,attack(d); sfxdamage(target|d); var a = actualdice[0].basevalue; var slots = [~~|~FREE1~|~FREE2~|~FREE3~|~FREE4~|~FREE5~|~FREE6~]; var b =slots.indexOf(e.getslots()[1]); var t = a-b; if(t<0){t = -t;}; if(t > 0){attackself(t);};,Plasma Gun,NORMAL|FREE3,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Swoocerang_downgraded,Deal [sword]<d6> damage[;] take|dmg equal to the difference,1,attack(d); sfxdamage(target|d); var a = actualdice[0].basevalue; var slots = [~~|~FREE1~|~FREE2~|~FREE3~|~FREE4~|~FREE5~|~FREE6~]; var b =slots.indexOf(e.getslots()[1]); var t = a-b; if(t<0){t = -t;}; if(t > 0){attackself(t);};,Plasma Gun,NORMAL|FREE1,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Exit,Deal [sword]<d6> damage. If|this is the final blow[;]|congratulations,2,attack(d); sfxdamage(target|d); if(target.hp == 0){sfxdamage(target|999);};,Plasma Gun,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Exit_upgraded,Deal [sword]<d6> damage. If|this is the final blow[;]|congratulations,2,attack(d); sfxdamage(target|d); if(target.hp == 0){sfxdamage(target|999);};,Plasma Gun,NORMAL|FREE2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Exit_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,Plasma Gun,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Keytar,Deal [sword]<d6> damage[;] inflict|[shock]1 shock and [weaken]1 weaken,2,attack(d); sfxdamage(target|d); inflict(SHOCK); sfx(~_shock~); inflict(WEAKEN); sfx(~_weaken~|~~|0.2);,Zapthwack,MAX4,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Keytar_upgraded,Deal [sword]<d6> damage[;] inflict|[shock]1 shock and [weaken]1 weaken,2,attack(d); sfxdamage(target|d); inflict(SHOCK); sfx(~_shock~); inflict(WEAKEN); sfx(~_weaken~|~~|0.2);,Zapthwack,MAX4|FREE1,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Keytar_downgraded,Deal [sword]<d6> damage[;] inflict|[shock]1 shock and [weaken]1 weaken,2,attack(d); sfxdamage(target|d); inflict(SHOCK); sfx(~_shock~); inflict(WEAKEN); sfx(~_weaken~|~~|0.2);,Zapthwack,MAX2,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Subduction,In [jinx]<d6> turns[;]|inflict [weaken]<d6> weaken,1,jinx(~Subduction~[;]~receive [weaken]%VAR% weaken~[;]~Receive [weaken]%VAR% weaken~[;]~inflict(WEAKEN[;]%VAR%); sfx(\~_weaken\~);~[;]target[;]self[;]d[;]d); sfx(~_thinghappens~);,Dial Up Sounds,MAX3,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Subduction_upgraded,In [jinx]<d6> turns[;]|inflict [weaken]<d6> weaken,1,jinx(~Subduction~[;]~receive [weaken]%VAR% weaken~[;]~Receive [weaken]%VAR% weaken~[;]~inflict(WEAKEN[;]%VAR%); sfx(\~_weaken\~);~[;]target[;]self[;]d[;]d); sfx(~_thinghappens~);,Dial Up Sounds,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Subduction_downgraded,In [jinx]<d6> turns[;]|inflict [weaken]<d6> weaken,1,jinx(~Subduction~[;]~receive [weaken]%VAR% weaken~[;]~Receive [weaken]%VAR% weaken~[;]~inflict(WEAKEN[;]%VAR%); sfx(\~_weaken\~);~[;]target[;]self[;]d[;]d); sfx(~_thinghappens~);,Dial Up Sounds,REQUIRE1,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Dicesteal,If the enemy rolls a <d6>[;]|lock it and roll an extra dice|,2,inflict(~counter_~+d); inflictself(~dice_trigger_~+d); sfx(~magic_gaindice~); sfx(~_lock~);,Magic Counterspell,NORMAL,,PURPLE,change_power,change_power,dice_trigger_1,,2,NO,NO,,,,,,,,,,,,,
Dicesteal_upgraded,If the enemy rolls a <d6>[;]|lock it and roll an extra dice|,2,inflict(~counter_~+d); inflictself(~dice_trigger_~+d); sfx(~magic_gaindice~); sfx(~_lock~);,Magic Counterspell,NORMAL,,PURPLE,,,,,4,NO,NO,,,,,,,,,,,,,
Dicesteal_downgraded,If the enemy rolls a <d6>[;]|lock it and roll an extra dice,2,inflict(~counter_~+d); inflictself(~dice_trigger_~+d); sfx(~magic_gaindice~); sfx(~_lock~);,Magic Counterspell,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Dicesteal?,If the enemy rolls a <d6>[;]|lock it and roll an extra <d6>|,2,inflict(~counter_~+d); inflictself(~dice_trigger_~+d); sfx(~magic_gaindice~); sfx(~_lock~);,Magic Counterspell,NORMAL,,PURPLE,change_power,change_power,,,2,NO,NO,alternateversion,,,,,,,,,,,,
Dicesteal?_upgraded,If the enemy rolls a <d6>[;]|lock it and roll an extra <d6>|,2,inflict(~counter_~+d); inflictself(~dice_trigger_~+d); sfx(~magic_gaindice~); sfx(~_lock~);,Magic Counterspell,NORMAL,,PURPLE,,,,,4,NO,NO,alternateversion,,,,,,,,,,,,
Dicesteal?_downgraded,If the enemy rolls a <d6>[;]|lock it and roll an extra <d6>|,2,inflict(~counter_~+d); inflictself(~dice_trigger_~+d); sfx(~magic_gaindice~); sfx(~_lock~);,Magic Counterspell,NORMAL,,PURPLE,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Counter Charm,Lock enemy dice that|match the turn number (<var:turn>),1,if(turn < 7){inflict(~counter_~+turn); sfx(~_lock~);}else{target.textparticle(~No effect!~);};,Magic Counterspell,COUNTDOWN,3,PURPLE,change_power,change_power,,,0,NO,NO,,,,,self.setvar(~turn~|turn);,,self.setvar(~turn~|turn);,self.setvar(~turn~|turn);,,,,,
Counter Charm_upgraded,Lock enemy dice that match|the turn number (<var:turn>)[;] and|roll a dice with that value,1,if(turn < 7){inflict(~counter_~+turn); sfx(~_lock~); }else{target.textparticle(~No effect!~);}; givedice(turn);,Magic Counterspell,COUNTDOWN,3,PURPLE,,,,,0,NO,NO,,,,,self.setvar(~turn~|turn);,,self.setvar(~turn~|turn);,self.setvar(~turn~|turn);,,,,,
Counter Charm_downgraded,Lock enemy dice that roll 1,1,inflict(~counter_1~); sfx(~_lock~);,Magic Counterspell,COUNTDOWN,3,PURPLE,,,,,0,NO,NO,,,,,self.setvar(~turn~|turn);,,self.setvar(~turn~|turn);,self.setvar(~turn~|turn);,,,,,
Theft and Shrubbery,Steal[;] and disable[;] a random|enemy equipment for 1 turn|Enemy gets [thorns]<d6> thorns,2,if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(eq.skillcard == ~~ && eq.availablenextturn && eq.availablethisturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablethisturn = false; randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Yoinked!~; randomequipment.unavailabledetails = [~I do beg your pardon[;]~|~but I am in your garden.~|~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); inflict(THORNS|d); sfx(~_thorns~); if(target.name == ~Gardener~){target.firstwords = ~Hey! What part of [quote]WATCH OUT FOR THE PEAS[quote]~+~#~.substr(0|1)+~don't you understand?!~; var cmd = new elements.CombatCommand(~monsterspeakfirstwords~); cmd.execute(self[;] target);};}else{self.textparticle(~No effect!~); sfx(~_silence~);};  }} else { bonus(1000 + (self.dicepool.length * 500));},Reversal,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Theft and Shrubbery_upgraded,Steal[;] and disable[;] a random|enemy equipment for 1 turn|Enemy gets [thorns]1 thorns,2,if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(eq.skillcard == ~~ && eq.availablenextturn && eq.availablethisturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablethisturn = false; randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Yoinked!~; randomequipment.unavailabledetails = [~I do beg your pardon[;]~|~but I am in your garden.~|~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); inflict(THORNS|1); sfx(~_thorns~); if(target.name == ~Gardener~){target.firstwords = ~Hey! What part of [quote]WATCH OUT FOR THE PEAS[quote]~+~#~.substr(0|1)+~don't you understand?!~; var cmd = new elements.CombatCommand(~monsterspeakfirstwords~); cmd.execute(self[;] target);};}else{self.textparticle(~No effect!~); sfx(~_silence~);};  }} else { bonus(1000 + (self.dicepool.length * 500));},Reversal,NORMAL,,GREEN,,,,,0,NO,NO,cannotreuse|excludefromrandomlists|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Theft and Shrubbery_downgraded,Steal[;] and disable[;] a random|enemy equipment for 1 turn|Enemy gets [thorns]<d6> thorns,2,if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(eq.skillcard == ~~ && eq.availablenextturn && eq.availablethisturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablethisturn = false; randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Yoinked!~; randomequipment.unavailabledetails = [~I do beg your pardon[;]~|~but I am in your garden.~|~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); inflict(THORNS|d); sfx(~_thorns~); if(target.name == ~Gardener~){target.firstwords = ~Hey! What part of [quote]WATCH OUT FOR THE PEAS[quote]~+~#~.substr(0|1)+~don't you understand?!~; var cmd = new elements.CombatCommand(~monsterspeakfirstwords~); cmd.execute(self[;] target);};}else{self.textparticle(~No effect!~); sfx(~_silence~);};  }} else { bonus(1000 + (self.dicepool.length * 500));},Reversal,MIN3,,GREEN,,,,,0,NO,NO,cannotreuse|excludefromrandomlists|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Countdownerfeit,Duplicate a random dice,1,var possval = []; for(mydice in self.dicepool){if(mydice.available()){possval.push(mydice.basevalue);};}; if(possval.length > 0){givedice(rand(possval));}else{self.textparticle(~No effect!~);,Clone Device,COUNTDOWN,5,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Countdownerfeit_upgraded,Duplicate a random dice|,1,var possval = []; for(mydice in self.dicepool){if(mydice.available()){possval.push(mydice.basevalue);};}; if(possval.length > 0){givedice(rand(possval));}else{self.textparticle(~No effect!~);,Clone Device,COUNTDOWN,5,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Countdownerfeit_downgraded,Duplicate your lowest dice,1,var lowval = 7; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue < lowval){lowval = mydice.basevalue;};}; if(lowval < 7){givedice(lowval);}else{self.textparticle(~No effect!~);,Clone Device,COUNTDOWN,5,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Roller Skates,Gain [dodge]1 dodge. On 6[;]|gain [shield]1 shield too,2,inflictself(DODGE); sfx(~_dodge~); if(d == 6){inflictself(SHIELD|1); sfx(~_shield~);};,Quick Thinking,MIN5,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Roller Skates_upgraded,Gain [dodge]1 dodge. On 6[;]|gain [shield]3 shield too,2,inflictself(DODGE); sfx(~_dodge~); if(d == 6){inflictself(SHIELD|3); sfx(~_shield~);};,Quick Thinking,MIN5,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Roller Skates_downgraded,Gain [dodge]1 dodge,2,inflictself(DODGE); sfx(~_dodge~);,Quick Thinking,MIN5,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Waltzer,Deal [sword]3 damage|Repeat this every 3 turns,1,attack(3); sfxdamage(target|3); var s = new elements.Skill(~Waltzer Quine~); s.execute(self|target); ,Whacksies,COUNTDOWN,8,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Waltzer_upgraded,Deal [sword]3 damage|Repeat this every 2 turns,1,attack(3); sfxdamage(target|3); var s = new elements.Skill(~Waltzer Quine Upgraded~); s.execute(self|target); ,Whacksies,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Waltzer_downgraded,Deal [sword]3 damage|Repeat this every 4 turns,1,attack(3); sfxdamage(target|3); var s = new elements.Skill(~Waltzer Quine Downgraded~); s.execute(self|target); ,Whacksies,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Guillotine,Split a dice evenly. On odds[;]|split a 1 from it first,2,if(d%2 == 1){givedice([d/2|1|d/2]);}else{givedice([d/2|d/2]);};,Magic Lockpick,MIN2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Guillotine_upgraded,Split a dice evenly. On odds[;]|split a 1 from it first|,2,if(d%2 == 1){givedice([d/2|1|d/2]);}else{givedice([d/2|d/2]);};,Magic Lockpick,MIN2,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Guillotine_downgraded,Split a dice evenly. On odds[;]|split a 1 from it first,2,if(d%2 == 1){givedice([d/2|1|d/2]);}else{givedice([d/2|d/2]);};,Magic Lockpick,MIN5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Crypto Miner,When you error[;] lose [heart]3 hp|but get jackpot rewards too,1,robotroll(true); pierceattackself(3); sfx(~_drain~);,Mutagen,,,GREY,change_power,change_power,,,0,YES,NO,robotonly|errorimmune,,,,e.setvar(~error~[;]0);,,if (self.roll_total >= self.roll_target && self.roll_jackpot <= 0 && e.getvar(~error~) == 0) { e.setvar(~error~[;]1); e.animate(~flashandshake~); e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); };,,,,,,
Crypto Miner_upgraded,When you error[;] lose [heart]1 hp|but get jackpot rewards too,1,robotroll(true); pierceattackself(1); sfx(~_drain~);,Mutagen,,,GREY,,,,,0,YES,NO,robotonly|errorimmune,,,,e.setvar(~error~[;]0);,,if (self.roll_total >= self.roll_target && self.roll_jackpot <= 0 && e.getvar(~error~) == 0) { e.setvar(~error~[;]1); e.animate(~flashandshake~); e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); };,,,,,,
Crypto Miner_downgraded,When you error[;] lose [heart]5 hp|but get jackpot rewards too,1,robotroll(true); pierceattackself(5); sfx(~_drain~);,Mutagen,,,GREY,,,,,0,YES,NO,robotonly|errorimmune,,,,e.setvar(~error~[;]0);,,if (self.roll_total >= self.roll_target && self.roll_jackpot <= 0 && e.getvar(~error~) == 0) { e.setvar(~error~[;]1); e.animate(~flashandshake~); e.doequipmentaction(self[;]target[;]0[;][][;]0[;]true); };,,,,,,
Shattered Crown,Deal [sword]<d6> damage|Roll a six,2,attack(d); sfxdamage(target|d); givedice(6);,Magic Six,NORMAL|NORMAL|NORMAL|NORMAL,6,YELLOW,change_power,change_power,,,0,NO,NO,,,,,e.changeslots([~NORMAL~|~NORMAL~|~NORMAL~|~NORMAL~]); e.needstotal=6; e.arrangeslots();,,,,,,,,givedice(6);
Shattered Crown_upgraded,Deal [sword]<d6> damage|Roll two sixes,2,attack(d); sfxdamage(target|d); givedice([6|6]);,Magic Six,NORMAL|NORMAL|NORMAL|NORMAL,6,YELLOW,,,,,0,NO,NO,,,,,e.changeslots([~NORMAL~|~NORMAL~|~NORMAL~|~NORMAL~]); e.needstotal=6; e.arrangeslots();,,,,,,,,givedice([6|6]);
Shattered Crown_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,Magic Six,NORMAL|NORMAL|NORMAL|NORMAL,6,YELLOW,,,,,0,NO,NO,,,,,e.changeslots([~NORMAL~|~NORMAL~|~NORMAL~|~NORMAL~]); e.needstotal=6; e.arrangeslots();,,,,,,,,
Wispy Kaboom Smash,Whenever you roll a 1[;]|consume it to deal [sword]3 dmg|,1,attack(3); sfxdamage(target|3); /* the item that inspired the name of the modpack that was inspired by the item */,Snake Eyes,,,PURPLE,change_power,change_power,,,3,NO,NO,excludefromrandomlists|cannotreuse,,,,,for(mydice in self.dicepool){if(mydice.basevalue == 1 && mydice.available()){mydice.animate(~disappear~); e.doequipmentaction(self|target|1|[]|0|true); break;};};,for(mydice in self.dicepool){if(mydice.basevalue == 1 && mydice.available()){mydice.animate(~disappear~); e.doequipmentaction(self|target|1|[]|0|true); break;};};,,,,,,
Wispy Kaboom Smash_upgraded,Whenever you roll a 1[;]|consume it to deal [sword]3 dmg|,1,attack(3); sfxdamage(target|3);,Snake Eyes,,,PURPLE,,,,,-1,NO,NO,excludefromrandomlists|cannotreuse,,,,,for(mydice in self.dicepool){if(mydice.basevalue == 1 && mydice.available()){mydice.animate(~disappear~); e.doequipmentaction(self|target|1|[]|0|true); break;};};,for(mydice in self.dicepool){if(mydice.basevalue == 1 && mydice.available()){mydice.animate(~disappear~); e.doequipmentaction(self|target|1|[]|0|true); break;};};,,,,,,
Wispy Kaboom Smash_downgraded,Whenever you roll a 1[;]|consume it to deal [sword]3 dmg|,1,attack(3); sfxdamage(target|3);,Snake Eyes,,,PURPLE,,,,,2,NO,NO,excludefromrandomlists|cannotreuse,,,,,for(mydice in self.dicepool){if(mydice.basevalue == 1 && mydice.available()){mydice.animate(~disappear~); e.doequipmentaction(self|target|1|[]|0|true); break;};};,for(mydice in self.dicepool){if(mydice.basevalue == 1 && mydice.available()){mydice.animate(~disappear~); e.doequipmentaction(self|target|1|[]|0|true); break;};};,,,,,,
Glue Pact,Lock [lock]1 dice[;]|lose [heart]<d6> health,1,inflict(LOCK); sfx(~_lock~); pierceattackself(d); sfx(~_drain~);,Padlock,MAX3|MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Glue Pact_upgraded,Lock [lock]1 dice[;]|lose [heart]<d6> health,1,inflict(LOCK); sfx(~_lock~); pierceattackself(d); sfx(~_drain~);,Padlock,MAX3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Glue Pact_downgraded,Lock [lock]1 dice[;]|lose [heart]<d6> health,1,inflict(LOCK); sfx(~_lock~); pierceattackself(d); sfx(~_drain~);,Padlock,REQUIRE2|REQUIRE2,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Homemade Medal,Heal [heal]1 hp[;] gain [shield]1 shield[;]|gain [star]2 limit break charge,1,attackself(-1); inflictself(SHIELD); sfx(~_shield~); self.limitvalue+=2; if(self.limitvalue > self.limitmax){self.limitvalue = self.limitmax;}; sfx(~_cure~);,Unlimited Limit,EVEN,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Homemade Medal_upgraded,Heal [heal]1 hp[;] gain [shield]1 shield[;]|gain [star]2 limit break charge,1,attackself(-1); inflictself(SHIELD); sfx(~_shield~); self.limitvalue+=2; if(self.limitvalue > self.limitmax){self.limitvalue = self.limitmax;}; sfx(~_cure~);,Unlimited Limit,NORMAL,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Homemade Medal_downgraded,Heal [heal]1 hp[;] gain [shield]1 shield[;]|gain [star]2 limit break charge,1,attackself(-1); inflictself(SHIELD); sfx(~_shield~); self.limitvalue+=2; if(self.limitvalue > self.limitmax){self.limitvalue = self.limitmax;}; sfx(~_cure~);,Unlimited Limit,REQUIRE4,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Unlucky Shot,Deal [sword]1 damage[;]|roll 4 ones,2,attack(1); sfxdamage(target|1); givedice([1|1|1|1]);,Unlucky Roll,REQUIRE5,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Unlucky Shot_upgraded,Deal [sword]4 damage[;]|roll 4 ones,2,attack(4); sfxdamage(target|4); givedice([1|1|1|1]);,Unlucky Roll,REQUIRE5,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Unlucky Shot_downgraded,Deal [sword]1 damage[;]|roll 2 ones,2,attack(1); sfxdamage(target|1); givedice([1|1]);,Unlucky Roll,REQUIRE5,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Sniper's Dream,Does absolutely nothing!|hey stop poking around|this item isn't done yet,2,/* change next item to require 6s */,Efficiency,REQUIRE6,,RED,change_power,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Sniper's Dream_upgraded,Does absolutely nothing!|hey stop poking around|this item isn't done yet,2,,Efficiency,MIN4,,RED,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Sniper's Dream_downgraded,Does absolutely nothing!|hey stop poking around|this item isn't done yet,2,,Efficiency,REQUIRE6|REQUIRE6,,RED,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Happy Camping,At the start of turn 10[;]|gain [heart]3 maximum health,1,self.maxhp+=3; self.hp+=3; sfx(~_cure~);,Mutagen,,,RED,change_power,change_power,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,if(turn == 10){e.doequipmentaction(self|target|0|[]|0|false);};,,,,,,,
Happy Camping_upgraded,At the start of turn 10[;]|gain [heart]5 maximum health,1,self.maxhp+=5; self.hp+=5; sfx(~_cure~);,Mutagen,,,RED,,,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,if(turn == 10){e.doequipmentaction(self|target|0|[]|0|false);};,,,,,,,
Happy Camping_downgraded,At the start of turn 10[;]|gain [heart]2 maximum health,1,self.maxhp+=2; self.hp+=2; sfx(~_cure~);,Mutagen,,,RED,,,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,if(turn == 10){e.doequipmentaction(self|target|0|[]|0|false);};,,,,,,,
Throw The Book,Bash with your spellbook[;]|deal [sword]6 damage,1,attack(6); sfxdamage(target|6); sfx(~_magic~);,Shield Bonk,ODD,,RED,change_power,change_power,,,0,NO,NO,witchonly|excludefromrandomlists,1,,,,,,,,if(self.getskillcard().ready){self.getskillcard().doequipmentaction(self|target|1|[]|0|false);};,,,
Throw The Book_upgraded,Bash with your spellbook[;]|deal [sword]6 damage,1,attack(6); sfxdamage(target|6); sfx(~_magic~);,Shield Bonk,NORMAL,,RED,,,,,0,NO,NO,witchonly|excludefromrandomlists,,,,,,,,,if(self.getskillcard().ready){self.getskillcard().doequipmentaction(self|target|1|[]|0|false);};,,,
Throw The Book_downgraded,Bash with your spellbook[;]|deal [sword]6 damage,1,attack(6); sfxdamage(target|6); sfx(~_magic~);,Shield Bonk,REQUIRE3,,RED,,,,,0,NO,NO,witchonly|excludefromrandomlists,,,,,,,,,if(self.getskillcard().ready){self.getskillcard().doequipmentaction(self|target|1|[]|0|false);};,,,
Yeeteor,Activate your other 5 spells[;]|disable spellbook this battle,1,if(simulation){bonus(-10000);}else{ if(self.isplayer && self.getskillcard().availablethisturn){var xs = [null|970|1870|2320|1870|970|520]; var ys = [null|246|246|880|1513|1513|880]; var neweqs = [null]; for(x in [1|2|3|4|5|6]){var ne = null; if(Spellbook.spellname(x) != e.name){ne = new elements.Equipment(Spellbook.spellname(x));}else{ne = new elements.Equipment(~Broken Spell~);}; self.equipment.push(ne); neweqs.push(ne); ne.x = xs[x]; ne.y = ys[x]; ne.animate(~flashandshake~); var possdice =runscript(~morefluff/possibledice~|[ne|~all~]); for(dice in possdice){if(dice!=null){var newdice = new elements.Dice(); newdice.owner = self; self.dicepool.push(newdice); newdice.basevalue = rand(dice); ne.assigndice(newdice);}};}; self.setvar(~uddy~|neweqs); self.setvar(~uddy_count~|1); var s = new elements.Skill(~Spellbook Bash~); var c = new elements.Skill(~Yeeteor Cleanup~); var tw = new motion.actuators.SimpleActuator(null|0.35|null);  tw._repeat = 6; tw.onRepeat(s.execute|[self|target]); tw.onComplete(c.execute|[self|target]); tw.move(); s.remove();}; }; sfx(~_fury~); inflictself(~nospellbook~);,Mass Polymorph,COUNTDOWN,25,PINK,change_power,change_power,,,0,YES,NO,excludefromrandomlists|witchonly,1,,,,,,,,,,,
Yeeteor_upgraded,Upgrade and activate your|other 5 spells[;] then disable|spellbook for this battle,1,if(simulation){bonus(-10000);}else{ if(self.isplayer && self.getskillcard().availablethisturn){var xs = [null|970|1870|2320|1870|970|520]; var ys = [null|246|246|880|1513|1513|880]; var neweqs = [null]; for(x in [1|2|3|4|5|6]){var ne = null; if(Spellbook.spellname(x) != e.name){ne = new elements.Equipment(Spellbook.spellname(x)+~+~);}else{ne = new elements.Equipment(~Broken Spell~+~+~);}; self.equipment.push(ne); neweqs.push(ne); ne.x = xs[x]; ne.y = ys[x]; ne.animate(~flashandshake~); var possdice =runscript(~morefluff/possibledice~|[ne|~all~]); for(dice in possdice){if(dice!=null){var newdice = new elements.Dice(); newdice.owner = self; self.dicepool.push(newdice); newdice.basevalue = rand(dice); ne.assigndice(newdice);}};}; self.setvar(~uddy~|neweqs); self.setvar(~uddy_count~|1); var s = new elements.Skill(~Spellbook Bash~); var c = new elements.Skill(~Yeeteor Cleanup~); var tw = new motion.actuators.SimpleActuator(null|0.35|null);  tw._repeat = 6; tw.onRepeat(s.execute|[self|target]); tw.onComplete(c.execute|[self|target]); tw.move(); s.remove();}; }; sfx(~_fury~); inflictself(~nospellbook~);,Mass Polymorph,COUNTDOWN,25,PINK,,,,,0,YES,NO,excludefromrandomlists|witchonly,,,,,,,,,,,,
Yeeteor_downgraded,No effect,1,sfx(~_thinghappens~);,Mass Polymorph,COUNTDOWN,25,PINK,,,,,0,YES,NO,excludefromrandomlists|witchonly,,,,,,,,,,,,
Broken Spell,No effect,1,donothing();,Finger Guns,NORMAL,,GREY,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Broken Spell_upgraded,No effect[;] twice,1,donothing(); donothing();,Finger Guns,NORMAL,,GREY,,,,,0,YES,NO,,,,,,,,,,,,,
Broken Spell_downgraded,Even less effect,1,,Finger Guns,NORMAL,,GREY,,,,,0,YES,NO,,,,,,,,,,,,,
Kleptolovania,Your stolen card becomes|easier to play,1,function lookup(st){var simpslots = [[ ~NORMAL~|~NORMAL~]|[ ~EVEN~|~NORMAL~]|[ ~ODD~|~NORMAL~]|[ ~MAX5~|~NORMAL~]|[ ~MAX4~|~MAX5~]|[ ~MAX3~|~MAX4~]|[ ~MAX2~|~MAX4~]|[ ~MIN2~|~NORMAL~]|[ ~MIN3~|~MIN2~]|[ ~MIN4~|~MIN3~]|[ ~MIN5~|~MIN3~]|[ ~REQUIRE1~|~MAX2~]|[ ~REQUIRE2~|~MAX2~]|[ ~REQUIRE3~|~MAX3~]|[ ~REQUIRE4~|~MIN4~]|[ ~REQUIRE5~|~MIN5~]|[ ~REQUIRE6~|~MIN5~]]; for(sl in simpslots){if(st == sl[0]){return(sl[1]);};}; return st;}; var s = self.stolencard; if(self.hasstolencard && s.ready){if(s.countdown > 0){s.remainingcountdown = s.remainingcountdown*2/3; }else if(s.needsdoubles){s.needsdoubles = false; s.changeslots([~NORMAL~|~NORMAL~]);}else if(s.needstotal > 0){s.needstotal = 0;}else{var news = []; for(sl in s.getslots()){news.push(lookup(sl)); }; s.changeslots(news); }; s.animate(~flashandshake~); sfx(~_magic~);};,Mass Polymorph,COUNTDOWN,3,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Kleptolovania_upgraded,Your stolen card becomes|much easier to play,1,function lookup(st){var simpslots = [[ ~NORMAL~|~NORMAL~]|[ ~EVEN~|~NORMAL~]|[ ~ODD~|~NORMAL~]|[ ~MAX5~|~NORMAL~]|[ ~MAX4~|~NORMAL~]|[ ~MAX3~|~NORMAL~]|[ ~MAX2~|~MAX4~]|[ ~MIN2~|~NORMAL~]|[ ~MIN3~|~NORMAL~]|[ ~MIN4~|~NORMAL~]|[ ~MIN5~|~MIN2~]|[ ~REQUIRE1~|~MAX3~]|[ ~REQUIRE2~|~MAX3~]|[ ~REQUIRE3~|~MAX3~]|[ ~REQUIRE4~|~MIN4~]|[ ~REQUIRE5~|~MIN4~]|[ ~REQUIRE6~|~MIN4~]]; for(sl in simpslots){if(st == sl[0]){return(sl[1]);};}; return st;}; var s = self.stolencard; if(self.hasstolencard && s.ready){if(s.countdown > 0){s.remainingcountdown = s.remainingcountdown/2; }else if(s.needsdoubles){s.needsdoubles = false; s.changeslots([~NORMAL~]);}else if(s.needstotal > 0){s.needstotal = 0; s.changeslots([~NORMAL~|~NORMAL~]);}else{var news = []; for(sl in s.getslots()){news.push(lookup(sl)); }; s.changeslots(news); }; s.animate(~flashandshake~); sfx(~_magic~);};,Mass Polymorph,COUNTDOWN,3,BRIGHTCYAN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Kleptolovania_downgraded,Your stolen card becomes|slightly easier to play,1,function lookup(st){var simpslots = [[ ~NORMAL~|~NORMAL~]|[ ~EVEN~|~MIN2~]|[ ~ODD~|~MAX5~]|[ ~MAX5~|~NORMAL~]|[ ~MAX4~|~MAX5~]|[ ~MAX3~|~MAX4~]|[ ~MAX2~|~MAX3~]|[ ~MIN2~|~NORMAL~]|[ ~MIN3~|~MIN2~]|[ ~MIN4~|~MIN3~]|[ ~MIN5~|~MIN4~]|[ ~REQUIRE1~|~MAX2~]|[ ~REQUIRE2~|~MAX2~]|[ ~REQUIRE3~|~MAX3~]|[ ~REQUIRE4~|~MIN4~]|[ ~REQUIRE5~|~MIN5~]|[ ~REQUIRE6~|~MIN5~]]; for(sl in simpslots){if(st == sl[0]){return(sl[1]);};}; return st;}; var s = self.stolencard; if(self.hasstolencard && s.ready){if(s.countdown > 0){s.remainingcountdown = s.remainingcountdown*3/4; }else if(s.needsdoubles){s.needsdoubles = false; s.changeslots([~NORMAL~|~NORMAL~]);}else if(s.needstotal > 0){if(s.needstotal > 7){s.needstotal-=1;}else if(s.needstotal < 7){s.needstotal += 1;};}else{var news = []; for(sl in s.getslots()){news.push(lookup(sl)); }; s.changeslots(news); }; s.animate(~flashandshake~); sfx(~_magic~);};,Mass Polymorph,COUNTDOWN,3,BRIGHTCYAN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Time Travel,Use a copy of the last|equipment you used|(<var:lastequipmentused>[;] <var:lastequipmentuseddice>),1,var l = null; for(eq in self.equipmenthistory){if(eq.name != ~Time Travel~){l = eq;};}; var s = new elements.Equipment(l.name); s.usesleft= 0; self.equipment.push(s); trace(l.assigneddice); for(x in l.assigneddice){if(x!=null){var nd = new elements.Dice(); nd.basevalue = x.basevalue; self.dicepool.push(nd); s.assigndice(nd);}; }; s.x = 3840/2 - s.width/2; s.y = 2160/2-s.height/2; s.animate(~flashandshake~); s.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|s.assigneddice|0|false); sfx(~_recycle~);,Fury,EVEN,,GREY,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,var l = null; for(eq in self.equipmenthistory){if(eq.name != ~Time Travel~){l = eq;};}; self.setvar(~lastequipmentused~|l.name); var s = ~(~; var dicelist = []; for(d in l.assigneddice){if(d!=null){dicelist.push(d.basevalue);};}; s+=dicelist.join(~ ~); s+=~)~; self.setvar(~lastequipmentuseddice~|s);,,,,,,
Time Travel_upgraded,Use a copy of the last|equipment you used|(<var:lastequipmentused>),1,var l = null; for(eq in self.equipmenthistory){if(eq.name != ~Time Travel~){l = eq;};}; var s = new elements.Equipment(l.name); self.equipment.push(s); trace(l.assigneddice); for(x in l.assigneddice){if(x!=null){var nd = new elements.Dice(); nd.basevalue = x.basevalue; self.dicepool.push(nd); s.assigndice(nd);}; }; s.x = 3840/2 - s.width/2; s.y = 2160/2-s.height/2; s.animate(~flashandshake~); s.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|s.assigneddice|0|false); sfx(~_recycle~);,Fury,NORMAL,,GREY,,,,,0,YES,NO,excludefromrandomlists,,,,,,var l = null; for(eq in self.equipmenthistory){if(eq.name != ~Time Travel~){l = eq;};}; self.setvar(~lastequipmentused~|l.name);,,,,,,
Time Travel_downgraded,Use a copy of the last|equipment you used|(<var:lastequipmentused>),1,var l = null; for(eq in self.equipmenthistory){if(eq.name != ~Time Travel~){l = eq;};}; var s = new elements.Equipment(l.name); self.equipment.push(s); trace(l.assigneddice); for(x in l.assigneddice){if(x!=null){var nd = new elements.Dice(); nd.basevalue = x.basevalue; self.dicepool.push(nd); s.assigndice(nd);}; }; s.x = 3840/2 - s.width/2; s.y = 2160/2-s.height/2; s.animate(~flashandshake~); s.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|s.assigneddice|0|false); sfx(~_recycle~);,Fury,EVEN|EVEN,,GREY,,,,,0,YES,NO,excludefromrandomlists,,,,,,var l = null; for(eq in self.equipmenthistory){if(eq.name != ~Time Travel~){l = eq;};}; self.setvar(~lastequipmentused~|l.name);,,,,,,
Bolt Blaster,Fire [star]2 [yellow]Power Bolts[]|(Each deal [sword]2 damage),1,if(simulation){attack(2); attack(2);}else{};,Double Tap,EVEN,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.displayname = ~Power Bolt~ spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + e.width|e.y|0.1); makespike(e.x-400|e.y|0.1);};,,,
Bolt Blaster_upgraded,Fire [star]3 [yellow]Power Bolts[]|(Each deal [sword]2 damage),1,if(simulation){attack(2); attack(2); attack(2);}else{};,Double Tap,EVEN,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~Power Bolt~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + e.width|e.y|0.1); makespike(e.x-400|e.y|0.1); makespike(e.x + e.width/2 - 200|e.y + (self.isplayer ? 200 : -200)|0.2);};,,,
Bolt Blaster_downgraded,Fire [star]2 [yellow]Power Bolts[]|(Each deal [sword]2 damage),1,if(simulation){attack(2); attack(2);}else{};,Double Tap,REQUIRE2,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~Power Bolt~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + e.width|e.y|0.1); makespike(e.x-400|e.y|0.1);};,,,
Big Crunch,Deal [sword]5 damage|Fire a [yellow]Power Bolt[],1,if(simulation){attack(5); attack(2);}else{attack(5); sfxdamage(target|5);};,Double Tap,COUNTDOWN,10,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.displayname = ~Power Bolt~ spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x+(e.width/2)-200|e.y|0.1);};,,,
Big Crunch_upgraded,Deal [sword]5 damage|Fire [star]2 [yellow]Power Bolts[],1,if(simulation){attack(5); attack(2); attack(2);}else{attack(5); sfxdamage(target|5);};,Double Tap,COUNTDOWN,10,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x + e.width|e.y|0.1); makespike(e.x-400|e.y|0.1); makespike(e.x + e.width/2 - 200|e.y + (self.isplayer ? 200 : -200)|0.2);};,,,
Big Crunch_downgraded,Deal [sword]3 damage|Fire a [yellow]Power Bolt[],1,if(simulation){attack(3); attack(2);}else{attack(3); sfxdamage(target|5);};,Double Tap,COUNTDOWN,10,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~MF Blank Equipment~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.displayname = ~Power Bolt~ spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; makespike(e.x+(e.width/2)-200|e.y|0.1);};,,,
Power Pulse,Drain [heart]1 health per [yellow]Power[]|[yellow]Bolt[] fired this turn,1,sfx(~_fury~); if(simulation){bonus(getstatusself(~mf_poweredup~) * 1000);};,Life Leech,ODD,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~Draining Bolt~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; var delay = 0.1; var s = getstatusself(~mf_poweredup~); while(s > 0){makespike(rand([2|3|4|5|6|7])*3800/8|(self.isplayer ? -600 : 2160)|delay); delay+=0.1; s-=1;}; };,,,
Power Pulse_upgraded,Drain [heart]1 health per [yellow]Power[]|[yellow]Bolt[] fired this turn,1,sfx(~_fury~); if(simulation){bonus(getstatusself(~mf_poweredup~) * 1000);};,Life Leech,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~Draining Bolt~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; var delay = 0.1; var s = getstatusself(~mf_poweredup~); while(s > 0){makespike(rand([2|3|4|5|6|7])*3800/8|(self.isplayer ? -600 : 2160)|delay); delay+=0.1; s-=1;}; };,,,
Power Pulse_downgraded,Drain [heart]1 health per [yellow]Power[]|[yellow]Bolt[] fired this turn,1,sfx(~_fury~); if(simulation){bonus(getstatusself(~mf_poweredup~) * 1000);};,Life Leech,REQUIRE1,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,if(simulation){}else{function makespike(x|y|delay){var spike = new elements.Equipment(~Draining Bolt~); spike.temporary_thisturnonly  = true; self.equipment.push(spike); spike.show=true; spike.width = 400; spike.x = x; spike.y = y+200; spike.height=400; spike.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); spike.animate(~flashandshake~);}; var delay = 0.1; var s = getstatusself(~mf_poweredup~); while(s > 0){makespike(rand([2|3|4|5|6|7])*3800/8|(self.isplayer ? -600 : 2160)|delay); delay+=0.1; s-=1;}; };,,,
Star Smash,Dice Boltification|Convert dice on this card|to [yellow]Power Bolts[][;] fire them,2,,Double Tap,,,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,var yeet  = []; for (mydice in self.dicepool){if(mydice.available() && mydice.x+20 >= e.x && mydice.y+20 >= e.y && mydice.x - 20 <= e.x + e.width && mydice.y - 20 <= e.y + e.height) {yeet.push(mydice);}}; if(yeet.length > 0){var delay = 0; for(mydice in yeet){var star = new elements.Equipment(~Power Bolt~); star.temporary_thisturnonly  = true; self.equipment.push(star); star.show=true; star.width = 400; star.x = mydice.x; star.y = mydice.y; star.height=400; star.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); mydice.animate(~disappear~|delay); delay+=0.1; }};,,,
Star Smash_upgraded,Dice Boltification|Convert dice here to [yellow]Power[]|[yellowBolts[][;] fire them +1 more,2,,Double Tap,,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,var yeet  = [new elements.Dice((e.x+(e.width)/2)|(e.y+(e.height)/2))]; for (mydice in self.dicepool){if(mydice.available() && mydice.x >= e.x && mydice.y >= e.y && mydice.x - 40 <= e.x + e.width && mydice.y - 40 <= e.y + e.height) {yeet.push(mydice);}}; if(yeet.length > 0){var delay = 0; for(mydice in yeet){var star = new elements.Equipment(~Power Bolt~); star.temporary_thisturnonly  = true; self.equipment.push(star); star.show=true; star.width = 400; star.x = mydice.x; star.y = mydice.y; star.height=400; star.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); mydice.animate(~disappear~|delay); delay+=0.1; }};,,,
Star Smash_downgraded,Dice Boltification|Convert a dice on this card|to a [yellow]Power Bolt[][;] fire it,2,,Double Tap,,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,var yeet  = []; for (mydice in self.dicepool){if(mydice.available() && mydice.x >= e.x && mydice.y >= e.y && mydice.x - 40 <= e.x + e.width && mydice.y - 40 <= e.y + e.height) {yeet.push(mydice);}}; if(yeet.length > 0){var delay = 0; var star = new elements.Equipment(~Power Bolt~); star.temporary_thisturnonly  = true; self.equipment.push(star); star.show=true; star.width = 400; star.x = yeet[0].x; star.y = yeet[0].y; star.height=400; star.doequipmentaction(self|target|(self.isplayer ? 1 : -1)|[]|delay|true); yeet[0].animate(~disappear~|delay); delay+=0.1; },,,
MF Blank Equipment,[400%][confuse]|,2,,Finger Guns,,,GRAY,,,,,0,NO,NO,excludefromrandomlists|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
MF Blank Equipment_upgraded,[400%][confuse]|,2,,Finger Guns,,,GRAY,,,,,0,NO,NO,excludefromrandomlists|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
MF Blank Equipment_downgraded,[400%][confuse]|,2,,Finger Guns,,,GRAY,,,,,0,NO,NO,excludefromrandomlists|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Draining Bolt,[400%][heart]|,2,drain(1); sfx(~_drain~);,Life Leech,,,RED,,,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,,,,,,,,
Skeleglare,Lock [lock]1 dice,2,inflict(LOCK); sfx(~_lock~);,Padlock,DOUBLES|DOUBLES,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Skeleglare_upgraded,Lock [lock]1 dice[;] and|another in [jinx]2 turns,2,inflict(LOCK); sfx(~_lock~|~~|0.4); jinx(~Skeleglare+~[;]~receive [lock]%VAR% lock~[;]~Receive [lock]%VAR% lock~[;]~inflict(LOCK[;]%VAR%); sfx(\~_lock\~);~[;]target[;]self[;]2[;]1); sfx(~_thinghappens~);,Padlock,DOUBLES|DOUBLES,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Skeleglare_downgraded,Lock [lock]1 dice,2,inflict(LOCK); sfx(~_lock~);,Padlock,REQUIRE2|REQUIRE2,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Ubersword,Deal [sword]<d6> damage[;] on 6|gain [star]3 limit charge,2,attack(d); sfxdamage(target|d); if(d==6){self.limitvalue+=3; if(self.limitvalue > self.limitmax){self.limitvalue = self.limitmax;}; sfx(~_mana~);},Unlimited Limit,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d==6){self.limitvalue+=3; if(self.limitvalue > self.limitmax){self.limitvalue = self.limitmax;}; sfx(~_mana~);}
Ubersword_upgraded,Deal [sword]<d6> damage[;] on|even gain [star]3 limit charge,2,attack(d); sfxdamage(target|d); if(d%2 == 0){self.limitvalue+=3; if(self.limitvalue > self.limitmax){self.limitvalue = self.limitmax;}; sfx(~_mana~);},Unlimited Limit,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,if(d%2 == 0){self.limitvalue+=3; if(self.limitvalue > self.limitmax){self.limitvalue = self.limitmax;}; sfx(~_mana~);}
Ubersword_downgraded,Deal [sword]<d6> damage[;] on 6|gain [star]3 limit charge,2,attack(d); sfxdamage(target|d); if(d==6){self.limitvalue+=3; if(self.limitvalue > self.limitmax){self.limitvalue = self.limitmax;}; sfx(~_mana~);},Unlimited Limit,EVEN,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,if(d==6){self.limitvalue+=3; if(self.limitvalue > self.limitmax){self.limitvalue = self.limitmax;}; sfx(~_mana~);}
Morale Booster,Heal [heal]<d6> health[;] double|if your limit break is full,1,if(self.limitvalue >= self.limitmax){attackself(-d*2); sfx(~_cure~);}else{attackself(-d); sfx(~_heal~);};,Unlimited Limit,MAX2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Morale Booster_upgraded,Heal [heal]<d6> health[;] double|if your limit break is full,1,if(self.limitvalue >= self.limitmax){attackself(-d*2); sfx(~_cure~);}else{attackself(-d); sfx(~_heal~);};,Unlimited Limit,MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Morale Booster_downgraded,Heal [heal]<d6> health[;] double|if your limit break is full,1,if(self.limitvalue >= self.limitmax){attackself(-d*2); sfx(~_cure~);}else{attackself(-d); sfx(~_heal~);};,Unlimited Limit,REQUIRE2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Two Hookshots,Next 2 equipment you use|have +1 use this turn,1,inflictself(REEQUIPNEXT|2); sfx(~_recycle~);,Efficiency,REQUIRE2|REQUIRE2,,GREEN,change_power,change_power,reequipnext,,0,YES,NO,,,,,,,,,,,,,
Two Hookshots_upgraded,Next 2 equipment you use|have +1 use this turn,1,inflictself(REEQUIPNEXT|2); sfx(~_recycle~);,Efficiency,EVEN|EVEN,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Two Hookshots_downgraded,Next equipment you use|has +1 use this turn,1,inflictself(REEQUIPNEXT); sfx(~_recycle~);,Efficiency,REQUIRE2|REQUIRE2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Two Hookshots?,Return next two dice you|use[;] and return these dice,1,inflictself(REEQUIPNEXT|2); sfx(~_recycle~); var r = []; for(ad in actualdice){r.push(ad.basevalue);}; givedice(r);,Efficiency,REQUIRE2|REQUIRE2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Two Hookshots?_upgraded,Return next two dice you|use[;] and return these dice,1,inflictself(REEQUIPNEXT|2); sfx(~_recycle~); var r = []; for(ad in actualdice){r.push(ad.basevalue);}; givedice(r);,Efficiency,EVEN|EVEN,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Two Hookshots?_downgraded,Return the next two|dice you use,1,inflictself(REEQUIPNEXT|2); sfx(~_recycle~);,Efficiency,REQUIRE2|REQUIRE2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Holy Heal Grenade,Heal everyone for [heal]<triple>|health in [jinx]3 turns,1,jinx(~Holy Healing~[;]~recover [heal]%VAR% health for both~[;]~Recover [heal]%VAR% health for both~[;]~attack(-%VAR%); sfx(\~_cure\~); attackself(-%VAR%);~[;]self[;]self[;]3[;]d*3); sfx(~_thinghappens~);,Regenerate,MAX3,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Holy Heal Grenade_upgraded,Heal everyone for [heal]<triple>|health in [jinx]3 turns,1,jinx(~Holy Healing~[;]~recover [heal]%VAR% health for both~[;]~Recover [heal]%VAR% health for both~[;]~attack(-%VAR%); sfx(\~_cure\~); attackself(-%VAR%);~[;]self[;]self[;]3[;]d*3); sfx(~_thinghappens~);,Regenerate,MAX3,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Holy Heal Grenade_downgraded,Heal everyone for [heal]<triple>|health in [jinx]3 turns,1,jinx(~Holy Healing~[;]~recover [heal]%VAR% health for both~[;]~Recover [heal]%VAR% health for both~[;]~attack(-%VAR%); sfx(\~_cure\~); attackself(-%VAR%);~[;]self[;]self[;]3[;]d*3); sfx(~_thinghappens~);,Regenerate,REQUIRE3,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Sustained Loud Yelling,Inflict [weaken]1 weaken each|turn for the rest of battle,2,inflict(~mf_weakeneachturn~); for(x in 0...3){sfx(~_weaken~|~~|x/5);};,Dial Up Sounds,REQUIRE5|REQUIRE5,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Sustained Loud Yelling_upgraded,Inflict [weaken]1 weaken each|turn for the rest of battle,2,inflict(~mf_weakeneachturn~); for(x in 0...3){sfx(~_weaken~|~~|x/5);};,Dial Up Sounds,MIN5|MIN5,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Sustained Loud Yelling_downgraded,Inflict [weaken]1 weaken each|turn for the rest of battle,2,inflict(~mf_weakeneachturn~); for(x in 0...3){sfx(~_weaken~|~~|x/5);};,Dial Up Sounds,REQUIRE5|REQUIRE5|REQUIRE5|REQUIRE5,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Shield of Light,Damage taken next turn heals|you for [heal]1 hp each turn per|damage dealt (max: 5 turns),2,inflictself(~shieldoflight~|1); sfx(~_survive~);,Lightshield,DOUBLES|DOUBLES,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Shield of Light_upgraded,Damage taken next turn heals|you for [heal]1 hp each turn per|damage dealt (max: 5 turns),2,inflictself(~shieldoflight~|1); sfx(~_survive~);,Lightshield,NORMAL|NORMAL,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Shield of Light_downgraded,Damage taken next turn heals|you for [heal]1 hp each turn per|damage dealt (max: 5 turns),2,inflictself(~shieldoflight~|1); sfx(~_survive~);,Lightshield,REQUIRE4|REQUIRE4,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Bumpster Sword,[sword]<d6>[;] get new dice (value +1)|Immune to errors,2,attack(d); givedice(d+1); sfxdamage(target|d);,Megabump,ODD,,GRAY,change_power,change_power,,,0,NO,NO,robotonly|errorimmune,,,,,,,,,,,,givedice(d+1);
Bumpster Sword_upgraded,[sword]<d6>[;] get new dice (value +1)|Immune to errors,2,attack(d); givedice(d+1); sfxdamage(target|d);,Megabump,MAX5,,GRAY,,,,,0,NO,NO,robotonly|errorimmune,,,,,,,,,,,,givedice(d+1);
Bumpster Sword_downgraded,[sword]<d6>[;] get new dice (value +1)|Immune to errors,2,attack(d); givedice(d+1); sfxdamage(target|d);,Megabump,REQUIRE3,,GRAY,,,,,0,NO,NO,robotonly|errorimmune,,,,,,,,,,,,givedice(d+1);
Ultimuplicate,Duplicate dice[;] duplicate|2 dice on jackpot,1,if(simulation){bonus(1000);}else{var ret = []; for(ad in actualdice){ret.push(ad.basevalue); ret.push(ad.basevalue);}; givedice(ret);};,Clone Device,MAX4,,YELLOW,change_power,change_power,,,0,YES,NO,robotonly,,,,,,if(self.roll_jackpot > 0){var s = e.getslots(); e.changeslots([s[0]|s[0]]); if(s.length == 1){e.animate(~flashandshake~);};};,,e.resetslots();,,,,
Ultimuplicate_upgraded,Duplicate dice[;] duplicate|2 dice on jackpot,1,if(simulation){bonus(1000);}else{var ret = []; for(ad in actualdice){ret.push(ad.basevalue); ret.push(ad.basevalue);}; givedice(ret);};,Clone Device,MAX5,,YELLOW,,,,,0,YES,NO,robotonly,,,,,,if(self.roll_jackpot > 0){var s = e.getslots(); e.changeslots([s[0]|s[0]]); if(s.length == 1){e.animate(~flashandshake~);};};,,e.resetslots();,,,,
Ultimuplicate_downgraded,Duplicate dice,1,if(simulation){bonus(1000);}else{var ret = []; for(ad in actualdice){ret.push(ad.basevalue); ret.push(ad.basevalue);}; givedice(ret);};,Clone Device,MAX4,,YELLOW,,,,,0,YES,NO,robotonly,,,,,,,,,,,,
Kablammo,[sword]<d6>. Snap 3 at once to take|an extra turn[;] immediately,1,attack(d); sfxdamage(target|d);,Time Stop,MAX4,,YELLOW,change_power,change_power,,,0,NO,NO,jesteronly,,,,,,,,,,if(snap==3){ sfx(~_fury~); self.endturnnow(); inflictself(EXTRATURN);};,,
Kablammo_upgraded,[sword]<d6>. Snap 3 at once to|take an extra turn[;] immediately,1,attack(d); sfxdamage(target|d);,Time Stop,MAX5,,YELLOW,,,,,0,NO,NO,jesteronly,,,,,,,,,,if(snap==3){ sfx(~_fury~); self.endturnnow(); inflictself(EXTRATURN);};,,
Kablammo_downgraded,[sword]<d6>. Snap 3 at once to|take an extra turn[;] immediately,1,attack(d); sfxdamage(target|d);,Time Stop,MAX3,,YELLOW,,,,,0,NO,NO,jesteronly,,,,,,,,,,if(snap==3){ sfx(~_fury~); self.endturnnow(); inflictself(EXTRATURN);};,,
Abracastabra,Deal [sword]8 damage if|this was cast this turn,1,if(e.getvar(~stablastturn~) != 1){attack(8); sfxdamage(target|8); sfx(~_magic~);};,Pea Gun,EVEN,,PURPLE,change_power,change_power,,,0,NO,NO,witchonly,1,,,,if(e.getvar(~stablastturn~) == 1){e.changecolour(~GRAY~); e.animate(~flashandshake~);};,,,e.setvar(~stablastturn~|1);,,,,
Abracastabra_upgraded,Deal [sword]12 damage if|this was cast this turn,1,if(e.getvar(~stablastturn~) != 1){attack(12); sfxdamage(target|12); sfx(~_magic~);};,Pea Gun,EVEN,,PURPLE,,,,,0,NO,NO,witchonly,,,,,if(e.getvar(~stablastturn~) == 1){e.changecolour(~GRAY~); e.animate(~flashandshake~);};,,,e.setvar(~stablastturn~|1);,,,,
Abracastabra_downgraded,Deal [sword]5 damage if|this was cast this turn,1,if(e.getvar(~stablastturn~) != 1){attack(5); sfxdamage(target|5); sfx(~_magic~);};,Pea Gun,EVEN,,PURPLE,,,,,0,NO,NO,witchonly,,,,,if(e.getvar(~stablastturn~) == 1){e.changecolour(~GRAY~); e.animate(~flashandshake~);};,,,e.setvar(~stablastturn~|1);,,,,
Second Sun,Deal [fire]7 damage[;] triple if|all enemy dice are burning,1,var dmg = 7; if(getstatus(FIRE) >= target.dice+target.extradice+target.bonusdice){dmg = dmg * 3;}; attack(dmg|FIRE); sfxdamage(target|dmg); sfx(~_fire~);,Heat Ray,COUNTDOWN,11,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Second Sun_upgraded,Deal [fire]11 damage[;] triple if|all enemy dice are burning,1,var dmg = 11; if(getstatus(FIRE) >= target.dice+target.extradice+target.bonusdice){dmg = dmg * 3;}; attack(dmg|FIRE); sfxdamage(target|dmg); sfx(~_fire~);,Heat Ray,COUNTDOWN,11,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Second Sun_downgraded,Deal [fire]5 damage[;] triple if|all enemy dice are burning,1,var dmg = 5; if(getstatus(FIRE) >= target.dice+target.extradice+target.bonusdice){dmg = dmg * 3;}; attack(dmg|FIRE); sfxdamage(target|dmg); sfx(~_fire~);,Heat Ray,COUNTDOWN,11,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Eternal Frostbite,Deal [ice]7 damage[;] triple if|all enemy dice are frozen,1,var dmg = 7; if(getstatus(ICE) >= target.dice+target.extradice+target.bonusdice){dmg = dmg * 3;}; attack(dmg|ICE); sfxdamage(target|dmg); sfx(~_ice~);,Arctic Storm,COUNTDOWN,11,BRIGHTCYAN,change_power,change_power,ice,,0,NO,NO,,,,,,,,,,,,,
Eternal Frostbite_upgraded,Deal [ice]11 damage[;] triple if|all enemy dice are frozen,1,var dmg = 11; if(getstatus(ICE) >= target.dice+target.extradice+target.bonusdice){dmg = dmg * 3;}; attack(dmg|ICE); sfxdamage(target|dmg); sfx(~_ice~);,Arctic Storm,COUNTDOWN,11,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Eternal Frostbite_downgraded,Deal [ice]5 damage[;] triple if|all enemy dice are frozen,1,var dmg = 5; if(getstatus(ICE) >= target.dice+target.extradice+target.bonusdice){dmg = dmg * 3;}; attack(dmg|ICE); sfxdamage(target|dmg); sfx(~_ice~);,Arctic Storm,COUNTDOWN,11,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Eternal Frostbite?,Do [ice]7 dmg[;] triple if enemy|has at least [ice]1 per dice,1,var dmg = 7; if(getstatus(ICE) >= target.dice+target.extradice+target.bonusdice){dmg = dmg * 3;}; attack(dmg|ICE); sfxdamage(target|dmg); sfx(~_ice~);,Arctic Storm,COUNTDOWN,11,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Eternal Frostbite?_upgraded,Do [ice]11 dmg[;] triple if enemy|has at least [ice]1 per dice,1,var dmg = 11; if(getstatus(ICE) >= target.dice+target.extradice+target.bonusdice){dmg = dmg * 3;}; attack(dmg|ICE); sfxdamage(target|dmg); sfx(~_ice~);,Arctic Storm,COUNTDOWN,11,BRIGHTCYAN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Eternal Frostbite?_downgraded,Do [ice]5 dmg[;] triple if enemy|has at least [ice]1 per dice,1,var dmg = 5; if(getstatus(ICE) >= target.dice+target.extradice+target.bonusdice){dmg = dmg * 3;}; attack(dmg|ICE); sfxdamage(target|dmg); sfx(~_ice~);,Arctic Storm,COUNTDOWN,11,BRIGHTCYAN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Hold The Line,Gain [reduce]1 reduce. Gain [shield]3|too if your health is below 25%,1,inflictself(REDUCE); sfx(~_shield~); if(self.hp / self.maxhp < 0.25){inflictself(SHIELD|3);};,Pillow Fort,COUNTDOWN,5,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Hold The Line_upgraded,Gain [reduce]2 reduce. Gain [shield]3|too if your health is below 25%,1,inflictself(REDUCE|2); sfx(~_shield~); if(self.hp / self.maxhp < 0.25){inflictself(SHIELD|3);};,Pillow Fort,COUNTDOWN,5,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Hold The Line_downgraded,Gain [reduce]1 reduce,1,inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,COUNTDOWN,5,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Headache,Do [sword]4[;] curse everyone|,1,attack(4); sfxdamage(target|4); inflict(CURSE); inflictself(CURSE); sfx(~_curse~);,Dramatic Pause,COUNTDOWN,5,PURPLE,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,
Headache_upgraded,Do [sword]6[;] curse everyone|,1,attack(6); sfxdamage(target|6); inflict(CURSE); inflictself(CURSE); sfx(~_curse~);,Dramatic Pause,COUNTDOWN,5,PURPLE,,,,,-1,NO,NO,,,,,,,,,,,,,
Headache_downgraded,Do [sword]2[;] curse everyone|,1,attack(2); sfxdamage(target|2); inflict(CURSE); inflictself(CURSE); sfx(~_curse~);,Dramatic Pause,COUNTDOWN,5,PURPLE,,,,,-1,NO,NO,,,,,,,,,,,,,
Recurseion,Do [sword]4[;] curse enemy if you|used a Recurseion this turn,1,attack(4); sfxdamage(target|4); if(getstatus(~mf_recurseion~) > 0){inflict(CURSE); sfx(~_curse~);}else{sfx(~_magic~);}; inflict(~mf_recurseion~);,Dramatic Pause,EVEN,,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Recurseion_upgraded,Do [sword]7[;] curse enemy if you|used a Recurseion this turn,1,attack(7); sfxdamage(target|7); if(getstatus(~mf_recurseion~) > 0){inflict(CURSE); sfx(~_curse~);}else{sfx(~_magic~);}; inflict(~mf_recurseion~);,Dramatic Pause,EVEN,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Recurseion_downgraded,Do [sword]2[;] curse enemy if you|used a Recurseion this turn,1,attack(2); sfxdamage(target|2); if(getstatus(~mf_recurseion~) > 0){inflict(CURSE); sfx(~_curse~);}else{sfx(~_magic~);}; inflict(~mf_recurseion~);,Dramatic Pause,EVEN,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Elementablast,Odd: [ice]1[;] Even: [fire]1|1-3: [weaken]1[;] 4-6: [shock]1,2,if(d%2 == 1){inflict(ICE); sfx(~_ice~);}; if(d%2 == 0){inflict(FIRE); sfx(~_fire~);}; if(d<4){inflict(WEAKEN); sfx(~_weaken~);}; if(d>3){inflict(SHOCK); sfx(~_shock~);}; ,JOAT Smash,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Elementablast_upgraded,Odd: [ice]1[;] Even: [fire]1|1-3: [weaken]1[;] 4-6: [shock]1|,2,if(d%2 == 1){inflict(ICE); sfx(~_ice~);}; if(d%2 == 0){inflict(FIRE); sfx(~_fire~);}; if(d<4){inflict(WEAKEN); sfx(~_weaken~);}; if(d>3){inflict(SHOCK); sfx(~_shock~);}; ,JOAT Smash,NORMAL,,PINK,,,,,2,NO,NO,,,,,,,,,,,,,
Elementablast_downgraded,Odd: [ice]1[;] Even: [fire]1|1-3: [weaken]1[;] 4-6: [shock]1,2,if(d%2 == 1){inflict(ICE); sfx(~_ice~);}; if(d%2 == 0){inflict(FIRE); sfx(~_fire~);}; if(d<4){inflict(WEAKEN); sfx(~_weaken~);}; if(d>3){inflict(SHOCK); sfx(~_shock~);}; ,JOAT Smash,RANGE25,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Morphing Egg,Contains an item that|only accepts a <d6>,1,var eq = new elements.Equipment(~~); var list = getequipmentlist(null | [~small~] | [~excludefromrandomlists~ | ~robotonly~ | ~witchonly~ | ~cannotsteal~ | ~final~ | ~powercard~ | ~alternateversion~]); eq.create(rand(list)); function checkslots(eq){if(eq.getslots().length == 0){return false;}; if(eq.countdown > 0){return false;}; if(eq.needsdoubles){return false;}; var flag = false; for(s in eq.getslots()){trace(s); if(s.indexOf(~FREE~) == -1 && s.indexOf(~REQUIRE~+d) == -1){return false;} if(flag && s.indexOf(~REQUIRE~+d) > -1){return false;}else if(s.indexOf(~REQUIRE~+d) > -1){flag = true;};}; return true; }; while(!checkslots(eq)){eq.create(rand(list));}; var name = eq.name; eq.y = -9999; eq.ready=false; eq.dispose(); giveequipment(name | true | false | e);,Mass Polymorph,MIN4,,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Morphing Egg_upgraded,Contains an upgraded item|that only accepts a <d6>,1,var eq = new elements.Equipment(~~); var list = getequipmentlist(null | [~small~] | [~excludefromrandomlists~ | ~robotonly~ | ~witchonly~ | ~cannotsteal~ | ~final~ | ~powercard~ | ~alternateversion~]); eq.create(rand(list)); function checkslots(eq){if(eq.getslots().length == 0){return false;}; if(eq.countdown > 0){return false;}; if(eq.needsdoubles){return false;}; var flag = false; for(s in eq.getslots()){trace(s); if(s.indexOf(~FREE~) == -1 && s.indexOf(~REQUIRE~+d) == -1){return false;} if(flag && s.indexOf(~REQUIRE~+d) > -1){return false;}else if(s.indexOf(~REQUIRE~+d) > -1){flag = true;};}; return true; }; while(!checkslots(eq)){eq.create(rand(list));}; var name = eq.name; eq.y = -9999; eq.ready=false; eq.dispose(); giveequipment(name | true | false | e);,Mass Polymorph,NORMAL,,YELLOW,,,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Morphing Egg_downgraded,Contains an item that|only accepts a <d6>,1,var eq = new elements.Equipment(~~); var list = getequipmentlist(null | [~small~] | [~excludefromrandomlists~ | ~robotonly~ | ~witchonly~ | ~cannotsteal~ | ~final~ | ~powercard~ | ~alternateversion~]); eq.create(rand(list)); function checkslots(eq){if(eq.getslots().length == 0){return false;}; if(eq.countdown > 0){return false;}; if(eq.needsdoubles){return false;}; var flag = false; for(s in eq.getslots()){trace(s); if(s.indexOf(~FREE~) == -1 && s.indexOf(~REQUIRE~+d) == -1){return false;} if(flag && s.indexOf(~REQUIRE~+d) > -1){return false;}else if(s.indexOf(~REQUIRE~+d) > -1){flag = true;};}; return true; }; while(!checkslots(eq)){eq.create(rand(list));}; var name = eq.name; eq.y = -9999; eq.ready=false; eq.dispose(); giveequipment(name | true | false | e);,Mass Polymorph,REQUIRE4,,YELLOW,,,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Shadow Spell,Deal [sword]5 damage|Blind [blind]2 dice,1,attack(5); sfxdamage(target|5); sfx(~_magic~); inflict(BLIND|2); sfx(~_blind~);,Smoke Cloud,REQUIRE1,,GRAY,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Shadow Spell_upgraded,Deal [sword]5 damage|Blind [blind]5 dice,1,attack(5); sfxdamage(target|5); sfx(~_magic~); inflict(BLIND|5); sfx(~_blind~);,Smoke Cloud,REQUIRE1,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Shadow Spell_downgraded,Deal [sword]5 damage|Blind [blind]1 dice,1,attack(5); sfxdamage(target|5); sfx(~_magic~); inflict(BLIND); sfx(~_blind~);,Smoke Cloud,REQUIRE1,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Shadow Spell?,Deal [sword]5 damage|Inflict [blind]2 turns of Blind,1,attack(5); sfxdamage(target|5); sfx(~_magic~); inflict(BLIND|2); sfx(~_blind~);,Smoke Cloud,REQUIRE1,,GRAY,change_power,change_power,,,0,NO,NO,alternateversion,1,,,,,,,,,,,
Shadow Spell?_upgraded,Deal [sword]5 damage|Inflict [blind]5 turns of Blind,1,attack(5); sfxdamage(target|5); sfx(~_magic~); inflict(BLIND|5); sfx(~_blind~);,Smoke Cloud,REQUIRE1,,GRAY,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Shadow Spell?_downgraded,Deal [sword]5 damage|Inflict [blind]1 turns of Blind,1,attack(5); sfxdamage(target|5); sfx(~_magic~); inflict(BLIND); sfx(~_blind~);,Smoke Cloud,REQUIRE1,,GRAY,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Regen Spell,Deal [sword]5 damage[;] heal|[heal]1 per turn for [regen]2 turns,1,attack(5); sfxdamage(target|5); sfx(~_magic~); inflictself(~regen2~); sfx(~_cure~);,Regenerate,REQUIRE4,,GREEN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,inflictself(~regen2~); sfx(~_cure~);
Regen Spell_upgraded,Deal [sword]5 damage[;] heal|[heal]1 per turn for [regen]4 turns,1,attack(5); sfxdamage(target|5); sfx(~_magic~); inflictself(~regen4~); sfx(~_cure~);,Regenerate,REQUIRE4,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~regen4~); sfx(~_cure~);
Regen Spell_downgraded,Deal [sword]3 damage[;] heal|[heal]1 per turn for [regen]2 turns,1,attack(3); sfxdamage(target|3); sfx(~_magic~); inflictself(~regen2~); sfx(~_cure~);,Regenerate,REQUIRE4,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~regen2~); sfx(~_cure~);
Blood Spell,Deal [sword]5 damage[;] and|[sword]1 per turn for 4 turns,1,attack(5); sfxdamage(target|5); sfx(~_magic~); inflict(~bleed4~); sfx(~_poison~);,Pea Gun,REQUIRE3,,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Blood Spell_upgraded,Deal [sword]5 damage[;] and|[sword]1 per turn for 6 turns,1,attack(5); sfxdamage(target|5); sfx(~_magic~); inflict(~bleed6~); sfx(~_poison~);,Pea Gun,REQUIRE3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Blood Spell_downgraded,Deal [sword]5 damage[;] and|[sword]1 per turn for 2 turns,1,attack(5); sfxdamage(target|5); sfx(~_magic~); inflict(~bleed2~); sfx(~_poison~);,Pea Gun,REQUIRE3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Cancel,Negate the enemy's|first move,2,,Megacurse,MIN5|MIN5,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cancel_upgraded,Negate the enemy's|first move,2,,Megacurse,MIN5|MIN5,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cancel_downgraded,Negate the enemy's|first move,2,,Megacurse,MIN5|MIN5,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flame Launch,Roll a new dice[;] deal [fire] fire|dmg equal to its value,1,var r = rand([1|2|3|4|5|6]); givedice(r); attack(r[;]FIRE); sfx(~_fire~); sfxdamage(target|r);,Blowtorch,COUNTDOWN,6,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice();
Flame Launch_upgraded,Roll a new dice[;] deal [fire] fire|dmg equal to its value|,1,var r = rand([1|2|3|4|5|6]); givedice(r); attack(r[;]FIRE); sfx(~_fire~); sfxdamage(target|r);,Blowtorch,COUNTDOWN,6,RED,,,,,2,NO,NO,,,,,,,,,,,,,givedice();
Flame Launch_downgraded,Roll a [fire] burning dice[;] deal|[fire] fire dmg equal to its value,1,var r = rand([1|2|3|4|5|6]); givedice(r); var last; for(mydice in self.dicepool){if(mydice.available()){last = mydice;};}; var anim = ~fire~; if(runscript(~morefluff/isalt~|[~fire~])){anim = ~alternate_fire~;}; last.animate(anim); attack(r[;]FIRE); sfx(~_fire~); sfxdamage(target|r);,Blowtorch,COUNTDOWN,6,RED,,,,,0,NO,NO,,,,,,,,,,,,,var r = rand([1|2|3|4|5|6]); givedice(r); var last; for(mydice in self.dicepool){if(mydice.available()){last = mydice;};}; var anim = ~fire~; if(runscript(~morefluff/isalt~|[~fire~])){anim = ~alternate_fire~;}; last.animate(anim);
Frost Launch,Roll a new dice[;] deal [ice] ice|dmg equal to its value,1,var r = rand([1|2|3|4|5|6]); givedice(r); attack(r[;]ICE); sfx(~_ice~); sfxdamage(target|r);,Refrigerator,COUNTDOWN,6,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice();
Frost Launch_upgraded,Roll a new dice[;] deal [ice] ice|dmg equal to its value|,1,var r = rand([1|2|3|4|5|6]); givedice(r); attack(r[;]ICE); sfx(~_ice~); sfxdamage(target|r);,Refrigerator,COUNTDOWN,6,BRIGHTCYAN,,,,,2,NO,NO,,,,,,,,,,,,,givedice();
Frost Launch_downgraded,Roll a [ice]frozen dice[;] deal|[ice]ice dmg equal to its value,1,var r = rand([1|2|3|4|5|6]); givedice(r); var last; for(mydice in self.dicepool){if(mydice.available()){last = mydice;};}; var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim = ~alternate_ice~; sfx(~_dicefreeze~); if(r == 1){attack(1|ICE);}else{attack(r-1|ICE);};}else{attack(1|ICE);}; last.animate(anim); sfx(~_ice~); sfxdamage(target|r);,Refrigerator,COUNTDOWN,6,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,var r = rand([1|2|3|4|5|6]); givedice(r); var last; for(mydice in self.dicepool){if(mydice.available()){last = mydice;};}; var anim = ~ice~; if(runscript(~morefluff/isalt~|[~ice~])){anim = ~alternate_ice~; sfx(~_dicefreeze~);}; last.animate(~ice~);
Healing Song,Recover [heal]1 health|Roll a 1,1,attackself(-1); givedice(1); sfx(~_heal~);,Regenerate,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Healing Song_upgraded,Recover [heal]2 health|Roll two 1s,1,attackself(-2); givedice([1|1]); sfx(~_heal~);,Regenerate,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Healing Song_downgraded,Recover [heal]1 health|Roll a 1,1,attackself(-1); givedice(1); sfx(~_heal~);,Regenerate,MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Integrated GPU,Reset all dice options,1,if(!simulation && self != null){ var skillcard = self.getskillcard(); skillcard.equipmentpanel.hardreset(); skillcard.animate(~flash~); };sfx(~_magic~);,Magic Dice,LOCKED5,,PINK,change_power,change_power,,none,0,YES,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,
Integrated GPU_upgraded,Reset all dice options,1,if(!simulation && self != null){ var skillcard = self.getskillcard(); skillcard.equipmentpanel.hardreset(); skillcard.animate(~flash~); };sfx(~_magic~);,Magic Dice,LOCKED4,,PINK,,,,none,0,YES,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,
Integrated GPU_downgraded,Reset all dice options,1,if(!simulation && self != null){ var skillcard = self.getskillcard(); skillcard.equipmentpanel.hardreset(); skillcard.animate(~flash~); };sfx(~_magic~);,Magic Dice,LOCKED6,,PINK,,,,none,0,YES,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,
Jumper Cables,Reset all dice options|Shock [shock]all your items,1,if(!simulation && self != null){ var skillcard = self.getskillcard(); skillcard.equipmentpanel.hardreset(); skillcard.animate(~flash~); }; inflictself(SHOCK[;]ALL); self.applyequipmentcurses(); sfx(~_shock~);,Magic Dice,EVEN,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,
Jumper Cables_upgraded,Reset all dice options|Shock [shock]all your items,1,if(!simulation && self != null){ var skillcard = self.getskillcard(); skillcard.equipmentpanel.hardreset(); skillcard.animate(~flash~); }; inflictself(SHOCK[;]ALL); self.applyequipmentcurses(); sfx(~_shock~);,Magic Dice,NORMAL,,BRIGHTCYAN,,,,,0,YES,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,
Jumper Cables_downgraded,Reset all dice options|Shock [shock]all your items,1,if(!simulation && self != null){ var skillcard = self.getskillcard(); skillcard.equipmentpanel.hardreset(); skillcard.animate(~flash~); }; inflictself(SHOCK[;]ALL); self.applyequipmentcurses(); sfx(~_shock~);,Magic Dice,REQUIRE4,,BRIGHTCYAN,,,,,0,YES,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,
Spellburst,Roll 3 extra dice[;] disable|your spellbook this battle,1,if(simulation){bonus(-10000);}else{var amount = 3; var dicearray = []; for(x in 0...amount){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray); inflictself(~nospellbook~); sfx(~_recycle~);};,Magic Dice,NORMAL,,YELLOW,change_power,change_power,,,0,YES,NO,witchonly,1,,,,,,,,,,,
Spellburst_upgraded,Roll 4 extra dice[;] disable|your spellbook this battle,1,if(simulation){bonus(-10000);}else{var amount = 4; var dicearray = []; for(x in 0...amount){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray); inflictself(~nospellbook~); sfx(~_recycle~);};,Magic Dice,NORMAL,,YELLOW,,,,,0,YES,NO,witchonly,,,,,,,,,,,,
Spellburst_downgraded,Roll 2 extra dice[;] disable|your spellbook this battle,1,if(simulation){bonus(-10000);}else{var amount = 2; var dicearray = []; for(x in 0...amount){ dicearray.push(rand([1[;]2[;]3[;]4[;]5[;]6])); }; givedice(dicearray); inflictself(~nospellbook~); sfx(~_recycle~);};,Magic Dice,NORMAL,,YELLOW,,,,,0,YES,NO,witchonly,,,,,,,,,,,,
Bronze Medal,Gain [star]<d6> limit break charge,1,self.limitvalue+=3; if(self.limitvalue > self.limitmax){self.limitvalue = self.limitmax;}; sfx(~_magic~);,Unlimited Limit,MAX3,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Bronze Medal_upgraded,Gain [star]<d6> limit break charge,1,self.limitvalue+=3; if(self.limitvalue > self.limitmax){self.limitvalue = self.limitmax;}; sfx(~_magic~);,Unlimited Limit,MAX4,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Bronze Medal_downgraded,Gain [star]<d6> limit break charge,1,self.limitvalue+=3; if(self.limitvalue > self.limitmax){self.limitvalue = self.limitmax;}; sfx(~_magic~);,Unlimited Limit,MAX2,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Participation Award,Return the dice[;] duplicate it|if your limit is full,1,if(self.limitvalue >= self.limitmax){givedice([d|d]);}else{givedice(d);};,Unlimited Limit,NORMAL,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Participation Award_upgraded,Return the dice[;] get 3 copies|if your limit is full,1,if(self.limitvalue >= self.limitmax){givedice([d|d|d]);}else{givedice(d);};,Unlimited Limit,NORMAL,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Participation Award_downgraded,Return the dice[;] duplicate it|if your limit is full,1,if(self.limitvalue >= self.limitmax){givedice([d|d]);}else{givedice(d);};,Unlimited Limit,MIN4,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Booby Prize,If you have any limit charge[;]|consume it to inflict [curse]1 curse|Return the dice,1,if(self.limitvalue > 0){inflict(CURSE); sfx(~_curse~); self.limitvalue=0;}; givedice(d);,Unlimited Limit,EVEN,,PURPLE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Booby Prize_upgraded,If you have any limit charge[;]|consume it to inflict [curse]1 curse|Return the dice,1,if(self.limitvalue > 0){inflict(CURSE); sfx(~_curse~); self.limitvalue=0;}; givedice(d);,Unlimited Limit,NORMAL,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Booby Prize_downgraded,If you have any limit charge[;]|consume it to inflict [curse]1 curse|Return the dice,1,if(self.limitvalue > 0){inflict(CURSE); sfx(~_curse~); self.limitvalue=0;}; givedice(d);,Unlimited Limit,REQUIRE2,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Wooden Spoon,Halve your health[;] roll dice|that add up to that value,1,var amount = self.hp/2; pierceattackself(amount); givedice(amount); sfx(~_drain~);,Unlimited Limit,EVEN,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Wooden Spoon_upgraded,Halve your health[;] roll dice|that add up to that value,1,var amount = self.hp/2; pierceattackself(amount); givedice(amount); sfx(~_drain~);,Unlimited Limit,NORMAL,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Wooden Spoon_downgraded,Halve your health[;] roll dice|that add up to that value,1,var amount = self.hp/2; pierceattackself(amount); givedice(amount); sfx(~_drain~);,Unlimited Limit,REQUIRE4,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Text Bleed,Deal [sword]<d6> damage[;] then another|[sword]1 damage per turn for 4 turns,2,attack(d); inflict(~bleed4~); sfxdamage(target|d);,Plasma Gun,NORMAL,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Text Bleed_upgraded,Deal [sword]<d6> damage[;] then another|[sword]1 damage per turn for 4 turns|,2,attack(d); inflict(~bleed4~); sfxdamage(target|d);,Plasma Gun,NORMAL|FREE1,,RED,,,,,2,YES,NO,,,,,,,,,,,,,
Text Bleed_downgraded,Deal [sword]<d6> damage[;] then another|[sword]1 damage per turn for 4 turns,2,attack(d); inflict(~bleed4~); sfxdamage(target|d);,Plasma Gun,MAX4,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Gem Of Corvus,Reduce countdowns by 6,1,boostcountdowns(6);,Goop Gun,COUNTDOWN,6,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Gem Of Corvus_upgraded,Reduce countdowns by 8,1,boostcountdowns(6); boostcountdowns(2);,Goop Gun,COUNTDOWN,6,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Gem Of Corvus_downgraded,Reduce countdowns by 4,1,boostcountdowns(4);,Goop Gun,COUNTDOWN,6,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Wings Of Light,Heal [heal]10 health[;] then heal|[heal]2 per turn for [regen]5 turns,1,attackself(-10); inflictself(~regen5~|2); sfx(~_survive~); sfx(~_cure~|~~|0.3);,Revitalize,COUNTDOWN,20,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Wings Of Light_upgraded,Heal [heal]12 health[;] then heal|[heal]3 per turn for [regen]5 turns,1,attackself(-12); inflictself(~regen5~|3); sfx(~_survive~); sfx(~_cure~|~~|0.3);,Revitalize,COUNTDOWN,20,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Wings Of Light_downgraded,Heal [heal]5 health[;] then heal|[heal]2 per turn for [regen]5 turns,1,attackself(-5); inflictself(~regen5~|2); sfx(~_survive~); sfx(~_cure~|~~|0.3);,Revitalize,COUNTDOWN,20,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Killer Bite,Do nothing! ok I give up|i'll figure something out,1,/*happy 1000 items!*/,Finger Guns,,,,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Killer Bite_upgraded,Do nothing! ok I give up|i'll figure something out,1,/*happy 1000 items!*/,Finger Guns,,,,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Killer Bite_downgraded,Do nothing! ok I give up|i'll figure something out,1,/*happy 1000 items!*/,Finger Guns,,,,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Bear Witch Project,Transform into a very|low-budget Bear,1,if(simulation){bonus(-10000)}else{var spells = [~~|~Roarldron~|~Magic Bearier~|~Beargic Missile~|~Bearning Light~|~Vise Rip~|~Claw of Mirrors~]; for(x in 1...7){Spellbook.changespellflash(x|spells[x]);}; sfxdamage(target|10); sfx(~roar~);  /*happy 1000 items! */};,Bear!,NORMAL|NORMAL,6,PURPLE,change_power,change_power,,,0,YES,NO,witchonly|excludefromrandomlists,1,,,,,,,,,,,
The Bear Witch Project_upgraded,Transform into a very|low-budget Bear,1,if(simulation){bonus(-10000)}else{var spells = [~~|~Roarldron~|~Magic Bearier~|~Beargic Missile~|~Bearning Light~|~Vise Rip~|~Claw of Mirrors~]; for(x in 1...7){Spellbook.changespellflash(x|spells[x]);}; sfxdamage(target|10); sfx(~roar~);  /*happy 1000 items! */};,Bear!,NORMAL|NORMAL,,PURPLE,,,,,0,YES,NO,witchonly|excludefromrandomlists,,,,,,,,,,,,
The Bear Witch Project_downgraded,Transform into a very|low-budget Bear,1,if(simulation){bonus(-10000)}else{var spells = [~~|~Roarldron~|~Magic Bearier~|~Beargic Missile~|~Bearning Light~|~Vise Rip~|~Claw of Mirrors~]; for(x in 1...7){Spellbook.changespellflash(x|spells[x]);}; sfxdamage(target|10); sfx(~roar~);  /*happy 1000 items! */};,Bear!,REQUIRE3|REQUIRE3,,PURPLE,,,,,0,YES,NO,witchonly|excludefromrandomlists,,,,,,,,,,,,
Roarldron,Inflict [weaken]1 weaken[;]|get a new dice,1,inflict(WEAKEN); sfx(~_weaken~); sfx(~roar~); givedice();,Bear Smash,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,witchonly,1,,,,,,,,,,,givedice(); sfx(~roar~);
Roarldron_upgraded,Inflict [weaken]1 [;] reroll dice|,1,inflict(WEAKEN); sfx(~_weaken~); sfx(~roar~); givedice();,Bear Smash,NORMAL,,PURPLE,,,,,2,NO,NO,witchonly,,,,,,,,,,,,givedice(); sfx(~roar~);
Roarldron_downgraded,Inflict [weaken]1 weaken[;]|get a new dice,1,inflict(WEAKEN); sfx(~_weaken~); sfx(~roar~); givedice();,Bear Smash,MIN4,,PURPLE,,,,,0,NO,NO,witchonly,,,,,,,,,,,,givedice(); sfx(~roar~);
Magic Bearier,Gain [shield]<d6> shield,1,inflictself(SHIELD|d); sfx(~_shield~); sfx(~roar~);,Bear Smash,REQUIRE5,,ORANGE,change_power,change_power,,,0,YES,NO,witchonly,1,,,,,,,,,,,
Magic Bearier_upgraded,Gain [shield]<d6> shield,1,inflictself(SHIELD|d); sfx(~_shield~); sfx(~roar~);,Bear Smash,ODD,,ORANGE,,,,,0,YES,NO,witchonly,,,,,,,,,,,,
Magic Bearier_downgraded,Gain [shield]3 shield,1,inflictself(SHIELD|3); sfx(~_shield~); sfx(~roar~);,Bear Smash,REQUIRE5,,ORANGE,,,,,0,YES,NO,witchonly,,,,,,,,,,,,
Beargic Missile,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target|d); sfx(~roar~);,Bear Smash,EVEN|FREE2,,YELLOW,change_power,change_power,,,0,NO,NO,witchonly,1,,,,,,,,,,,
Beargic Missile_upgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target|d); sfx(~roar~);,Bear Smash,EVEN|FREE4,,YELLOW,,,,,0,NO,NO,witchonly,,,,,,,,,,,,
Beargic Missile_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target|d); sfx(~roar~);,Bear Smash,EVEN,,YELLOW,,,,,0,NO,NO,witchonly,,,,,,,,,,,,
Bearning Light,Deal [fire]<d6> damage|Burn [fire]1 dice,1,attack(d|FIRE); sfxdamage(target|d); inflict(FIRE); sfx(~_fire~); sfx(~_roar~|~~|0.4);,Bear Smash,MAX5,,RED,change_power,change_power,,,0,NO,NO,witchonly,1,,,,,,,,,,,
Bearning Light_upgraded,Deal [fire]<d6> damage|Burn [fire]1 dice,1,attack(d|FIRE); sfxdamage(target|d); inflict(FIRE); sfx(~_fire~); sfx(~_roar~|~~|0.4);,Bear Smash,MAX5|FREE2,,RED,,,,,0,NO,NO,witchonly,,,,,,,,,,,,
Bearning Light_downgraded,Deal [fire]<d6> damage|Burn [fire]1 dice,1,attack(d|FIRE); sfxdamage(target|d); inflict(FIRE); sfx(~_fire~); sfx(~_roar~|~~|0.4);,Bear Smash,MAX3,,RED,,,,,0,NO,NO,witchonly,,,,,,,,,,,,
Ice Shark,Deal [ice]<d6> damage|Inflict [ice]1 freeze,1,attack(d|ICE); sfxdamage(target|d); inflict(ICE); sfx(~_ice~); sfx(~_roar~|~~|0.4);,Bear Smash,MIN3,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,witchonly,1,,,,,,,,,,,
Ice Shark_upgraded,Deal [ice]<d6> damage|Inflict [ice]1 freeze,1,attack(d|ICE); sfxdamage(target|d); inflict(ICE); sfx(~_ice~); sfx(~_roar~|~~|0.4);,Bear Smash,MIN3|FREE2,,BRIGHTCYAN,,,,,0,NO,NO,witchonly,,,,,,,,,,,,
Ice Shark_downgraded,Deal [ice]<d6> damage|Inflict [ice]1 freeze,1,attack(d|ICE); sfxdamage(target|d); inflict(ICE); sfx(~_ice~); sfx(~_roar~|~~|0.4);,Bear Smash,MIN5,,BRIGHTCYAN,,,,,0,NO,NO,witchonly,,,,,,,,,,,,
Vise Rip,Combine dice[;] then split|them into smaller dice,1,var total = d; var output = []; var odds=[1|1|1|2|2|3|3|4]; while(total > 4){var r = rand(odds); total-=r; output.push(r); trace(total);}; output.push(total); givedice(output|~splitdice~); sfx(~roar~);,Bear Smash,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,witchonly,1,,,,,,,,,,,
Vise Rip_upgraded,Combine dice[;] then split|them into smaller dice|,1,var total = d; var output = []; var odds=[1|1|1|2|2|3|3|4]; while(total > 4){var r = rand(odds); total-=r; output.push(r); trace(total);}; output.push(total); givedice(output|~splitdice~); sfx(~roar~);,Bear Smash,NORMAL|NORMAL,,GREEN,,,,,3,YES,NO,witchonly,,,,,,,,,,,,
Vise Rip_downgraded,Combine dice[;] then split|them into smaller dice,1,var total = d; var output = []; var odds=[1|1|1|2|2|3|3|4]; while(total > 4){var r = rand(odds); total-=r; output.push(r); trace(total);}; output.push(total); givedice(output|~splitdice~); sfx(~roar~);,Bear Smash,MAX3|MAX3,,GREEN,,,,,0,YES,NO,witchonly,,,,,,,,,,,,
Claw of Mirrors,Deal [sword]<d6> damage|On 3[;] +1 dice this fight,1,attack(d); sfxdamage(target|d); if(d==3){self.extradice+=1;}; sfx(~roar~);,Bear Smash,MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,witchonly,2,,,,,,,,,,,if(d==3){self.extradice+=1;};
Claw of Mirrors_upgraded,Deal [sword]<d6> damage|+1 dice this fight,1,attack(d); sfxdamage(target|d); self.extradice+=1; sfx(~roar~);,Bear Smash,MAX3,,PURPLE,,,,,0,NO,NO,witchonly,,,,,,,,,,,,self.extradice+=1;
Claw of Mirrors_downgraded,Deal [sword]<d6> damage|On 3[;] +1 dice this fight,1,attack(d); sfxdamage(target|d); if(d==3){self.extradice+=1;}; sfx(~roar~);,Bear Smash,REQUIRE3,,PURPLE,,,,,0,NO,NO,witchonly,,,,,,,,,,,,if(d==3){self.extradice+=1;};
Totally Not Poison,Deal [sword]<d6> dmg next turn[;]|then repeat this with -1 dmg,1,runscript(~morefluff/totallynotpoison~|[d]); sfx(~_thinghappens~);,Goop Gun,MAX4,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Totally Not Poison_upgraded,Deal [sword]<d6> dmg next turn[;]|then repeat this with -1 dmg,1,runscript(~morefluff/totallynotpoison~|[d]); sfx(~_thinghappens~);,Goop Gun,MAX5,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Totally Not Poison_downgraded,Deal [sword]<d6> dmg next turn[;]|then repeat this with -1 dmg,1,runscript(~morefluff/totallynotpoison~|[d]); sfx(~_thinghappens~);,Goop Gun,MAX3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Two Handed Fourd,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target|d);,Plasma Gun,REQUIRE4|REQUIRE4,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Two Handed Fourd_upgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target|d);,Plasma Gun,MAX4|MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Two Handed Fourd_downgraded,Deal [sword]4 damage,1,attack(4); sfxdamage(target|4);,Plasma Gun,REQUIRE4|REQUIRE4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Kazoo,Inflict [weaken]1. If enemy is|already weak[;] curse instead,1,if(getstatus(WEAKEN) > 0){inflict(CURSE); sfx(~_curse~);}else{inflict(WEAKEN); sfx(~_weaken~);};,Theremin,MIN4,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Kazoo_upgraded,Inflict [weaken]1. If enemy is|already weak[;] curse as well,1,inflict(WEAKEN); sfx(~_weaken~); if(getstatus(WEAKEN) > 0){inflict(CURSE); sfx(~_curse~|~~|0.2);};,Theremin,MIN4,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Kazoo_downgraded,Inflict [weaken]1. If enemy is|already weak[;] curse instead,1,if(getstatus(WEAKEN) > 0){inflict(CURSE); sfx(~_curse~);}else{inflict(WEAKEN); sfx(~_weaken~);};,Theremin,REQUIRE4,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Time Freeze,Take an extra turn[;] but|any dice that aren't 1 vanish,1,inflictself(EXTRATURN); sfx(~_magic~); inflictself(~internal_timefreeze_lockout~);,Time Stop,REQUIRE6,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Time Freeze_upgraded,Take an extra turn[;] but|any dice that aren't 1 vanish,1,inflictself(EXTRATURN); sfx(~_magic~); inflictself(~internal_timefreeze_lockout~);,Time Stop,MIN4,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Time Freeze_downgraded,Take an extra turn[;] but|any dice that aren't 1 vanish,1,inflictself(EXTRATURN); sfx(~_magic~); inflictself(~internal_timefreeze_lockout~);,Time Stop,REQUIRE6|REQUIRE6,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Crate Of Ones,Roll 4 ones,2,givedice([1|1|1|1]);,Unlucky Roll,EVEN|EVEN,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Crate Of Ones_upgraded,Roll 4 ones,2,givedice([1|1|1|1]);,Unlucky Roll,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Crate Of Ones_downgraded,Roll 3 ones,2,givedice([1|1|1]);,Unlucky Roll,EVEN|EVEN,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Burn Is Red Freeze Is Blue,Inflict [weaken]1 weaken|On 6[;] [shock] shock too,1,inflict(WEAKEN); sfx(~_weaken~); if(d == 6){inflict(SHOCK); sfx(~_shock~|~~|0.3);};,Zapthwack,MIN4,,ORANGE,change_power,change_power,,,0,NO,NO,1,,,,,,,,,,,,
Burn Is Red Freeze Is Blue_upgraded,Inflict [weaken]1 weaken|On 6[;] [shock] shock too,1,inflict(WEAKEN); sfx(~_weaken~); if(d == 6){inflict(SHOCK); sfx(~_shock~|~~|0.3);};,Zapthwack,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Burn Is Red Freeze Is Blue_downgraded,Inflict [weaken]1 weaken|On 6[;] [shock] shock too,1,inflict(WEAKEN); sfx(~_weaken~); if(d == 6){inflict(SHOCK); sfx(~_shock~|~~|0.3);};,Zapthwack,MIN5,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Time Out,Banish one of your dice|Get a copy of it next turn|Return this dice,1,inflictself(~mf_internalbanish~); givedice(d);,Spectre,EVEN,,PURPLE,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Time Out_upgraded,Banish one of your dice|Get a copy of it next turn|Return this dice,1,inflictself(~mf_internalbanish~); givedice(d);,Spectre,NORMAL,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Time Out_downgraded,Banish one of your dice|Get a copy of it next turn,1,inflictself(~mf_internalbanish~);,Spectre,EVEN,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Get Out Of Jail Free,Get a copy of all|your banished dice,1,var r = []; for(x in [1|2|3|4|5|6]){if(getstatusself(~internalbanish~+x) > 0){for(y in 0...getstatusself(~internalbanish~+x)){r.push(x);};};}; givedice(r);,Spectre,NORMAL,,PURPLE,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Get Out Of Jail Free_upgraded,Get 2 copies of all|your banished dice,1,var r = []; for(x in [1|2|3|4|5|6]){if(getstatusself(~internalbanish~+x) > 0){for(y in 0...getstatusself(~internalbanish~+x)){r.push(x); r.push(x);};};}; r.push(d); givedice(r);,Spectre,NORMAL,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Get Out Of Jail Free_downgraded,Get a copy of all|your banished dice,1,var r = []; for(x in [1|2|3|4|5|6]){if(getstatusself(~internalbanish~+x) > 0){for(y in 0...getstatusself(~internalbanish~+x)){r.push(x);};};}; givedice(r);,Spectre,NORMAL,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Naughty Step,If you have at least <d6>|banished dice[;] drain [heart]<d6> hp,1,if(getstatusself(~mf_banish~) >= d){drain(d); sfx(~_drain~);};,Spectre,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Naughty Step_upgraded,If you have at least <d6>|banished dice[;] drain [heart]<double> hp,1,if(getstatusself(~mf_banish~) >= d){drain(d*2); sfx(~_drain~);};,Spectre,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Naughty Step_downgraded,If you have at least <d6>|banished dice[;] drain [heart]<d6> hp,1,if(getstatusself(~mf_banish~) >= d){drain(d); sfx(~_drain~);};,Spectre,MAX4,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Three Equip Next,Next 3 equipment you use|have +1 use this turn,2,inflictself(REEQUIPNEXT|3); sfx(~_recycle~);,Efficiency,REQUIRE2|REQUIRE2|REQUIRE2,,GREEN,change_power,change_power,reequipnext,,0,YES,NO,,,,,,,,,,,,,
Three Equip Next_upgraded,Next 3 equipment you use|have +1 use this turn,2,inflictself(REEQUIPNEXT|3); sfx(~_recycle~);,Efficiency,NORMAL|NORMAL|NORMAL,6,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Three Equip Next_downgraded,Next 3 equipment you use|have +1 use this turn,2,inflictself(REEQUIPNEXT|3); sfx(~_recycle~);,Efficiency,REQUIRE2|REQUIRE2|REQUIRE2|REQUIRE2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Three Equip Next?,Return these dice[;] and any you|use on the next 3 equipment,2,inflictself(REEQUIPNEXT|3); sfx(~_recycle~); var r = []; for(ad in actualdice){r.push(ad.basevalue);}; givedice(r);,Efficiency,REQUIRE2|REQUIRE2|REQUIRE2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Three Equip Next?_upgraded,Return these dice[;] and any you|use on the next 3 equipment,2,inflictself(REEQUIPNEXT|3); sfx(~_recycle~); var r = []; for(ad in actualdice){r.push(ad.basevalue);}; givedice(r);,Efficiency,NORMAL|NORMAL|NORMAL,6,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Three Equip Next?_downgraded,Return these dice[;] and any you|use on the next 3 equipment,2,inflictself(REEQUIPNEXT|3); sfx(~_recycle~); var r = []; for(ad in actualdice){r.push(ad.basevalue);}; givedice(r);,Efficiency,REQUIRE2|REQUIRE2|REQUIRE2|REQUIRE2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Hot Take,Steal[;] and disable[;] a random|enemy equipment for 1 turn|Burn all your dice next turn,2,if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(eq.skillcard == ~~ && eq.availablenextturn && eq.availablethisturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablethisturn = false; randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Yoinked!~; var hottakes = loadtext(~morefluff/hottakes.txt~); randomequipment.unavailabledetails = [~Hot take:~|rand(hottakes)|~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); };}else{self.textparticle(~No effect!~); sfx(~_silence~);}; } else { bonus(1000 + (self.dicepool.length * 500));}; inflictself(~mf_burnnextturn~|self.dice+self.extradice+self.bonusdice); sfx(~_fire~);,Reversal,EVEN,,RED,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Hot Take_upgraded,Steal[;] and disable[;] a random|enemy equipment for 1 turn|Burn all your dice next turn,2,if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(eq.skillcard == ~~ && eq.availablenextturn && eq.availablethisturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablethisturn = false; randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Yoinked!~; var hottakes = loadtext(~morefluff/hottakes.txt~); randomequipment.unavailabledetails = [~Hot take:~|rand(hottakes)|~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); };}else{self.textparticle(~No effect!~); sfx(~_silence~);}; } else { bonus(1000 + (self.dicepool.length * 500));}; inflictself(~mf_burnnextturn~|self.dice+self.extradice+self.bonusdice); sfx(~_fire~);,Reversal,NORMAL,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Hot Take_downgraded,Steal[;] and disable[;] a random|enemy equipment for 1 turn|Burn all your dice next turn,2,if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(eq.skillcard == ~~ && eq.availablenextturn && eq.availablethisturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablethisturn = false; randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Yoinked!~; var hottakes = loadtext(~morefluff/hottakes.txt~); randomequipment.unavailabledetails = [~Hot take:~|rand(hottakes)|~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); };}else{self.textparticle(~No effect!~); sfx(~_silence~);}; } else { bonus(1000 + (self.dicepool.length * 500));}; inflictself(~mf_burnnextturn~|self.dice+self.extradice+self.bonusdice); sfx(~_fire~);,Reversal,REQUIRE6,,RED,,,,,0,NO,NO,cannotreuse|excludefromrandomlists|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Cold Hard Facts,Steal[;] and disable[;] a random|enemy equipment for 1 turn|Freeze all your dice next turn,2,if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(eq.skillcard == ~~ && eq.availablenextturn && eq.availablethisturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablethisturn = false; randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Yoinked!~; var hottakes = loadtext(~morefluff/hottakes.txt~); randomequipment.unavailabledetails = [~Facts:~|rand(hottakes)|~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); };}else{self.textparticle(~No effect!~); sfx(~_silence~);}; } else { bonus(1000 + (self.dicepool.length * 500));}; inflictself(~mf_freezenextturn~|self.dice+self.extradice+self.bonusdice); sfx(~_ice~);,Reversal,ODD,,BRIGHTCYAN,change_power,change_power,ice,,0,NO,NO,cannotreuse|excludefromrandomlists|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Cold Hard Facts_upgraded,Steal[;] and disable[;] a random|enemy equipment for 1 turn|Freeze all your dice next turn,2,if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(eq.skillcard == ~~ && eq.availablenextturn && eq.availablethisturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablethisturn = false; randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Yoinked!~; var hottakes = loadtext(~morefluff/hottakes.txt~); randomequipment.unavailabledetails = [~Facts:~|rand(hottakes)|~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); };}else{self.textparticle(~No effect!~); sfx(~_silence~);}; } else { bonus(1000 + (self.dicepool.length * 500));}; inflictself(~mf_freezenextturn~|self.dice+self.extradice+self.bonusdice); sfx(~_ice~);,Reversal,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,cannotreuse|excludefromrandomlists|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Cold Hard Facts_downgraded,Steal[;] and disable[;] a random|enemy equipment for 1 turn|Freeze all your dice next turn,2,if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(eq.skillcard == ~~ && eq.availablenextturn && eq.availablethisturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablethisturn = false; randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Yoinked!~; var hottakes = loadtext(~morefluff/hottakes.txt~); randomequipment.unavailabledetails = [~Facts:~|rand(hottakes)|~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); };}else{self.textparticle(~No effect!~); sfx(~_silence~);}; } else { bonus(1000 + (self.dicepool.length * 500));}; inflictself(~mf_freezenextturn~|self.dice+self.extradice+self.bonusdice); sfx(~_ice~);,Reversal,REQUIRE5,,BRIGHTCYAN,,,,,0,NO,NO,cannotreuse|excludefromrandomlists|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Cold Hard Facts?,Steal[;] and disable[;] a random|enemy equipment for 1 turn|Receive [ice]5 freeze next turn,2,if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(eq.skillcard == ~~ && eq.availablenextturn && eq.availablethisturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablethisturn = false; randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Yoinked!~; var hottakes = loadtext(~morefluff/hottakes.txt~); randomequipment.unavailabledetails = [~Facts:~|rand(hottakes)|~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); };}else{self.textparticle(~No effect!~); sfx(~_silence~);}; } else { bonus(1000 + (self.dicepool.length * 500));}; inflictself(~mf_freezenextturn~|self.dice+self.extradice+self.bonusdice); sfx(~_ice~);,Reversal,ODD,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Cold Hard Facts?_upgraded,Steal[;] and disable[;] a random|enemy equipment for 1 turn|Receive [ice]5 freeze next turn,2,if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(eq.skillcard == ~~ && eq.availablenextturn && eq.availablethisturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablethisturn = false; randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Yoinked!~; var hottakes = loadtext(~morefluff/hottakes.txt~); randomequipment.unavailabledetails = [~Facts:~|rand(hottakes)|~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); };}else{self.textparticle(~No effect!~); sfx(~_silence~);}; } else { bonus(1000 + (self.dicepool.length * 500));}; inflictself(~mf_freezenextturn~|self.dice+self.extradice+self.bonusdice); sfx(~_ice~);,Reversal,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,cannotreuse|excludefromrandomlists|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Cold Hard Facts?_downgraded,Steal[;] and disable[;] a random|enemy equipment for 1 turn|Receive [ice]5 freeze next turn,2,if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(eq.skillcard == ~~ && eq.availablenextturn && eq.availablethisturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablethisturn = false; randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Yoinked!~; var hottakes = loadtext(~morefluff/hottakes.txt~); randomequipment.unavailabledetails = [~Facts:~|rand(hottakes)|~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); };}else{self.textparticle(~No effect!~); sfx(~_silence~);}; } else { bonus(1000 + (self.dicepool.length * 500));}; inflictself(~mf_freezenextturn~|self.dice+self.extradice+self.bonusdice); sfx(~_ice~);,Reversal,REQUIRE5,,BRIGHTCYAN,,,,,0,NO,NO,cannotreuse|excludefromrandomlists|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Footgun,Get 3 copies of a dice|Take [sword]<double> damage,1,givedice([d|d|d]); attackself(d*2); sfxdamage(self|d*2);,Clone Device,NORMAL,,PURPLE,change_power,change_power,,,0,YES,NO,,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Footgun_upgraded,Get 4 copies of a dice|Take [sword]<double> damage,1,givedice([d|d|d|d]); attackself(d*2); sfxdamage(self|d*2);,Clone Device,NORMAL,,PURPLE,,,,,0,YES,NO,,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Footgun_downgraded,Get 3 copies of a dice|Take [sword]<double> damage,1,givedice([d|d|d]); attackself(d*2); sfxdamage(self|d*2);,Clone Device,MIN4,,PURPLE,,,,,0,YES,NO,,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Large Pole,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target|d);,Plasma Gun,NORMAL|NORMAL,10,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Large Pole_upgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target|d);,Plasma Gun,MIN4|MIN4,,RED,,,,,0,NO,NO,,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Large Pole_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target|d);,Plasma Gun,REQUIRE5|REQUIRE5,,RED,,,,,0,NO,NO,,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Berry Scalpel,Even: Drain [heart]1 health|Odd: Deal [sword]2 damage,1,if(d%6 == 2){drain(1); sfx(~_drain~);}else{attack(2); sfxdamage(target|2);};,Life Leech,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,1,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Berry Scalpel_upgraded,Even: Drain [heart]2 health|Odd: Deal [sword]4 damage,1,if(d%6 == 2){drain(2); sfx(~_drain~);}else{attack(4); sfxdamage(target|4);};,Life Leech,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Berry Scalpel_downgraded,Even: Drain [heart]1 health|Odd: Deal [sword]2 damage,1,if(d%6 == 2){drain(1); sfx(~_drain~);}else{attack(2); sfxdamage(target|2);};,Life Leech,MIN4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Unlucky Star,Deal [sword]5 damage[;] roll a 1|,1,attack(5); sfxdamage(target|5); givedice(1);,Stupendously Unlucky Roll,REQUIRE5,,PINK,change_power,change_power,,,-1,NO,NO,1,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Unlucky Star_upgraded,Deal [sword]5 damage[;] roll a 3|,1,attack(5); sfxdamage(target|5); givedice(3);,Stupendously Unlucky Roll,REQUIRE5,,PINK,,,,,-1,NO,NO,,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Unlucky Star_downgraded,Deal [sword]1 damage[;] roll a 1|,1,attack(1); sfxdamage(target|1); givedice(1);,Stupendously Unlucky Roll,REQUIRE5,,PINK,,,,,-1,NO,NO,,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Torch and Scorch,Burn [fire]3 dice[;] excess burn|becomes [fire]4 damage each,1,var cap = target.dice + target.bonusdice + target.extradice; var current = getstatus(FIRE); if(current > cap){attack(12|FIRE);}else if(current + 3 > cap){inflict(FIRE|cap-current); attack(4 * (3 - cap + current) | FIRE); sfxdamage(4 * (3 - cap + current));}else{inflict(FIRE|3);}; sfx(~_fire~);,Heat Ray,COUNTDOWN,11,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Torch and Scorch_upgraded,Burn [fire]3 dice[;] excess burn|becomes [fire]5 damage each,1,var cap = target.dice + target.bonusdice + target.extradice; var current = getstatus(FIRE); if(current > cap){attack(15|FIRE);}else if(current + 3 > cap){inflict(FIRE|cap-current); attack(5 * (3 - cap + current) | FIRE); sfxdamage(5 * (3 - cap + current));}else{inflict(FIRE|3);}; sfx(~_fire~);,Heat Ray,COUNTDOWN,11,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Torch and Scorch_downgraded,Burn [fire]3 dice[;] excess burn|becomes [fire]2 damage each,1,var cap = target.dice + target.bonusdice + target.extradice; var current = getstatus(FIRE); if(current > cap){attack(6|FIRE);}else if(current + 3 > cap){inflict(FIRE|cap-current); attack(2 * (3 - cap + current) | FIRE); sfxdamage(2 * (3 - cap + current));}else{inflict(FIRE|3);}; sfx(~_fire~);,Heat Ray,COUNTDOWN,11,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Freeze and Breeze,Freeze [ice]3[;] excess freeze|becomes [ice]4 damage each,1,var cap = target.dice + target.bonusdice + target.extradice; var current = getstatus(ICE); if(current > cap){attack(12|ICE);}else if(current + 3 > cap){inflict(ICE|cap-current); attack(4 * (3 - cap + current) | ICE); sfxdamage(4 * (3 - cap + current));}else{inflict(ICE|3);}; sfx(~_ice~);,Arctic Storm,COUNTDOWN,11,BRIGHTCYAN,change_power,change_power,ice,,0,NO,NO,,,,,,,,,,,,,
Freeze and Breeze_upgraded,Freeze [ice]3[;] excess freeze|becomes [ice]5 damage each,1,var cap = target.dice + target.bonusdice + target.extradice; var current = getstatus(ICE); if(current > cap){attack(15|ICE);}else if(current + 3 > cap){inflict(ICE|cap-current); attack(5 * (3 - cap + current) | ICE); sfxdamage(5 * (3 - cap + current));}else{inflict(ICE|3);}; sfx(~_ice~);,Arctic Storm,COUNTDOWN,11,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Freeze and Breeze_downgraded,Freeze [ice]3[;] excess freeze|becomes [ice]2 damage each,1,var cap = target.dice + target.bonusdice + target.extradice; var current = getstatus(ICE); if(current > cap){attack(6|ICE);}else if(current + 3 > cap){inflict(ICE|cap-current); attack(2 * (3 - cap + current) | ICE); sfxdamage(2 * (3 - cap + current));}else{inflict(ICE|3);}; sfx(~_ice~);,Arctic Storm,COUNTDOWN,11,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Freeze and Breeze?,Inflict [ice]3[;] excess over 5|becomes [ice]4 damage each,1,var cap = 5; var current = getstatus(ICE); if(current > cap){attack(12|ICE);}else if(current + 3 > cap){inflict(ICE|cap-current); attack(4 * (3 - cap + current) | ICE); sfxdamage(4 * (3 - cap + current));}else{inflict(ICE|3);}; sfx(~_ice~);,Arctic Storm,COUNTDOWN,11,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Freeze and Breeze?_upgraded,Inflict [ice]3[;] excess over 5|becomes [ice]5 damage each,1,var cap = 5; var current = getstatus(ICE); if(current > cap){attack(15|ICE);}else if(current + 3 > cap){inflict(ICE|cap-current); attack(5 * (3 - cap + current) | ICE); sfxdamage(5 * (3 - cap + current));}else{inflict(ICE|3);}; sfx(~_ice~);,Arctic Storm,COUNTDOWN,11,BRIGHTCYAN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Freeze and Breeze?_downgraded,Freeze [ice]3[;] excess freeze|becomes [ice]2 damage each,1,var cap = 5; var current = getstatus(ICE); if(current > cap){attack(6|ICE);}else if(current + 3 > cap){inflict(ICE|cap-current); attack(2 * (3 - cap + current) | ICE); sfxdamage(2 * (3 - cap + current));}else{inflict(ICE|3);}; sfx(~_ice~);,Arctic Storm,COUNTDOWN,11,BRIGHTCYAN,,,,,0,NO,NO,alternateversion,,,,,,,,,,,,
Stun Stone,Deal [shock]5 damage + [stun]1 stun|[grey](once per battle),1,attack(5|SHOCK); sfxdamage(target|5); inflict(~mf_stun~); sfx(~_shock~);,Zap Shrine,COUNTDOWN,5,YELLOW,change_power,change_power,,,0,NO,YES,,,,,,,,,,,,,
Stun Stone_upgraded,Deal [shock]5 damage + [stun]2 stun|[grey](once per battle),1,attack(5|SHOCK); sfxdamage(target|5); inflict(~mf_stun~|2); sfx(~_shock~);,Zap Shrine,COUNTDOWN,5,YELLOW,,,,,0,NO,YES,,,,,,,,,,,,,
Stun Stone_downgraded,Deal [shock]5 damage|[grey](once per battle),1,attack(5|SHOCK); sfxdamage(target|5); sfx(~_shock~);,Zap Shrine,COUNTDOWN,5,YELLOW,,,,,0,NO,YES,,,,,,,,,,,,,
Portable Watch,Tells you what turn it is|(Always offered as scrap),1,self.textparticle(~Turn ~+turn); sfx(~useitem~);,Bubble Gun,EVEN,,GREY,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Portable Watch_upgraded,Tells you what turn it is|(Always offered as scrap),1,self.textparticle(~Turn ~+turn); sfx(~useitem~);,Bubble Gun,NORMAL,,GREY,,,,,0,YES,NO,,,,,,,,,,,,,
Portable Watch_downgraded,Tells you kinda what turn it is|(Always offered as scrap),1,self.textparticle(~Turn ~+(turn+rand([-1|1]))+~[;] probably~); sfx(~useitem~);,Bubble Gun,EVEN,,GREY,,,,,0,YES,NO,,,,,,,,,,,,,
Scrap Shooter,Deal [sword]1 damage|(Always offered as scrap)|[gray](Reusable),1,attack(1); sfxdamage(target|1);,Bubble Gun,COUNTDOWN,5,GREY,change_power,change_power,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scrap Shooter_upgraded,Deal [sword]2 damage|(Always offered as scrap)|[gray](Reusable),1,attack(2); sfxdamage(target|2);,Bubble Gun,COUNTDOWN,5,GREY,,,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scrap Shooter_downgraded,Deal [sword]0 damage|(Always offered as scrap)|[gray](Reusable),1,attack(0); sfxdamage(target|0);,Bubble Gun,COUNTDOWN,5,GREY,,,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Chrysopoeia,Reroll all your odd|dice into even dice,1,var c = 0; for(mydice in self.dicepool){if(mydice.available() && !mydice.intween() && mydice.basevalue % 2 == 1){mydice.animatereroll(rand([2|4|6])|self.screenposition()|c); c+=0.05;};};,Focus,COUNTDOWN,4,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Chrysopoeia_upgraded,Reroll all your odd|dice into sixes,1,var c = 0; for(mydice in self.dicepool){if(mydice.available() && !mydice.intween() && mydice.basevalue % 2 == 1){mydice.animatereroll(6|self.screenposition()|c); c+=0.05;};};,Focus,COUNTDOWN,4,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Chrysopoeia_downgraded,Reroll an odd dice|into an even dice,1,var c = 0; for(mydice in self.dicepool){if(mydice.available() && !mydice.intween() && mydice.basevalue % 2 == 1){mydice.animatereroll(rand([2|4|6])|self.screenposition()|c); break;};};,Focus,COUNTDOWN,4,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Alkahest,Roll four 1s|,2,givedice([1|1|1|1]|~splitdice~);,Unlucky Roll,REQUIRE4,,YELLOW,change_power,change_power,,,-1,YES,NO,,,,,,,,,,,,,
Alkahest_upgraded,Roll four 1s|,2,givedice([1|1|1|1]|~splitdice~);,Unlucky Roll,MIN4,,YELLOW,,,,,-1,YES,NO,,,,,,,,,,,,,
Alkahest_downgraded,Roll two 1s|,2,givedice([1|1]|~splitdice~);,Unlucky Roll,REQUIRE4,,YELLOW,,,,,-1,YES,NO,,,,,,,,,,,,,
Saltpetre,Deal [sword]<d6> damage[;] +[sword]1 per|[fire][ice][shock] or [weaken] on enemy,2,var total = getstatus(FIRE) + getstatus(ICE) + getstatus(SHOCK) + getstatus(WEAKEN); attack(total+d); sfxdamage(total+d); for(x in [FIRE|ICE|SHOCK|WEAKEN]){if(getstatus(x) > 0){sfx(~_~+x.toLowerCase());};};,Overload,MAX4,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Saltpetre_upgraded,Deal [sword]<d6> damage[;] +[sword]1 per|[fire][ice][shock] or [weaken] on enemy,2,var total = getstatus(FIRE) + getstatus(ICE) + getstatus(SHOCK) + getstatus(WEAKEN); attack(total+d); sfxdamage(total+d); for(x in [FIRE|ICE|SHOCK|WEAKEN]){if(getstatus(x) > 0){sfx(~_~+x.toLowerCase());};};,Overload,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Saltpetre_downgraded,Deal [sword]<d6> damage[;] +[sword]1 per|[fire][ice][shock] or [weaken] on enemy,2,var total = getstatus(FIRE) + getstatus(ICE) + getstatus(SHOCK) + getstatus(WEAKEN); attack(total+d); sfxdamage(total+d); for(x in [FIRE|ICE|SHOCK|WEAKEN]){if(getstatus(x) > 0){sfx(~_~+x.toLowerCase());};};,Overload,MAX3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Bye Voltage,Duplicate a dice. Consume|all enemy shock to get +1|copy per shock removed,2,if(simulation){bonus(500+getstatus(SHOCK) * 1000);}else{var rv = [d|d]; if(getstatus(SHOCK) > 0){ target.symbolparticle(SHOCK); screenshake(); for(x in 0...getstatus(SHOCK)){rv.push(d);}; removestatus(SHOCK|ALL); sfx(~_shock~);  }; givedice(rv|~splitdice~); };,Static Shock,MIN4,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Bye Voltage_upgraded,Duplicate a dice. Consume|all enemy shock to get +1|copy per shock removed,2,if(simulation){bonus(500+getstatus(SHOCK) * 1000);}else{var rv = [d|d]; if(getstatus(SHOCK) > 0){ target.symbolparticle(SHOCK); screenshake(); for(x in 0...getstatus(SHOCK)){rv.push(d);}; removestatus(SHOCK|ALL); sfx(~_shock~);  }; givedice(rv|~splitdice~); };,Static Shock,NORMAL,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Bye Voltage_downgraded,Duplicate a dice. Consume|all enemy shock to get +1|copy per shock removed,2,if(simulation){bonus(500+getstatus(SHOCK) * 1000);}else{var rv = [d|d]; if(getstatus(SHOCK) > 0){ target.symbolparticle(SHOCK); screenshake(); for(x in 0...getstatus(SHOCK)){rv.push(d);}; removestatus(SHOCK|ALL); sfx(~_shock~);  }; givedice(rv|~splitdice~); };,Static Shock,REQUIRE4,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Warhammer@morefluff,Steal a shocked copy of an|enemy item[;] disable theirs,2,if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(eq.skillcard == ~~ && eq.availablenextturn && eq.availablethisturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablethisturn = false; randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Yoinked!~; randomequipment.unavailabledetails = [~I'm a thieving so-and-so!~|~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); for(eq in self.equipment){if(eq.name == randomequipment.name){var altshock = false; var dummyfighter = new elements.Fighter(~Pirate~); dummyfighter.addstatus(~shock~|1); for(mystat in dummyfighter.status) { if(mystat.type == ~alternate_shock~) { altshock = true; } } if(altshock) eq.animate(~alternate_shock~|1); else eq.animate(~shock~|1); break;};}; };}else{self.textparticle(~No effect!~); sfx(~_silence~);}; } else { bonus(1000 + (self.dicepool.length * 500));}; sfx(~_dodge~); screenshake();,Reversal,DOUBLES|DOUBLES,,YELLOW,change_power,change_power,,,0,NO,NO,cannotreuse|excludefromrandomlists|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Warhammer@morefluff_upgraded,Steal a shocked copy of an|enemy item[;] disable theirs,2,if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(eq.skillcard == ~~ && eq.availablenextturn && eq.availablethisturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablethisturn = false; randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Yoinked!~; randomequipment.unavailabledetails = [~I'm a thieving so-and-so!~|~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); for(eq in self.equipment){if(eq.name == randomequipment.name){var altshock = false; var dummyfighter = new elements.Fighter(~Pirate~); dummyfighter.addstatus(~shock~|1); for(mystat in dummyfighter.status) { if(mystat.type == ~alternate_shock~) { altshock = true; } } if(altshock) eq.animate(~alternate_shock~|1); else eq.animate(~shock~|1); break;};}; };}else{self.textparticle(~No effect!~); sfx(~_silence~);}; } else { bonus(1000 + (self.dicepool.length * 500));}; sfx(~_dodge~); screenshake();,Reversal,NORMAL|NORMAL,,YELLOW,,,,,0,NO,NO,cannotreuse|excludefromrandomlists|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Warhammer@morefluff_downgraded,Steal a shocked copy of an|enemy item[;] disable theirs,2,if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(eq.skillcard == ~~ && eq.availablenextturn && eq.availablethisturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablethisturn = false; randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Yoinked!~; randomequipment.unavailabledetails = [~I'm a thieving so-and-so!~|~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); for(eq in self.equipment){if(eq.name == randomequipment.name){var altshock = false; var dummyfighter = new elements.Fighter(~Pirate~); dummyfighter.addstatus(~shock~|1); for(mystat in dummyfighter.status) { if(mystat.type == ~alternate_shock~) { altshock = true; } } if(altshock) eq.animate(~alternate_shock~|1); else eq.animate(~shock~|1); break;};}; };}else{self.textparticle(~No effect!~); sfx(~_silence~);}; } else { bonus(1000 + (self.dicepool.length * 500));}; sfx(~_dodge~); screenshake();,Reversal,REQUIRE3|REQUIRE3,,YELLOW,,,,,0,NO,NO,cannotreuse|excludefromrandomlists|cannotsteal,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Heremin,Inflict [weaken]3 weaken,1,inflict(WEAKEN|3); sfx(~_weaken~);,Theremin,REQUIRE5|REQUIRE5,,ORANGE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Heremin_upgraded,Inflict [weaken]3 weaken,1,inflict(WEAKEN|3); sfx(~_weaken~);,Theremin,MIN5|MIN5,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Heremin_downgraded,Inflict [weaken]3 weaken,1,inflict(WEAKEN|3); sfx(~_weaken~);,Theremin,REQUIRE5|REQUIRE5|REQUIRE5,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Ambisinistrous Sword,Deal [sword]<d6> damage[;]|on 12[;] curse everyone,2,attack(d); sfxdamage(target|d); if(d == 12){inflict(CURSE); inflictself(CURSE); sfx(~_curse~);};,Dramatic Pause,NORMAL|NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Ambisinistrous Sword_upgraded,Deal [sword]<d6> damage[;] on|10 and up[;] curse everyone,2,attack(d); sfxdamage(target|d); if(d >= 10){inflict(CURSE); inflictself(CURSE); sfx(~_curse~);};,Dramatic Pause,NORMAL|NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Ambisinistrous Sword_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,Dramatic Pause,NORMAL|NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Tragic Spear,Deal [sword]2 damage|Inflict [curse]1 curse,1,attack(2); sfxdamage(target|2); inflict(CURSE); sfx(~_curse~);,Dramatic Pause,REQUIRE6,,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Tragic Spear_upgraded,Deal [sword]5 damage|Inflict [curse]1 curse,1,attack(5); sfxdamage(target|5); inflict(CURSE); sfx(~_curse~);,Dramatic Pause,REQUIRE6,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Tragic Spear_downgraded,Inflict [curse]1 curse,1,inflict(CURSE); sfx(~_curse~);,Dramatic Pause,REQUIRE6,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Magma Carta,Deal [fire]3 damage[;] burn [fire]2|dice[;] inflict [magma]1 magma,1,attack(3|FIRE); inflict(FIRE|2); inflict(~mf_magma~); sfx(~_fire~); sfx(~_fire~|~~|0.1); sfx(~_fire~|~~|0.2);,Magma Hurl,COUNTDOWN,9,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Magma Carta_upgraded,Deal [fire]4 damage[;] burn [fire]3|dice[;] inflict [magma]1 magma,1,attack(4|FIRE); inflict(FIRE|3); inflict(~mf_magma~); sfx(~_fire~); sfx(~_fire~|~~|0.1); sfx(~_fire~|~~|0.2);,Magma Hurl,COUNTDOWN,9,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Magma Carta_downgraded,Deal [fire]2 damage[;] burn [fire]1|dice[;] inflict [magma]1 magma,1,attack(2|FIRE); inflict(FIRE); inflict(~mf_magma~); sfx(~_fire~); sfx(~_fire~|~~|0.1); sfx(~_fire~|~~|0.2);,Magma Hurl,COUNTDOWN,9,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Cold Shoulder,Deal [ice]3 damage[;] inflict|[ice]2 freeze[;] inflict [shiver]1 shiver,1,attack(3|ICE); inflict(ICE|2); inflict(~mf_shiver~); sfx(~_ice~); sfx(~_ice~|~~|0.1); sfx(~_ice~|~~|0.2);,Frost Fling,COUNTDOWN,9,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Cold Shoulder_upgraded,Deal [ice]4 damage[;] inflict|[ice]4 freeze[;] inflict [shiver]1 shiver,1,attack(4|ICE); inflict(ICE|3); inflict(~mf_shiver~); sfx(~_ice~); sfx(~_ice~|~~|0.1); sfx(~_ice~|~~|0.2);,Frost Fling,COUNTDOWN,9,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Cold Shoulder_downgraded,Deal [ice]2 damage[;] inflict|[ice]1 freeze[;] inflict [shiver]1 shiver,1,attack(2|ICE); inflict(ICE); inflict(~mf_shiver~); sfx(~_ice~); sfx(~_ice~|~~|0.1); sfx(~_ice~|~~|0.2);,Frost Fling,COUNTDOWN,9,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Hard Work,Reduce a random|countdown by 10,1,var poss = []; for(eq in self.equipment){ if(eq.skillcard == ~~){ if(eq.countdown > 0 && eq.ready && eq.availablethisturn){ poss.push(eq); }; }; }; if(self.stolencard){ if(self.stolencard.countdown > 0 && self.stolencard.ready && self.stolencard.availablethisturn){ poss.push(self.stolencard); }; }; if(poss.length > 0){ var r = rand(poss); var count = 10; while(count > 6){ givedice(6); r.assigndice(self.dicepool[self.dicepool.length - 1]); count-=6;}; givedice(count); r.assigndice(self.dicepool[self.dicepool.length - 1]); };,Overload,EVEN|EVEN,,GREEN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Hard Work_upgraded,Reduce a random|countdown by 10,1,var poss = []; for(eq in self.equipment){ if(eq.skillcard == ~~){ if(eq.countdown > 0 && eq.ready && eq.availablethisturn){ poss.push(eq); }; }; }; if(self.stolencard){ if(self.stolencard.countdown > 0 && self.stolencard.ready && self.stolencard.availablethisturn){ poss.push(self.stolencard); }; }; if(poss.length > 0){ var r = rand(poss); var count = 10; while(count > 6){ givedice(6); r.assigndice(self.dicepool[self.dicepool.length - 1]); count-=6;}; givedice(count); r.assigndice(self.dicepool[self.dicepool.length - 1]); };,Overload,NORMAL|NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Hard Work_downgraded,Reduce a random|countdown by 10,1,var poss = []; for(eq in self.equipment){ if(eq.skillcard == ~~){ if(eq.countdown > 0 && eq.ready && eq.availablethisturn){ poss.push(eq); }; }; }; if(self.stolencard){ if(self.stolencard.countdown > 0 && self.stolencard.ready && self.stolencard.availablethisturn){ poss.push(self.stolencard); }; }; if(poss.length > 0){ var r = rand(poss); var count = 10; while(count > 6){ givedice(6); r.assigndice(self.dicepool[self.dicepool.length - 1]); count-=6;}; givedice(count); r.assigndice(self.dicepool[self.dicepool.length - 1]); };,Overload,REQUIRE4|REQUIRE4,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Nice Modems,Inflict [weaken]3 weaken|in [jinx]<d6> turns,1,jinx(~Nice Modems~|~receive [weaken]%VAR% weaken~|~Receive [weaken]%VAR% weaken~|~inflict(WEAKEN|%VAR%); sfx(\~_weaken\~);~|target|self|d|3); sfx(~_thinghappens~);,Dial Up Sounds,MIN3,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Nice Modems_upgraded,Inflict [weaken]3 weaken|in [jinx]<d6> turns,1,jinx(~Nice Modems~|~receive [weaken]%VAR% weaken~|~Receive [weaken]%VAR% weaken~|~inflict(WEAKEN|%VAR%); sfx(\~_weaken\~);~|target|self|d|3); sfx(~_thinghappens~);,Dial Up Sounds,MIN2,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Nice Modems_downgraded,Inflict [weaken]3 weaken|in [jinx]<d6> turns,1,jinx(~Nice Modems~|~receive [weaken]%VAR% weaken~|~Receive [weaken]%VAR% weaken~|~inflict(WEAKEN|%VAR%); sfx(\~_weaken\~);~|target|self|d|3); sfx(~_thinghappens~);,Dial Up Sounds,MIN4,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Evenly Weighted Roll,Reroll dice[;] even chance to|increase or decrease it,1,var rv = []; if(chance(50)){if(d == 6){rv = [6];}else{while(d < 6){d+=1; rv.push(d);};};}else{if(d == 1){rv = [1];}else{while(d > 1){d-=1; rv.push(d);};};}; givedice(rand(rv));,Clone Device,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Evenly Weighted Roll_upgraded,Reroll dice[;] even chance to|increase or decrease it|,1,var rv = []; if(chance(50)){if(d == 6){rv = [6];}else{while(d < 6){d+=1; rv.push(d);};};}else{if(d == 1){rv = [1];}else{while(d > 1){d-=1; rv.push(d);};};}; givedice(rand(rv));,Clone Device,NORMAL,,GREEN,,,,,3,YES,NO,,,,,,,,,,,,,
Evenly Weighted Roll_downgraded,Reroll dice[;] even chance to|increase or decrease it,1,var rv = []; if(chance(50)){if(d == 6){rv = [6];}else{while(d < 6){d+=1; rv.push(d);};};}else{if(d == 1){rv = [1];}else{while(d > 1){d-=1; rv.push(d);};};}; givedice(rand(rv));,Clone Device,RANGE25,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Decimate,Reduce enemy|health by 10%,1,var dmg = target.hp/10; attack(dmg); sfxdamage(target|dmg);,Plasma Gun,COUNTDOWN,8,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Decimate_upgraded,Reduce enemy health by 10%|,1,var dmg = target.hp/10; attack(dmg); sfxdamage(target|dmg);,Plasma Gun,COUNTDOWN,8,RED,,,,,8,NO,NO,,,,,,,,,,,,,
Decimate_downgraded,Reduce enemy|health by 5%,1,var dmg = target.hp/20; attack(dmg); sfxdamage(target|dmg);,Plasma Gun,COUNTDOWN,8,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Split The Kipper,Everyone takes [sword]1 damage|per turn[;] for <d6> turns,1,inflict(~bleed~+d); inflictself(~bleed~+d); sfxdamage(target|d); sfxdamage(self|d);,Slick Slash,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Split The Kipper_upgraded,Everyone takes [sword]2 damage|per turn[;] for <d6> turns,1,inflict(~bleed~+d|2); inflictself(~bleed~+d|2); sfxdamage(target|d*2); sfxdamage(self|d*2);,Slick Slash,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Split The Kipper_downgraded,Everyone takes [sword]1 damage|per turn[;] for <d6> turns,1,inflict(~bleed~+d); inflictself(~bleed~+d); sfxdamage(target|d); sfxdamage(self|d);,Slick Slash,MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Buckshot,Roll one of each dice|with a value below <slotdoubles>,2,if(d == 6){givedice([5|4|3|2|1]|~splitdice~);}else if(d == 5){givedice([4|3|2|1]|~splitdice~);}else if(d == 4){givedice([3|2|1]|~splitdice~);}else if(d == 3){givedice([2|1]|~splitdice~);}else if(d == 2){givedice([1]|~splitdice~);}else if(d == 1){ sfx(~_silence~); },Clone Device,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Buckshot_upgraded,Roll one of each dice with a|value below or equal to <slotdoubles>,2,if(d == 6){givedice([6|5|4|3|2|1]|~splitdice~);}else if(d == 5){givedice([5|4|3|2|1]|~splitdice~);}else if(d == 4){givedice([4|3|2|1]|~splitdice~);}else if(d == 3){givedice([3|2|1]|~splitdice~);}else if(d == 2){givedice([2|1]|~splitdice~);}else if(d == 1){givedice([1]|~splitdice~); },Clone Device,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Buckshot_downgraded,Roll one of each dice|with a value below 4,2,givedice([3|2|1]|~splitdice~);,Clone Device,REQUIRE4|REQUIRE4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Pen,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,Plasma Gun,NORMAL|FREE1,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Pen_upgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,Plasma Gun,NORMAL|FREE2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Pen_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,Plasma Gun,MAX5|FREE1,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Broadpen,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,Plasma Gun,NORMAL|FREE3,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Broadpen_upgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,Plasma Gun,NORMAL|FREE4,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Broadpen_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,Plasma Gun,MAX3|FREE3,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Focusing Charm,Set all your dice to 6,1,var c = 0; for(mydice in self.dicepool){if(mydice.available()){mydice.animatereroll(6|self.screenposition()|c); c+=0.05;};}; sfx(~useitem~);,Focus,REQUIRE1,,GREEN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Focusing Charm_upgraded,Set all your dice to 6,1,var c = 0; for(mydice in self.dicepool){if(mydice.available()){mydice.animatereroll(6|self.screenposition()|c); c+=0.05;};}; sfx(~useitem~);,Focus,MAX3,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Focusing Charm_downgraded,Set all your dice to 6,1,var c = 0; for(mydice in self.dicepool){if(mydice.available()){mydice.animatereroll(6|self.screenposition()|c); c+=0.05;};}; sfx(~useitem~);,Focus,REQUIRE1|REQUIRE1,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Magic's Pear,Restore [heal]6 health,1,attackself(-6); sfx(~_heal~);,Focus,NORMAL|NORMAL,10,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Magic's Pear_upgraded,Restore [heal]6 health,1,attackself(-6); sfx(~_heal~);,Focus,MIN4|MIN4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Magic's Pear_downgraded,Restore [heal]3 health,1,attackself(-3); sfx(~_heal~);,Focus,NORMAL|NORMAL,10,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Srimech,Flip all your other dice|less than <d6> upside down,1,var c = 0; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue < d){mydice.animatereroll(7-mydice.basevalue|self.screenposition()|c); c+=0.05;};}; sfx(~splitdice~);,Megaflip,MAX4,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Srimech_upgraded,Flip all your other dice|less than <d6> upside down,1,var c = 0; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue < d){mydice.animatereroll(7-mydice.basevalue|self.screenposition()|c); c+=0.05;};}; sfx(~splitdice~);,Megaflip,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Srimech_downgraded,Flip all your other dice|less than <d6> upside down,1,var c = 0; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue < d){mydice.animatereroll(7-mydice.basevalue|self.screenposition()|c); c+=0.05;};}; sfx(~splitdice~);,Megaflip,MAX2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Four Bumps Glued Together,Increase all these|dice values by 1,2,var output = []; for(ad in actualdice){var total = 0; var dv = ad.basevalue+1; while(dv > 6){output.push(6); dv-=6;}; output.push(dv); }; givedice(output);,Megabump,MAX4|MAX4|MAX4|MAX4,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Four Bumps Glued Together_upgraded,Increase all these|dice values by 1,2,var output = []; for(ad in actualdice){var total = 0; var dv = ad.basevalue+1; while(dv > 6){output.push(6); dv-=6;}; output.push(dv); }; givedice(output);,Megabump,NORMAL|NORMAL|NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Four Bumps Glued Together_downgraded,Increase all these|dice values by 1,2,var output = []; for(ad in actualdice){var total = 0; var dv = ad.basevalue+1; while(dv > 6){output.push(6); dv-=6;}; output.push(dv); }; givedice(output);,Megabump,MAX2|MAX2|MAX2|MAX2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Teleportitis,Whenever you take damage[;]|gain [dodge]1 dodge,2,inflictself(~teleportitis~); sfx(~_dodge~);,Quick Thinking,NORMAL|NORMAL,7,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Teleportitis_upgraded,Whenever you take damage[;]|gain [dodge]1 dodge,2,inflictself(~teleportitis~); sfx(~_dodge~);,Quick Thinking,EVEN|ODD,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Teleportitis_downgraded,Whenever you take damage[;]|gain [dodge]1 dodge,2,inflictself(~teleportitis~); sfx(~_dodge~);,Quick Thinking,REQUIRE1|REQUIRE6,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Screen Door Shield,Gain [shield]<d6> shield. If you're|poisoned[;] do [sword]<d6> instead,2,if(getstatusself(POISON) > 0){attack(d); sfxdamage(target|d);}else{inflictself(SHIELD|d); sfx(~_shield~);};,Barricade,MAX5,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,if(getstatusself(POISON) > 0){e.castdirection = 1;}else{e.castdirection = -1;};,,,
Screen Door Shield_upgraded,Gain [shield]<d6> shield. If you're|poisoned[;] do [sword]<d6> instead,2,if(getstatusself(POISON) > 0){attack(d); sfxdamage(target|d);}else{inflictself(SHIELD|d); sfx(~_shield~);};,Barricade,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,if(getstatusself(POISON) > 0){e.castdirection = 1;}else{e.castdirection = -1;};,,,
Screen Door Shield_downgraded,Gain [shield]<d6> shield. If you're|poisoned[;] do [sword]<d6> instead,2,if(getstatusself(POISON) > 0){attack(d); sfxdamage(target|d);}else{inflictself(SHIELD|d); sfx(~_shield~);};,Barricade,MAX3,,ORANGE,,,,,0,NO,NO,,,,,,,,,,if(getstatusself(POISON) > 0){e.castdirection = 1;}else{e.castdirection = -1;};,,,
Pole Vault,Heal [heal]<d6> health[;] gain [dodge]1|dodge if you haven't used|a Pole Vault this battle,2,if(getstatusself(~mf_polevaulted~) == 0){inflictself(DODGE); sfx(~_dodge~);}; attackself(-d); sfx(~_heal~); inflictself(~mf_polevaulted~);,Revitalize,MAX4,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Pole Vault_upgraded,Heal [heal]<d6> hp[;] gain [dodge]1 dodge if you|haven't used Pole Vault this battle,2,if(getstatusself(~mf_polevaulted~) == 0){inflictself(DODGE); sfx(~_dodge~);}; attackself(-d); sfx(~_heal~); inflictself(~mf_polevaulted~);,Revitalize,MAX5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Pole Vault_downgraded,Heal [heal]<d6> hp[;] gain [dodge]1 dodge if you|haven't used Pole Vault this battle,2,if(getstatusself(~mf_polevaulted~) == 0){inflictself(DODGE); sfx(~_dodge~);}; attackself(-d); sfx(~_heal~); inflictself(~mf_polevaulted~);,Revitalize,MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Unravel,Dice value -1[;] then|gain that much shield,1,if(d > 1){givedice(d-1); inflictself(SHIELD|d-1); sfx(~_shield~);};,Barricade,MAX3,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Unravel_upgraded,Dice value -1[;] then|gain that much shield,1,if(d > 1){givedice(d-1); inflictself(SHIELD|d-1); sfx(~_shield~);};,Barricade,MAX4,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Unravel_downgraded,Dice value -1,1,if(d > 1){givedice(d-1);};,Barricade,MAX3,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Electrified Heart,Drain [heart]<d6> health|Inflict [shock]1 shock,2,drain(d); sfx(~_drain~); inflict(SHOCK); sfx(~_shock~);,Life Leech,MAX3,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Electrified Heart_upgraded,Drain [heart]<d6> health|Inflict [shock]1 shock,2,drain(d); sfx(~_drain~); inflict(SHOCK); sfx(~_shock~);,Life Leech,MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Electrified Heart_downgraded,Drain [heart]<d6> health|Inflict [shock]1 shock,2,drain(d); sfx(~_drain~); inflict(SHOCK); sfx(~_shock~);,Life Leech,MAX2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Slingscold,Inflict [ice]1 freeze[;]|reroll the dice,1,inflict(ICE); sfx(~_ice~); givedice(1);,Life Leech,REQUIRE6,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Slingscold_upgraded,Inflict [ice]1 freeze[;]|reroll the dice,1,inflict(ICE); sfx(~_ice~); givedice(1);,Life Leech,MIN5,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Slingscold_downgraded,Inflict [ice]1 freeze,1,inflict(ICE); sfx(~_ice~);,Life Leech,REQUIRE6,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
3D Glasses,Deal [sword]<d6> dmg. If dice have|a difference of 1[;] heal [heal]3,2,attack(d); sfxdamage(target|d); var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; var diff = x-y; if(diff < 0){diff = y-x;}; if(diff == 1){attackself(-3); sfx(~_heal~);};,Regenerate,MAX5|MAX5,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; var diff = x-y; if(diff < 0){diff = y-x;}; if(diff == 1){attackself(-3); sfx(~_heal~);};
3D Glasses_upgraded,Deal [sword]<d6> dmg. If dice have|a difference of 1[;] heal [heal]3,2,attack(d); sfxdamage(target|d); var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; var diff = x-y; if(diff < 0){diff = y-x;}; if(diff == 1){attackself(-3); sfx(~_heal~);};,Regenerate,NORMAL|NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; var diff = x-y; if(diff < 0){diff = y-x;}; if(diff == 1){attackself(-3); sfx(~_heal~);};
3D Glasses_downgraded,Deal [sword]<d6> dmg. If dice have|a difference of 1[;] heal [heal]3,2,attack(d); sfxdamage(target|d); var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; var diff = x-y; if(diff < 0){diff = y-x;}; if(diff == 1){attackself(-3); sfx(~_heal~);};,Regenerate,MAX4|MAX4,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; var diff = x-y; if(diff < 0){diff = y-x;}; if(diff == 1){attackself(-3); sfx(~_heal~);};
Draupnir,Gain [shield]<d6> shield. In [jinx]8|turns[;] gain [shield]8x<d6> shield,2,inflictself(SHIELD|d); sfx(~_shield~); jinx(~Draupnir~|~gain [shield]%VAR% shield~|~Gain [shield]%VAR% shield~|~inflict(SHIELD|%VAR%); sfx(\~_shield\~);~|self|self|8|d*8); sfx(~_thinghappens~);,Barricade,MAX4,,PINK,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; var diff = x-y; if(diff < 0){diff = y-x;}; if(diff == 1){attackself(-3); sfx(~_heal~);};
Draupnir_upgraded,Gain [shield]<d6> shield. In [jinx]8|turns[;] gain [shield]8x<d6> shield,2,inflictself(SHIELD|d); sfx(~_shield~); jinx(~Draupnir~|~gain [shield]%VAR% shield~|~Gain [shield]%VAR% shield~|~inflict(SHIELD|%VAR%); sfx(\~_shield\~);~|self|self|8|d*8); sfx(~_thinghappens~);,Barricade,MAX5,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; var diff = x-y; if(diff < 0){diff = y-x;}; if(diff == 1){attackself(-3); sfx(~_heal~);};
Draupnir_downgraded,Gain [shield]<d6> shield. In [jinx]8|turns[;] gain [shield]8x<d6> shield,2,inflictself(SHIELD|d); sfx(~_shield~); jinx(~Draupnir~|~gain [shield]%VAR% shield~|~Gain [shield]%VAR% shield~|~inflict(SHIELD|%VAR%); sfx(\~_shield\~);~|self|self|8|d*8); sfx(~_thinghappens~);,Barricade,MAX3,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; var diff = x-y; if(diff < 0){diff = y-x;}; if(diff == 1){attackself(-3); sfx(~_heal~);};
Sticky Bombs,Do [sword]1 dmg. In [jinx]<d6> turns[;]|do [sword]<d6> dmg[;] then reduce|all jinx countdowns by [jinx]1,1,attack(1); sfxdamage(target|1); jinx(~Sticky Bombs~|~take [sword]%VAR%[;] reduce jinx counts by 1~|~Take [sword]%VAR%[;] reduce jinx counts by 1~|~attack(%VAR%); sfxdamage(target|%VAR%); sfx(\~_plasma\~); boostjinxcountdowns(self|1); boostjinxcountdowns(target|1);~|target|self|d|d); sfx(~_thinghappens~);,Whacksies,MAX5,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Sticky Bombs_upgraded,Do [sword]1 dmg. In [jinx]<d6> turns[;]|do [sword]<d6> dmg[;] then reduce|all jinx countdowns by [jinx]1,1,attack(1); sfxdamage(target|1); jinx(~Sticky Bombs~|~take [sword]%VAR%[;] reduce jinx counts by 1~|~Take [sword]%VAR%[;] reduce jinx counts by 1~|~attack(%VAR%); sfxdamage(target|%VAR%); sfx(\~_plasma\~); boostjinxcountdowns(self|1); boostjinxcountdowns(target|1);~|target|self|d|d); sfx(~_thinghappens~);,Whacksies,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Sticky Bombs_downgraded,Do [sword]1 dmg. In [jinx]<d6> turns[;]|do [sword]<d6> dmg[;] then reduce|all jinx countdowns by [jinx]1,1,attack(1); sfxdamage(target|1); jinx(~Sticky Bombs~|~take [sword]%VAR%[;] reduce jinx counts by 1~|~Take [sword]%VAR%[;] reduce jinx counts by 1~|~attack(%VAR%); sfxdamage(target|%VAR%); sfx(\~_plasma\~); boostjinxcountdowns(self|1); boostjinxcountdowns(target|1);~|target|self|d|d); sfx(~_thinghappens~);,Whacksies,MAX3,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Requiem,Inflict [weaken]1[;] inflict [weaken]3 instead|if enemy's health is below 25%,1,if(target.hp/target.maxhp <= 0.25){inflict(WEAKEN|3); sfx(~_weaken~|~~|0.3);}else{inflict(WEAKEN);}; sfx(~_weaken~);,Theremin,COUNTDOWN,5,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Requiem_upgraded,Inflict [weaken]2[;] inflict [weaken]4 instead|if enemy's health is below 25%,1,if(target.hp/target.maxhp <= 0.25){inflict(WEAKEN|4); sfx(~_weaken~|~~|0.3);}else{inflict(WEAKEN|2);}; sfx(~_weaken~);,Theremin,COUNTDOWN,5,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Requiem_downgraded,Inflict [weaken]1 weaken,1,inflict(WEAKEN); sfx(~_weaken~);,Theremin,COUNTDOWN,5,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Electrical Infetterence,Shock half of the|enemy's equipment,1,var total = 0; /*round down!*/ for(eq in target.equipment){total+=1;}; inflict(SHOCK|total/2); sfx(~_shock~);,Jackhammer,DOUBLES|DOUBLES,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Electrical Infetterence_upgraded,Shock half of the|enemy's equipment,1,var total = 0; /*round down!*/ for(eq in target.equipment){total+=1;}; inflict(SHOCK|total/2); sfx(~_shock~);,Jackhammer,NORMAL|NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Electrical Infetterence_downgraded,Shock half of the|enemy's equipment,1,var total = 0; /*round down!*/ for(eq in target.equipment){total+=1;}; inflict(SHOCK|total/2); sfx(~_shock~);,Jackhammer,REQUIRE4|REQUIRE4,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Weaponized Clarinet,Do [weaken]<d6> dmg + [weaken]1 weaken[;]|and again in [jinx]<d6> turns,2,attack(d|WEAKEN); inflict(WEAKEN); sfx(~_weaken~); sfxdamage(target|d); jinx(~Clarinet~|~take [weaken]%VAR% damage + [weaken]1 weaken~|~Take [weaken]%VAR% damage + [weaken]1 weaken~|~attack(%VAR%|WEAKEN); sfxdamage(null|%VAR%); inflict(WEAKEN); sfx(\~_weaken\~);~|target|self|d|d); ,Theremin,MAX3,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Weaponized Clarinet_upgraded,Do [weaken]<d6> dmg + [weaken]1 weaken[;]|and again in [jinx]<d6> turns,2,attack(d|WEAKEN); inflict(WEAKEN); sfx(~_weaken~); sfxdamage(target|d); jinx(~Clarinet~|~take [weaken]%VAR% damage + [weaken]1 weaken~|~Take [weaken]%VAR% damage + [weaken]1 weaken~|~attack(%VAR%|WEAKEN); sfxdamage(null|%VAR%); inflict(WEAKEN); sfx(\~_weaken\~);~|target|self|d|d); ,Theremin,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Weaponized Clarinet_downgraded,Do [weaken]<d6> dmg + [weaken]1 weaken[;]|and again in [jinx]<d6> turns,2,attack(d|WEAKEN); inflict(WEAKEN); sfx(~_weaken~); sfxdamage(target|d); jinx(~Clarinet~|~take [weaken]%VAR% damage + [weaken]1 weaken~|~Take [weaken]%VAR% damage + [weaken]1 weaken~|~attack(%VAR%|WEAKEN); sfxdamage(null|%VAR%); inflict(WEAKEN); sfx(\~_weaken\~);~|target|self|d|d); ,Theremin,REQUIRE3,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Bramble Slam,Deal [sword]10 damage[;] reduce|countdown by [thorns]2 per thorn|whenever you gain thorns,2,attack(10); sfxdamage(target|10); sfx(~_thorns~);,Pinprick,COUNTDOWN,15,GREEN,change_power,change_power,,,0,NO,NO,,,,,e.resetvar(~thorncount~);,,var lastthorns = e.getvar(~thorncount~); var diff = getstatusself(THORNS) - lastthorns; while(diff > 0){givedice(2); e.assigndice(self.dicepool[self.dicepool.length-1]); diff-=2;}; e.setvar(~lastthorns~|getstatusself(THORNS));,,,,,,
Bramble Slam_upgraded,Deal [sword]13 damage[;] reduce|countdown by [thorns]2 per thorn|whenever you gain thorns,2,attack(13); sfxdamage(target|13); sfx(~_thorns~);,Pinprick,COUNTDOWN,15,GREEN,,,,,0,NO,NO,,,,,e.resetvar(~thorncount~);,,var lastthorns = e.getvar(~thorncount~); var diff = getstatusself(THORNS) - lastthorns; while(diff > 0){givedice(2); e.assigndice(self.dicepool[self.dicepool.length-1]); diff-=2;}; e.setvar(~lastthorns~|getstatusself(THORNS));,,,,,,
Bramble Slam_downgraded,Deal [sword]10 damage,2,attack(10); sfxdamage(target|10); sfx(~_thorns~);,Pinprick,COUNTDOWN,15,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Spatulanger,Flip both dice upside down|Gain [fury] Fury,2,var rv = []; for(ad in actualdice){rv.push(7-ad.basevalue);}; givedice(rv); inflictself(FURY); sfx(~_fury~);,Megaflip,REQUIRE6|REQUIRE6,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Spatulanger_upgraded,Flip both dice upside down|Gain [fury] Fury,2,var rv = []; for(ad in actualdice){rv.push(7-ad.basevalue);}; givedice(rv); inflictself(FURY); sfx(~_fury~);,Megaflip,MIN5|MIN5,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Spatulanger_downgraded,Gain [fury] Fury,2,inflictself(FURY); sfx(~_fury~);,Megaflip,REQUIRE6|REQUIRE6,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Nail Batula,Flip a dice upside down|(Start of turn: lose [heart]2 hp)|,1,givedice(7-d);,Megaflip,NORMAL,,GREEN,change_power,change_power,,,3,YES,NO,,,,,,sfxdamage(self|2); pierceattackself(2); e.animate(~flashandshake~);,,,,,,,
Nail Batula_upgraded,Flip a dice upside down|(Start of turn: lose [heart]2 hp)|,1,givedice(7-d);,Megaflip,NORMAL,,GREEN,,,,,6,YES,NO,,,,,,sfxdamage(self|2); pierceattackself(2); e.animate(~flashandshake~);,,,,,,,
Nail Batula_downgraded,Flip a dice upside down|(Start of turn: lose [heart]2 hp)|,1,givedice(7-d);,Megaflip,NORMAL,,GREEN,,,,,2,YES,NO,,,,,,sfxdamage(self|2); pierceattackself(2); e.animate(~flashandshake~);,,,,,,,
Savescum,Quit to title|(Always offered as scrap),1,if(simulation){bonus(-10000);}else{var cmd = new elements.CombatCommand(~returntotitle_afterloss~); cmd.execute(self[;] target); sfx(~defeatplayer~);};,Barricade,EVEN,,GREY,change_power,change_power,,,0,YES,NO,appearsforparts|excludefromrandomlists,,,,,,,,,,,,
Savescum_upgraded,Quit to title|(Always offered as scrap),1,if(simulation){bonus(-10000);}else{var cmd = new elements.CombatCommand(~returntotitle_afterloss~); cmd.execute(self[;] target); sfx(~defeatplayer~);};,Barricade,NORMAL,,GREY,,,,,0,YES,NO,appearsforparts|excludefromrandomlists,,,,,,,,,,,,
Savescum_downgraded,Quit to title|(Always offered as scrap),1,if(simulation){bonus(-10000);}else{var cmd = new elements.CombatCommand(~returntotitle_afterloss~); cmd.execute(self[;] target); sfx(~defeatplayer~);};,Barricade,REQUIRE4,,GREY,,,,,0,YES,NO,appearsforparts|excludefromrandomlists,,,,,,,,,,,,
Cactus Spines,Deal [sword]2 damage|Gain [thorns]2 thorns,1,attack(2); sfxdamage(target|2); inflictself(THORNS|2); sfx(~_thorns~);,Pinprick,COUNTDOWN,7,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(THORNS|2); sfx(~_thorns~);
Cactus Spines_upgraded,Deal [sword]3 damage|Gain [thorns]3 thorns,1,attack(3); sfxdamage(target|3); inflictself(THORNS|3); sfx(~_thorns~);,Pinprick,COUNTDOWN,7,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(THORNS|3); sfx(~_thorns~);
Cactus Spines_downgraded,Deal [sword]1 damage|Gain [thorns]1 thorns,1,attack(1); sfxdamage(target|1); inflictself(THORNS|1); sfx(~_thorns~);,Pinprick,COUNTDOWN,7,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(THORNS|1); sfx(~_thorns~);
Defragment,Reduce countdowns and|the CPU counter by <d6>,1,boostcountdowns(d); adjustrobotcounter(-d);,Accelerate,MAX4,,GREEN,change_power,change_power,,,0,YES,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,
Defragment_upgraded,Reduce countdowns and|the CPU counter by <d6>,1,boostcountdowns(d); adjustrobotcounter(-d);,Accelerate,NORMAL,,GREEN,,,,,0,YES,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,
Defragment_downgraded,Reduce countdowns and|the CPU counter by <d6>,1,boostcountdowns(d); adjustrobotcounter(-d);,Accelerate,MAX2,,GREEN,,,,,0,YES,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,
Ruby Shield,Gain [shield]2 shield. If your health|is below 25%[;] gain [shield]<double> too,1,inflictself(SHIELD|2); sfx(~_shield~); if(self.hp/self.maxhp <= 0.25){inflictself(SHIELD|d*2); sfx(~_shield~|~~|0.2);};,Barricade,MAX3,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Ruby Shield_upgraded,Gain [shield]3 shield. If your health|is below 25%[;] gain [shield]<double> too,1,inflictself(SHIELD|3); sfx(~_shield~); if(self.hp/self.maxhp <= 0.25){inflictself(SHIELD|d*2); sfx(~_shield~|~~|0.2);};,Barricade,MAX3,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Ruby Shield_downgraded,Gain [shield]2 shield. If your health|is below 25%[;] gain [shield]<double> too,1,inflictself(SHIELD|2); sfx(~_shield~); if(self.hp/self.maxhp <= 0.25){inflictself(SHIELD|d*2); sfx(~_shield~|~~|0.2);};,Barricade,MAX2,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Steel Breath,Deal [sword]4 damage[;] roll two|dice that add up to <d6>,2,attack(4); sfxdamage(target|4); if(d < 1){}else if(d == 1){givedice(1);}else if(d <= 6){givedice(split(d));}else{var out = []; while(d > 6){out.push(d); d-=6;}; out.push(d); givedice(out);},Pea Gun,COUNTDOWN,5,GREY,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,, givedice(split(d));
Steel Breath_upgraded,Deal [sword]6 damage[;] roll two|dice that add up to <d6>,2,attack(6); sfxdamage(target|6); if(d < 1){}else if(d == 1){givedice(1);}else if(d <= 6){givedice(split(d));}else{var out = []; while(d > 6){out.push(d); d-=6;}; out.push(d); givedice(out);},Pea Gun,COUNTDOWN,5,GREY,,,,,0,NO,NO,,,,,,,,,,,,, givedice(split(d));
Steel Breath_downgraded,Deal [sword]4 damage,2,attack(4); sfxdamage(target|4);,Pea Gun,COUNTDOWN,5,GREY,,,,,0,NO,NO,,,,,,,,,,,,,
Alien Lockpick,[quote]Split[quote] a dice in two,2,givedice([d|d]);,Clone Device,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Alien Lockpick_upgraded,[quote]Split[quote] a dice in two|On 6[;] [quote]split[quote] into three,2,if(d == 6){givedice([d|d|d]);}else{givedice([d|d]);};,Clone Device,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Alien Lockpick_downgraded,[quote]Split[quote] a dice in two,2,givedice([d|d]);,Clone Device,MIN4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Discount GPU,Reduce CPU counter by <d6>[;]|double if CPU is less than|<d6> away from maximum,1,if(!simulation && self.usecpuinsteadofdice){if(self.roll_target - self.roll_total < d){adjustrobotcounter(-d*2);}else{adjustrobotcounter(-d);};};,Accelerate,MAX3,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Discount GPU_upgraded,Reduce CPU counter by <d6>[;]|double if CPU is less than|<d6> away from maximum,1,if(!simulation && self.usecpuinsteadofdice){if(self.roll_target - self.roll_total < d){adjustrobotcounter(-d*2);}else{adjustrobotcounter(-d);};};,Accelerate,MAX5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Discount GPU_downgraded,Reduce CPU counter by <d6>[;]|double if CPU is less than|<d6> away from maximum,1,if(!simulation && self.usecpuinsteadofdice){if(self.roll_target - self.roll_total < d){adjustrobotcounter(-d*2);}else{adjustrobotcounter(-d);};};,Accelerate,MAX2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Positive Fource,Recover [heal]<d6> health,2,attackself(-d); sfx(~_heal~);,Regenerate,REQUIRE4|REQUIRE4,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Positive Fource_upgraded,Recover [heal]<d6> health,2,attackself(-d); sfx(~_heal~);,Regenerate,MAX4|REQUIRE4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Positive Fource_downgraded,Recover [heal]4 health,2,attackself(-4); sfx(~_heal~);,Regenerate,REQUIRE4|REQUIRE4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Good Feeling Crystal,Recover [heal]<d6> health[;]|and feel a bit luckier,1,attackself(-d); sfx(~_heal~); inflictself(~luck~);,Regenerate,MAX3,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Good Feeling Crystal_upgraded,Heal [heal]<d6>[;] cure [poison]1 poison[;]|and feel a bit luckier,1,attackself(-d); sfx(~_heal~); removestatusself(POISON|1); inflictself(~luck~);,Regenerate,MAX4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Good Feeling Crystal_downgraded,Recover [heal]<d6> health[;]|and feel a bit luckier,1,attackself(-d); sfx(~_heal~); inflictself(~luck~);,Regenerate,MAX2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Force Wrench,Reduce countdowns by 4|,2,boostcountdowns(4);,Accelerate,COUNTDOWN,4,GREEN,change_power,change_power,,,2,YES,NO,,,,,,,,,,,,,
Force Wrench_upgraded,Reduce countdowns by 4|,2,boostcountdowns(4);,Accelerate,COUNTDOWN,4,GREEN,,,,,3,YES,NO,,,,,,,,,,,,,
Force Wrench_downgraded,Reduce countdowns by 4|,2,boostcountdowns(4);,Accelerate,COUNTDOWN,4,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Lucky Lock,Lock [lock]1 dice[;]|and feel a bit luckier,1,inflict(LOCK); sfx(~_lock~); inflictself(~luck~); sfx(~_survive~);,Padlock,REQUIRE3,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(~_luck~); sfx(~_survive~);
Lucky Lock_upgraded,Lock [lock]1 dice[;]|and feel a bit luckier,1,inflict(LOCK); sfx(~_lock~); inflictself(~luck~); sfx(~_survive~);,Padlock,ODD,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~_luck~); sfx(~_survive~);
Lucky Lock_downgraded,Lock [lock]1 dice[;]|and feel a bit luckier,1,inflict(LOCK); sfx(~_lock~); inflictself(~luck~); sfx(~_survive~);,Padlock,REQUIRE3|REQUIRE3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~_luck~); sfx(~_survive~);
Ritual of Servitude,Get 2 copies of the lowest|dice value you can use,1,if(simulation){bonus(-10000);}else{var minval = 7;  for(eq in self.equipment){if(eq.skillcard != ~~ # !eq.availablethisturn # !eq.ready){/*in here[;] it don't work. why did i structure this this way? heck if I know*/}else if(eq.countdown > 0){minval = 1; break;}else if(eq.needstotal > 0){}else{var retdice = runscript(~morefluff/possibledice~|[eq|~min~]); /*Get the smallest dice for this equipment*/ for(r in retdice){if(minval > r){minval = r;};}; };}; if(minval != 7){givedice([minval|minval]);};};,Snake Eyes,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Ritual of Servitude_upgraded,Get 3 copies of the lowest|dice value you can use,1,if(simulation){bonus(-10000);}else{var minval = 7;  for(eq in self.equipment){if(eq.skillcard != ~~ # !eq.availablethisturn # !eq.ready){/*in here[;] it don't work. why did i structure this this way? heck if I know*/}else if(eq.countdown > 0){minval = 1; break;}else if(eq.needstotal > 0){}else{var retdice = runscript(~morefluff/possibledice~|[eq|~min~]); /*Get the smallest dice for this equipment*/ for(r in retdice){if(minval > r){minval = r;};}; };}; if(minval != 7){givedice([minval|minval|minval]);};};,Snake Eyes,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Ritual of Servitude_downgraded,Get a copy of the lowest|dice value you can use,1,if(simulation){bonus(-10000);}else{var minval = 7;  for(eq in self.equipment){if(eq.skillcard != ~~ # !eq.availablethisturn # !eq.ready){/*in here[;] it don't work. why did i structure this this way? heck if I know*/}else if(eq.countdown > 0){minval = 1; break;}else if(eq.needstotal > 0){}else{var retdice = runscript(~morefluff/possibledice~|[eq|~min~]); /*Get the smallest dice for this equipment*/ for(r in retdice){if(minval > r){minval = r;};}; };}; if(minval != 7){givedice([minval]);};};,Snake Eyes,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Countering Spell,Deal [sword]5 dmg[;] counter an|uncountered dice value,1,attack(5); sfxdamage(target|5); sfx(~_magic~); var possible = [1|2|3|4|5|6]; for(x in [1|2|3|4|5|6]){if(getstatus(~counter_~+x) > 0){possible.remove(x);};}; if(possible.length > 0){inflict(~counter_~+rand(possible)); sfx(~_lock~|~~|0.2);};,Magic Counterspell,REQUIRE1,,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Countering Spell_upgraded,Deal [sword]8 dmg[;] counter an|uncountered dice value,1,attack(8); sfxdamage(target|8); sfx(~_magic~); var possible = [1|2|3|4|5|6]; for(x in [1|2|3|4|5|6]){if(getstatus(~counter_~+x) > 0){possible.remove(x);};}; if(possible.length > 0){inflict(~counter_~+rand(possible)); sfx(~_lock~|~~|0.2);};,Magic Counterspell,REQUIRE1,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Countering Spell_downgraded,Counter an uncountered|enemy dice value,1,sfx(~_magic~); var possible = [1|2|3|4|5|6]; for(x in [1|2|3|4|5|6]){if(getstatus(~counter_~+x) > 0){possible.remove(x);};}; if(possible.length > 0){inflict(~counter_~+rand(possible)); sfx(~_lock~|~~|0.2);};,Magic Counterspell,REQUIRE1,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Factory Reset,Deal [sword]20 damage|Set CPU counter to 0,1,attack(20); sfxdamage(target|20); sfx(~_plasma~); sfx(~_magic~); adjustrobotcounter(-self.roll_total);,Accelerate,COUNTDOWN,25,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,adjustrobotcounter(-self.roll_total);
Factory Reset_upgraded,Deal [sword]25 damage|Set CPU counter to 0,1,attack(25); sfxdamage(target|25); sfx(~_plasma~); sfx(~_magic~); adjustrobotcounter(-self.roll_total);,Accelerate,COUNTDOWN,25,BRIGHTCYAN,,,,,0,NO,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,adjustrobotcounter(-self.roll_total);
Factory Reset_downgraded,Deal [sword]10 damage|Set CPU counter to 0,1,attack(10); sfxdamage(target|10); sfx(~_plasma~); sfx(~_magic~); adjustrobotcounter(-self.roll_total);,Accelerate,COUNTDOWN,25,BRIGHTCYAN,,,,,0,NO,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,adjustrobotcounter(-self.roll_total);
Quantum Tunneling,Deal [sword]20 damage|Autoroll immediately,1,attack(20); sfxdamage(target|20); sfx(~_plasma~); sfx(~_magic~); robotroll(true);,Accelerate,COUNTDOWN,25,YELLOW,change_power,change_power,,,0,NO,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,robotroll(true);
Quantum Tunneling_upgraded,Deal [sword]25 damage|Autoroll immediately,1,attack(25); sfxdamage(target|25); sfx(~_plasma~); sfx(~_magic~); robotroll(true);,Accelerate,COUNTDOWN,25,YELLOW,,,,,0,NO,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,robotroll(true);
Quantum Tunneling_downgraded,Deal [sword]10 damage|Autoroll immediately,1,attack(10); sfxdamage(target|10); sfx(~_plasma~); sfx(~_magic~); robotroll(true);,Accelerate,COUNTDOWN,25,YELLOW,,,,,0,NO,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,robotroll(true);
Graph Staff,Deal [sword]6 damage|Reduce CPU counter by 3,2,attack(6); sfxdamage(target|6); adjustrobotcounter(-3);,Accelerate,COUNTDOWN,8,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,adjustrobotcounter(-3);
Graph Staff_upgraded,Deal [sword]6 damage|Reduce CPU counter by 5,2,attack(6); sfxdamage(target|6); adjustrobotcounter(-5);,Accelerate,COUNTDOWN,8,BRIGHTCYAN,,,,,0,NO,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,adjustrobotcounter(-5);
Graph Staff_downgraded,Deal [sword]3 damage|Reduce CPU counter by 3,2,attack(3); sfxdamage(target|3); adjustrobotcounter(-3);,Accelerate,COUNTDOWN,8,BRIGHTCYAN,,,,,0,NO,NO,robotonly|excludefromrandomlists,,,,,,,,,,,,adjustrobotcounter(-3);
Shift Key,Dice value -1[;] but increase|your other dice values by 1,1,var c = 0; var extradice = []; if(d > 1){extradice.push(d-1);}; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue >= 6){ extradice.push(1); mydice.animatereroll(6| self.screenposition()| c * 0.05); } else { mydice.animatereroll((mydice.basevalue + 1)| self.screenposition()| c * 0.05); } c++; } } givedice(extradice);,Megabump,MIN4,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Shift Key_upgraded,Dice value -1[;] but increase|your other dice values by 1,1,var c = 0; var extradice = []; if(d > 1){extradice.push(d-1);}; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue >= 6){ extradice.push(1); mydice.animatereroll(6| self.screenposition()| c * 0.05); } else { mydice.animatereroll((mydice.basevalue + 1)| self.screenposition()| c * 0.05); } c++; } } givedice(extradice);,Megabump,MIN2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Shift Key_downgraded,Dice value -1[;] but increase|your other dice values by 1,1,var c = 0; var extradice = []; if(d > 1){extradice.push(d-1);}; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue >= 6){ extradice.push(1); mydice.animatereroll(6| self.screenposition()| c * 0.05); } else { mydice.animatereroll((mydice.basevalue + 1)| self.screenposition()| c * 0.05); } c++; } } givedice(extradice);,Megabump,REQUIRE6,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Pondweed,[heal]1 per turn for [regen]<d6> turns|(Cost [mana]2: heal [heal]2 per turn),1,if(getstatusself(MANA) > 1){ removestatusself(MANA[;]2); inflictself(~regen~+d|2);}else{ inflictself(~regen~+d);}; sfx(~_cure~);,Regenerate,MAX3,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Pondweed_upgraded,[heal]1 per turn for [regen]<d6> turns|(Cost [mana]2: heal [heal]2 per turn),1,if(getstatusself(MANA) > 1){ removestatusself(MANA[;]2); inflictself(~regen~+d|2);}else{ inflictself(~regen~+d);}; sfx(~_cure~);,Regenerate,MAX5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Pondweed_downgraded,[heal]1 per turn for [regen]<d6> turns|(Cost [mana]2: heal [heal]2 per turn),1,if(getstatusself(MANA) > 1){ removestatusself(MANA[;]2); inflictself(~regen~+d|2);}else{ inflictself(~regen~+d);}; sfx(~_cure~);,Regenerate,MAX2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Free Shooter,Roll a 5|,1,givedice(5);,Slightly Lucky Roll,COUNTDOWN,5,RED,change_power,change_power,,,2,YES,NO,,,,,,,,,,,,,
Free Shooter_upgraded,Roll a 5|,1,givedice(5);,Slightly Lucky Roll,COUNTDOWN,5,RED,,,,,4,YES,NO,,,,,,,,,,,,,
Free Shooter_downgraded,Roll a 5,1,givedice(5);,Slightly Lucky Roll,COUNTDOWN,5,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Oggy Oggy Oggy,Inflict [curse]3 curse,2,inflict(CURSE|3); sfx(~_curse~); sfx(~_curse~|~~|0.3); sfx(~_curse~|~~|0.6);,Megacurse,NORMAL|NORMAL|NORMAL,13,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Oggy Oggy Oggy_upgraded,Inflict [curse]3 curse,2,inflict(CURSE|3); sfx(~_curse~); sfx(~_curse~|~~|0.3); sfx(~_curse~|~~|0.6);,Megacurse,MIN4|MIN4|MAX4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Oggy Oggy Oggy_downgraded,Inflict [curse]3 curse,2,inflict(CURSE|3); sfx(~_curse~); sfx(~_curse~|~~|0.3); sfx(~_curse~|~~|0.6);,Megacurse,REQUIRE6|REQUIRE6|REQUIRE1,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Superinjunction,Deal [sword]20 damage[;] lock|all odd enemy dice,1,attack(20); sfxdamage(target|20); sfx(~_magic~); inflict(~counter_1~); inflict(~counter_3~); inflict(~counter_5~); sfx(~_lock~); sfx(~_lock~|~~|0.1); sfx(~_lock~|~~|0.2);,Padlock,COUNTDOWN,25,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Superinjunction_upgraded,Deal [sword]25 damage[;] lock|all odd enemy dice,1,attack(25); sfxdamage(target|25); sfx(~_magic~); inflict(~counter_1~); inflict(~counter_3~); inflict(~counter_5~); sfx(~_lock~); sfx(~_lock~|~~|0.1); sfx(~_lock~|~~|0.2);,Padlock,COUNTDOWN,25,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Superinjunction_downgraded,Deal [sword]10 damage[;] lock|all enemy dice that roll 1,1,attack(10); sfxdamage(target|10); sfx(~_magic~); inflict(~counter_1~); sfx(~_lock~);,Padlock,COUNTDOWN,25,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Evenlock,Deal [sword]20 damage[;] lock|all even enemy dice,1,attack(20); sfxdamage(target|20); sfx(~_magic~); inflict(~counter_2~); inflict(~counter_4~); inflict(~counter_6~); sfx(~_lock~); sfx(~_lock~|~~|0.1); sfx(~_lock~|~~|0.2);,Padlock,COUNTDOWN,25,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Evenlock_upgraded,Deal [sword]25 damage[;] lock|all even enemy dice,1,attack(25); sfxdamage(target|25); sfx(~_magic~); inflict(~counter_2~); inflict(~counter_4~); inflict(~counter_6~); sfx(~_lock~); sfx(~_lock~|~~|0.1); sfx(~_lock~|~~|0.2);,Padlock,COUNTDOWN,25,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Evenlock_downgraded,Deal [sword]10 damage[;] lock|all enemy dice that roll 6,1,attack(10); sfxdamage(target|10); sfx(~_magic~); inflict(~counter_2~); sfx(~_lock~);,Padlock,COUNTDOWN,25,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Fourshadow,Deal [sword]4 damage|Inflict [blind]1 blind,2,attack(4); sfxdamage(4); inflict(BLIND); sfx(~_blind~);,Smoke Cloud,COUNTDOWN,4,GREY,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Fourshadow_upgraded,Deal [sword]6 damage|Inflict [blind]1 blind,2,attack(6); sfxdamage(6); inflict(BLIND); sfx(~_blind~);,Smoke Cloud,COUNTDOWN,4,GREY,,,,,0,NO,NO,,,,,,,,,,,,,
Fourshadow_downgraded,Deal [sword]2 damage|Inflict [blind]1 blind,2,attack(2); sfxdamage(2); inflict(BLIND); sfx(~_blind~);,Smoke Cloud,COUNTDOWN,4,GREY,,,,,0,NO,NO,,,,,,,,,,,,,
Det Cord,Reduce countdowns by 16,1,boostcountdowns(6); boostcountdowns(6); boostcountdowns(4);,Accelerate,REQUIRE4|REQUIRE4,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Det Cord_upgraded,Reduce countdowns by 16,1,boostcountdowns(6); boostcountdowns(6); boostcountdowns(4);,Accelerate,EVEN|EVEN,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Det Cord_downgraded,Reduce countdowns by 12,1,boostcountdowns(6); boostcountdowns(6);,Accelerate,REQUIRE4|REQUIRE4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Calcuduplicate,Get another copy of the|next dice you calculate,1,inflictself(~mimeograph~); sfx(~_magic~);,Clone Device,EVEN,,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Calcuduplicate_upgraded,Get another copy of the|next dice you calculate,1,inflictself(~mimeograph~); sfx(~_magic~);,Clone Device,NORMAL,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Calcuduplicate_downgraded,Get another copy of the|next dice you calculate,1,inflictself(~mimeograph~); sfx(~_magic~);,Clone Device,REQUIRE4,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Scourge,Deal [sword]6 damage|Curse everyone,2,attack(6); sfxdamage(target|6); inflict(CURSE); inflictself(CURSE); sfx(~_curse~);,Megacurse,COUNTDOWN,8,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(CURSE); sfx(~_curse~);
Scourge_upgraded,Deal [sword]8 damage|Curse everyone,2,attack(8); sfxdamage(target|8); inflict(CURSE); inflictself(CURSE); sfx(~_curse~);,Megacurse,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(CURSE); sfx(~_curse~);
Scourge_downgraded,Deal [sword]6 damage|Curse yourself,2,attack(6); sfxdamage(target|6); inflictself(CURSE); sfx(~_curse~);,Megacurse,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(CURSE); sfx(~_curse~);
Primal Cauldron,Deal [sword]1 damage[;]|get a prime-numbered dice,1,attack(1); sfxdamage(target[;]1); givedice(rand([2|3|5]));,Magic Dice,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,givedice(rand([2|3|5]));
Primal Cauldron_upgraded,Do [sword]1[;] roll a prime dice|,1,attack(1); sfxdamage(target[;]1); givedice(rand([2|3|5]));,Magic Dice,NORMAL,,PINK,,,,,2,NO,NO,,,,,,,,,,,,,givedice(rand([2|3|5]));
Primal Cauldron_downgraded,Deal [sword]1 damage,1,attack(1); sfxdamage(target[;]1);,Magic Dice,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Concrete Cauldron,Deal [sword]1 damage[;] get a|non prime-numbered dice,1,attack(1); sfxdamage(target[;]1); givedice(rand([1|4|6]));,Magic Dice,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,givedice(rand([1|4|6]));
Concrete Cauldron_upgraded,Deal [sword]1 damage[;] get a|non prime-numbered dice|,1,attack(1); sfxdamage(target[;]1); givedice(rand([1|4|6]));,Magic Dice,NORMAL,,PURPLE,,,,,2,NO,NO,,,,,,,,,,,,,givedice(rand([1|4|6]));
Concrete Cauldron_downgraded,Deal [sword]1 damage,1,attack(1); sfxdamage(target[;]1);,Magic Dice,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Shooting Start,Deal [sword]<d6> damage|(You're confused on turn 1),2,attack(d); sfxdamage(target|d); sfx(~_magic~);,Magic Dice,ODD|FREE3,,YELLOW,change_power,change_power,,,0,NO,NO,,,inflictself(CONFUSE);,,,,,,,,,,
Shooting Start_upgraded,Deal [sword]<d6> damage|(You're confused on turn 1),2,attack(d); sfxdamage(target|d); sfx(~_magic~);,Magic Dice,NORMAL|FREE3,,YELLOW,,,,,0,NO,NO,,,inflictself(CONFUSE);,,,,,,,,,,
Shooting Start_downgraded,Deal [sword]<d6> damage|(You're confused on turn 1),2,attack(d); sfxdamage(target|d); sfx(~_magic~);,Magic Dice,ODD,,YELLOW,,,,,0,NO,NO,,,inflictself(CONFUSE);,,,,,,,,,,
Harbinger's Spear,Deal [sword]6 dmg[;] and another|[sword]6 damage in [jinx]3 turns,1,attack(6); sfxdamage(target[;]6); sfx(~_magic~); jinx(~Harbinger's Spear~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); sfx(\~_magic\~);~|target|self|3|6); sfx(~_thinghappens~);,Whacksies,REQUIRE6,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,jinx(~Harbinger's Spear~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); sfx(\~_magic\~);~|target|self|3|6); sfx(~_thinghappens~);
Harbinger's Spear_upgraded,Deal [sword]6 dmg[;] and another|[sword]6 damage in [jinx]3 turns,1,attack(6); sfxdamage(target[;]6); sfx(~_magic~); jinx(~Harbinger's Spear~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); sfx(\~_magic\~);~|target|self|3|6); sfx(~_thinghappens~);,Whacksies,MIN5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,jinx(~Harbinger's Spear~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); sfx(\~_magic\~);~|target|self|3|6); sfx(~_thinghappens~);
Harbinger's Spear_downgraded,Deal [sword]6 dmg[;] and another|[sword]6 damage in [jinx]3 turns,1,attack(6); sfxdamage(target[;]6); sfx(~_magic~); jinx(~Harbinger's Spear~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); sfx(\~_magic\~);~|target|self|3|6); sfx(~_thinghappens~);,Whacksies,REQUIRE6|REQUIRE6,,RED,,,,,0,NO,NO,,,,,,,,,,,,,jinx(~Harbinger's Spear~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); sfx(\~_magic\~);~|target|self|3|6); sfx(~_thinghappens~);
Spectral Slash,Deal [sword]<d6> damage. On 6[;] do|another [sword]6 in [jinx]3 turns,2,attack(d); sfxdamage(target|d); if(d == 6){jinx(~Spectral Slash~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); sfx(\~_magic\~);~|target|self|3|6); sfx(~_thinghappens~);};,Whacksies,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 6){jinx(~Spectral Slash~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); sfx(\~_magic\~);~|target|self|3|6); sfx(~_thinghappens~);};
Spectral Slash_upgraded,Deal [sword]<d6> damage. On even[;]|do another [sword]<d6> in [jinx]3 turns,2,attack(d); sfxdamage(target|d); if(d %2 == 0){jinx(~Spectral Slash~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); sfx(\~_magic\~);~|target|self|3|d); sfx(~_thinghappens~);};,Whacksies,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,if(d %2 == 0){jinx(~Spectral Slash~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%); sfx(\~_magic\~);~|target|self|3|d); sfx(~_thinghappens~);};
Spectral Slash_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,Whacksies,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Hextuplicate,Get a copy of <d6> for|every rolled 6 you have,1,var rv = []; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue == 6){rv.push(d);};}; if(rv.length > 0){givedice(rv);};,Magic Six,MAX4,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Hextuplicate_upgraded,Get a copy of <d6> for|every rolled 6 you have,1,var rv = []; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue == 6){rv.push(d);};}; if(rv.length > 0){givedice(rv);};,Magic Six,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Hextuplicate_downgraded,Get a copy of <d6> for|every rolled 6 you have,1,var rv = []; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue == 6){rv.push(d);};}; if(rv.length > 0){givedice(rv);};,Magic Six,MAX2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Inefficiency,Next equipment you use|has +1 use this turn,1,inflictself(REEQUIPNEXT); sfx(~_recycle~);,Efficiency,NORMAL|NORMAL|NORMAL,,GREEN,change_power,change_power,reequipnext,,0,YES,NO,,,,,,,,,,,,,
Inefficiency_upgraded,Next equipment you use|has +1 use this turn,1,inflictself(REEQUIPNEXT); sfx(~_recycle~);,Efficiency,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Inefficiency_downgraded,Next equipment you use|has +1 use this turn,1,inflictself(REEQUIPNEXT); sfx(~_recycle~);,Efficiency,MIN3|MIN3|MIN3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Inefficiency?,Keep the next dice you|use[;] and return these dice,1,inflictself(REEQUIPNEXT); sfx(~_recycle~); var rv = []; for(ad in actualdice){rv.push(ad.basevalue);}; givedice(rv);,Efficiency,NORMAL|NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Inefficiency?_upgraded,Keep the next dice you|use[;] and return these dice,1,inflictself(REEQUIPNEXT); sfx(~_recycle~); var rv = []; for(ad in actualdice){rv.push(ad.basevalue);}; givedice(rv);,Efficiency,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Inefficiency?_downgraded,Keep the next dice you|use[;] and return these dice,1,inflictself(REEQUIPNEXT); sfx(~_recycle~); var rv = []; for(ad in actualdice){rv.push(ad.basevalue);}; givedice(rv);,Efficiency,MIN3|MIN3|MIN3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Lemongeradedice,Heal [heal](<double>[green])[]-1 health,2,if(d > 1){attackself(-(d*2)-1); sfx(~_heal~);};,Regenerate,MAX3,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Lemongeradedice_upgraded,Heal [heal](<double>[green])[]-1 health,2,if(d > 1){attackself(-(d*2)-1); sfx(~_heal~);};,Regenerate,MAX4,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Lemongeradedice_downgraded,Heal [heal](<double>[green])[]-1 health,2,if(d > 1){attackself(-(d*2)-1); sfx(~_heal~);};,Regenerate,MAX2,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Brass Cauldron,Deal [sword]1 damage[;] get a new|dice (prioritizes values you|don't currently have),1,attack(1); sfxdamage(target|1); if(simulation){bonus(1000);}else{var possiblevals = [1|2|3|4|5|6]; possiblevals.remove(d); for(mydice in self.dicepool){var m = mydice.basevalue; if(possiblevals.indexOf(m) > -1){possiblevals.remove(m);};}; if(possiblevals.length == 0){var rv = [1|2|3|4|5|6]; rv.remove(d); givedice(rand(rv));}else{givedice(rand(possiblevals));};};,Magic Dice,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(simulation){bonus(1000);}else{var possiblevals = [1|2|3|4|5|6]; possiblevals.remove(d); for(mydice in self.dicepool){var m = mydice.basevalue; if(possiblevals.indexOf(m) > -1){possiblevals.remove(m);};}; if(possiblevals.length == 0){var rv = [1|2|3|4|5|6]; rv.remove(d); givedice(rand(rv));}else{givedice(rand(possiblevals));};};
Brass Cauldron_upgraded,[sword]1[;] get new dice (prioritizes|dice values you don't have)|,1,attack(1); sfxdamage(target|1); if(simulation){bonus(1000);}else{var possiblevals = [1|2|3|4|5|6]; possiblevals.remove(d); for(mydice in self.dicepool){var m = mydice.basevalue; if(possiblevals.indexOf(m) > -1){possiblevals.remove(m);};}; if(possiblevals.length == 0){var rv = [1|2|3|4|5|6]; rv.remove(d); givedice(rand(rv));}else{givedice(rand(possiblevals));};};,Magic Dice,NORMAL,,GREEN,,,,,2,NO,NO,,,,,,,,,,,,,if(simulation){bonus(1000);}else{var possiblevals = [1|2|3|4|5|6]; possiblevals.remove(d); for(mydice in self.dicepool){var m = mydice.basevalue; if(possiblevals.indexOf(m) > -1){possiblevals.remove(m);};}; if(possiblevals.length == 0){var rv = [1|2|3|4|5|6]; rv.remove(d); givedice(rand(rv));}else{givedice(rand(possiblevals));};};
Brass Cauldron_downgraded,Deal [sword]1 damage,1,attack(1); sfxdamage(target|1);,Magic Dice,NORMAL,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Spare Spire Spear,A spare 6. If this is unused[;]|do [sword]6 at end of turn,2,,Magic Six,SPARE6,,RED,change_power,change_power,,,0,YES,NO,curseavoid|weakenavoid,,,,,,,,if(e.ready){if(target.hp > 0){attack(6); sfxdamage(target|6); e.animate(~flashandshake~);};};,,,,
Spare Spire Spear_upgraded,A spare 6. If this is unused[;]|do [sword]8 at end of turn,2,,Magic Six,SPARE6,,RED,,,,,0,YES,NO,curseavoid|weakenavoid,,,,,,,,if(e.ready){if(target.hp > 0){attack(8); sfxdamage(target|8); e.animate(~flashandshake~);};};,,,,
Spare Spire Spear_downgraded,A spare 6. If this is unused[;]|do [sword]3 at end of turn,2,,Magic Six,SPARE6,,RED,,,,,0,YES,NO,curseavoid|weakenavoid,,,,,,,,if(e.ready){if(target.hp > 0){attack(3); sfxdamage(target|3); e.animate(~flashandshake~);};};,,,,
Doodooplicate,Duplicate a dice|(Always offered as scrap),2,givedice([d|d]);,Clone Device,MAX3,,GREY,change_power,change_power,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Doodooplicate_upgraded,Duplicate a dice|(Always offered as scrap),2,givedice([d|d]);,Clone Device,NORMAL,,GREY,,,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Doodooplicate_downgraded,Duplicate a dice|(Always offered as scrap),2,givedice([d|d]);,Clone Device,REQUIRE1,,GREY,,,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Reset Shooter,Deal [sword]5 damage[;]|countdown resets each turn|,2,attack(5); sfxdamage(target|5); sfx(~_magic~);,Pea Gun,COUNTDOWN,8,RED,change_power,change_power,,,-1,NO,NO,,,,,e.countdown = 8;,,,,,,,,
Reset Shooter_upgraded,Deal [sword]7 damage[;]|countdown resets each turn|,2,attack(7); sfxdamage(target|7); sfx(~_magic~);,Pea Gun,COUNTDOWN,8,RED,,,,,-1,NO,NO,,,,,e.countdown = 8;,,,,,,,,
Reset Shooter_downgraded,Deal [sword]3 damage[;]|countdown resets each turn|,2,attack(3); sfxdamage(target|3); sfx(~_magic~);,Pea Gun,COUNTDOWN,8,RED,,,,,2,NO,NO,,,,,e.countdown = 8;,,,,,,,,
Clock Block,Gain [shield] shield equal to|the turn number (<var:turn>),1,inflictself(SHIELD|turn); sfx(~_shield~);,Barricade,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,self.setvar(~turn~|turn);,,self.setvar(~turn~|turn);,self.setvar(~turn~|turn);,,,,,
Clock Block_upgraded,Gain [shield] shield equal to|the turn number (<var:turn>),1,inflictself(SHIELD|turn); sfx(~_shield~);,Barricade,NORMAL|NORMAL,,ORANGE,,,,,0,YES,NO,,,,,self.setvar(~turn~|turn);,,self.setvar(~turn~|turn);,self.setvar(~turn~|turn);,,,,,
Clock Block_downgraded,Gain [shield] shield equal to|the turn number (<var:turn>),1,inflictself(SHIELD|turn); sfx(~_shield~);,Barricade,REQUIRE4|REQUIRE4,,ORANGE,,,,,0,YES,NO,,,,,self.setvar(~turn~|turn);,,self.setvar(~turn~|turn);,self.setvar(~turn~|turn);,,,,,
Gong of Pestilence,Do [sword]<d6> dmg. On 6[;] instead|do [sword]1 per [poison] on the enemy,2,if(d == 6){attack(getstatus(POISON)); sfxdamage(getstatus(POISON)); sfx(~_poison~|~~|0.2);}else{attack(d); sfxdamage(target|d);};,Goop Gun,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Gong of Pestilence_upgraded,Do [sword]<d6> dmg. On 6[;] do [sword]1|more per [poison] on the enemy,2,if(d == 6){attack(getstatus(POISON)+d); sfxdamage(getstatus(POISON)+d); sfx(~_poison~|~~|0.2);}else{attack(d); sfxdamage(target|d);};,Goop Gun,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Gong of Pestilence_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,Goop Gun,MAX5,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Dreamblade,Deal [sword]<triple> damage|Skip your next turn,2,attack(d*3); sfxdamage(target|d*3); inflictself(~mf_skipturn~); sfx(~magic_gaindice~);,Time Stop,MAX5,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(~mf_skipturn~); sfx(~magic_gaindice~);
Dreamblade_upgraded,Deal [sword]<triple> damage|Skip your next turn,2,attack(d*3); sfxdamage(target|d*3); inflictself(~mf_skipturn~); sfx(~magic_gaindice~);,Time Stop,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~mf_skipturn~); sfx(~magic_gaindice~);
Dreamblade_downgraded,Deal [sword]<triple> damage|Skip your next turn,2,attack(d*3); sfxdamage(target|d*3); inflictself(~mf_skipturn~); sfx(~magic_gaindice~);,Time Stop,MAX4,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~mf_skipturn~); sfx(~magic_gaindice~);
General Malice,Do [sword]<d6> dmg + [curse]1 curse|(Silence self each turn),1,attack(d); sfxdamage(target|d); inflict(CURSE); sfx(~_curse~);,Megacurse,EVEN,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,var s = new elements.Skill(~Silence[;] fool~); s.execute(target|self);,,,,,,,,
General Malice_upgraded,Do [sword]<d6> dmg + [curse]1 curse|(Silence self each turn),1,attack(d); sfxdamage(target|d); inflict(CURSE); sfx(~_curse~);,Megacurse,EVEN|FREE2,,PURPLE,,,,,0,NO,NO,,,,,var s = new elements.Skill(~Silence[;] fool~); s.execute(target|self);,,,,,,,,
General Malice_downgraded,Do [sword]<d6> dmg + [curse]1 curse|(Silence self each turn),1,attack(d); sfxdamage(target|d); inflict(CURSE); sfx(~_curse~);,Megacurse,REQUIRE4,,PURPLE,,,,,0,NO,NO,,,,,var s = new elements.Skill(~Silence[;] fool~); s.execute(target|self);,,,,,,,,
Expired Coupon,Gain [shield]<d6> shield|On 3[;] gain [gold]0 gold,1,inflictself(SHIELD|d); sfx(~_shield~); if(d == 3){self.gold+=0; sfx(~stealgold~);};,Barricade,MAX3,,ORANGE,change_power,change_power,,,0,NO,NO,showgold,,,,,,,,,,,,
Expired Coupon_upgraded,Gain [shield]<d6> shield|On 4[;] gain [gold]0 gold,1,inflictself(SHIELD|d); sfx(~_shield~); if(d == 4){self.gold+=0; sfx(~stealgold~);};,Barricade,MAX4,,ORANGE,,,,,0,NO,NO,showgold,,,,,,,,,,,,
Expired Coupon_downgraded,Gain [shield]<d6> shield|On 2[;] gain [gold]0 gold,1,inflictself(SHIELD|d); sfx(~_shield~); if(d == 2){self.gold+=0; sfx(~stealgold~);};,Barricade,MAX2,,ORANGE,,,,,0,NO,NO,showgold,,,,,,,,,,,,
Angry Voices,Deal [sword]<d6> damage[;] return|dice if used with Fury,1,attack(d); sfxdamage(target|d);,Fury,MAX5,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,givedice(d);,
Angry Voices_upgraded,Deal [sword]<d6> damage[;] return|dice if used with Fury,1,attack(d); sfxdamage(target|d);,Fury,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,givedice(d);,
Angry Voices_downgraded,Deal [sword]<d6> damage[;] return|dice if used with Fury,1,attack(d); sfxdamage(target|d);,Fury,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,givedice(d);,
Cursed Comments,Deal [sword]<d6> damage[;] return|dice if enemy is cursed,2,attack(d); sfxdamage(target|d);,Megacurse,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,if(getstatus(CURSE) > 0){givedice(d);};,,,
Cursed Comments_upgraded,Deal [sword]<d6> damage[;] duplicate|dice if enemy is cursed,2,attack(d); sfxdamage(target|d);,Megacurse,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,if(getstatus(CURSE) > 0){givedice([d|d]);};,,,
Cursed Comments_downgraded,Deal [sword]<d6> damage[;] return|dice if enemy is cursed,2,attack(d); sfxdamage(target|d);,Megacurse,MAX4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,if(getstatus(CURSE) > 0){givedice(d);};,,,
Little Star,Deal [sword]1 damage|Roll a <d6> next turn,1,attack(1); sfxdamage(target|1); inflictself(~stash~+d); inflictself(~lightstatus~); sfx(~magic_gaindice~); var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total); self.setvar(~doublestashcount~[;]total*2); self.setvar(~triplestashcount~[;]total*3); self.setvar(~quadruplestashcount~[;]total*4);,Slightly Lucky Roll,COUNTDOWN,4,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Little Star_upgraded,Deal [sword]3 damage|Roll a <d6> next turn,1,attack(3); sfxdamage(target|3); inflictself(~stash~+d); inflictself(~lightstatus~); sfx(~magic_gaindice~); var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total); self.setvar(~doublestashcount~[;]total*2); self.setvar(~triplestashcount~[;]total*3); self.setvar(~quadruplestashcount~[;]total*4);,Slightly Lucky Roll,COUNTDOWN,4,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Little Star_downgraded,Roll a <d6> next turn,1,inflictself(~stash~+d); inflictself(~lightstatus~); sfx(~magic_gaindice~); var total = 0; for(x in 1...7){ total = total+ getstatusself(~stash~+x); }; self.setvar(~stashcount~[;]total); self.setvar(~doublestashcount~[;]total*2); self.setvar(~triplestashcount~[;]total*3); self.setvar(~quadruplestashcount~[;]total*4);,Slightly Lucky Roll,COUNTDOWN,4,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Vicious Mockery,Everyone gains [fury] Fury[;]|as well as being [curse] cursed,1,inflict(FURY); inflictself(FURY); inflictself(CURSE); inflict(CURSE); sfx(~_fury~); sfx(~_curse~); sfx(~_fury~|~~|0.2); sfx(~_curse~|~~|0.2);,Megacurse,EVEN,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,inflictself(FURY); inflictself(CURSE); sfx(~_fury~); sfx(~_curse~);
Vicious Mockery_upgraded,Everyone gains [fury] Fury[;]|as well as being [curse] cursed,1,inflict(FURY); inflictself(FURY); inflictself(CURSE); inflict(CURSE); sfx(~_fury~); sfx(~_curse~); sfx(~_fury~|~~|0.2); sfx(~_curse~|~~|0.2);,Megacurse,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,inflictself(FURY); inflictself(CURSE); sfx(~_fury~); sfx(~_curse~);
Vicious Mockery_downgraded,Everyone gains [fury] Fury[;]|but [curse] curse yourself,1,inflict(FURY); inflictself(FURY); inflictself(CURSE); sfx(~_fury~); sfx(~_fury~|~~|0.2); sfx(~_curse~|~~|0.2);,Megacurse,EVEN,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,inflictself(FURY); inflictself(CURSE); sfx(~_fury~); sfx(~_curse~);
Hotwire,Do [sword]<d6> dmg. On jackpot[;]|also has the effect of|a random Jackpot option,1,attack(d); sfxdamage(target|d); if(!simulation && self.usecpuinsteadofdice && self.roll_jackpot > 0){ var s = self.getskillcard(); var r = rand([0|1|2]); var sk = new elements.Skill(s.skills[r].name); sk.execute(self|target); },Stardust,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Hotwire_upgraded,Do [sword]<d6> dmg. On jackpot[;]|also has the effect of|a random Jackpot option,1,attack(d); sfxdamage(target|d); if(!simulation && self.usecpuinsteadofdice && self.roll_jackpot > 0){ var s = self.getskillcard(); var r = rand([0|1|2]); var sk = new elements.Skill(s.skills[r].name); sk.execute(self|target); },Stardust,NORMAL|FREE2,,YELLOW,,,,,0,NO,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Hotwire_downgraded,Do [sword]<d6> dmg. On jackpot[;]|also has the effect of|a random Jackpot option,1,attack(d); sfxdamage(target|d); if(!simulation && self.usecpuinsteadofdice && self.roll_jackpot > 0){ var s = self.getskillcard(); var r = rand([0|1|2]); var sk = new elements.Skill(s.skills[r].name); sk.execute(self|target); },Stardust,MAX3,,YELLOW,,,,,0,NO,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Breakpoints,Increase CPU by <slotdoubles>[;]|hit Jackpot if you'd bust,1,if(!simulation && self.usecpuinsteadofdice){if(self.roll_total + d > self.roll_target){adjustrobotcounter(self.roll_target-self.roll_total);}else{adjustrobotcounter(d);}; sfx(~jackpot_increasecounter~);};,Unlimited Limit,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Breakpoints_upgraded,Increase CPU by <slotdoubles>[;]|hit Jackpot if you'd bust,1,if(!simulation && self.usecpuinsteadofdice){if(self.roll_total + d > self.roll_target){adjustrobotcounter(self.roll_target-self.roll_total);}else{adjustrobotcounter(d);}; sfx(~jackpot_increasecounter~);};,Unlimited Limit,NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Breakpoints_downgraded,Increase CPU by <slotdoubles>,1,if(!simulation && self.usecpuinsteadofdice){adjustrobotcounter(d); sfx(~jackpot_increasecounter~);};,Unlimited Limit,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,excludefromrandomlists|robotonly,,,,,,,,,,,,
Poisonous Plant,A spare 1[;] receive [poison]1|,1,inflictself(POISON); sfx(~_poison~); sfx(~_magic~); ,Goop Gun,SPARE1,,PURPLE,change_power,change_power,,,3,YES,NO,,,,,,,if(e.assigneddice[0] == null){self.createsparedice(e); sfx(~_mana~); e.animate(~flashandshake~);};,,,,,,
Poisonous Plant_upgraded,A spare 1[;] receive [poison]1|,1,inflictself(POISON); sfx(~_poison~); sfx(~_magic~); ,Goop Gun,SPARE1,,PURPLE,,,,,5,YES,NO,,,,,,,if(e.assigneddice[0] == null){self.createsparedice(e); sfx(~_mana~); e.animate(~flashandshake~);};,,,,,,
Poisonous Plant_downgraded,A spare 1[;] receive [poison]1|,1,inflictself(POISON); sfx(~_poison~); sfx(~_magic~); ,Goop Gun,SPARE1,,PURPLE,,,,,2,YES,NO,,,,,,,if(e.assigneddice[0] == null){self.createsparedice(e); sfx(~_mana~); e.animate(~flashandshake~);};,,,,,,
Flexible Tape,Deal [sword]<d6> damage|Combine 2 random dice,2,attack(d); sfxdamage(target|d); var total = 0; var poss = []; for(mydice in self.dicepool){if(mydice.available()){poss.push(mydice);};}; poss = shuffle(poss); if(poss.length > 1){for(x in [0|1]){total+=poss[x].basevalue; poss[x].removedice(self.screenposition());};}; if(total > 0){givedice(total);};,Magic Spanner,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,var total = 0; var poss = []; for(mydice in self.dicepool){if(mydice.available()){poss.push(mydice);};}; poss = shuffle(poss); if(poss.length > 1){for(x in [0|1]){total+=poss[x].basevalue; poss[x].removedice(self.screenposition());};}; if(total > 0){givedice(total);};
Flexible Tape_upgraded,Deal [sword]<d6> damage|Combine 2 random dice,2,attack(d); sfxdamage(target|d); var total = 0; var poss = []; for(mydice in self.dicepool){if(mydice.available()){poss.push(mydice);};}; poss = shuffle(poss); if(poss.length > 1){for(x in [0|1]){total+=poss[x].basevalue; poss[x].removedice(self.screenposition());};}; if(total > 0){givedice(total);};,Magic Spanner,NORMAL|FREE2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,var total = 0; var poss = []; for(mydice in self.dicepool){if(mydice.available()){poss.push(mydice);};}; poss = shuffle(poss); if(poss.length > 1){for(x in [0|1]){total+=poss[x].basevalue; poss[x].removedice(self.screenposition());};}; if(total > 0){givedice(total);};
Flexible Tape_downgraded,Combine 2 random dice,2,var total = 0; var poss = []; for(mydice in self.dicepool){if(mydice.available()){poss.push(mydice);};}; poss = shuffle(poss); if(poss.length > 1){for(x in [0|1]){total+=poss[x].basevalue; poss[x].removedice(self.screenposition());};}; if(total > 0){givedice(total);};,Magic Spanner,NORMAL,,RED,,,,,0,YES,NO,,,,,,,,,,,,,var total = 0; var poss = []; for(mydice in self.dicepool){if(mydice.available()){poss.push(mydice);};}; poss = shuffle(poss); if(poss.length > 1){for(x in [0|1]){total+=poss[x].basevalue; poss[x].removedice(self.screenposition());};}; if(total > 0){givedice(total);};
Tiger's Claw,Deal [sword]<d6> damage[;] inflict|[poison]1 poison and [fire]1 burn,2,attack(d); sfxdamage(target|d); inflict(POISON|1); sfx(~_poison~); inflict(FIRE); sfx(~_fire~);,Goop Gun,MAX4,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Tiger's Claw_upgraded,Deal [sword]<d6> damage[;] inflict|[poison]2 poison and [fire]2 burn,2,attack(d); sfxdamage(target|d); inflict(POISON|2); sfx(~_poison~); inflict(FIRE|2); sfx(~_fire~);,Goop Gun,MAX4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Tiger's Claw_downgraded,Deal [sword]<d6> damage[;] inflict|[poison]1 poison and [fire]1 burn,2,attack(d); sfxdamage(target|d); inflict(POISON|1); sfx(~_poison~); inflict(FIRE); sfx(~_fire~);,Goop Gun,MAX2,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Tiger's Bite,Deal [sword]<d6> damage[;] inflict|[poison]1 poison and [ice]1 freeze,2,attack(d); sfxdamage(target|d); inflict(POISON|1); sfx(~_poison~); inflict(ICE); sfx(~_ice~);,Goop Gun,MAX4,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Tiger's Bite_upgraded,Deal [sword]<d6> damage[;] inflict|[poison]2 poison and [ice]2 freeze,2,attack(d); sfxdamage(target|d); inflict(POISON|2); sfx(~_poison~); inflict(ICE|2); sfx(~_ice~);,Goop Gun,MAX4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Tiger's Bite_downgraded,Deal [sword]<d6> damage[;] inflict|[poison]1 poison and [ice]1 freeze,2,attack(d); sfxdamage(target|d); inflict(POISON|1); sfx(~_poison~); inflict(ICE); sfx(~_ice~);,Goop Gun,MAX2,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Nightmid Charm,Roll 6 twos,2,givedice([2|2|2|2|2|2]);,Ballerina,NORMAL|NORMAL,10,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Nightmid Charm_upgraded,Roll 6 twos,2,givedice([2|2|2|2|2|2]);,Ballerina,NORMAL|NORMAL,5,GREEN,,,,,0,YES,NO,,,,,e.changeslots([~NORMAL~|~NORMAL~]); e.needstotal = 5; e.arrangeslots();,,,,,,,,
Nightmid Charm_downgraded,Roll 6 ones,2,givedice([1|1|1|1|1|1]);,Ballerina,NORMAL|NORMAL,10,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Duobump,Dice value +1|Increase CPU by 1,1,givedice(d+1); adjustrobotcounter(1);,Megabump,ODD,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Duobump_upgraded,Dice value +1|Increase CPU by 1,1,givedice(d+1); adjustrobotcounter(1);,Megabump,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Duobump_downgraded,Dice value +1|Increase CPU by 1,1,givedice(d+1); adjustrobotcounter(1);,Megabump,REQUIRE3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Nuclear Trumpet,Inflict [poison]3 poison|and [weaken]3 weaken,2,inflict(POISON|3); sfx(~_poison~); inflict(WEAKEN|3); sfx(~_weaken~);,Burrower,COUNTDOWN,15,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Nuclear Trumpet_upgraded,Inflict [poison]4 poison|and [weaken]4 weaken,2,inflict(POISON|4); sfx(~_poison~); inflict(WEAKEN|4); sfx(~_weaken~);,Burrower,COUNTDOWN,15,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Nuclear Trumpet_downgraded,Inflict [poison]2 poison|and [weaken]2 weaken,2,inflict(POISON|2); sfx(~_poison~); inflict(WEAKEN|2); sfx(~_weaken~);,Burrower,COUNTDOWN,15,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Can Opener,Split a number of ones from|the higher dice equal to the|lower dice[;] then return both,2,if(simulation){bonus(-10000);}else{var rv = []; var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(b > a){var temp = a; a = b; b = temp;}; for(x in 0...b){a-=1; rv.push(1);}; rv.push(a); rv.push(b); givedice(rv);};,Snake Eyes,MIN4|MAX3,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Can Opener_upgraded,Split a number of ones from|the higher dice equal to the|lower dice[;] then return both,2,if(simulation){bonus(-10000);}else{var rv = []; var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(b > a){var temp = a; a = b; b = temp;}; for(x in 0...b){a-=1; rv.push(1);}; rv.push(a); rv.push(b); givedice(rv);};,Snake Eyes,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Can Opener_downgraded,Split a number of ones from|the higher dice equal to the|lower dice[;] then return both,2,if(simulation){bonus(-10000);}else{var rv = []; var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; if(b > a){var temp = a; a = b; b = temp;}; for(x in 0...b){a-=1; rv.push(1);}; rv.push(a); rv.push(b); givedice(rv);};,Snake Eyes,MIN5|MAX2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Heirloom Blade,Deal [sword]<d6> damage|Even: Recover [heal]1 health|Odd: Gain [shield]1 shield,2,attack(d); sfxdamage(target|d); sfx(~_magic~); if(d % 2 == 0){attackself(-1); sfx(~_heal~|~~|0.2);}else{inflictself(SHIELD|1); sfx(~_shield~|~~|0.2);};,Revitalize,MAX5,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d % 2 == 0){attackself(-1); sfx(~_heal~|~~|0.2);}else{inflictself(SHIELD|1); sfx(~_shield~|~~|0.2);};
Heirloom Blade_upgraded,Deal [sword]<d6> damage|Even: Recover [heal]2 health|Odd: Gain [shield]2 shield,2,attack(d); sfxdamage(target|d); sfx(~_magic~); if(d % 2 == 0){attackself(-2); sfx(~_heal~|~~|0.2);}else{inflictself(SHIELD|2); sfx(~_shield~|~~|0.2);};,Revitalize,MAX5,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,if(d % 2 == 0){attackself(-1); sfx(~_heal~|~~|0.2);}else{inflictself(SHIELD|1); sfx(~_shield~|~~|0.2);};
Heirloom Blade_downgraded,Deal [sword]<d6> damage|Even: Recover [heal]1 health|Odd: Gain [shield]1 shield,2,attack(d); sfxdamage(target|d); sfx(~_magic~); if(d % 2 == 0){attackself(-1); sfx(~_heal~|~~|0.2);}else{inflictself(SHIELD|1); sfx(~_shield~|~~|0.2);};,Revitalize,MAX3,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,if(d % 2 == 0){attackself(-1); sfx(~_heal~|~~|0.2);}else{inflictself(SHIELD|1); sfx(~_shield~|~~|0.2);};
Spork,Deal [sword]<slotdoubles> damage|1-4: Inflict [fire]1 + [shock]1|On 6: Inflict [weaken]1 weaken,2,attack(d); sfxdamage(target|d); sfx(~_magic~); if(d >= 1 && d <= 4){inflict(FIRE); sfx(~_fire~|~~|0.2); inflict(SHOCK); sfx(~_shock~|~~|0.2);}; if(d == 6){inflict(WEAKEN); sfx(~_weaken~|~~|0.2);};,Stardust,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d % 2 == 0){attackself(-1); sfx(~_heal~|~~|0.2);}else{inflictself(SHIELD|1); sfx(~_shield~|~~|0.2);};
Spork_upgraded,Deal [sword]<slotdoubles> damage|Inflict [fire]1 + [shock]1|On even: Inflict [weaken]1 weaken,2,attack(d); sfxdamage(target|d); sfx(~_magic~); inflict(FIRE); sfx(~_fire~|~~|0.2); inflict(SHOCK); sfx(~_shock~|~~|0.2);}; if(d %2 == 0){inflict(WEAKEN); sfx(~_weaken~|~~|0.2);};,Stardust,DOUBLES|DOUBLES,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,if(d % 2 == 0){attackself(-1); sfx(~_heal~|~~|0.2);}else{inflictself(SHIELD|1); sfx(~_shield~|~~|0.2);};
Spork_downgraded,Deal [sword]<slotdoubles> damage,2,attack(d); sfxdamage(target|d); sfx(~_magic~);,Stardust,DOUBLES|DOUBLES,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,if(d % 2 == 0){attackself(-1); sfx(~_heal~|~~|0.2);}else{inflictself(SHIELD|1); sfx(~_shield~|~~|0.2);};
Quantum Sword,Do [sword]<d6>. If an item is in the|same column as this[;] disable|it this turn and do [sword]<double>,1,var destroyer = null; for(eq in self.equipment){if(eq.ready && eq.availablethisturn && eq.column == e.column && eq != e){destroyer = eq;};}; if(destroyer != null){destroyer.animate(~curse~); attack(d*2); sfxdamage(target|d*2); sfx(~_plasma~);}else{attack(d); sfxdamage(target|d);};,Plasma Gun,MAX4,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d % 2 == 0){attackself(-1); sfx(~_heal~|~~|0.2);}else{inflictself(SHIELD|1); sfx(~_shield~|~~|0.2);};
Quantum Sword_upgraded,Do [sword]<d6>. If an item is in the|same column as this[;] disable|it this turn and do [sword]<double>,1,var destroyer = null; for(eq in self.equipment){if(eq.ready && eq.availablethisturn && eq.column == e.column && eq != e){destroyer = eq;};}; if(destroyer != null){destroyer.animate(~curse~); attack(d*2); sfxdamage(target|d*2); sfx(~_plasma~);}else{attack(d); sfxdamage(target|d);};,Plasma Gun,MAX5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,if(d % 2 == 0){attackself(-1); sfx(~_heal~|~~|0.2);}else{inflictself(SHIELD|1); sfx(~_shield~|~~|0.2);};
Quantum Sword_downgraded,Do [sword]<d6>. If an item is in the|same column as this[;] disable|it this turn and do [sword]<double>,1,var destroyer = null; for(eq in self.equipment){if(eq.ready && eq.availablethisturn && eq.column == e.column && eq != e){destroyer = eq;};}; if(destroyer != null){destroyer.animate(~curse~); attack(d*2); sfxdamage(target|d*2); sfx(~_plasma~);}else{attack(d); sfxdamage(target|d);};,Plasma Gun,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,if(d % 2 == 0){attackself(-1); sfx(~_heal~|~~|0.2);}else{inflictself(SHIELD|1); sfx(~_shield~|~~|0.2);};
Really Sharp Needle,Do [sword]1 per turn for 3 turns|,1,inflict(~bleed3~|1); sfxdamage(target|3);,Slick Slash,REQUIRE1,,RED,change_power,change_power,,,5,NO,NO,,,,,,,,,,,,,
Really Sharp Needle_upgraded,Do [sword]1 per turn for 3 turns|,1,inflict(~bleed3~|1); sfxdamage(target|3);,Slick Slash,MAX2,,RED,,,,,5,NO,NO,,,,,,,,,,,,,
Really Sharp Needle_downgraded,Do [sword]1 per turn for 3 turns|,1,inflict(~bleed3~|1); sfxdamage(target|3);,Slick Slash,REQUIRE1,,RED,,,,,2,NO,NO,,,,,,,,,,,,,
Fact Batteries,Reroll this dice[;] then|increase its value by 1,1,givedice(rand([2|3|4|5|6|7]));,Clone Device,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Fact Batteries_upgraded,Reroll this dice[;] then|increase its value by 2,1,givedice(rand([3|4|5|6|7|8]));,Clone Device,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Fact Batteries_downgraded,Reroll this dice[;] then|increase its value by 1,1,givedice(rand([2|3|4|5|6|7]));,Clone Device,MIN4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Knife Making Machine,Do [sword]1 damage[;] <timesused> time(s)|+1 time each use|,2,sfx(~jackpot_increasecounter~);,Double Tap,COUNTDOWN,7,RED,change_power,change_power,,,3,YES,NO,,,,,,,,,,for(x in 0...e.timesused+1){runscript(~morefluff/smalleq~|[e|e.x+e.width/2 - 200|e.y+e.height/2 - 200+x*100|~attack(1); sfxdamage(target|1);~|x*0.1|~RED~]);}; ,,,
Knife Making Machine_upgraded,Do [sword]1 damage[;] <timesused> time(s)|+1 time each use|,2,sfx(~jackpot_increasecounter~);,Double Tap,COUNTDOWN,7,RED,,,,,5,YES,NO,,,,,,,,,,for(x in 0...e.timesused+1){runscript(~morefluff/smalleq~|[e.x+e.width/2 - 200|e.y+e.height/2 - 200+x*100|~attack(1); sfxdamage(target|1);~|x*0.1|~RED~]);};,,,
Knife Making Machine_downgraded,Do [sword]1 damage[;] <timesused> time(s)|+1 time each use,2,sfx(~jackpot_increasecounter~);,Double Tap,COUNTDOWN,7,RED,,,,,0,YES,NO,,,,,,,,,,for(x in 0...e.timesused+1){runscript(~morefluff/smalleq~|[e.x+e.width/2 - 200|e.y+e.height/2 - 200+x*100|~attack(1); sfxdamage(target|1);~|x*0.1|~RED~]);};,,,
Shamethrower,[sword]<d6> damage + [curse]2 curse|[gray](once per battle),1,attack(d); sfxdamage(target|d); inflict(CURSE|2); sfx(~_curse~);,Megacurse,NORMAL|NORMAL,,PURPLE,change_power,change_power,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Shamethrower_upgraded,[sword]<d6> damage + [curse]4 curse|[gray](once per battle),2,attack(d); sfxdamage(target|d); inflict(CURSE|2); sfx(~_curse~);,Megacurse,NORMAL|NORMAL|NORMAL|NORMAL,,PURPLE,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Shamethrower_downgraded,[sword]<d6> damage + [curse]2 curse|[gray](once per battle),1,attack(d); sfxdamage(target|d); inflict(CURSE|2); sfx(~_curse~);,Megacurse,MAX3|MAX3,,PURPLE,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Poisson Slingshot,Deal [sword]7 damage|Inflict [blind]2 blind,1,attack(7); sfxdamage(target|7); inflict(BLIND|2); sfx(~_blind~);,Pea Gun,COUNTDOWN,12,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Poisson Slingshot_upgraded,Deal [sword]10 damage|Inflict [blind]2 blind,1,attack(10); sfxdamage(target|10); inflict(BLIND|2); sfx(~_blind~);,Pea Gun,COUNTDOWN,12,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Poisson Slingshot_downgraded,Deal [sword]4 damage|Inflict [blind]2 blind,1,attack(4); sfxdamage(target|4); inflict(BLIND|2); sfx(~_blind~);,Pea Gun,COUNTDOWN,12,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Random Missile,Do [sword]1-6 damage[;] randomly|(Always offered as scrap),1,attack(4); sfxdamage(target|4); sfx(~_magic~); /* chosen by dice roll - guaranteed to be random */,Plasma Gun,EVEN,,GREY,change_power,change_power,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Random Missile_upgraded,Do [sword]1-6 damage[;] randomly|(Always offered as scrap),1,attack(4); sfxdamage(target|4); sfx(~_magic~); /* chosen by dice roll - guaranteed to be random */,Plasma Gun,NORMAL,,GREY,,,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Random Missile_downgraded,Do [sword]1-4 damage[;] randomly|(Always offered as scrap),1,attack(1); sfxdamage(target|1); sfx(~_magic~); /* chosen by dice roll - guaranteed to be random */,Plasma Gun,EVEN,,GREY,,,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Bagpipes,Inflict [weaken]1 + [curse]1[;] lose [heart]1 hp|,1,inflict(WEAKEN); inflict(CURSE); sfx(~_weaken~); sfx(~_curse~); pierceattackself(1); sfx(~_drain~);,Megacurse,MIN3,,PURPLE,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,
Bagpipes_upgraded,Inflict [weaken]1 + [curse]1[;] lose [heart]1 hp|,1,inflict(WEAKEN); inflict(CURSE); sfx(~_weaken~); sfx(~_curse~); pierceattackself(1); sfx(~_drain~);,Megacurse,NORMAL,,PURPLE,,,,,-1,NO,NO,,,,,,,,,,,,,
Bagpipes_downgraded,Inflict [weaken]1 + [curse]1[;] lose [heart]1 hp|,1,inflict(WEAKEN); inflict(CURSE); sfx(~_weaken~); sfx(~_curse~); pierceattackself(1); sfx(~_drain~);,Megacurse,MIN3,,PURPLE,,,,,2,NO,NO,,,,,,,,,,,,,
Curse Explosion,Deal [sword]3 dmg per curse on|enemy[;] then inflict [curse]1 curse|,2,if(getstatus(CURSE) > 0){attack(getstatus(CURSE) * 3); sfxdamage(getstatus(CURSE) * 3);}; sfx(~_curse~); inflict(CURSE);,Megacurse,REQUIRE6,,PURPLE,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,
Curse Explosion_upgraded,Inflict [curse]1 curse[;] then deal|[sword]3 damage per curse on enemy|,2,inflict(CURSE); if(getstatus(CURSE) > 0){attack(getstatus(CURSE) * 3); sfxdamage(getstatus(CURSE) * 3);}; sfx(~_curse~);,Megacurse,REQUIRE6,,PURPLE,,,,,-1,NO,NO,,,,,,,,,,,,,
Curse Explosion_downgraded,Deal [sword]3 dmg per curse on|enemy[;] then inflict [curse]1 curse|,2,if(getstatus(CURSE) > 0){attack(getstatus(CURSE) * 3); sfxdamage(getstatus(CURSE) * 3);}; sfx(~_curse~); inflict(CURSE);,Megacurse,REQUIRE6|REQUIRE6,,PURPLE,,,,,2,NO,NO,,,,,,,,,,,,,
Fidget Spinner,Next item has +1 use[;]|but [curse] curse yourself|,1,inflictself(REEQUIPNEXT); sfx(~_recycle~); inflictself(CURSE); sfx(~_curse~);,Efficiency,EVEN,,GREEN,change_power,change_power,reequipnext,,-1,YES,NO,,,,,,,,,,,,,
Fidget Spinner_upgraded,Next item has +1 use[;]|but [curse] curse yourself|,1,inflictself(REEQUIPNEXT); sfx(~_recycle~); inflictself(CURSE); sfx(~_curse~);,Efficiency,NORMAL,,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Fidget Spinner_downgraded,Next item has +1 use[;]|but [curse] curse yourself,1,inflictself(REEQUIPNEXT); sfx(~_recycle~); inflictself(CURSE); sfx(~_curse~);,Efficiency,EVEN,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Fidget Spinner?,Keep next dice you use[;]|return this dice[;] curse self|,1,inflictself(REEQUIPNEXT); sfx(~_recycle~); inflictself(CURSE); sfx(~_curse~); givedice(d);,Efficiency,EVEN,,GREEN,change_power,change_power,,,-1,YES,NO,,,,,,,,,,,,,
Fidget Spinner?_upgraded,Keep next dice you use[;]|return this dice[;] curse self|,1,inflictself(REEQUIPNEXT); sfx(~_recycle~); inflictself(CURSE); sfx(~_curse~); givedice(d);,Efficiency,NORMAL,,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Fidget Spinner?_downgraded,Keep next dice you use[;]|return this dice[;] curse self,1,inflictself(REEQUIPNEXT); sfx(~_recycle~); inflictself(CURSE); sfx(~_curse~); givedice(d);,Efficiency,EVEN,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Cheap Antivirus,A random item becomes|immune to errors this turn,1,inflictself(~mf_makeerrorimmune~); sfx(~_magic~);,Megacurse,EVEN,,GREY,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Cheap Antivirus_upgraded,2 random items become|immune to errors this turn,1,inflictself(~mf_makeerrorimmune~|2); sfx(~_magic~);,Megacurse,EVEN,,GREY,,,,,0,YES,NO,,,,,,,,,,,,,
Cheap Antivirus_downgraded,A random item becomes|immune to errors this turn,1,inflictself(~mf_makeerrorimmune~); sfx(~_magic~);,Megacurse,REQUIRE6,,GREY,,,,,0,YES,NO,,,,,,,,,,,,,
Buster's Sword,[sword]<d6> dmg. On 1[;] instead|deal [fire]4 dmg + [fire]1 burn,2,if(d == 1){attack(FIRE|4); sfxdamage(target|4); inflict(FIRE); sfx(~_fire~);}else{attack(d); sfxdamage(target|d);};,Blowtorch,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Buster's Sword_upgraded,[sword]<d6> dmg. On 1[;] instead|deal [fire]6 dmg + [fire]1 burn,2,if(d == 1){attack(FIRE|6); sfxdamage(target|6); inflict(FIRE); sfx(~_fire~);}else{attack(d); sfxdamage(target|d);};,Blowtorch,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Buster's Sword_downgraded,[sword]<d6> dmg. On 6[;] instead|deal [fire]4 dmg + [fire]1 burn,2,if(d == 6){attack(4); sfxdamage(target|4);}else{attack(d); sfxdamage(target|d);};,Blowtorch,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Scrap Cannon,Deal [sword]10 damage|(Always offered as scrap),1,attack(10); sfxdamage(target|10); sfx(~_plasma~);,Plasma Gun,COUNTDOWN,20,GREY,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Scrap Cannon_upgraded,Deal [sword]20 damage|(Always offered as scrap),1,attack(20); sfxdamage(target|20); sfx(~_plasma~);,Plasma Gun,COUNTDOWN,20,GREY,,,,,0,NO,NO,,,,,,,,,,,,,
Scrap Cannon_downgraded,Deal [sword]5 damage|(Always offered as scrap),1,attack(5); sfxdamage(target|5); sfx(~_plasma~);,Plasma Gun,COUNTDOWN,20,GREY,,,,,0,NO,NO,,,,,,,,,,,,,
Enthusiastic Exit,Do [sword]1. If this is the final|blow[;] gain +[star]1 XP.,1,attack(1); sfxdamage(target|1); if(!simulation){if(target.hp <= 0 && !target.isplayer){target.level+=1; sfx(~jackpot_autoroll~|~~|3);};}; /* intended delay - makes it play during the XP screen */,Unlimited Limit,DOUBLES|DOUBLES,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Enthusiastic Exit_upgraded,Do [sword]1. If this is the final|blow[;] gain +[star]1 XP.,1,attack(1); sfxdamage(target|1); if(!simulation){if(target.hp <= 0 && !target.isplayer){target.level+=1; sfx(~jackpot_autoroll~|~~|3);};}; /* intended delay - makes it play during the XP screen */,Unlimited Limit,NORMAL|NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Enthusiastic Exit_downgraded,Do [sword]1. If this is the final|blow[;] gain +[star]1 XP.,1,attack(1); sfxdamage(target|1); if(!simulation){if(target.hp <= 0 && !target.isplayer){target.level+=1; sfx(~jackpot_autoroll~|~~|3);};}; /* intended delay - makes it play during the XP screen */,Unlimited Limit,REQUIRE6|REQUIRE6,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Thorny Nail,Deal [sword]<d6> damage|Gain [thorns]1 thorns,1,attack(d); sfxdamage(target|d); inflictself(THORNS); sfx(~_thorns~);,Pinprick,MAX3,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(THORNS); sfx(~_thorns~);
Thorny Nail_upgraded,Deal [sword]<d6> damage|Gain [thorns]1 thorns,1,attack(d); sfxdamage(target|d); inflictself(THORNS); sfx(~_thorns~);,Pinprick,MAX5,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(THORNS); sfx(~_thorns~);
Thorny Nail_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target|d); ,Pinprick,MAX3,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Bolt Cutters,Roll a 4 and a 2|,1,givedice([4|2]);,Clone Device,REQUIRE6,,GREEN,change_power,change_power,,,3,NO,NO,,,,,,,,,,,,,
Bolt Cutters_upgraded,Roll a 4 and a 2|,1,givedice([4|2]);,Clone Device,REQUIRE6,,GREEN,,,,,6,NO,NO,,,,,,,,,,,,,
Bolt Cutters_downgraded,Roll a 4 and a 2,1,givedice([4|2]);,Clone Device,REQUIRE6,,GREEN,,,,,2,NO,NO,,,,,,,,,,,,,
Unlimited Power,Your limit break|triggers twice,1,,Unlimited Limit,,,PINK,change_power,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,if(onlimit && self.isplayer){var s = new elements.Skill(self.limitbreak.name); s.execute(self|target); e.animate(~flashandshake~|0.2);};,,,,,,
Unlimited Power_upgraded,Your limit break triggers|twice[;] and gains [confuse]3|charge after being used,1,,Unlimited Limit,,,PINK,,,,,0,YES,NO,excludefromrandomlists,,,,,,if(onlimit && self.isplayer){var s = new elements.Skill(self.limitbreak.name); s.execute(self|target); e.animate(~flashandshake~|0.2); self.limitvalue+=3; if(self.limitvalue > self.limitmax){self.limitvalue = self.limitmax; sfx(~_mana~|~~|0.2);};};,,,,,,
Unlimited Power_downgraded,No effect,1,,Unlimited Limit,,,PINK,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Backup Gun,Do [sword]<d6> damage. On 3[;]|scrap this immediately,1,attack(d); sfxdamage(target|d); if(simulation){if(d == 3){bonus(-100000);};}else{if(d == 3){e.usedthisbattle = true; e.ready = false; Gadget.givegadget(self|e.gadget|true); self.equipment.remove(e);};};,Pea Gun,MAX3,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Backup Gun_upgraded,Do [sword]<d6> damage. On 5[;]|scrap this immediately|(Gadget upgraded!),1,attack(d); sfxdamage(target|d); if(simulation){if(d == 5){bonus(-100000);};}else{if(d == 5){e.usedthisbattle = true; e.ready = false; Gadget.givegadget(self|e.gadget|true); self.equipment.remove(e);};};,Plasma Gun,MAX5,,RED,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Backup Gun_downgraded,Do [sword]<d6> damage. On 3[;]|scrap this immediately[;]|but get a broken gadget,1,attack(d); sfxdamage(target|d); if(simulation){if(d == 3){bonus(-100000);};}else{if(d == 3){e.usedthisbattle = true; e.ready = false; Gadget.givegadget(self|e.gadget|true); self.equipment.remove(e);};};,Broken Gadget,MAX3,,RED,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Absolute Disaster,Inflict [curse]1 curse[;] [shock]1|shock[;] and [weaken]1 weaken,1,inflict(CURSE); inflict(SHOCK); inflict(WEAKEN); sfx(~_curse~); sfx(~_weaken~); sfx(~_shock~);,Megacurse,COUNTDOWN,16,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Absolute Disaster_upgraded,Inflict [curse]1 curse[;] [shock]1|shock[;] and [weaken]1 weaken,1,inflict(CURSE|2); inflict(SHOCK|2); inflict(WEAKEN|2); sfx(~_curse~); sfx(~_weaken~); sfx(~_shock~);,Megacurse,COUNTDOWN,16,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Absolute Disaster_downgraded,Inflict [curse]1 curse[;] [shock]1|shock[;] or [weaken]1 weaken,1,var r = rand([0|1|2]); if(r == 0){inflict(CURSE); sfx(~_curse~);}else if(r == 1){inflict(SHOCK); sfx(~_shock~);}else{inflict(WEAKEN); sfx(~_weaken~);};,Megacurse,COUNTDOWN,16,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Join the Club,If these dice values spell out|enemy's health[;] do [sword]<triple>.|Otherwise[;] deal [sword]<d6> damage,2,var targethealth = actualdice[0].basevalue * 10 + actualdice[1].basevalue; if(target.hp == targethealth){attack(d*3); sfxdamage(target|d*3);}else{attack(d); sfxdamage(target|d); self.textparticle(~Dice spelled ~+targethealth);};,Plasma Gun,MAX4|MAX4,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Join the Club_upgraded,If these dice values spell out|enemy's health[;] do [sword]<triple>.|Otherwise[;] deal [sword]<d6> damage,2,var targethealth = actualdice[0].basevalue * 10 + actualdice[1].basevalue; if(target.hp == targethealth){attack(d*3); sfxdamage(target|d*3);}else{attack(d); sfxdamage(target|d); self.textparticle(~Dice spelled ~+targethealth);};,Plasma Gun,NORMAL|NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Join the Club_downgraded,If these dice values spell out|enemy's health[;] do [sword]<double>.|Otherwise[;] deal [sword]<d6> damage,2,var targethealth = actualdice[0].basevalue * 10 + actualdice[1].basevalue; if(target.hp == targethealth){attack(d*2); sfxdamage(target|d*2);}else{attack(d); sfxdamage(target|d); self.textparticle(~Dice spelled ~+targethealth);};,Plasma Gun,MAX4|MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Serpentine Staff,Deal [sword]6 damage|Roll two ones,2,attack(6); sfxdamage(target|6); sfx(~_magic~); givedice([1|1]);,Unlucky Roll,COUNTDOWN,8,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice([1|1]);
Serpentine Staff_upgraded,Deal [sword]8 damage|Roll two ones,2,attack(8); sfxdamage(target|8); sfx(~_magic~); givedice([1|1]);,Unlucky Roll,COUNTDOWN,8,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,givedice([1|1]);
Serpentine Staff_downgraded,Deal [sword]3 damage|Roll two ones,2,attack(3); sfxdamage(target|3); sfx(~_magic~); givedice([1|1]);,Unlucky Roll,COUNTDOWN,8,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,givedice([1|1]);
Time Suck,Drain [heart]<d6> health|in [jinx]<d6> turns,1,jinx(~Time Suck~[;]~drain [heart]%VAR% health~[;]~Drain [heart]%VAR% health~[;]~drain(%VAR%); sfx(\~_drain\~);~[;]target[;]self[;]d[;]d); sfx(~_thinghappens~);,Whacksies,MAX4,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Time Suck_upgraded,Drain [heart]<d6> health|in [jinx]<d6> turns,1,jinx(~Time Suck~[;]~drain [heart]%VAR% health~[;]~Drain [heart]%VAR% health~[;]~drain(%VAR%); sfx(\~_drain\~);~[;]target[;]self[;]d[;]d); sfx(~_thinghappens~);,Whacksies,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Time Suck_downgraded,Drain [heart]<d6> health|in [jinx]<d6> turns,1,jinx(~Time Suck~[;]~drain [heart]%VAR% health~[;]~Drain [heart]%VAR% health~[;]~drain(%VAR%); sfx(\~_drain\~);~[;]target[;]self[;]d[;]d); sfx(~_thinghappens~);,Whacksies,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Gradient Descent,Return both dice[;] and the|difference between them,1,if(simulation){bonus(100);}else{var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; var diff = x-y; if(diff < 0){diff = -1 * diff;}; if(diff == 0){givedice([x|y]);}else{ givedice([x|y|diff]);};,Clone Device,EVEN|ODD,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Gradient Descent_upgraded,Return both dice[;] and the|difference between them,1,if(simulation){bonus(100);}else{var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; var diff = x-y; if(diff < 0){diff = -1 * diff;}; if(diff == 0){givedice([x|y]);}else{ givedice([x|y|diff]);};,Clone Device,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Gradient Descent_downgraded,Return both dice[;] and the|difference between them,1,if(simulation){bonus(100);}else{var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; var diff = x-y; if(diff < 0){diff = -1 * diff;}; if(diff == 0){givedice([x|y]);}else{ givedice([x|y|diff]);};,Clone Device,REQUIRE4|REQUIRE3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Burning Memory,Burn [fire]2 dice[;] and|[fire]1 more in 2 turns,1,inflict(FIRE|2); sfx(~_fire~); jinx(~Burning Memory~[;]~receive [fire]%VAR% burn~[;]~Receive [fire]%VAR% burn~[;]~inflict(FIRE[;]%VAR%); sfx(\~_fire\~);~[;]target[;]target[;]2[;]1);,Whacksies,COUNTDOWN,5,RED,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Burning Memory_upgraded,Burn [fire]3 dice[;] and|[fire]2 more in 2 turns,1,inflict(FIRE|3); sfx(~_fire~); jinx(~Burning Memory~[;]~receive [fire]%VAR% burn~[;]~Receive [fire]%VAR% burn~[;]~inflict(FIRE[;]%VAR%); sfx(\~_fire\~);~[;]target[;]target[;]2[;]2);,Whacksies,COUNTDOWN,5,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Burning Memory_downgraded,Burn [fire]1 dice[;] and|[fire]1 more in 2 turns,1,inflict(FIRE); sfx(~_fire~); jinx(~Burning Memory~[;]~receive [fire]%VAR% burn~[;]~Receive [fire]%VAR% burn~[;]~inflict(FIRE[;]%VAR%); sfx(\~_fire\~);~[;]target[;]target[;]2[;]1);,Whacksies,COUNTDOWN,5,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Chilling Effect,Inflict [ice]2 freeze[;] and|[ice]1 more in 2 turns,1,inflict(ICE|2); sfx(~_ice~); jinx(~Chilling Effect~[;]~receive [ice]%VAR% freeze~[;]~Receive [ice]%VAR% freeze~[;]~inflict(ICE[;]%VAR%); sfx(\~_ice\~);~[;]target[;]target[;]2[;]1);,Whacksies,COUNTDOWN,5,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Chilling Effect_upgraded,Inflict [ice]3 freeze[;] and|[ice]2 more in 2 turns,1,inflict(ICE|3); sfx(~_ice~); jinx(~Chilling Effect~[;]~receive [ice]%VAR% freeze~[;]~Receive [ice]%VAR% freeze~[;]~inflict(ICE[;]%VAR%); sfx(\~_ice\~);~[;]target[;]target[;]2[;]2);,Whacksies,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Chilling Effect_downgraded,Inflict [ice]1 freeze[;] and|[ice]1 more in 2 turns,1,inflict(ICE); sfx(~_ice~); jinx(~Chilling Effect~[;]~receive [ice]%VAR% freeze~[;]~Receive [ice]%VAR% freeze~[;]~inflict(ICE[;]%VAR%); sfx(\~_ice\~);~[;]target[;]target[;]2[;]1);,Whacksies,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Scrappy Charm,Roll a 1|(Always offered as scrap),1,givedice(1);,Unlucky Roll,COUNTDOWN,4,GRAY,change_power,change_power,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scrappy Charm_upgraded,Roll four 1s|(Always offered as scrap),1,givedice([1|1|1|1]);,Unlucky Roll,COUNTDOWN,4,GRAY,,,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Scrappy Charm_downgraded,No effect|(Always offered as scrap),1,sfx(~_silence~);,Unlucky Roll,COUNTDOWN,4,GRAY,,,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Faildent,Inflict [ice] freeze + [shock] shock|(Always offered as scrap),1,inflict(ICE); sfx(~_ice~); inflict(SHOCK); sfx(~_shock~);,Stardust,MAX4|MAX4,,GRAY,change_power,change_power,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Faildent_upgraded,Inflict [ice] freeze + [shock] shock|(Always offered as scrap),1,inflict(ICE); sfx(~_ice~); inflict(SHOCK); sfx(~_shock~);,Stardust,MAX4,,GRAY,,,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Faildent_downgraded,Inflict [ice] freeze + [shock] shock|(Always offered as scrap),1,inflict(ICE); sfx(~_ice~); inflict(SHOCK); sfx(~_shock~);,Stardust,REQUIRE4|REQUIRE4,,GRAY,,,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Pitchbroke,Inflict [fire] burn + [shock] shock|(Always offered as scrap),1,inflict(FIRE); sfx(~_fire~); inflict(SHOCK); sfx(~_shock~);,Stardust,MAX4|MAX4,,GRAY,change_power,change_power,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Pitchbroke_upgraded,Inflict [fire] burn + [shock] shock|(Always offered as scrap),1,inflict(FIRE); sfx(~_fire~); inflict(SHOCK); sfx(~_shock~);,Stardust,MAX4,,GRAY,,,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Pitchbroke_downgraded,Inflict [fire] burn + [shock] shock|(Always offered as scrap),1,inflict(FIRE); sfx(~_fire~); inflict(SHOCK); sfx(~_shock~);,Stardust,REQUIRE4|REQUIRE4,,GRAY,,,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Triangle of Perseverance,Gain [shield]<triple> shield[;] only|available every third turn,1,inflictself(SHIELD|d*3); sfx(~_shield~);,Barricade,MAX3,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,if(turn % 3 != 0){e.availablethisturn = false; e.unavailabletext = ~Triangle of Perseverance~; var turndets = 3-(turn%3); if(turndets == 1){turndets = turndets + ~ turn~;}else{turndets = turndets+~ turns~;}; e.unavailabledetails = [~Available in ~+turndets];};,,,,,,,,
Triangle of Perseverance_upgraded,Gain [shield]<triple> shield[;] only|available every third turn,1,inflictself(SHIELD|d*3); sfx(~_shield~);,Barricade,MAX5,,ORANGE,,,,,0,YES,NO,,,,,if(turn % 3 != 0){e.availablethisturn = false; e.unavailabletext = ~Triangle of Perseverance~; var turndets = 3-(turn%3); if(turndets == 1){turndets = turndets + ~ turn~;}else{turndets = turndets+~ turns~;}; e.unavailabledetails = [~Available in ~+turndets];};,,,,,,,,
Triangle of Perseverance_downgraded,Gain [shield]<triple> shield[;] only|available every third turn,1,inflictself(SHIELD|d*3); sfx(~_shield~);,Barricade,MAX2,,ORANGE,,,,,0,YES,NO,,,,,if(turn % 3 != 0){e.availablethisturn = false; e.unavailabletext = ~Triangle of Perseverance~; var turndets = 3-(turn%3); if(turndets == 1){turndets = turndets + ~ turn~;}else{turndets = turndets+~ turns~;}; e.unavailabledetails = [~Available in ~+turndets];};,,,,,,,,
Disassociate,Recover [heal]3 health[;] reroll|your non-duplicate dice,1,attackself(-3); sfx(~_heal~); if(!simulation){var founds = []; var c = 0; for(mydice in self.dicepool){if(mydice.available()){if(founds.indexOf(mydice.basevalue) == -1){founds.push(mydice.basevalue);}else{var poss = [1|2|3|4|5|6]; poss.remove(mydice.basevalue); mydice.animatereroll(rand(poss)|self.screenposition()|c); c+=0.05;};};};};,Revitalize,COUNTDOWN,6,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Disassociate_upgraded,Recover [heal]5 health[;] reroll|your non-duplicate dice,1,attackself(-5); sfx(~_heal~); if(!simulation){var founds = []; var c = 0; for(mydice in self.dicepool){if(mydice.available()){if(founds.indexOf(mydice.basevalue) == -1){founds.push(mydice.basevalue);}else{var poss = [1|2|3|4|5|6]; poss.remove(mydice.basevalue); mydice.animatereroll(rand(poss)|self.screenposition()|c); c+=0.05;};};};};,Revitalize,COUNTDOWN,6,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Disassociate_downgraded,Recover [heal]1 health[;] reroll|your non-duplicate dice,1,attackself(-1); sfx(~_heal~); if(!simulation){var founds = []; var c = 0; for(mydice in self.dicepool){if(mydice.available()){if(founds.indexOf(mydice.basevalue) == -1){founds.push(mydice.basevalue);}else{var poss = [1|2|3|4|5|6]; poss.remove(mydice.basevalue); mydice.animatereroll(rand(poss)|self.screenposition()|c); c+=0.05;};};};};,Revitalize,COUNTDOWN,6,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Charging Hammer,Deal [shock]<d6> damage. On 6[;]|make the enemy weak|to [shock]shock damage,2,attack(d|SHOCK); sfx(~_shock~); sfxdamage(target|d); if(simulation){if(d == 6){bonus(100);};}else if(d == 6){if(target.innate.indexOf(~strongshock~) != -1){target.innate.remove(~strongshock~);}else if(target.innate.indexOf(~weakshock~) == -1){target.addinnate(~weakshock~);} sfx(~_magic~|~~|0.2);};,Static Shock,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Charging Hammer_upgraded,Deal [shock]<d6> damage. On 6[;]|make the enemy weak|to [shock]shock damage first,2,if(simulation){if(d == 6){bonus(100);};}else if(d == 6){if(target.innate.indexOf(~strongshock~) != -1){target.innate.remove(~strongshock~);}else if(target.innate.indexOf(~weakshock~) == -1){target.addinnate(~weakshock~);} sfx(~_magic~|~~|0.2);}; attack(d|SHOCK); sfx(~_shock~); sfxdamage(target|d); ,Static Shock,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Charging Hammer_downgraded,Deal [shock]<d6> damage,2,attack(d|SHOCK); sfx(~_shock~); sfxdamage(target|d);,Static Shock,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Lifesteel,For the rest of this battle[;]|attacks give you +[shield]1 shield,2,inflictself(~mf_lifesteel~); sfx(~_shield~); sfx(~_magic~);,Barricade,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Lifesteel_upgraded,For the rest of this battle[;]|attacks give you +[shield]1 shield,2,inflictself(~mf_lifesteel~); sfx(~_shield~); sfx(~_magic~);,Barricade,NORMAL|NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Lifesteel_downgraded,For the rest of this battle[;]|attacks give you +[shield]1 shield,2,inflictself(~mf_lifesteel~); sfx(~_shield~); sfx(~_magic~);,Barricade,REQUIRE4|REQUIRE4,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Barbed Spear,[sword]<double> + 2x random status|[grey](once per battle),1,attack(d*2); sfxdamage(target|d*2); sfx(~_magic~); var randstatus = rand([CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus|2); sfx(~_~ + randstatus.toLowerCase()|~~|0.3);,Stardust,REQUIRE6,,RED,change_power,change_power,,,0,NO,YES,,,,,,,,,,,,,
Barbed Spear_upgraded,[sword]<double> + 2x random status|[grey](once per battle),1,attack(d*2); sfxdamage(target|d*2); sfx(~_magic~); var randstatus = rand([CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus|2); sfx(~_~ + randstatus.toLowerCase()|~~|0.3);,Stardust,NORMAL,,RED,,,,,0,NO,YES,,,,,,,,,,,,,
Barbed Spear_downgraded,[sword]<d6> + 2x random status|[grey](once per battle),1,attack(d); sfxdamage(target|d); sfx(~_magic~); var randstatus = rand([CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); inflict(randstatus|2); sfx(~_~ + randstatus.toLowerCase()|~~|0.3);,Stardust,REQUIRE6,,RED,,,,,0,NO,YES,,,,,,,,,,,,,
Jonx,clunkx,1,jinx(~Nothing~[;]~do nothing~[;]~Do nothing~[;]~donothing()~[;]self[;]self[;]d[;]d); for(st in self.status){if(st.name == ~Nothing~){st.updatedescription(); st.jinxtooltipdescription = ~~; st.description=[~~]; trace(st.symbol); st.symbol = ~heart~; st.scriptendturn = ~drain(1); sfx(\~_drain\~); if(status.value == 1){status.remove_at_endturn = true;}~;};}; sfx(~_thinghappens~); attackself(d);,Stardust,NORMAL,,RED,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Mode Shift,This turn[;] your attacks shield|you instead of doing damage|[grey](once per battle),2,inflictself(~mf_damagetoshield~); sfx(~_magic~); sfx(~_shield~);,Stardust,COUNTDOWN,9,ORANGE,change_power,change_power,,,0,YES,YES,,,,,,,,,,,,,
Mode Shift_upgraded,This turn[;] your attacks shield|you instead of doing damage,2,inflictself(~mf_damagetoshield~); sfx(~_magic~); sfx(~_shield~);,Stardust,COUNTDOWN,9,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Mode Shift_downgraded,No effect,2,sfx(~_silence~);,Stardust,COUNTDOWN,9,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Shrinkify,Halve the dice value|,1,if(d > 1){givedice((d+1)/2);};,Megabump,MIN2,,GREEN,change_power,change_power,,,2,YES,NO,,,,,,,,,,,,,
Shrinkify_upgraded,Halve the dice value|,1,if(d > 1){givedice((d+1)/2);};,Megabump,MIN2,,GREEN,,,,,-1,YES,NO,,,,,,,,,,,,,
Shrinkify_downgraded,Halve the dice value|,1,if(d > 1){givedice((d+1)/2);};,Megabump,MIN4,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Scrap Nudge,Dice value -1|(Always offered as scrap),1,if(d < 2){givedice(6);}else{givedice(d-1);};,Megabump,REQUIRE1,,GREY,change_power,change_power,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Nudge_upgraded,Dice value -1|(Always offered as scrap),1,if(d < 2){givedice(6);}else{givedice(d-1);};,Megabump,NORMAL,,GREY,,,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Scrap Nudge_downgraded,Return the dice|(Always offered as scrap),1,givedice(d);,Megabump,REQUIRE1,,GREY,,,,,0,NO,NO,appearsforparts,,,,,,,,,,,,
Clamp,Get 3 copies of|the median valued dice,1,if(simulation){bonus(50);}else{var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; var c = actualdice[2].basevalue; if((a < b && b < c) # (c < b && c < a)){ givedice([b|b|b]); }else if((b < a && a < c) # (c < a && a < b)){ givedice([a|a|a]); }else{givedice([c|c|c]);};};,Clone Device,NORMAL|NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Clamp_upgraded,Get 3 copies of|the median valued dice|,1,if(simulation){bonus(50);}else{var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; var c = actualdice[2].basevalue; if((a < b && b < c) # (c < b && c < a)){ givedice([b|b|b]); }else if((b < a && a < c) # (c < a && a < b)){ givedice([a|a|a]); }else{givedice([c|c|c]);};};,Clone Device,NORMAL|NORMAL|NORMAL,,GREEN,,,,,3,YES,NO,,,,,,,,,,,,,
Clamp_downgraded,Get 3 copies of|the median valued dice,1,if(simulation){bonus(50);}else{var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; var c = actualdice[2].basevalue; if((a < b && b < c) # (c < b && c < a)){ givedice([b|b|b]); }else if((b < a && a < c) # (c < a && a < b)){ givedice([a|a|a]); }else{givedice([c|c|c]);};};,Clone Device,MAX3|MAX3|MAX3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Angry Form,At the start of each turn|this fight[;] gain [fury] Fury,2,inflictself(~mf_furyeachturn~); sfx(~_fury~);,Fury,REQUIRE6|REQUIRE6|REQUIRE6,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Angry Form_upgraded,At the start of each turn|this fight[;] gain [fury] Fury,2,inflictself(~mf_furyeachturn~); sfx(~_fury~);,Fury,REQUIRE6|REQUIRE6,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Angry Form_downgraded,At the start of each turn|this fight[;] gain [fury] Fury,2,inflictself(~mf_furyeachturn~); sfx(~_fury~);,Fury,REQUIRE6|REQUIRE6|REQUIRE6|REQUIRE6,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Void Form,[]-2 dice this fight[;] but get|+1 dice this fight each turn,1,self.extradice-=2; sfx(~magic_gaindice~); inflictself(~mf_voidform~);,Infinity Mirror,COUNTDOWN,12,PURPLE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Void Form_upgraded,[]-1 dice this fight[;] but get|+1 dice this fight each turn,1,self.extradice-=1; sfx(~magic_gaindice~); inflictself(~mf_voidform~);,Infinity Mirror,COUNTDOWN,12,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Void Form_downgraded,[]-4 dice this fight[;] but get|+1 dice this fight each turn,1,self.extradice-=4; sfx(~magic_gaindice~); inflictself(~mf_voidform~);,Infinity Mirror,COUNTDOWN,12,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Loud Form,Gain [dodge]3 dodge that isn't|removed after your turn[;]|but lose 1 dice this fight,2,self.extradice-=1; inflictself(DODGE|3); sfx(~_dodge~); for(st in self.status){if(st.type == DODGE){st.remove_at_endturn = false;};};,Quick Thinking,EVEN|ODD,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Loud Form_upgraded,Gain [dodge]3 dodge that isn't|removed after your turn[;]|but lose 1 dice this fight,2,self.extradice-=1; inflictself(DODGE|3); sfx(~_dodge~); for(st in self.status){if(st.type == DODGE){st.remove_at_endturn = false;};};,Quick Thinking,NORMAL|NORMAL,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Loud Form_downgraded,Gain [dodge]1 dodge that isn't|removed after your turn[;]|but lose 1 dice this fight,2,self.extradice-=1; inflictself(DODGE); sfx(~_dodge~); for(st in self.status){if(st.type == DODGE){st.remove_at_endturn = false;};};,Quick Thinking,EVEN|ODD,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Infinite Form,Do [sword]1 at the start of your|turn[;] doubling each turn,1,inflictself(~mf_damagedoublething~); sfx(~_magic~);,Time Stop,DOUBLES|DOUBLES,,PINK,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Infinite Form_upgraded,Do [sword]1 at the start of your|turn[;] doubling each turn,1,inflictself(~mf_damagedoublething~); sfx(~_magic~);,Time Stop,NORMAL|NORMAL,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Infinite Form_downgraded,Do [sword]1 at the start of your|turn[;] doubling each turn,1,inflictself(~mf_damagedoublething~); sfx(~_magic~);,Time Stop,REQUIRE6|REQUIRE6,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Malice Cannon,Receive [curse]1 curse[;] then deal|[sword]6 dmg per curse you have,1,inflictself(CURSE); if(getstatusself(CURSE) > 0){attack(getstatusself(CURSE) * 6); sfxdamage(getstatusself(CURSE) * 6);}; sfx(~_curse~); ,Megacurse,EVEN,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Malice Cannon_upgraded,Receive [curse]1 curse[;] then deal|[sword]6 dmg per curse you have|Immune to curse,1,inflictself(CURSE); if(getstatusself(CURSE) > 0){attack(getstatusself(CURSE) * 6); sfxdamage(getstatusself(CURSE) * 6);}; sfx(~_curse~); ,Megacurse,EVEN,,PURPLE,,,,,0,NO,NO,ignorecurse,,,,,,,,,,,,
Malice Cannon_downgraded,Receive [curse]1 curse[;] then deal|[sword]3 dmg per curse you have,1,inflictself(CURSE); if(getstatusself(CURSE) > 0){attack(getstatusself(CURSE) * 3); sfxdamage(getstatusself(CURSE) * 3);}; sfx(~_curse~); ,Megacurse,EVEN,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Infuriate,Gain Fury. At the start of|combat[;] receive [curse]3 curse|(Keep [curse] between turns),1,inflictself(FURY); sfx(~_fury~);,Fury,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,,0,YES,NO,,,inflictself(CURSE|3); inflictself(~mf_maintaincurse~);,,,if(turn == 1){e.animate(~flashandshake~); sfx(~_curse~);};,,,,,,,
Infuriate_upgraded,Gain Fury. At the start of|combat[;] receive [curse]3 curse|(Keep [curse] between turns),1,inflictself(FURY); sfx(~_fury~);,Fury,NORMAL|NORMAL,,PURPLE,,,,,0,YES,NO,,,inflictself(CURSE|3); inflictself(~mf_maintaincurse~);,,,if(turn == 1){e.animate(~flashandshake~); sfx(~_curse~);};,,,,,,,
Infuriate_downgraded,Gain Fury. At the start of|combat[;] receive [curse]3 curse|(Keep [curse] between turns),1,inflictself(FURY); sfx(~_fury~);,Fury,REQUIRE4|REQUIRE4,,PURPLE,,,,,0,YES,NO,,,inflictself(CURSE|3); inflictself(~mf_maintaincurse~);,,,if(turn == 1){e.animate(~flashandshake~); sfx(~_curse~);};,,,,,,,
Buffer Overflow,[sword]1. Return all dice used on|this if you Jackpot this turn|,2,attack(1); sfxdamage(target|1); sfx(~_magic~);,Megacurse,NORMAL,,PURPLE,change_power,change_power,,,-1,NO,NO,robotonly|excludefromrandomlists,,,,self.setvar(~buffer_dicelist~|[]); e.setvar(~jackpot~[;]0); e.changecolour(~PURPLE~);,,if (e.availablethisturn && e.ready && e.shockedsetting == 0 && self.roll_jackpot > 0 && e.getvar(~jackpot~) == 0) { e.setvar(~jackpot~[;]1); e.changecolour(~YELLOW~); givedice(self.getvar(~buffer_dicelist~)); };,,,var v = self.getvar(~dicelist~); v.push(d); self.setvar(~dicelist~|v);,,,
Buffer Overflow_upgraded,[sword]2. Return all dice used on|this if you Jackpot this turn|,2,attack(2); sfxdamage(target|2); sfx(~_magic~);,Megacurse,NORMAL,,PURPLE,,,,,-1,NO,NO,robotonly|excludefromrandomlists,,,,self.setvar(~buffer_dicelist~|[]); e.setvar(~jackpot~[;]0); e.changecolour(~PURPLE~);,,if (e.availablethisturn && e.ready && e.shockedsetting == 0 && self.roll_jackpot > 0 && e.getvar(~jackpot~) == 0) { e.setvar(~jackpot~[;]1); e.changecolour(~YELLOW~); givedice(self.getvar(~buffer_dicelist~)); };,,,var v = self.getvar(~dicelist~); v.push(d); self.setvar(~dicelist~|v);,,,
Buffer Overflow_downgraded,[sword]1. Return all dice used on|this if you Jackpot this turn|,2,attack(1); sfxdamage(target|1); sfx(~_magic~);,Megacurse,EVEN,,PURPLE,,,,,-1,NO,NO,robotonly|excludefromrandomlists,,,,self.setvar(~buffer_dicelist~|[]); e.setvar(~jackpot~[;]0); e.changecolour(~PURPLE~);,,if (e.availablethisturn && e.ready && e.shockedsetting == 0 && self.roll_jackpot > 0 && e.getvar(~jackpot~) == 0) { e.setvar(~jackpot~[;]1); e.changecolour(~YELLOW~); givedice(self.getvar(~buffer_dicelist~)); };,,,var v = self.getvar(~dicelist~); v.push(d); self.setvar(~dicelist~|v);,,,
Blueberry,Recover [heal]4 health[;] double|your other dice values,1,attackself(-4); sfx(~_heal~); var rd = []; var c = 0; for(mydice in self.dicepool){if(mydice.available()){if(mydice.basevalue > 3){mydice.animatereroll(6|self.screenposition()|c); rd.push(mydice.basevalue*2 - 6);}else{mydice.animatereroll(mydice.basevalue*2|self.screenposition()|c);}; c+=0.05;};}; givedice(rd);,Clone Device,COUNTDOWN,16,PURPLE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Blueberry_upgraded,Recover [heal]7 health[;] double|your other dice values,1,attackself(-7); sfx(~_heal~); var rd = []; var c = 0; for(mydice in self.dicepool){if(mydice.available()){if(mydice.basevalue > 3){mydice.animatereroll(6|self.screenposition()|c); rd.push(mydice.basevalue*2 - 6);}else{mydice.animatereroll(mydice.basevalue*2|self.screenposition()|c);}; c+=0.05;};}; givedice(rd);,Clone Device,COUNTDOWN,16,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Blueberry_downgraded,Recover [heal]1 health[;] double|your other dice values,1,attackself(-1); sfx(~_heal~); var rd = []; var c = 0; for(mydice in self.dicepool){if(mydice.available()){if(mydice.basevalue > 3){mydice.animatereroll(6|self.screenposition()|c); rd.push(mydice.basevalue*2 - 6);}else{mydice.animatereroll(mydice.basevalue*2|self.screenposition()|c);}; c+=0.05;};}; givedice(rd);,Clone Device,COUNTDOWN,16,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Strawberry,Recover [heal]3 health[;]|roll a 4,1,attackself(-3); sfx(~_heal~); givedice(4);,Clone Device,COUNTDOWN,8,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Strawberry_upgraded,Recover [heal]5 health[;]|roll a 4,1,attackself(-5); sfx(~_heal~); givedice(4);,Clone Device,COUNTDOWN,8,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Strawberry_downgraded,Recover [heal]1 health[;]|roll a 4,1,attackself(-1); sfx(~_heal~); givedice(4);,Clone Device,COUNTDOWN,8,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Blackcurrant,Recover [heal]2 health[;] double|if you have a 6,1,var hassix = false; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue == 6){hassix = true; break;};}; if(hassix){attackself(-4);}else{attackself(-2);}; sfx(~_heal~);,Clone Device,COUNTDOWN,4,PURPLE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Blackcurrant_upgraded,Recover [heal]2 health[;] double|if you have an even dice,1,var hassix = false; for(mydice in self.dicepool){if(mydice.available() && mydice.basevalue %2 == 0){hassix = true; break;};}; if(hassix){attackself(-4);}else{attackself(-2);}; sfx(~_heal~);,Clone Device,COUNTDOWN,4,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Blackcurrant_downgraded,Recover [heal]2 health,1,attackself(-2); sfx(~_heal~);,Clone Device,COUNTDOWN,4,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Don's Mask,Gain [shield]<d6> shield|(Start of battle: inflict [weaken]2[]),2,inflictself(SHIELD|d); sfx(~_shield~);,Barricade,MAX4,,RED,change_power,change_power,,,0,YES,NO,,,,,,if(turn == 1){inflict(WEAKEN|2); sfx(~_weaken~); e.animate(~flashandshake~);};,,,,,,,
Don's Mask_upgraded,Gain [shield]<d6> shield|(Start of battle: inflict [weaken]4[]),2,inflictself(SHIELD|d); sfx(~_shield~);,Barricade,MAX4,,RED,,,,,0,YES,NO,,,,,,if(turn == 1){inflict(WEAKEN|4); sfx(~_weaken~); e.animate(~flashandshake~);};,,,,,,,
Don's Mask_downgraded,Gain [shield]1 shield|(Start of battle: inflict [weaken]2[]),2,inflictself(SHIELD); sfx(~_shield~);,Barricade,MAX4,,RED,,,,,0,YES,NO,,,,,,if(turn == 1){inflict(WEAKEN|2); sfx(~_weaken~); e.animate(~flashandshake~);};,,,,,,,
Midnight Ritual,Roll 2 sixes|Curse yourself,1,givedice([6|6]); inflictself(CURSE); sfx(~_curse~);,Megacurse,EVEN,,PURPLE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Midnight Ritual_upgraded,Roll 2 sixes|Curse yourself,1,givedice([6|6]); inflictself(CURSE); sfx(~_curse~);,Megacurse,NORMAL,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Midnight Ritual_downgraded,Roll 2 sixes|Curse yourself,1,givedice([6|6]); inflictself(CURSE); sfx(~_curse~);,Megacurse,REQUIRE6,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Regenerative Brakes,[95%]Discharge your limit[;] heal [heal]1|[95%]hp per 2 charge drained ([heal]<var:halflimit>[]),1,var amount = self.limitvalue/2; attackself(-amount); self.limitvalue = 0; sfx(~_cure~); sfx(~_mana~|~~|0.2); self.setvar(~halflimit~|0);,Unlimited Limit,REQUIRE6,,GREEN,change_power,change_power,,,0,YES,NO,,,,,self.setvar(~halflimit~|self.limitvalue/2);,,self.setvar(~halflimit~|self.limitvalue/2);,,,,,,
Regenerative Brakes_upgraded,[95%]Discharge your limit[;] heal [heal]1|[95%]hp per 2 charge drained ([heal]<var:halflimit>[]),1,var amount = self.limitvalue/2; attackself(-amount); self.limitvalue = 0; sfx(~_cure~); sfx(~_mana~|~~|0.2); self.setvar(~halflimit~|0);,Unlimited Limit,MIN4,,GREEN,,,,,0,YES,NO,,,,,self.setvar(~halflimit~|self.limitvalue/2);,,self.setvar(~halflimit~|self.limitvalue/2);,,,,,,
Regenerative Brakes_downgraded,[95%]Discharge your limit[;] heal [heal]1|[95%]hp per 2 charge drained ([heal]<var:halflimit>[]),1,var amount = self.limitvalue/2; attackself(-amount); self.limitvalue = 0; sfx(~_cure~); sfx(~_mana~|~~|0.2); self.setvar(~halflimit~|0);,Unlimited Limit,REQUIRE6|REQUIRE6,,GREEN,,,,,0,YES,NO,,,,,self.setvar(~halflimit~|self.limitvalue/2);,,self.setvar(~halflimit~|self.limitvalue/2);,,,,,,
Bicycle Kick,Deal [sword]<d6> damage|Flip both dice upside down,2,attack(d); sfxdamage(target|d); var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; givedice([7-x|7-y]);,Megaflip,MIN5|MIN5,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; givedice([7-x|7-y]);
Bicycle Kick_upgraded,Deal [sword]<d6> damage|Flip both dice upside down,2,attack(d); sfxdamage(target|d); var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; givedice([7-x|7-y]);,Megaflip,MIN4|MIN4,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; givedice([7-x|7-y]);
Bicycle Kick_downgraded,Deal [sword]<d6> damage|Flip both dice upside down,2,attack(d); sfxdamage(target|d); var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; givedice([7-x|7-y]);,Megaflip,REQUIRE6|REQUIRE6,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; givedice([7-x|7-y]);
Metaflip,If the dice are different[;] roll|each of the other 4 values,2,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x != y){var rd = []; for(j in [1|2|3|4|5|6]){if(j != x && j!= y){rd.push(j);};}; givedice(rd);}else{givedice(for(ad in actualdice) ad.basevalue); self.textparticle(~Dice are equal!~);};,Megaflip,MIN4|MIN4,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Metaflip_upgraded,If the dice are different[;] roll|each of the other 4 values,2,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x != y){var rd = []; for(j in [1|2|3|4|5|6]){if(j != x && j!= y){rd.push(j);};}; givedice(rd);}else{givedice(for(ad in actualdice) ad.basevalue); self.textparticle(~Dice are equal!~);};,Megaflip,MIN3|MIN3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Metaflip_downgraded,If the dice are different[;] roll|each of the other 4 values,2,var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x != y){var rd = []; for(j in [1|2|3|4|5|6]){if(j != x && j!= y){rd.push(j);};}; givedice(rd);}else{givedice(for(ad in actualdice) ad.basevalue); self.textparticle(~Dice are equal!~);};,Megaflip,REQUIRE6|REQUIRE6,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Ancient Lamentation,Deal [sword]<d6> damage.|On 2 odds: inflict [weaken]1|On 2 evens: inflict [ice]1,2,attack(d); sfxdamage(target|d); var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x%2 == y%2){if(x%2 == 0){inflict(ICE); sfx(~_ice~|~~|0.2);}else{inflict(WEAKEN); sfx(~_weaken~|~~|0.2);};};,JOAT Smash,MAX4|MAX4,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Ancient Lamentation_upgraded,Deal [sword]<d6> damage.|On 2 odds: inflict [weaken]1|On 2 evens: inflict [ice]2,2,attack(d); sfxdamage(target|d); var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x%2 == y%2){if(x%2 == 0){inflict(ICE); sfx(~_ice~|~~|0.2);}else{inflict(WEAKEN); sfx(~_weaken~|~~|0.2);};};,JOAT Smash,MAX5|MAX5,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Ancient Lamentation_downgraded,Deal [sword]<d6> damage.|On 2 odds: inflict [weaken]1|On 2 evens: inflict [ice]3,2,attack(d); sfxdamage(target|d); var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x%2 == y%2){if(x%2 == 0){inflict(ICE); sfx(~_ice~|~~|0.2);}else{inflict(WEAKEN); sfx(~_weaken~|~~|0.2);};};,JOAT Smash,MAX3|MAX3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Firesong Blade,Deal [sword]<d6> damage.|On 2 odds: inflict [weaken]1|On 2 evens: inflict [fire]1,2,attack(d); sfxdamage(target|d); var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x%2 == y%2){if(x%2 == 0){inflict(FIRE); sfx(~_fire~|~~|0.2);}else{inflict(WEAKEN); sfx(~_weaken~|~~|0.2);};};,JOAT Smash,MAX4|MAX4,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Firesong Blade_upgraded,Deal [sword]<d6> damage.|On 2 odds: inflict [weaken]1|On 2 evens: inflict [fire]2,2,attack(d); sfxdamage(target|d); var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x%2 == y%2){if(x%2 == 0){inflict(FIRE); sfx(~_fire~|~~|0.2);}else{inflict(WEAKEN); sfx(~_weaken~|~~|0.2);};};,JOAT Smash,MAX5|MAX5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Firesong Blade_downgraded,Deal [sword]<d6> damage.|On 2 odds: inflict [weaken]1|On 2 evens: inflict [fire]3,2,attack(d); sfxdamage(target|d); var x = actualdice[0].basevalue; var y = actualdice[1].basevalue; if(x%2 == y%2){if(x%2 == 0){inflict(FIRE); sfx(~_fire~|~~|0.2);}else{inflict(WEAKEN); sfx(~_weaken~|~~|0.2);};};,JOAT Smash,MAX3|MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Sock Bat,Deal [sword]<d6> damage|(Enemy starts battle with [dodge]1[]),2,attack(d); sfxdamage(target|d);,Plasma Gun,NORMAL|FREE3,,RED,change_power,change_power,,,0,NO,NO,,,,,,if(turn == 1){inflict(DODGE); sfx(~_dodge~); e.animate(~flashandshake~);};,,,,,,,
Sock Bat_upgraded,Deal [sword]<d6> damage|(Enemy starts battle with [dodge]1[]),2,attack(d); sfxdamage(target|d);,Plasma Gun,NORMAL|FREE4,,RED,,,,,0,NO,NO,,,,,,if(turn == 1){inflict(DODGE); sfx(~_dodge~); e.animate(~flashandshake~);};,,,,,,,
Sock Bat_downgraded,Deal [sword]<d6> damage|(Enemy starts battle with [dodge]1[]),2,attack(d); sfxdamage(target|d);,Plasma Gun,NORMAL,,RED,,,,,0,NO,NO,,,,,,if(turn == 1){inflict(DODGE); sfx(~_dodge~); e.animate(~flashandshake~);};,,,,,,,
Bamboozle,The next used enemy item|instead has a random effect,2,sfx(~_curse~); inflict(~mf_bamboozle~);,Megacurse,REQUIRE4,,PURPLE,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,function checkslots(val){ var sl = e.getslots(); if(sl.length > 1){ return false; }; var s = sl[0]; if(s == ~EVEN~ && val %2 == 0){ return true; }; if(s == ~ODD~ && val %2 == 1){ return true; }; if(s == ~REQUIRE~+val){ return true; }; for(x in 1...val+1){ if(s == ~MIN~+x){ return true; }; }; for(x in val...7){ if(s == ~MAX~+x){ return true; }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1] && val >= r[0] && val <= r[1]){ return true; } }; return false; }; var oldx = e.x; var oldy = e.y; var eqlist = getparticularequipment([~small~]); var flag = false; while(!flag){ e.create(rand(eqlist)); flag = checkslots(d) && e.usesleft == 0; }; e.x = oldx; e.y = oldy; e.scriptendturn+=~e.create(\~Suspicious Box\~);~;,,e.preventdefault=true; e.maintainfury=true;,
Bamboozle_upgraded,The next used enemy item|instead has a random effect,2,sfx(~_curse~);,Megacurse,REQUIRE4,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,function checkslots(val){ var sl = e.getslots(); if(sl.length > 1){ return false; }; var s = sl[0]; if(s == ~EVEN~ && val %2 == 0){ return true; }; if(s == ~ODD~ && val %2 == 1){ return true; }; if(s == ~REQUIRE~+val){ return true; }; for(x in 1...val+1){ if(s == ~MIN~+x){ return true; }; }; for(x in val...7){ if(s == ~MAX~+x){ return true; }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1] && val >= r[0] && val <= r[1]){ return true; } }; return false; }; var oldx = e.x; var oldy = e.y; var eqlist = getparticularequipment([~large~]); var flag = false; while(!flag){ e.create(rand(eqlist)[;]true); flag = checkslots(d) && e.usesleft == 0; }; e.x = oldx; e.y = oldy; e.scriptendturn+=~e.create(\~Suspicious Box\~[;]true);~;,,e.preventdefault=true; e.maintainfury=true;,
Bamboozle_downgraded,The next used enemy item|instead has a random effect,2,sfx(~_curse~);,Megacurse,REQUIRE4,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,function checkslots(val){ var sl = e.getslots(); if(sl.length > 1){ return false; }; var s = sl[0]; if(s == ~EVEN~ && val %2 == 0){ return true; }; if(s == ~ODD~ && val %2 == 1){ return true; }; if(s == ~REQUIRE~+val){ return true; }; for(x in 1...val+1){ if(s == ~MIN~+x){ return true; }; }; for(x in val...7){ if(s == ~MAX~+x){ return true; }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1] && val >= r[0] && val <= r[1]){ return true; } }; return false; }; var oldx = e.x; var oldy = e.y; var eqlist = getparticularequipment([~small~]); var flag = false; while(!flag){ e.create(rand(eqlist)); flag = checkslots(d) && e.usesleft == 0; }; e.x = oldx; e.y = oldy; e.scriptendturn+=~e.create(\~Suspicious Box\~);~;,,e.preventdefault=true; e.maintainfury=true;,
Earthquake Bracelets,Inflict [weaken]1 weaken|Do [sword]<d6> dmg[;] take [sword]<d6> dmg|,2,inflict(WEAKEN); attack(d); boomerang(d); sfxdamage(target|d); sfx(~_weaken~|~~|0.2);,Burrower,MAX3,,ORANGE,change_power,change_power,,,-1,NO,NO,,,,,,,,,,,,,
Earthquake Bracelets_upgraded,Inflict [weaken]1 weaken|Do [sword]<d6> dmg[;] take [sword]<d6> dmg|,2,inflict(WEAKEN); attack(d); boomerang(d); sfxdamage(target|d); sfx(~_weaken~|~~|0.2);,Burrower,MAX4,,ORANGE,,,,,-1,NO,NO,,,,,,,,,,,,,
Earthquake Bracelets_downgraded,Inflict [weaken]1 weaken|Do [sword]1 dmg[;] take [sword]<d6> dmg|,2,inflict(WEAKEN); attack(1); boomerang(d); sfxdamage(target|d); sfx(~_weaken~|~~|0.2);,Burrower,MAX3,,ORANGE,,,,,-1,NO,NO,,,,,,,,,,,,,
Iron Brew,Recover [heal]<d6> health[;] flip|the dice[;] gain [shield]<flipd6> shield|[gray](once per battle),2,attackself(-d); sfx(~_cure~); inflictself(SHIELD|7-d); sfx(~_shield~|~~|0.6); givedice(7-d);,Revitalize,NORMAL,,GREEN,change_power,change_power,,,0,YES,YES,,,,,,,,,,,,,
Iron Brew_upgraded,Gain [shield]<d6> shield[;] flip the|dice[;] recover [heal]<flipd6> health|[gray](once per battle),2,attackself(d-7); sfx(~_cure~); inflictself(SHIELD|d); sfx(~_shield~|~~|0.6); givedice(7-d);,Revitalize,NORMAL,,GREEN,,,,,0,YES,YES,,,,,,,,,,,,,
Iron Brew_downgraded,Recover [heal]<d6> health|[gray](once per battle),2,attackself(-d); sfx(~_cure~);,Revitalize,NORMAL,,GREEN,,,,,0,YES,YES,,,,,,,,,,,,,
Sideways Swipe,Deal damage equal to the|sum of all sides on this dice|that aren't <slotdoubles>[;] or opposite it,2,var poss = [1|2|3|4|5|6]; poss.remove(d); poss.remove(7-d); var total = 0; for(x in poss){total+=x;}; attack(total); sfxdamage(target|total); sfx(~_magic~); /* total = 21 - d - (7-d) = 21 - d - 7 + d = 14. always! */,Megaflip,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,NO,NO,finale|excludefromrandomlists,,,,,,,,,,,,
Sideways Swipe_upgraded,Deal damage equal to the|sum of all sides on this dice|that aren't <d6>[;] or opposite it,2,var poss = [1|2|3|4|5|6]; poss.remove(d); poss.remove(7-d); var total = 0; for(x in poss){total+=x;}; attack(total); sfxdamage(target|total); sfx(~_magic~); /* total = 21 - d - (7-d) = 21 - d - 7 + d = 14. always! */,Megaflip,NORMAL,,ORANGE,,,,,0,NO,NO,finale|excludefromrandomlists,,,,,,,,,,,,
Sideways Swipe_downgraded,No effect!|this is a finale so if you|weaken this[;] uh[;] ???,2,sfx(~_silence~);,Megaflip,DOUBLES|DOUBLES,,ORANGE,,,,,0,NO,NO,finale|excludefromrandomlists,,,,,,,,,,,,
Bristlebane,1-3: Gain [thorns]<d6> thorns|4-6: Deal [sword]<double> damage|[grey](once per battle),2,if(d >= 1 && d <= 3){inflictself(THORNS|d); sfx(~_thorns~);}; if(d>=4 && d <=6){attack(d*2); sfxdamage(target|d*2);};,Pinprick,NORMAL,,GREEN,change_power,change_power,,,0,NO,YES,,,,,,,,,,,,,
Bristlebane_upgraded,1-3: Gain [thorns]<d6> thorns|Deal [sword]<double> damage|[grey](once per battle),2,if(d >= 1 && d <= 3){inflictself(THORNS|d); sfx(~_thorns~);}; attack(d*2); sfxdamage(target|d*2);,Pinprick,NORMAL,,GREEN,,,,,0,NO,YES,,,,,,,,,,,,,
Bristlebane_downgraded,1-3: Gain [thorns]<d6> thorns|4-6: Deal [sword]<double> damage|[grey](once per battle),2,if(d >= 1 && d <= 3){inflictself(THORNS|d); sfx(~_thorns~);}; if(d>=4 && d <=6){attack(d*2); sfxdamage(target|d*2);};,Pinprick,ODD,,GREEN,,,,,0,NO,YES,,,,,,,,,,,,,
Inflammable Armor,Reduce dmg taken by [reduce]1|(Receive [fire]2 burn each turn),1,inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,NORMAL,,ORANGE,change_power,change_power,reduce,,0,YES,NO,,,,,inflictself(FIRE|2);,e.animate(~flashandshake~); sfx(~_fire~);,,,,,,,
Inflammable Armor_upgraded,Reduce dmg taken by [reduce]2|(Receive [fire]2 burn each turn),1,inflictself(REDUCE|2); sfx(~_shield~);,Pillow Fort,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,inflictself(FIRE|2);,e.animate(~flashandshake~); sfx(~_fire~);,,,,,,,
Inflammable Armor_downgraded,Reduce dmg taken by [reduce]1|(Receive [fire]2 burn each turn),1,inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,ODD,,ORANGE,,,,,0,YES,NO,,,,,inflictself(FIRE|2);,e.animate(~flashandshake~); sfx(~_fire~);,,,,,,,
Inflammable Armor?,Block [reduce]1 status effect|(Receive [fire]2 burn each turn),1,inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,NORMAL,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,inflictself(FIRE|2);,e.animate(~flashandshake~); sfx(~_fire~);,,,,,,,
Inflammable Armor?_upgraded,Block [reduce]2 status effects|(Receive [fire]2 burn each turn),1,inflictself(REDUCE|2); sfx(~_shield~);,Pillow Fort,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,inflictself(FIRE|2);,e.animate(~flashandshake~); sfx(~_fire~);,,,,,,,
Inflammable Armor?_downgraded,Block [reduce]1 status effect|(Receive [fire]2 burn each turn),1,inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,ODD,,ORANGE,,,,,0,YES,NO,,,,,inflictself(FIRE|2);,e.animate(~flashandshake~); sfx(~_fire~);,,,,,,,
Unthawable Armor,Reduce dmg taken by [reduce]1|(Receive [ice]2 freeze each turn),1,inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,NORMAL,,ORANGE,change_power,change_power,reduce,,0,YES,NO,,,,,inflictself(ICE|2);,e.animate(~flashandshake~); sfx(~_ice~);,,,,,,,
Unthawable Armor_upgraded,Reduce dmg taken by [reduce]2|(Receive [ice]2 freeze each turn),1,inflictself(REDUCE|2); sfx(~_shield~);,Pillow Fort,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,inflictself(ICE|2);,e.animate(~flashandshake~); sfx(~_ice~);,,,,,,,
Unthawable Armor_downgraded,Reduce dmg taken by [reduce]1|(Receive [ice]2 freeze each turn),1,inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,ODD,,ORANGE,,,,,0,YES,NO,,,,,inflictself(ICE|2);,e.animate(~flashandshake~); sfx(~_ice~);,,,,,,,
Unthawable Armor?,Block [reduce]1 status effect|(Receive [ice]2 freeze each turn),1,inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,NORMAL,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,inflictself(ICE|2);,e.animate(~flashandshake~); sfx(~_ice~);,,,,,,,
Unthawable Armor?_upgraded,Block [reduce]2 status effects|(Receive [ice]2 freeze each turn),1,inflictself(REDUCE|2); sfx(~_shield~);,Pillow Fort,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,inflictself(ICE|2);,e.animate(~flashandshake~); sfx(~_ice~);,,,,,,,
Unthawable Armor?_downgraded,Block [reduce]1 status effect|(Receive [ice]2 freeze each turn),1,inflictself(REDUCE); sfx(~_shield~);,Pillow Fort,ODD,,ORANGE,,,,,0,YES,NO,,,,,inflictself(ICE|2);,e.animate(~flashandshake~); sfx(~_ice~);,,,,,,,
Kintsugi,Combine dice|Recover [heal]2 health,1,givedice(d); attackself(-2); sfx(~_heal~);,Magic Spanner,ODD|ODD,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Kintsugi_upgraded,Combine dice|Recover [heal]2 health,1,givedice(d); attackself(-2); sfx(~_heal~);,Magic Spanner,MAX5|MAX5,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Kintsugi_downgraded,Combine dice,1,givedice(d);,Magic Spanner,ODD|ODD,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Time Bubble,The next time you would|receive damage[;] delay it|for [jinx]<d6> turns,1,inflictself(~mf_timebubble~|d); sfx(~_dodge~);,Quick Thinking,MAX3,,PURPLE,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Time Bubble_upgraded,The next time you would|receive damage[;] delay it|for [jinx]<d6> turns,1,inflictself(~mf_timebubble~|d); sfx(~_dodge~);,Quick Thinking,MAX4,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Time Bubble_downgraded,The next time you would|receive damage[;] delay it|for [jinx]<d6> turns,1,inflictself(~mf_timebubble~|d); sfx(~_dodge~);,Quick Thinking,REQUIRE2,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Transmutation Barrier,All attacks you do this turn|instead deal [sword]<d6> damage,1,inflictself(~mf_damagemodify~|d); sfx(~_magic~);,Quick Thinking,MAX3,,PINK,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Transmutation Barrier_upgraded,All attacks you do this turn|instead deal [sword]<d6> damage,1,inflictself(~mf_damagemodify~|d); sfx(~_magic~);,Quick Thinking,MAX4,,PINK,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Transmutation Barrier_downgraded,All attacks you do this turn|instead deal [sword]<d6> damage,1,inflictself(~mf_damagemodify~|d); sfx(~_magic~);,Quick Thinking,REQUIRE1,,PINK,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Shock Block,Inflict [shock]1 shock. Whenever|the enemy unshocks an|item[;] gain [shield]2 shield,2,inflict(SHOCK); sfx(~_shock~); inflict(~mf_shockshield~|2);,Magic Spanner,MAX4,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Shock Block_upgraded,Inflict [shock]1 shock. Whenever|the enemy unshocks an|item[;] gain [shield]<d6> shield,2,inflict(SHOCK); sfx(~_shock~); inflict(~mf_shockshield~|d);,Magic Spanner,MAX4,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Shock Block_downgraded,Inflict [shock]1 shock. Whenever|the enemy unshocks an|item[;] gain [shield]2 shield,2,inflict(SHOCK); sfx(~_shock~); inflict(~mf_shockshield~|2);,Magic Spanner,MAX2,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Worse Curses,[90%]Add [curse] curse[;] curses also deal|[90%][sword]3 to everyone when triggered,1,inflict(CURSE); sfx(~_curse~); inflict(~mf_curseworse~|3);,Magic Spanner,COUNTDOWN,10,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Worse Curses_upgraded,[90%]Add [curse] curse[;] curses also deal|[90%][sword]5 to everyone when triggered,1,inflict(CURSE); sfx(~_curse~); inflict(~mf_curseworse~|5);,Magic Spanner,COUNTDOWN,10,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Worse Curses_downgraded,Inflict [curse]1 curse,1,inflict(CURSE); sfx(~_curse~);,Magic Spanner,COUNTDOWN,10,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Giant Trident,Deal [sword]7 damage[;] inflict|[shock] shock and [ice] freeze,2,attack(7); sfxdamage(target|d); inflict(SHOCK); sfx(~_shock~); inflict(ICE); sfx(~_ice~); trace(actualdice); trace(e.dicehistory); trace(e.assigneddice); trace(e.slots); trace(e.tags);,Plasma Gun,,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,combination:777|excludefromrandomlists,,,,,,,,,,,,
Giant Trident_upgraded,Deal [sword]10 damage[;] inflict|[shock] shock and [ice] freeze,2,attack(10); sfxdamage(target|d); inflict(SHOCK); sfx(~_shock~); inflict(ICE); sfx(~_ice~); trace(actualdice); trace(e.dicehistory); trace(e.assigneddice); trace(e.slots); trace(e.tags);,Plasma Gun,,,BRIGHTCYAN,,,,,0,NO,NO,combination:777|excludefromrandomlists,,,,,,,,,,,,
Giant Trident_downgraded,Deal [sword]7 damage,2,attack(7); sfxdamage(target|d); trace(actualdice); trace(e.dicehistory); trace(e.assigneddice); trace(e.slots); trace(e.tags);,Plasma Gun,,,BRIGHTCYAN,,,,,0,NO,NO,combination:777|excludefromrandomlists,,,,,,,,,,,,
Divin't Rod,Reduce health to [heart]1,2,target.hp = 1; sfx(~_drain~);,Scream,,,RED,change_power,change_power,,,0,NO,NO,combination:6666|excludefromrandomlists,,,,,,,,,,,,
Divin't Rod_upgraded,Reduce health to [heart]1,2,target.hp = 1; sfx(~_drain~);,Scream,,,RED,,,,,0,NO,NO,combination:7777|excludefromrandomlists,,,,,,,,,,,,
Divin't Rod_downgraded,Reduce health by half,2,target.hp = target.hp / 2; sfx(~_drain~);,Scream,,,RED,,,,,0,NO,NO,combination:6666|excludefromrandomlists,,,,,,,,,,,,
Mechanical Core,Halve the enemy's health,2,target.hp = target.hp / 2; sfx(~_drain~);,Scream,,,PURPLE,change_power,change_power,,,0,NO,NO,combination:123456|excludefromrandomlists,,,,,,,,,,,,
Mechanical Core_upgraded,Reduce the enemy's health|by two thirds,2,target.hp -= ((target.hp/3)*2); sfx(~_drain~);,Scream,,,PURPLE,,,,,0,NO,NO,combination:123456|excludefromrandomlists,,,,,,,,,,,,
Mechanical Core_downgraded,Reduce the enemy's health|by one third,2,target.hp -= (target.hp/3); sfx(~_drain~);,Scream,,,PURPLE,,,,,0,NO,NO,combination:123456|excludefromrandomlists,,,,,,,,,,,,
Scrap Nightmare,Deal [sword]999 damage|(Always offered as scrap),1,attack(999); sfxdamage(target|999);,Scream,,,GREY,change_power,change_power,,,0,NO,NO,appearsforparts|combination:777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777|excludefromrandomlists,,,,,,,,,,,,
Scrap Nightmare_upgraded,Deal [sword]999 damage|(Always offered as scrap),1,attack(999); sfxdamage(target|999);,Scream,,,GREY,,,,,0,NO,NO,appearsforparts|combination:77777777777777777777777777777777777777777777777777777777777777777777777777|excludefromrandomlists,,,,,,,,,,,,
Scrap Nightmare_downgraded,Deal [sword]998 damage|(Always offered as scrap),1,attack(998); sfxdamage(target|998);,Scream,,,GREY,,,,,0,NO,NO,appearsforparts|combination:777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777,,,,,,,,,,,,
Overcomplicated Sword,Deal [sword]<d6> damage. Consult|manual for further details|[85%](morefluff/manual/manual.pdf),2,attack(d); sfxdamage(target|d);,Plasma Gun,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Overcomplicated Sword_upgraded,Deal [sword]<d6> dmg. Consult|manual for further details|[85%](morefluff/manual/manual.pdf),2,attack(d); sfxdamage(target|d);,Plasma Gun,NORMAL|FREE1,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Overcomplicated Sword_downgraded,Deal [sword]<d6> damage. Consult|manual for further details|[85%](morefluff/manual/manual.pdf),2,attack(d); sfxdamage(target|d);,Plasma Gun,MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Unity@mf,Transform into Precision|(for this battle),2,giveequipment(~Precision@mf~| true| false| e); sfx(~_thinghappens~);,Regenerate,,,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists|combination:7777|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Unity@mf_upgraded,Transform into Precision+|(for this battle),2,giveequipment(~Precision@mf+~| true| false| e); sfx(~_thinghappens~);,Regenerate,,,YELLOW,,,,,0,YES,NO,excludefromrandomlists|combination:777|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Unity@mf_downgraded,No effect,2,sfx(~_dodge~);,Regenerate,,,YELLOW,,,,,0,YES,NO,excludefromrandomlists|combination:7777|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Precision@mf,Transform into Perfection|(for this battle),2,giveequipment(~Perfection@mf~| true| false| e); sfx(~_anvil~);,Shuriken,,,PINK,change_power,change_power,,,0,YES,NO,excludefromrandomlists|combination:1234|cannotreuse,,,giveequipment(~Unity@mf~| true| false| e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Precision@mf_upgraded,Transform into Perfection+|(for this battle),2,giveequipment(~Perfection@mf+~| true| false| e); sfx(~_anvil~);,Shuriken,,,PINK,,,,,0,YES,NO,excludefromrandomlists|combination:123|cannotreuse,,,giveequipment(~Unity@mf+~| true| false| e);,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Precision@mf_downgraded,No effect,2,sfx(~_dodge~);,Shuriken,,,PINK,,,,,0,YES,NO,excludefromrandomlists|combination:1234|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Perfection@mf,Deal [sword]20 damage,2,attack(20); sfxdamage(target|20);,Mutagen,COUNTDOWN,4,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists|cannotreuse,,,giveequipment(~Unity@mf~| true| false| e);,,,,,,,,,
Perfection@mf_upgraded,Deal [sword]25 damage,2,attack(25); sfxdamage(target|25);,Mutagen,COUNTDOWN,4,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotreuse,,,giveequipment(~Unity@mf+~| true| false| e);,,,,,,,,,
Perfection@mf_downgraded,Deal [sword]10 damage,2,attack(10); sfxdamage(target|10);,Mutagen,COUNTDOWN,4,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotreuse,,,,,,,,,,,,
Fizzbuzz Staff,Deal [sword]<d6> damage.|[90%]<d6> is a multiple of 3: add [shield]<d6>|[90%]<d6> is a multiple of 5: heal [heal]<d6>|[grey](once per battle),2,attack(d); sfxdamage(target|d); var del = 0.2; if(d%3 == 0){inflictself(SHIELD|d); sfx(~_shield~|~~|del); del+=0.2;}; if(d%5 == 0){attackself(-d); sfx(~_heal~|~~|del);};,Plasma Gun,NORMAL|NORMAL,,PURPLE,change_power,change_power,,,0,NO,YES,,,,,,,,,,,,,
Fizzbuzz Staff_upgraded,Deal [sword]<d6>+3 damage.|[90%]<d6> is a multiple of 3: add [shield]<d6>|[90%]<d6> is a multiple of 5: heal [heal]<d6>|[grey](once per battle),2,attack(d+3); sfxdamage(target|d+3); var del = 0.2; if(d%3 == 0){inflictself(SHIELD|d); sfx(~_shield~|~~|del); del+=0.2;}; if(d%5 == 0){attackself(-d); sfx(~_heal~|~~|del);};,Plasma Gun,NORMAL|NORMAL,,PURPLE,,,,,0,NO,YES,,,,,,,,,,,,,
Fizzbuzz Staff_downgraded,Deal [sword]<d6> damage.|[90%]<d6> is a multiple of 3: add [shield]<d6>|[90%]<d6> is a multiple of 5: heal [heal]<d6>|[grey](once per battle),2,attack(d); sfxdamage(target|d); var del = 0.2; if(d%3 == 0){inflictself(SHIELD|d); sfx(~_shield~|~~|del); del+=0.2;}; if(d%5 == 0){attackself(-d); sfx(~_heal~|~~|del);};,Plasma Gun,MAX4|MAX4,,PURPLE,,,,,0,NO,YES,,,,,,,,,,,,,
Vampire Bat,Deal [sword]<d6> damage|(Enemy drains [heart]1 health|from you each turn),2,attack(d); sfxdamage(target|d);,Plasma Gun,NORMAL|FREE3,,RED,change_power,change_power,,,0,NO,NO,,,,,,e.animate(~flashandshake~); var s = new elements.Skill(~mf_blankskill~); s.script=~drain(1); sfx(\~_drain\~);~; s.execute(target|self); ,,,,,,,
Vampire Bat_upgraded,Deal [sword]<d6> damage|(Enemy drains [heart]1 health|from you each turn),2,attack(d); sfxdamage(target|d);,Plasma Gun,NORMAL|FREE4,,RED,,,,,0,NO,NO,,,,,,e.animate(~flashandshake~); var s = new elements.Skill(~mf_blankskill~); s.script=~drain(1); sfx(\~_drain\~);~; s.execute(target|self); ,,,,,,,
Vampire Bat_downgraded,Deal [sword]<d6> damage|(Enemy drains [heart]1 health|from you each turn),2,attack(d); sfxdamage(target|d);,Plasma Gun,MAX4|FREE3,,RED,,,,,0,NO,NO,,,,,,e.animate(~flashandshake~); var s = new elements.Skill(~mf_blankskill~); s.script=~drain(1); sfx(\~_drain\~);~; s.execute(target|self); ,,,,,,,
Scrapfire,Everyone loses [heart]5 health|(Always offered as scrap),1,pierceattack(5); pierceattackself(5); sfx(~_drain~);,Plasma Gun,REQUIRE1,,GREY,change_power,change_power,,,0,NO,NO,appearsforparts,,,,,,,,,,,,pierceattackself(5); sfx(~_drain~);
Scrapfire_upgraded,Everyone loses [heart]10 health|(Always offered as scrap),1,pierceattack(10); pierceattackself(10); sfx(~_drain~);,Plasma Gun,REQUIRE1,,GREY,,,,,0,NO,NO,appearsforparts,,,,,,,,,,,,pierceattackself(10); sfx(~_drain~);
Scrapfire_downgraded,Lose [heart]5 health|(Always offered as scrap),1,pierceattackself(5); sfx(~_drain~);,Plasma Gun,REQUIRE1,,GREY,,,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Matosade,Deal [sword]20 damage|Inflict [blind]10 blind,2,attack(20); sfxdamage(target|20); inflict(BLIND|10); sfx(~_blind~);,Plasma Gun,COUNTDOWN,22,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Matosade_upgraded,Deal [sword]25 damage|Inflict [blind]15 blind,2,attack(25); sfxdamage(target|25); inflict(BLIND|15); sfx(~_blind~);,Plasma Gun,COUNTDOWN,22,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Matosade_downgraded,Deal [sword]10 damage|Inflict [blind]2 blind,2,attack(10); sfxdamage(target|10); sfx(~_blind~); inflict(BLIND|2);,Plasma Gun,COUNTDOWN,22,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Jammy Dodger,Gain [dodge]1 dodge[;]|and feel a bit luckier,2,inflictself(DODGE); sfx(~_dodge~); inflictself(~luck~); sfx(~_survive~|~~|0.2);,Padlock,REQUIRE4|REQUIRE4,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Jammy Dodger_upgraded,Gain [dodge]1 dodge[;]|and feel a bit luckier,2,inflictself(DODGE); sfx(~_dodge~); inflictself(~luck~); sfx(~_survive~|~~|0.2);,Padlock,EVEN|EVEN,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Jammy Dodger_downgraded,Gain [dodge]1 dodge[;]|or feel a bit luckier,2,if(chance(50)){inflictself(DODGE); sfx(~_dodge~);}else{inflictself(~luck~); sfx(~_survive~);};,Padlock,REQUIRE4|REQUIRE4,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Mirror Enchantment,Deal [sword]<d6> damage[;] return|the dice flipped next turn,2,attack(d); sfxdamage(target|d); inflictself(~stash~+(7-d)); sfx(~magic_gaindice~); inflictself(~lightstatus~);,Padlock,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(~stash~+(7-d)); sfx(~magic_gaindice~); inflictself(~lightstatus~);
Mirror Enchantment_upgraded,Deal [sword]<d6> damage[;] return 2|of the flipped dice next turn,2,attack(d); sfxdamage(target|d); inflictself(~stash~+(7-d)|2); sfx(~magic_gaindice~); inflictself(~lightstatus~|2);,Padlock,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~stash~+(7-d)|2); sfx(~magic_gaindice~); inflictself(~lightstatus~);
Mirror Enchantment_downgraded,Deal [sword]<d6> damage[;] return|the dice flipped next turn,2,attack(d); sfxdamage(target|d); inflictself(~stash~+(7-d)); sfx(~magic_gaindice~); inflictself(~lightstatus~);,Padlock,MIN4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,inflictself(~stash~+(7-d)); sfx(~magic_gaindice~); inflictself(~lightstatus~);
Cookery Pistol,Deal [sword]4 damage|Recover [heal]1 health|,2,attack(4); sfxdamage(target|4); attackself(-1); sfx(~_heal~);,Regenerate,COUNTDOWN,6,RED,change_power,change_power,,,3,NO,NO,,,,,,,,,,,,,
Cookery Pistol_upgraded,Deal [sword]4 damage|Recover [heal]1 health|,2,attack(4); sfxdamage(target|4); attackself(-1); sfx(~_heal~);,Regenerate,COUNTDOWN,6,RED,,,,,6,NO,NO,,,,,,,,,,,,,
Cookery Pistol_downgraded,Deal [sword]4 damage|Recover [heal]1 health|,2,attack(4); sfxdamage(target|4); attackself(-1); sfx(~_heal~);,Regenerate,COUNTDOWN,6,RED,,,,,2,NO,NO,,,,,,,,,,,,,
Dragon's Skull,Deal [sword]<d6> damage|Return the dice,2,attack(d); sfxdamage(target|d); givedice([for(ad in actualdice) ad.basevalue]);,Plasma Gun,REQUIRE6|REQUIRE6|REQUIRE6|REQUIRE6,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice([for(ad in actualdice) ad.basevalue]);
Dragon's Skull_upgraded,Deal [sword]<d6> damage|Return the dice,2,attack(d); sfxdamage(target|d); givedice([for(ad in actualdice) ad.basevalue]);,Plasma Gun,MIN5|MIN5|MIN5|MIN5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice([for(ad in actualdice) ad.basevalue]);
Dragon's Skull_downgraded,Deal [sword]6 damage|Return the dice,2,attack(6); sfxdamage(target|6); givedice([for(ad in actualdice) ad.basevalue]);,Plasma Gun,REQUIRE6|REQUIRE6|REQUIRE6|REQUIRE6,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice([for(ad in actualdice) ad.basevalue]);
Burglar Alarm,If enemy rolls a 6[;]|that dice is locked,1,inflict(~counter_6~); sfx(~_lock~);,Regenerate,COUNTDOWN,8,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Burglar Alarm_upgraded,If enemy rolls a 2 or 6[;]|that dice is locked,1,inflict(~counter_2~); inflict(~counter_6~); sfx(~_lock~); sfx(~_lock~|~~|0.2);,Regenerate,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Burglar Alarm_downgraded,If enemy rolls a 3[;]|that dice is locked,1,inflict(~counter_3~); sfx(~_lock~);,Regenerate,COUNTDOWN,8,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Walking On The Moon,Gain [dodge]1 dodge|Recover [heal]4 health,2,inflictself(DODGE); sfx(~_dodge~); attackself(-4); sfx(~_cure~|~~|0.3);,Quick Thinking,COUNTDOWN,22,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Walking On The Moon_upgraded,Gain [dodge]1 dodge|Recover [heal]7 health,2,inflictself(DODGE); sfx(~_dodge~); attackself(-7); sfx(~_cure~|~~|0.3);,Quick Thinking,COUNTDOWN,22,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Walking On The Moon_downgraded,Gain [dodge]1 dodge|Recover [heal]1 health,2,inflictself(DODGE); sfx(~_dodge~); attackself(-1); sfx(~_cure~|~~|0.3);,Quick Thinking,COUNTDOWN,22,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Manual Broadsword,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target|d);,Plasma Gun,NORMAL|REQUIRE2,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Manual Broadsword_upgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target|d);,Plasma Gun,NORMAL|MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Manual Broadsword_downgraded,Deal [sword]<d6> damage,1,attack(d); sfxdamage(target|d);,Plasma Gun,MAX3|REQUIRE2,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Triangle Of Doom,If these could be the sides|of a triangle[;] do [sword] equal|to its area (rounded up),1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; var c = actualdice[2].basevalue; var min = a; if(b > min){min = b;}; if(c > min){min = c;}; var max = a;  if(b > max){max = b;}; if(c > max){max = c;}; var mid = a; if(b > mid){mid = b;}; if(c > mid){mid = c;}; if(min + mid < max){self.textparticle(~Not a triangle!~);}else if(min + mid == max){attack(0); sfxdamage(target|0); sfx(~_silence~);}else{var p = a+b+c; p = p/2; var areasq = p*(p-a)*(p-b)*(p-c); var area = 1; while(area*area < areasq){area+=1;}; attack(area); sfxdamage(target|area); sfx(~_magic~|~~|0.2);};,Plasma Gun,MAX5|MAX5|MAX5,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Triangle Of Doom_upgraded,If these could be the sides|of a triangle[;] do [sword] equal|to its area (rounded up),1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; var c = actualdice[2].basevalue; var min = a; if(b > min){min = b;}; if(c > min){min = c;}; var max = a;  if(b > max){max = b;}; if(c > max){max = c;}; var mid = a; if(b > mid){mid = b;}; if(c > mid){mid = c;}; if(min + mid < max){self.textparticle(~Not a triangle!~);}else if(min + mid == max){attack(0); sfxdamage(target|0); sfx(~_silence~);}else{var p = a+b+c; p = p/2; var areasq = p*(p-a)*(p-b)*(p-c); var area = 1; while(area*area < areasq){area+=1;}; attack(area); sfxdamage(target|area); sfx(~_magic~|~~|0.2);};,Plasma Gun,NORMAL|NORMAL|NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Triangle Of Doom_downgraded,If these could be the sides|of a triangle[;] do [sword] equal|to its area (rounded up),1,var a = actualdice[0].basevalue; var b = actualdice[1].basevalue; var c = actualdice[2].basevalue; var min = a; if(b > min){min = b;}; if(c > min){min = c;}; var max = a;  if(b > max){max = b;}; if(c > max){max = c;}; var mid = a; if(b > mid){mid = b;}; if(c > mid){mid = c;}; if(min + mid < max){self.textparticle(~Not a triangle!~);}else if(min + mid == max){attack(0); sfxdamage(target|0); sfx(~_silence~);}else{var p = a+b+c; p = p/2; var areasq = p*(p-a)*(p-b)*(p-c); var area = 1; while(area*area < areasq){area+=1;}; attack(area); sfxdamage(target|area); sfx(~_magic~|~~|0.2);};,Plasma Gun,MAX3|MAX3|MAX3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Omniscience,Get an unnecessary number|of dice this turn,2,inflictself(~infinite~); sfx(~_fury~);,Time Stop,COMBINATION,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,combination:7777777666,,,,,,,,,,,,
Omniscience_upgraded,Get an unnecessary number|of dice this fight,2,inflictself(~mf_omniscience~); sfx(~_fury~);,Time Stop,COMBINATION,,BRIGHTCYAN,,,,,0,YES,NO,combination:7777777666,,,,,,,,,,,,
Omniscience_downgraded,Roll 8 extra dice,2,var da = []; for(x in 0...8){da.push(rand([1|2|3|4|5|6]));}; givedice(da); sfx(~_fury~);,Time Stop,COMBINATION,,BRIGHTCYAN,,,,,0,YES,NO,combination:7777777666,,,,,,,,,,,,
Confounding Staff,Deal [sword]8 damage|(Your dice are... different),2,attack(8); sfxdamage(target|8);,Replicate,COUNTDOWN,7,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,inflictself(~mf_dicejumble~);,,,,,,,,
Confounding Staff_upgraded,Deal [sword]10 damage|(Your dice are... different),2,attack(10); sfxdamage(target|10);,Replicate,COUNTDOWN,7,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,inflictself(~mf_dicejumble~);,,,,,,,,
Confounding Staff_downgraded,Deal [sword]4 damage|(Your dice are... different),2,attack(4); sfxdamage(target|4);,Replicate,COUNTDOWN,7,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,inflictself(~mf_dicejumble~);,,,,,,,,
Tack Shooter,Add [thorns]<d6> thorns. If you already|had thorns[;] do [sword]<triple> instead,1,if(getstatusself(THORNS) > 0){attack(d*3); sfxdamage(target|d*3);}else{inflictself(THORNS|d); sfx(~_thorns~);};,Pinprick,MAX2,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,if(getstatusself(THORNS) > 0){e.castdirection = 1;}else{e.castdirection = 0;};,,,
Tack Shooter_upgraded,Add [thorns]<d6> thorns. If you already|had thorns[;] do [sword]<quadruple> instead,1,if(getstatusself(THORNS) > 0){attack(d*4); sfxdamage(target|d*4);}else{inflictself(THORNS|d); sfx(~_thorns~);};,Pinprick,MAX2,,GREEN,,,,,0,NO,NO,,,,,,,,,,if(getstatusself(THORNS) > 0){e.castdirection = 1;}else{e.castdirection = 0;};,,,
Tack Shooter_downgraded,Add [thorns]1 thorns. If you already|had thorns[;] do [sword]<d6> instead,1,if(getstatusself(THORNS) > 0){attack(d); sfxdamage(target|d);}else{inflictself(THORNS|1); sfx(~_thorns~);};,Pinprick,MAX2,,GREEN,,,,,0,NO,NO,,,,,,,,,,if(getstatusself(THORNS) > 0){e.castdirection = 1;}else{e.castdirection = 0;};,,,
Malevolence Engine,Inflict a random status (prioritizes|statuses they don't already have),1,/*expand this!!! currently only handles base statuses*/ var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); var rc = randstatus; for(r in rc){if(target.getstatus(r) > 0){randstatus.remove(r);};}; var rs = rand(randstatus); inflict(rs); sfx(~_~ + randstatus.toLowerCase());,Stardust,EVEN,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Malevolence Engine_upgraded,Inflict a random status (prioritizes|statuses they don't already have),1,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); var rc = randstatus; for(r in rc){if(target.getstatus(r) > 0){randstatus.remove(r);};}; var rs = rand(randstatus); inflict(rs); sfx(~_~ + randstatus.toLowerCase());,Stardust,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Malevolence Engine_downgraded,Inflict a random status (prioritizes|statuses they don't already have),1,var randstatus = rand([BLIND[;]CURSE[;]LOCK[;]FIRE[;]ICE[;]WEAKEN[;]SHOCK[;]POISON]); var rc = randstatus; for(r in rc){if(target.getstatus(r) > 0){randstatus.remove(r);};}; var rs = rand(randstatus); inflict(rs); sfx(~_~ + randstatus.toLowerCase());,Stardust,REQUIRE4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
